language: ts
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1deywpt0.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1deywpt0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO\
    \ wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc4q4i3bm.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpc4q4i3bm.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978071
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const char =\
    \ message[i];\n        if (vowels.includes(char.toLowerCase())) {\n          \
    \  const index = vowels.indexOf(char.toLowerCase());\n            encodedMessage\
    \ += vowels[(index + 2) % vowels.length];\n        } else if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\n\
    console.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I\
    \ am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student'));\
    \ // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\n\
    console.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I\
    \ am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student'));\
    \ // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\n\
    console.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I\
    \ am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student'));\
    \ // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\n\
    console.log(encode('I am a student')); // 'I cn a\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1pggp393.ts(12,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978071
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n  \
    \  let letter = message[i];\n    if (vowels.includes(letter)) {\n      let index\
    \ = alphabet.indexOf(letter);\n      encodedMessage += alphabet[index + 2];\n\
    \    } else if (letter === letter.toUpperCase()) {\n      encodedMessage += letter.toLowerCase();\n\
    \    } else {\n      encodedMessage += letter.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO'));\
    \ // 'jgnnq'\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello\
    \ World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!?')); // 'Jgnnq\
    \ Yqtnf!?'\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1dftsrd_.ts(13,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode('Hello')); // hELLO\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpllx7vlf3.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpllx7vlf3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encoded: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char: string = message[i];\n    if (char === char.toUpperCase())\
    \ {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n\
    \    }\n    if (char === \"a\") {\n      char = \"c\";\n    } else if (char ===\
    \ \"e\") {\n      char = \"g\";\n    } else if (char === \"i\") {\n      char\
    \ = \"k\";\n    } else if (char === \"o\") {\n      char = \"q\";\n    } else\
    \ if (char === \"u\") {\n      char = \"y\";\n    }\n    encoded += char;\n  }\n\
    \  return encoded;\n}\n\nconsole.log(encode(\"Hello World\")); // \"hELLO wORLD\"\
    \nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"\
    Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\"));\
    \ // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\
    \nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"\
    Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\"));\
    \ // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\
    \nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"\
    Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\"));\
    \ // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\
    \nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"\
    Hello World!\")); // \"hELLO wORLD!\"\nconsole.\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6n3j6244.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1659978071
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  const vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n  for (let i = 0; i < message.length; i++) {\n    let char =\
    \ message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      let index\
    \ = vowels.indexOf(char.toLowerCase());\n      if (index === 4) {\n        index\
    \ = -1;\n      }\n      char = vowels[index + 2];\n    }\n    if (char === char.toUpperCase())\
    \ {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n\
    \    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello World\")); // \"HllE Wrdl\"\nconsole.log(encode(\"Hello World!\")); // \"\
    HllE Wrdl!\"\nconsole.log(encode(\"Hello World! How are you?\")); // \"HllE Wrdl!\
    \ Hw arE yu?\"\nconsole.log(encode(\"Hello World! How are you? I am fine.\"));\
    \ // \"HllE Wrdl! Hw arE yu? I am fnI.\"\nconsole.log(encode(\"Hello World! How\
    \ are you? I am fine. What about you?\")); // \"HllE Wrdl! Hw arE yu? I am fnI.\
    \ Wht bt yu?\"\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2prealu8.ts(12,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978072
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    let vowels: string = 'aeiou';\n\
    \    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number\
    \ = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            result += currentChar;\n\
    \        } else if (currentChar === currentChar.toUpperCase()) {\n           \
    \ result += alphabet[currentCharIndex].toUpperCase();\n        } else if (vowels.indexOf(currentChar)\
    \ !== -1) {\n            result += alphabet[currentCharIndex + 2];\n        }\
    \ else {\n            result += alphabet[currentCharIndex];\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(encode('Hello World')); // Jgnnq Yqtnf\n\
    console.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\n\
    console.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\n\
    console.log(encode('The quick brown fox jumps over the lazy dog')); // Qeb nrfzh\
    \ yoltk clu grjmp lsbo qeb ixwv ald\nconsole.log(encode('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'));\
    \ // CDEFGHIJKLMNOPQRSTUVWXYZABCdefghijklmnopqrstuvwxyzab\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgm4fb5gm.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgm4fb5gm.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Hgllq Wqrld

    cbcdgfghkjklmnqpqrstwvwxyz

    ABCDEFGHIJKLMNOPQRSTUVWXYZ

    Thg qwkck brqwn fqx jwmps qvgr thg lczy dqg

    cbcdgfghkjklmnqpqrstwvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ

    ABCDEFGHIJKLMNOPQRSTUVWXYZcbcdgfghkjklmnqpqrstwvwxyz

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello\")); // hELLO\nconsole.log(encode(\"Hi There\")); // hI tHERE\nconsole.log(encode(\"\
    Hello World\")); // hELLO wORLD\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph7b6v87x.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph7b6v87x.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hI tHERE

    hELLO wORLD

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a') {\n    \
    \        result = result.slice(0, -1) + 'c';\n        } else if (char === 'e')\
    \ {\n            result = result.slice(0, -1) + 'g';\n        } else if (char\
    \ === 'i') {\n            result = result.slice(0, -1) + 'k';\n        } else\
    \ if (char === 'o') {\n            result = result.slice(0, -1) + 'q';\n     \
    \   } else if (char === 'u') {\n            result = result.slice(0, -1) + 's';\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World!'));\
    \ // Hlll Ccckkq!\nconsole.log(encode('Hello World!') === 'Hlll Ccckkq!');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // cdefghijklmnopqrstuvwxyzb\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'cdefghijklmnopqrstuvwxyzb');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // CDEFGHIJKLMNOPQRSTUVWXYZB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\
    \ === 'CDEFGHIJKLMNOPQRSTUVWXYZB');\nconsole.log(encode('The quick brown fox jumps\
    \ over the lazy dog.')); // Qeb nrfzh yoltk clu grjmp lsbo qeb ixwv ald.\nconsole.log(encode('The\
    \ quick brown fox jumps over the lazy dog.') === '\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy68z18v1.ts(38,73): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpy68z18v1.ts(39,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpy68z18v1.ts(39,9): error TS1005: '','' expected.

    '
  timestamp: 1659978071
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char.match(/[a-z]/i)) {\n      if\
    \ (char.match(/[a-z]/)) {\n        char = char.toUpperCase();\n      } else {\n\
    \        char = char.toLowerCase();\n      }\n      if (char.match(/[aeiou]/i))\
    \ {\n        char = char.charCodeAt(0) + 2;\n        char = String.fromCharCode(char);\n\
    \      }\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n\
    }\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"\
    ));\nconsole.log(encode(\"Hello World! I am a string.\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp550mnxua.ts(18,9): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmp550mnxua.ts(19,36): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    if (message[i] === message[i].toUpperCase()) {\n      encodedMessage\
    \ += message[i].toLowerCase();\n    } else {\n      encodedMessage += message[i].toUpperCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\
    \ // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppvlzvkxh.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppvlzvkxh.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encoded: string = \"\";\n    let vowels: string = \"aeiou\"\
    ;\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i:\
    \ number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        if (currentChar === currentChar.toUpperCase()) {\n            encoded\
    \ += currentChar.toLowerCase();\n        } else {\n            encoded += currentChar.toUpperCase();\n\
    \        }\n        if (vowels.includes(currentChar)) {\n            let index:\
    \ number = alphabet.indexOf(currentChar);\n            encoded += alphabet[index\
    \ + 2];\n        }\n    }\n    return encoded;\n}\nconsole.log(encode(\"Hello\
    \ World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello\
    \ World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcsrh9lok.ts(18,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello\
    \ World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpni5ns10v.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpni5ns10v.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! hOW ARE YOU?

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('hello'));\nconsole.log(encode('HELLO'));\nconsole.log(encode('Hello'));\n\
    console.log(encode('hElLo'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\n\
    console.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\n\
    console.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\n\
    console.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\n\
    console.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\n\
    console.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\n\
    console.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8zags4fr.ts(55,9): error TS1005: '','' expected.

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encoded = \"\";\n  for (let i = 0; i < message.length; i++)\
    \ {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n    \
    \  encoded += char.toLowerCase();\n    } else {\n      encoded += char.toUpperCase();\n\
    \    }\n  }\n  return encoded;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"\
    Hello World! How are you?\"));\nconsole.log(encode(\"Hello World! How are you?\
    \ I am fine, thank you!\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp51mo2nqr.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp51mo2nqr.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! hOW ARE YOU?

    hELLO wORLD! hOW ARE YOU? i AM FINE, THANK YOU!

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO\
    \ wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc4q4i3bm.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpc4q4i3bm.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvynniypp.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvynniypp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n\
    \    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n\
    \      const newIndex = (index + 2) % vowels.length;\n      encodedMessage +=\
    \ vowels[newIndex].toUpperCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // HLLL\n\
    console.log(encode('HELLO')); // HLLL\nconsole.log(encode('hello world')); //\
    \ HLLL WRRLD\nconsole.log(encode('HELLO WORLD')); // HLLL WRRLD\nconsole.log(encode('hello\
    \ world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO WORLD!')); // HLLL WRRLD!\n\
    console.log(encode('hello world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO\
    \ WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello world!')); // HLLL WRRLD!\n\
    console.log(encode('HELLO WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello\
    \ world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO WORLD!')); // HLLL WRRLD!\n\
    console.log(encode('hello world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO\
    \ WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello world!')); // HLLL WRRLD!\n\
    console.log(encode('HELLO WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello\
    \ world!')); // HLLL WRRL\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps0yse8fz.ts(12,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978071
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const letter\
    \ = message[i];\n        if (vowels.includes(letter)) {\n            const index\
    \ = vowels.indexOf(letter);\n            const newIndex = (index + 2) % vowels.length;\n\
    \            encodedMessage += vowels[newIndex];\n        } else {\n         \
    \   encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw9gzelx5.ts(12,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978071
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('hello')); // hEllO\nconsole.log(encode('HELLO')); // hEllO\n\
    console.log(encode('hello world')); // hEllO wOrld\nconsole.log(encode('HELLO\
    \ WORLD')); // hEllO wOrld\nconsole.log(encode('hello, world!')); // hEllO, wOrld!\n\
    console.log(encode('HELLO, WORLD!')); // hEllO, wOrld!\nconsole.log(encode('hello,\
    \ world!')); // hEllO, wOrld!\nconsole.log(encode('HELLO, WORLD!')); // hEllO,\
    \ wOrld!\nconsole.log(encode('hello, world!')); // hEllO, wOrld!\nconsole.log(encode('HELLO,\
    \ WORLD!')); // hEllO, wOrld!\nconsole.log(encode('hello, world!')); // hEllO,\
    \ wOrld!\nconsole.log(encode('HELLO, WORLD!')); // hEllO, wOrld!\nconsole.log(encode('hello,\
    \ world!')); // hEllO, wOrld!\nconsole.log(encode('HELLO, WORLD!')); // hEllO,\
    \ wOrld!\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpodt1qoog.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpodt1qoog.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = \"\";\n  let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (let i: number = 0; i < message.length; i++) {\n    let index: number\
    \ = alphabet.indexOf(message[i].toLowerCase());\n    if (index === -1) {\n   \
    \   result += message[i];\n    } else if (index < 23) {\n      if (message[i]\
    \ === message[i].toUpperCase()) {\n        result += alphabet[index + 2].toUpperCase();\n\
    \      } else {\n        result += alphabet[index + 2];\n      }\n    } else {\n\
    \      if (message[i] === message[i].toUpperCase()) {\n        result += alphabet[index\
    \ - 24].toUpperCase();\n      } else {\n        result += alphabet[index - 24];\n\
    \      }\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello World\"\
    )); // \"Jgnnq Yqtnf\"\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); //\
    \ \"cdefghijklmnopqrstuvwxyzab\"\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )); // \"CDEFGHIJKLMNOPQRSTUVWXYZAB\"\nconsole.log(encode(\"The Quick Brown Fox\"\
    )); // \"Wkh Txxbq Nyrk Fqu\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6u0loimh.js:25\n                result += alphabet[index - 24].toUpperCase();\n\
    \                                               ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'toUpperCase')\n    at encode (/tmp/tmp6u0loimh.js:25:48)\n\
    \    at Object.<anonymous> (/tmp/tmp6u0loimh.js:36:13)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: 'Jgnnq Yqtnf

    cdefghijklmnopqrstuvwxyundefinedab

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n\
    \        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage\
    \ += currentLetter.toLowerCase();\n        } else {\n            encodedMessage\
    \ += currentLetter.toUpperCase();\n        }\n        if (currentLetter === 'a'\
    \ || currentLetter === 'e' || currentLetter === 'i' || currentLetter === 'o' ||\
    \ currentLetter === 'u') {\n            let index = alphabet.indexOf(currentLetter);\n\
    \            encodedMessage += alphabet[index + 2];\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // h\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp51nbfiht.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp51nbfiht.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!

    '
  timestamp: 1659978072
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char.match(/[a-z]/i)) {\n      if\
    \ (char === char.toUpperCase()) {\n        char = char.toLowerCase();\n      }\
    \ else {\n        char = char.toUpperCase();\n      }\n      if (char === \"a\"\
    ) {\n        char = \"c\";\n      } else if (char === \"e\") {\n        char =\
    \ \"g\";\n      } else if (char === \"i\") {\n        char = \"k\";\n      } else\
    \ if (char === \"o\") {\n        char = \"q\";\n      } else if (char === \"u\"\
    ) {\n        char = \"y\";\n      }\n    }\n    encodedMessage += char;\n  }\n\
    \  return encodedMessage;\n}\n\nconsole.log(encode(\"hello\")); // \"HLLL\"\n\
    console.log(encode(\"HELLO\")); // \"hlll\"\nconsole.log(encode(\"HELLO WORLD\"\
    )); // \"hlll wlrld\"\nconsole.log(encode(\"hello world\")); // \"HLLL WLRLD\"\
    \nconsole.log(encode(\"hello world!\")); // \"HLLL WLRLD!\"\nconsole.log(encode(\"\
    hello world! 123\")); // \"HLLL WLRLD! 123\"\nconsole.log(encode(\"hello world!\
    \ 123\")); // \"HLLL WLRLD! 123\"\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\"\
    )); // \"CDFGJKLMNPQRSTVWXYB\"\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )); // \"cdfgjklmnpqrstvwxyb\"\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\
    \ ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // \"CDFGJKLMNPQRSTVWXYB CDFGJKLMNPQ\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp6zdq_6uq.js:52:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6zdq_6uq.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HELLO

    hgllq

    hgllq wqrld

    HELLO WORLD

    HELLO WORLD!

    HELLO WORLD! 123

    HELLO WORLD! 123

    ABCDEFGHIJKLMNOPQRSTUVWXYZ

    cbcdgfghkjklmnqpqrstyvwxyz

    ABCDEFGHIJKLMNOPQRSTUVWXYZ cbcdgfghkjklmnqpqrstyvwxyz

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter =\
    \ message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            currentLetter = currentLetter.toLowerCase();\n            encodedMessage\
    \ += currentLetter;\n        } else if (currentLetter === currentLetter.toLowerCase())\
    \ {\n            currentLetter = currentLetter.toUpperCase();\n            encodedMessage\
    \ += currentLetter;\n        }\n        if (currentLetter === \"a\") {\n     \
    \       encodedMessage = encodedMessage.replace(\"a\", \"c\");\n        } else\
    \ if (currentLetter === \"e\") {\n            encodedMessage = encodedMessage.replace(\"\
    e\", \"g\");\n        } else if (currentLetter === \"i\") {\n            encodedMessage\
    \ = encodedMessage.replace(\"i\", \"k\");\n        } else if (currentLetter ===\
    \ \"o\") {\n            encodedMessage = encodedMessage.replace(\"o\", \"q\");\n\
    \        } else if (currentLetter === \"u\") {\n            encodedMessage = encodedMessage.replace(\"\
    u\", \"w\");\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"\
    Hello World! I am a newbie.\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy4aflvc1.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy4aflvc1.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! k AM A NEWBIE.

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  const vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n  for (let i = 0; i < message.length; i++) {\n    let currentLetter\
    \ = message[i];\n    if (currentLetter === currentLetter.toUpperCase()) {\n  \
    \    encodedMessage += currentLetter.toLowerCase();\n    } else {\n      encodedMessage\
    \ += currentLetter.toUpperCase();\n    }\n    if (vowels.includes(currentLetter))\
    \ {\n      encodedMessage += vowels[(vowels.indexOf(currentLetter) + 2) % 5];\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"\
    )); // hEllO wOrld\nconsole.log(encode(\"Hello World!\")); // hEllO wOrld!\nconsole.log(encode(\"\
    Hello World! How are you?\")); // hEllO wOrld! hOw arE yOu?\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpekkzl924.ts(17,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a') {\n    \
    \        result = result.slice(0, -1) + 'c';\n        } else if (char === 'e')\
    \ {\n            result = result.slice(0, -1) + 'g';\n        } else if (char\
    \ === 'i') {\n            result = result.slice(0, -1) + 'k';\n        } else\
    \ if (char === 'o') {\n            result = result.slice(0, -1) + 'q';\n     \
    \   } else if (char === 'u') {\n            result = result.slice(0, -1) + 's';\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(encode('hello')); // 'HELLO'\n\
    console.log(encode('HELLO')); // 'hello'\nconsole.log(encode('hello world'));\
    \ // 'HELLO WORLD'\nconsole.log(encode('HELLO WORLD')); // 'hello world'\nconsole.log(encode('hello\
    \ world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO WORLD!')); // 'hello\
    \ world!'\nconsole.log(encode('hello world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO\
    \ WORLD!')); // 'hello world!'\nconsole.log(encode('hello world!')); // 'HELLO\
    \ WORLD!'\nconsole.log(encode('HELLO WORLD!')); // 'hello world!'\nconsole.log(encode('hello\
    \ world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO WORLD!')); // 'hello\
    \ world!'\nconsole.log(encode('hello world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO\
    \ WORLD!')); // 'hello world!'\nconsole\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6fap72dv.js:53:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6fap72dv.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HgLLq

    hello

    HgLLq WqRLD

    hello world

    HgLLq WqRLD!

    hello world!

    HgLLq WqRLD!

    hello world!

    HgLLq WqRLD!

    hello world!

    HgLLq WqRLD!

    hello world!

    HgLLq WqRLD!

    hello world!

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        const charCode = char.charCodeAt(0);\n\
    \        if (charCode >= 65 && charCode <= 90) {\n            encodedMessage +=\
    \ String.fromCharCode(charCode + 32);\n        } else if (charCode >= 97 && charCode\
    \ <= 122) {\n            encodedMessage += String.fromCharCode(charCode - 32);\n\
    \        } else {\n            encodedMessage += char;\n        }\n    }\n   \
    \ return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!@#$%^&*()_+'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1v2z1yyr.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1v2z1yyr.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD!

    hELLO wORLD!@#$%^&*()_+

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let currentChar = message[i];\n    if (currentChar === currentChar.toUpperCase())\
    \ {\n      encodedMessage += currentChar.toLowerCase();\n    } else {\n      encodedMessage\
    \ += currentChar.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp87vczegc.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp87vczegc.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let currentLetter = message[i];\n        if (currentLetter ===\
    \ currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentLetter.toUpperCase();\n\
    \        }\n        if (currentLetter === 'a') {\n            encodedMessage +=\
    \ 'c';\n        } else if (currentLetter === 'e') {\n            encodedMessage\
    \ += 'g';\n        } else if (currentLetter === 'i') {\n            encodedMessage\
    \ += 'k';\n        } else if (currentLetter === 'o') {\n            encodedMessage\
    \ += 'q';\n        } else if (currentLetter === 'u') {\n            encodedMessage\
    \ += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\n\
    console.log(encode('goodbye'));\nconsole.log(encode('apple'));\nconsole.log(encode('banana'));\n\
    console.log(encode('orange'));\nconsole.log(encode('pizza'));\nconsole.log(encode('taco'));\n\
    console.log(encode('burrito'));\nconsole.log(encode('chicken'));\nconsole.log(encode('beef'));\n\
    console.log(encode('pork'));\nconsole.log(encode('fish'));\nconsole.log(encode('shrimp'));\n\
    console.log(encode('crab'));\nconsole.log(encode('lobster'));\nconsole.log(encode('steak'));\n\
    console.log(encode('hamburger'));\nconsole.log(encode('hotdog'));\nconsole.log(encode('fries'));\n\
    console.log(encode('onion rings'));\nconsole.log(encode('ice cream'));\nconsole.log(encode('cake'));\n\
    console.log(encode('pie'));\nconsole.log(encode('cookie'));\nconsole.log(encode('brownie'));\n\
    console.log(encode('donut'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprhhpw06i.js:64:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprhhpw06i.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HEgLLOq

    GOqOqDBYEg

    AcPPLEg

    BAcNAcNAc

    OqRAcNGEg

    PIkZZAc

    TAcCOq

    BUwRRIkTOq

    CHIkCKEgN

    BEgEgF

    POqRK

    FIkSH

    SHRIkMP

    CRAcB

    LOqBSTEgR

    STEgAcK

    HAcMBUwRGEgR

    HOqTDOqG

    FRIkEgS

    OqNIkOqN RIkNGS

    IkCEg CREgAcM

    CAcKEg

    PIkEg

    COqOqKIkEg

    BROqWNIkEg

    DOqNUwT

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    const vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter\
    \ = message[i];\n        if (vowels.includes(currentLetter)) {\n            let\
    \ index = vowels.indexOf(currentLetter);\n            let newIndex = index + 2;\n\
    \            if (newIndex > 4) {\n                newIndex = newIndex - 5;\n \
    \           }\n            encodedMessage += vowels[newIndex];\n        } else\
    \ {\n            encodedMessage += currentLetter;\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"\
    hello world\"));\nconsole.log(encode(\"hello world!\"));\nconsole.log(encode(\"\
    hello world! how are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9eik4u2x.ts(12,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage\
    \ += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpr8r0ahcs.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr8r0ahcs.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        switch (char)\
    \ {\n            case 'a':\n                encodedMessage += 'c';\n         \
    \       break;\n            case 'e':\n                encodedMessage += 'g';\n\
    \                break;\n            case 'i':\n                encodedMessage\
    \ += 'k';\n                break;\n            case 'o':\n                encodedMessage\
    \ += 'q';\n                break;\n            case 'u':\n                encodedMessage\
    \ += 'y';\n                break;\n            default:\n                encodedMessage\
    \ += char;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\
    \ // hlllC\nconsole.log(encode('HELLO')); // hlllC\nconsole.log(encode('Hello'));\
    \ // hlllC\nconsole.log(encode('HELLO WORLD')); // hlllC wlrldC\nconsole.log(encode('hello\
    \ world')); // hlllC wlrldC\nconsole.log(encode('hello world!')); // hlllC wlrldC!\n\
    console.log(encode('HELLO WORLD!')); // hlllC wlrldC!\nconsole.log(encode('Hello\
    \ World!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\n\
    console.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(encode('Hello\
    \ World!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\n\
    console.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(encode('Hello\
    \ World!')); // hlllC wlrldC!\nconsole.log(en\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiyyswlsx.ts(54,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpiyyswlsx.ts(54,9): error TS1005: '','' expected.

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5evmjamh.js:59:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5evmjamh.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i\
    \ < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      let\
    \ index = (alphabet.indexOf(message[i]) + 2) % 26;\n      encodedMessage += alphabet[index];\n\
    \    } else if (message[i] === message[i].toUpperCase()) {\n      encodedMessage\
    \ += message[i].toLowerCase();\n    } else {\n      encodedMessage += message[i].toUpperCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\n\
    console.log(encode('HELLO')); // 'jgnnq'\nconsole.log(encode('Hello World'));\
    \ // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello\
    \ World!?')); // 'Jgnnq Yqtnf!?'\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpokvzpvzc.ts(12,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for (let i: number = 0; i < message.length; i++) {\n        let index: number\
    \ = alphabet.indexOf(message[i].toLowerCase());\n        if (index === -1) {\n\
    \            result += message[i];\n        } else {\n            if (index <\
    \ 23) {\n                result += alphabet[index + 2];\n            } else if\
    \ (index === 23) {\n                result += alphabet[1];\n            } else\
    \ if (index === 24) {\n                result += alphabet[0];\n            }\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(encode('hello')); // jgnnq\n\
    console.log(encode('HELLO')); // JGNNQ\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('Hello, World!')); // Jgnnq,\
    \ Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello,\
    \ World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq,\
    \ Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello,\
    \ World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq,\
    \ Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello,\
    \ World!')); // Jgnnq, Yqtnf!\nconsole\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vguv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyjws9kjh.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyjws9kjh.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vguv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'jgnnq

    jgnnq

    cdefghijklmnopqrstuvwxyba

    cdefghijklmnopqrstuvwxyba

    jgnnq, yqtnf!

    jgnnq, yqtnf!

    jgnnq, yqtnf!

    jgnnq, yqtnf!

    jgnnq, yqtnf!

    jgnnq, yqtnf!

    jgnnq, yqtnf!

    jgnnq, yqtnf!

    jgnnq, yqtnf!

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n  \
    \  const currentLetter = message[i];\n    if (vowels.includes(currentLetter))\
    \ {\n      const index = alphabet.indexOf(currentLetter);\n      const newLetter\
    \ = alphabet[index + 2];\n      encodedMessage += newLetter;\n    } else if (currentLetter\
    \ === currentLetter.toUpperCase()) {\n      encodedMessage += currentLetter.toLowerCase();\n\
    \    } else {\n      encodedMessage += currentLetter.toUpperCase();\n    }\n \
    \ }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\n\
    console.log(encode('HELLO')); // 'jgnnq'\nconsole.log(encode('Hello World'));\
    \ // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello\
    \ World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq\
    \ Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello\
    \ World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq\
    \ Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello\
    \ World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq\
    \ Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello\
    \ World!')); // 'Jgnnq Yqtn\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr1cfhsdt.ts(13,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph1kvm4aa.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph1kvm4aa.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // hELLO\nconsole.log(encode(\"\
    Hello World\")); // hELLO wORLD\nconsole.log(encode(\"Hello World!\")); // hELLO\
    \ wORLD!\nconsole.log(encode(\"Hello World! How are you?\")); // hELLO wORLD!\
    \ hOW ARE YOU?\nconsole.log(encode(\"Hello World! How are you? I am fine.\"));\
    \ // hELLO wORLD! hOW ARE YOU? i AM fINE.\nconsole.log(encode(\"Hello World! How\
    \ are you? I am fine. What about you?\")); // hELLO wORLD! hOW ARE YOU? i AM fINE.\
    \ wHAT ABOUT YOU?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbkh6xphl.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbkh6xphl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! hOW ARE YOU?

    hELLO wORLD! hOW ARE YOU? i AM FINE.

    hELLO wORLD! hOW ARE YOU? i AM FINE. wHAT ABOUT YOU?

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('My name is John'));\n\
    console.log(encode('I like to code'));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa7egm7fg.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa7egm7fg.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    mY NAcMEg IkS jOqHN

    i LIkKEg TOq COqDEg

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpry33p6p5.js:58:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpry33p6p5.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n\
    \    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n    if (vowels.includes(char))\
    \ {\n      const index = vowels.indexOf(char);\n      const nextIndex = index\
    \ + 2;\n      if (nextIndex >= vowels.length) {\n        encodedMessage += vowels[nextIndex\
    \ - vowels.length];\n      } else {\n        encodedMessage += vowels[nextIndex];\n\
    \      }\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello'));\
    \ // hEllO\nconsole.log(encode('HELLO')); // hEllO\nconsole.log(encode('hello\
    \ world')); // hEllO wOrld\nconsole.log(encode('HELLO WORLD')); // hEllO wOrld\n\
    console.log(encode('hello world!')); // hEllO wOrld!\nconsole.log(encode('HELLO\
    \ WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello world!')); // hEllO wOrld!\n\
    console.log(encode('HELLO WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello\
    \ world!')); // hEllO wOrld!\nconsole.log(encode('HELLO WORLD!')); // hEllO wOrld!\n\
    console.log(encode('hello world!')); // hEllO wOrld!\nconsole.log(encode('HELLO\
    \ WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello world!')); // hEllO wOrld!\n\
    console.log(encode('HELLO WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello\
    \ world!')); // hEllO wOr\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9w8tfu4z.ts(17,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = 'aeiou';\n  const alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i < message.length; i++)\
    \ {\n    const char = message[i];\n    if (vowels.includes(char)) {\n      const\
    \ index = alphabet.indexOf(char);\n      encodedMessage += alphabet[index + 2];\n\
    \    } else if (alphabet.includes(char)) {\n      const index = alphabet.indexOf(char);\n\
    \      encodedMessage += alphabet[index + 2];\n    } else {\n      encodedMessage\
    \ += char;\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5oyh01at.ts(13,16): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    ../../../../../tmp/tmp5oyh01at.ts(16,25): error TS2339: Property ''includes''
    does not exist on type ''"abcdefghijklmnopqrstuvwxyz"''.

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (isVowel(char))\
    \ {\n            encodedMessage = encodedMessage.slice(0, -1);\n            encodedMessage\
    \ += getVowel(char);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuzgoa48t.ts(16,13): error TS2304: Cannot find name
    ''isVowel''.

    ../../../../../tmp/tmpuzgoa48t.ts(18,31): error TS2304: Cannot find name ''getVowel''.

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const char = message[i];\n    const charCode = char.charCodeAt(0);\n\
    \    if (charCode >= 65 && charCode <= 90) {\n      encodedMessage += String.fromCharCode(charCode\
    \ + 32);\n    } else if (charCode >= 97 && charCode <= 122) {\n      encodedMessage\
    \ += String.fromCharCode(charCode - 32);\n    } else {\n      encodedMessage +=\
    \ char;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!?')); // hELLO wORLD!?\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmbbg5oct.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmbbg5oct.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD!

    hELLO wORLD!?

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv9mimnd2.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv9mimnd2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char\
    \ = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n      \
    \  } else if (char === 'i') {\n            char = 'k';\n        } else if (char\
    \ === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n  \
    \          char = 'y';\n        }\n        result += char;\n    }\n    return\
    \ result;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hi\
    \ There')); // hI thERE\nconsole.log(encode('How are you?')); // hOW arE yOU?\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjkdy4gy4.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjkdy4gy4.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hI tHERE

    hOW ARE YOU?

    '
  timestamp: 1659978076
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph1kvm4aa.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph1kvm4aa.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    const\
    \ letter = message[i];\n    const isUpper = letter === letter.toUpperCase();\n\
    \    const isVowel = vowels.includes(letter.toLowerCase());\n    const index =\
    \ alphabet.indexOf(letter.toLowerCase());\n    if (isVowel) {\n      const newIndex\
    \ = (index + 2) % alphabet.length;\n      const newLetter = alphabet[newIndex];\n\
    \      encoded += isUpper ? newLetter.toUpperCase() : newLetter;\n    } else {\n\
    \      encoded += isUpper ? letter.toLowerCase() : letter.toUpperCase();\n   \
    \ }\n  }\n  return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw2xaenzp.ts(14,28): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659978076
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a' || char ===\
    \ 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result =\
    \ result.slice(0, result.length - 1) + 'c';\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(encode('hello')); // hcllc\nconsole.log(encode('HELLO')); //\
    \ hcllc\nconsole.log(encode('HELLO WORLD')); // hcllc wcrdlc\nconsole.log(encode('hello\
    \ world')); // hcllc wcrdlc\nconsole.log(encode('hello world!')); // hcllc wcrdlc!\n\
    console.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello\
    \ world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123'));\
    \ // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc!\
    \ 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello\
    \ world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123'));\
    \ // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc!\
    \ 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello\
    \ world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpese9r2_r.ts(38,37): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpese9r2_r.ts(39,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpese9r2_r.ts(39,9): error TS1005: '','' expected.

    '
  timestamp: 1659978076
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const currentChar = message[i];\n    if (currentChar === currentChar.toUpperCase())\
    \ {\n      encodedMessage += currentChar.toLowerCase();\n    } else {\n      encodedMessage\
    \ += currentChar.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxy_oby11.ts(55,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpxy_oby11.ts(55,9): error TS1005: '','' expected.

    '
  timestamp: 1659978076
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const char = message[i];\n    const isUpper = char === char.toUpperCase();\n\
    \    const isLower = char === char.toLowerCase();\n    if (isUpper) {\n      result\
    \ += char.toLowerCase();\n    } else if (isLower) {\n      result += char.toUpperCase();\n\
    \    } else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmqu7qh7k.ts(43,26): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpmqu7qh7k.ts(44,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpmqu7qh7k.ts(44,9): error TS1005: '','' expected.

    '
  timestamp: 1659978076
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    const vowels = \"aeiou\";\n    let result = \"\";\n    for (let\
    \ i = 0; i < message.length; i++) {\n        const currentLetter = message[i];\n\
    \        if (vowels.includes(currentLetter)) {\n            const index = vowels.indexOf(currentLetter);\n\
    \            const newIndex = (index + 2) % vowels.length;\n            result\
    \ += vowels[newIndex];\n        } else {\n            result += currentLetter;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"hello\")); //\
    \ jgnnq\nconsole.log(encode(\"apples\")); // dsspht\nconsole.log(encode(\"bananas\"\
    )); // dccobqt\nconsole.log(encode(\"cheese\")); // gjjifi\nconsole.log(encode(\"\
    hello world\")); // jgnnq yqtnf\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp964zhhte.ts(12,20): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659978076
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (isVowel(char)) {\n   \
    \         encodedMessage += getNextVowel(char);\n        } else if (isUpperCase(char))\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsf216o9z.ts(11,13): error TS2304: Cannot find name
    ''isVowel''.

    ../../../../../tmp/tmpsf216o9z.ts(12,31): error TS2304: Cannot find name ''getNextVowel''.

    ../../../../../tmp/tmpsf216o9z.ts(13,20): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\n\
    console.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8_khk5p2.ts(55,21): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp8_khk5p2.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp8_khk5p2.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage\
    \ += char;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\
    \ World\")); // hELLO wORLD\nconsole.log(encode(\"Hello World!\")); // hELLO wORLD!\n\
    console.log(encode(\"Hello World!\")); // hELLO wORLD!\nconsole.log(encode(\"\
    Hello World! I am a computer\")); // hELLO wORLD! k cN cQMPUTER\nconsole.log(encode(\"\
    Hello World! I am a computer!\")); // hELLO wORLD! k cN cQMPUTER!\nconsole.log(encode(\"\
    Hello World! I am a computer!!\")); // hELLO wORLD! k cN cQMPUTER!!\nconsole.log(encode(\"\
    Hello World! I am a computer!!!\")); // hELLO wORLD! k cN cQMPUTER!!!\nconsole.log(encode(\"\
    Hello World! I am a computer!!!!\")); // hELLO wORLD! k cN cQMPUTER!!!!\nconsole.log(encode(\"\
    Hello World! I am a computer!!!!!\")); // hELLO wORLD! k cN cQMPUTER!!!!!\nconsole.log(encode(\"\
    Hello World! I am a computer!!!!!!!\")); // hELLO wORLD! k cN cQMPUTER!!!!!!!\n\
    console.log(encode(\"Hello World! I am a computer!!!!!!!!!\"\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9r3s4l4t.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9r3s4l4t.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1659978077
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage\
    \ = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n\
    \    let index = alphabet.indexOf(char.toLowerCase());\n    if (index === -1)\
    \ {\n      encodedMessage += char;\n    } else {\n      let newIndex = index +\
    \ 2;\n      if (newIndex > 25) {\n        newIndex -= 26;\n      }\n      let\
    \ newChar = alphabet[newIndex];\n      if (char === char.toUpperCase()) {\n  \
    \      newChar = newChar.toUpperCase();\n      }\n      encodedMessage += newChar;\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\
    \ // Jgnnq Yqtnf\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\n\
    console.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\n\
    console.log(encode('The quick brown fox jumps over the lazy dog.')); // Vjg swkem\
    \ dtqyp hqz lworu pwkl zkdw vjg xyhq.\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplwafdkt2.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplwafdkt2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Jgnnq Yqtnf

    cdefghijklmnopqrstuvwxyzab

    CDEFGHIJKLMNOPQRSTUVWXYZAB

    Vjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encoded = '';\n\
    \  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n  \
    \  if (char === char.toUpperCase()) {\n      encoded += char.toLowerCase();\n\
    \    } else {\n      encoded += char.toUpperCase();\n    }\n    if (alphabet.indexOf(char)\
    \ !== -1) {\n      let index = alphabet.indexOf(char);\n      if (index + 2 >\
    \ alphabet.length - 1) {\n        encoded += alphabet[index + 2 - alphabet.length];\n\
    \      } else {\n        encoded += alphabet[index + 2];\n      }\n    }\n  }\n\
    \  return encoded;\n}\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!') === 'hELLO wORLD!');\nconsole.log(encode('abc') === 'cde');\nconsole.log(encode('xyz')\
    \ === 'zab');\nconsole.log(encode('abcxyz') === 'cdezab');\nconsole.log(encode('abcxyzABCXYZ')\
    \ === 'cdezabcdezab');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ')\
    \ === 'cdezabCDEZAB');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ')\
    \ === 'cdezabCDEZAB');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ')\
    \ === 'cdezabCDEZAB');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ')\
    \ === 'cdezabCDEZAB');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ')\
    \ === 'cdezabCDEZAB');\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpplnsea9e.ts(44,9): error TS1003: Identifier expected.

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\n\
    console.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(en\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp68n0l3u9.ts(47,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp68n0l3u9.ts(47,9): error TS1005: '','' expected.

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encoded: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encoded += char.toLowerCase();\n        } else {\n          \
    \  encoded += char.toUpperCase();\n        }\n        if (char === 'a') {\n  \
    \          encoded += 'c';\n        } else if (char === 'e') {\n            encoded\
    \ += 'g';\n        } else if (char === 'i') {\n            encoded += 'k';\n \
    \       } else if (char === 'o') {\n            encoded += 'q';\n        } else\
    \ if (char === 'u') {\n            encoded += 'w';\n        }\n    }\n    return\
    \ encoded;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') ===\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi6ui94fl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  const vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n  for (let i = 0; i < message.length; i++) {\n    let currentLetter\
    \ = message[i];\n    if (currentLetter === currentLetter.toUpperCase()) {\n  \
    \    encodedMessage += currentLetter.toLowerCase();\n    } else {\n      encodedMessage\
    \ += currentLetter.toUpperCase();\n    }\n    if (vowels.includes(currentLetter))\
    \ {\n      let indexOfVowel = vowels.indexOf(currentLetter);\n      let nextVowel\
    \ = vowels[indexOfVowel + 2];\n      encodedMessage = encodedMessage.replace(currentLetter,\
    \ nextVowel);\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello World\")); // \"Hlll Wrdl\"\nconsole.log(encode(\"Hello World!\")); // \"\
    Hlll Wrdl!\"\nconsole.log(encode(\"Hello World! How are you?\")); // \"Hlll Wrdl!\
    \ Hw dry yu?\"\nconsole.log(encode(\"Hello World! How are you? I am fine.\"));\
    \ // \"Hlll Wrdl! Hw dry yu? I dm gni.\"\nconsole.log(encode(\"Hello World! How\
    \ are you? I am fine. What about you?\")); // \"Hlll Wrdl! Hw dry yu? I dm gni.\
    \ Wht bt yu?\"\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz144bs1b.ts(17,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978077
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxfw0s8e6.js:59:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxfw0s8e6.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // ABCDEFGHIJKLMNOPQRSTUVWXYZ\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'ABCDEFGHIJKLMNOPQR\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp212h0a4i.ts(39,73): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp212h0a4i.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp212h0a4i.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659978077
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let currentChar: string = message[i];\n    if (currentChar === currentChar.toUpperCase())\
    \ {\n      result += currentChar.toLowerCase();\n    } else {\n      result +=\
    \ currentChar.toUpperCase();\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"\
    Hello\")); // hELLO\nconsole.log(encode(\"Hi\")); // hI\nconsole.log(encode(\"\
    Heey, how is your day?\")); // hEEE, HOW IS YOUR DAY?\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpapkxk8fq.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpapkxk8fq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hI

    hEEY, HOW IS YOUR DAY?

    '
  timestamp: 1659978077
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9e61asqm.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9e61asqm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978077
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char\
    \ = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n      \
    \  } else if (char === 'i') {\n            char = 'k';\n        } else if (char\
    \ === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n  \
    \          char = 'y';\n        }\n        result += char;\n    }\n    return\
    \ result;\n}\n\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('This\
    \ is a test')); // tHIS is a tEST\nconsole.log(encode('This is another test'));\
    \ // tHIS is anOTHER tEST\nconsole.log(encode('This is the last test')); // tHIS\
    \ is the lAST tEST\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmptnllk55a.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmptnllk55a.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD!

    tHIS IS A TEST

    tHIS IS ANOTHER TEST

    tHIS IS THE LAST TEST

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    const vowels = \"aeiou\";\n    let encoded = \"\";\n    for (let\
    \ i = 0; i < message.length; i++) {\n        let letter = message[i];\n      \
    \  if (vowels.includes(letter)) {\n            let index = vowels.indexOf(letter);\n\
    \            let newIndex = (index + 2) % vowels.length;\n            encoded\
    \ += vowels[newIndex];\n        } else {\n            encoded += letter;\n   \
    \     }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoy7s2c38.ts(12,20): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659978077
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        let index = alphabet.indexOf(char.toLowerCase());\n        if (index\
    \ === -1) {\n            encodedMessage += char;\n        } else {\n         \
    \   let newIndex = index + 2;\n            if (newIndex > 25) {\n            \
    \    newIndex -= 26;\n            }\n            let newChar = alphabet[newIndex];\n\
    \            if (char === char.toUpperCase()) {\n                newChar = newChar.toUpperCase();\n\
    \            }\n            encodedMessage += newChar;\n        }\n    }\n   \
    \ return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // Jgnnq\nconsole.log(encode(\"\
    How are you?\")); // Jqb cqg oua?\nconsole.log(encode(\"This is fun!\")); // Vjku\
    \ ku jgt!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwgq8qf3y.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwgq8qf3y.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Jgnnq

    Jqy ctg aqw?

    Vjku ku hwp!

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n\
    \    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n\
    \      const nextIndex = (index + 2) % vowels.length;\n      encodedMessage +=\
    \ char.toUpperCase() === char ? vowels[nextIndex].toUpperCase() : vowels[nextIndex];\n\
    \    } else {\n      encodedMessage += char.toUpperCase() === char ? char.toLowerCase()\
    \ : char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World')); // 'HllE Wrdl'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\n\
    console.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello\
    \ World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\n\
    console.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello\
    \ World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\n\
    console.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello\
    \ World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\n\
    console.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello\
    \ World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\n\
    console.log(encode('Hello World!')); //\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt0g0qmsd.ts(12,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978077
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('hello')); // hlllC\nconsole.log(encode('HELLO')); // hlllC\n\
    console.log(encode('hello world')); // hlllC wlrldC\nconsole.log(encode('HELLO\
    \ WORLD')); // hlllC wlrldC\nconsole.log(encode('hello world, how are you?'));\
    \ // hlllC wlrldC, hwC arC ywC?\nconsole.log(encode('HELLO WORLD, HOW ARE YOU?'));\
    \ // hlllC wlrldC, hwC arC ywC?\nconsole.log(encode('hello world, how are you?\
    \ I am fine, thank you. And you?')); // hlllC wlrldC, hwC arC ywC? IC am fnC,\
    \ thnk ywC. And ywC?\nconsole.log(encode('HELLO WORLD, HOW ARE YOU? I AM FINE,\
    \ THANK YOU. AND YOU?')); // hlllC wlrldC, hwC arC ywC? IC am fnC, thnk ywC. And\
    \ ywC?\nconsole.log(encode('hello world, how are you? I am fine, thank you. And\
    \ you? I am fine too, thank you.')); // hlllC wlrld\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8dyw8jk2.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8dyw8jk2.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HEgLLOq

    hello

    HEgLLOq WOqRLD

    hello world

    HEgLLOq WOqRLD, HOqW AcREg YOqUw?

    hello world, how are you?

    HEgLLOq WOqRLD, HOqW AcREg YOqUw? i AcM FIkNEg, THAcNK YOqUw. aND YOqUw?

    hello world, how are you? i am fine, thank you. and you?

    HEgLLOq WOqRLD, HOqW AcREg YOqUw? i AcM FIkNEg, THAcNK YOqUw. aND YOqUw? i AcM
    FIkNEg TOqOq, THAcNK YOqUw.

    '
  timestamp: 1659978077
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a') {\n    \
    \        result = result.slice(0, -1) + 'c';\n        } else if (char === 'e')\
    \ {\n            result = result.slice(0, -1) + 'g';\n        } else if (char\
    \ === 'i') {\n            result = result.slice(0, -1) + 'k';\n        } else\
    \ if (char === 'o') {\n            result = result.slice(0, -1) + 'q';\n     \
    \   } else if (char === 'u') {\n            result = result.slice(0, -1) + 's';\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World'));\
    \ // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsnrh9zsf.ts(44,9): error TS1003: Identifier expected.

    '
  timestamp: 1659978078
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ \"a\") {\n            encodedMessage += \"c\";\n        } else if (char ===\
    \ \"e\") {\n            encodedMessage += \"g\";\n        } else if (char ===\
    \ \"i\") {\n            encodedMessage += \"k\";\n        } else if (char ===\
    \ \"o\") {\n            encodedMessage += \"q\";\n        } else if (char ===\
    \ \"u\") {\n            encodedMessage += \"w\";\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd52w_a11.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd52w_a11.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'cdefghijklmnopqrstuvwxyzab');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\
    \ === 'CDEFGHIJKLMNOPQRSTUVWXYZAB');\nconsole.log(encode('The quick brown fox\
    \ jumps over the lazy dog')); // qhe uickc bfowrn fox jmups oqer qhe lczy dog\n\
    console.log(encode('The quick brown fox jumps over the lazy dog') === 'qhe uickc\
    \ bfowrn fox jmups oqer qhe lczy dog');\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv2p_gu_b.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv2p_gu_b.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    false

    AcBCDEgFGHIkJKLMNOqPQRSTUwVWXYZ

    false

    abcdefghijklmnopqrstuvwxyz

    false

    tHEg QUwIkCK BROqWN FOqX JUwMPS OqVEgR THEg LAcZY DOqG

    false

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let i = 0; i < message.length; i++) {\n        if (vowels.includes(message[i]))\
    \ {\n            encodedMessage += String.fromCharCode(message[i].charCodeAt(0)\
    \ + 2);\n        } else if (message[i] === 'z') {\n            encodedMessage\
    \ += 'b';\n        } else if (message[i] === 'Z') {\n            encodedMessage\
    \ += 'B';\n        } else if (message[i] === message[i].toUpperCase()) {\n   \
    \         encodedMessage += String.fromCharCode(message[i].charCodeAt(0) + 32);\n\
    \        } else {\n            encodedMessage += String.fromCharCode(message[i].charCodeAt(0)\
    \ - 32);\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\n\
    console.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello,\
    \ World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq,\
    \ Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello,\
    \ World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq,\
    \ Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello,\
    \ World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq,\
    \ Yqtnf!'\nconsole.log(encode('\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6cruu529.ts(37,21): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp6cruu529.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp6cruu529.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (alphabet.indexOf(char) !== -1) {\n            let index = alphabet.indexOf(char);\n\
    \            let newIndex = index + 2;\n            if (newIndex > 25) {\n   \
    \             newIndex -= 26;\n            }\n            encodedMessage += alphabet[newIndex];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\
    \ // hlloe\nconsole.log(encode('HELLO')); // hlloe\nconsole.log(encode('hello\
    \ world')); // hlloe wlrld\nconsole.log(encode('Hello World')); // hlloe wlrld\n\
    console.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello\
    \ World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\n\
    console.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello\
    \ World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\n\
    console.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello\
    \ World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\n\
    console.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello\
    \ World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\n\
    console.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpivr38hcb.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpivr38hcb.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HjEgLnLnOq

    hello

    HjEgLnLnOq WyOqRtLnDf

    hEgLnLnOq wOqRtLnDf

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf!

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (isVowel(char)) {\n     \
    \       encodedMessage += getNextVowel(char);\n        } else if (isUpperCase(char))\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphtqsmtma.ts(11,13): error TS2304: Cannot find name
    ''isVowel''.

    ../../../../../tmp/tmphtqsmtma.ts(12,31): error TS2304: Cannot find name ''getNextVowel''.

    ../../../../../tmp/tmphtqsmtma.ts(13,20): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encoded = '';\n\
    \  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n\
    \    if (vowels.includes(char)) {\n      const index = vowels.indexOf(char);\n\
    \      encoded += vowels[(index + 2) % vowels.length];\n    } else if (char ===\
    \ char.toUpperCase()) {\n      encoded += char.toLowerCase();\n    } else {\n\
    \      encoded += char.toUpperCase();\n    }\n  }\n  return encoded;\n}\n\nconsole.log(encode('Hello\
    \ World')); // 'HILLO WIRLD'\nconsole.log(encode('Hello World') === 'HILLO WIRLD');\n\
    console.log(encode('Hello Earth')); // 'HILLO ERTH'\nconsole.log(encode('Hello\
    \ Earth') === 'HILLO ERTH');\nconsole.log(encode('Hello Moon')); // 'HILLO MUNN'\n\
    console.log(encode('Hello Moon') === 'HILLO MUNN');\nconsole.log(encode('Hello\
    \ Sun')); // 'HILLO SUNN'\nconsole.log(encode('Hello Sun') === 'HILLO SUNN');\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpflk94xnv.ts(12,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        if (message[i] === message[i].toUpperCase()) {\n           \
    \ encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage\
    \ += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzv0_s0tk.js:57:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzv0_s0tk.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ \"a\") {\n            encodedMessage += \"c\";\n        } else if (char ===\
    \ \"e\") {\n            encodedMessage += \"g\";\n        } else if (char ===\
    \ \"i\") {\n            encodedMessage += \"k\";\n        } else if (char ===\
    \ \"o\") {\n            encodedMessage += \"q\";\n        } else if (char ===\
    \ \"u\") {\n            encodedMessage += \"w\";\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!\"));\n\
    console.log(encode(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello\
    \ World!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!\"));\n\
    console.log(encode(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello\
    \ World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!\"\
    ));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\"\
    ));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0v5nzbup.ts(53,52): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp0v5nzbup.ts(54,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp0v5nzbup.ts(54,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encodedMessage\
    \ = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (vowels.includes(char)) {\n            let index = vowels.indexOf(char);\n\
    \            let newIndex = (index + 2) % vowels.length;\n            encodedMessage\
    \ += vowels[newIndex];\n        } else if (char === char.toUpperCase()) {\n  \
    \          encodedMessage += char.toLowerCase();\n        } else {\n         \
    \   encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpusmbt3lg.ts(41,21): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpusmbt3lg.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpusmbt3lg.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n    if (char === 'a') {\n      encodedMessage\
    \ += 'c';\n    } else if (char === 'e') {\n      encodedMessage += 'g';\n    }\
    \ else if (char === 'i') {\n      encodedMessage += 'k';\n    } else if (char\
    \ === 'o') {\n      encodedMessage += 'q';\n    } else if (char === 'u') {\n \
    \     encodedMessage += 'w';\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5dfdrst1.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5dfdrst1.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encoded: string = \"\";\n  let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (let i: number = 0; i < message.length; i++) {\n    let char: string\
    \ = message[i];\n    let index: number = alphabet.indexOf(char.toLowerCase());\n\
    \    if (index === -1) {\n      encoded += char;\n    } else {\n      if (char\
    \ === char.toUpperCase()) {\n        encoded += alphabet[(index + 2) % 26].toUpperCase();\n\
    \      } else {\n        encoded += alphabet[(index + 2) % 26];\n      }\n   \
    \ }\n  }\n  return encoded;\n}\n\nconsole.log(encode(\"Hello World\")); // Jgnnq\
    \ Yqtnf\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); // cdefghijklmnopqrstuvwxyzab\n\
    console.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // CDEFGHIJKLMNOPQRSTUVWXYZAB\n\
    console.log(encode(\"The quick brown fox jumps over the lazy dog.\")); // Vjg\
    \ swkem dtqyp hqz lworu jnmbx nx ymj qfed itl.\nconsole.log(encode(\"THE QUICK\
    \ BROWN FOX JUMPS OVER THE LAZY DOG.\")); // VJG SWKEM DTQYP HQZ LWORU JNMBX NX\
    \ YMJ QFED ITL.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpum61n7bi.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpum61n7bi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Jgnnq Yqtnf

    cdefghijklmnopqrstuvwxyzab

    CDEFGHIJKLMNOPQRSTUVWXYZAB

    Vjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.

    VJG SWKEM DTQYP HQZ LWORU QXGT VJG NCBA FQI.

    '
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv9mimnd2.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv9mimnd2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i =\
    \ 0; i < message.length; i++) {\n        const letter = message[i];\n        const\
    \ isUpperCase = letter === letter.toUpperCase();\n        const lowerCaseLetter\
    \ = letter.toLowerCase();\n        if (vowels.includes(lowerCaseLetter)) {\n \
    \           const index = alphabet.indexOf(lowerCaseLetter);\n            const\
    \ encodedLetter = alphabet[index + 2];\n            encodedMessage += isUpperCase\
    \ ? encodedLetter.toUpperCase() : encodedLetter;\n        } else {\n         \
    \   encodedMessage += isUpperCase ? lowerCaseLetter.toUpperCase() : lowerCaseLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\
    \ // 'jgnnq'\nconsole.log(encode('HELLO')); // 'JGNNQ'\nconsole.log(encode('hello\
    \ world')); // 'jgnnq yqtnf'\nconsole.log(encode('HELLO WORLD')); // 'JGNNQ YQTNF'\n\
    console.log(encode('hello world!')); // 'jgnnq yqtnf!'\nconsole.log(encode('HELLO\
    \ WORLD!')); // 'JGNNQ YQTNF!'\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpziadq2zf.ts(15,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char\
    \ = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n      \
    \  } else if (char === 'i') {\n            char = 'k';\n        } else if (char\
    \ === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n  \
    \          char = 'y';\n        }\n        encodedMessage += char;\n    }\n  \
    \  return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\n\
    console.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\n\
    console.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\n\
    console.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\n\
    console.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\n\
    console.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4ji8tj8b.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp4ji8tj8b.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('hello'));\nconsole.log(encode('HELLO'));\nconsole.log(encode('Hello'));\n\
    console.log(encode('HeLlO'));\nconsole.log(encode('HELLO WORLD'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\n\
    console.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4ouojh7s.ts(55,32): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp4ouojh7s.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp4ouojh7s.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"\
    Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello\
    \ World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph8fw_2_l.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph8fw_2_l.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! hOW ARE YOU?

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (isVowel(char)) {\n     \
    \       encodedMessage += getNextVowel(char);\n        } else if (isUpperCase(char))\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphtqsmtma.ts(11,13): error TS2304: Cannot find name
    ''isVowel''.

    ../../../../../tmp/tmphtqsmtma.ts(12,31): error TS2304: Cannot find name ''getNextVowel''.

    ../../../../../tmp/tmphtqsmtma.ts(13,20): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv9mimnd2.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv9mimnd2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp67saeyiy.js:58:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp67saeyiy.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978080
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encoded = '';\n\
    \  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n\
    \    const charCode = char.charCodeAt(0);\n    if (charCode >= 65 && charCode\
    \ <= 90) {\n      encoded += String.fromCharCode(charCode + 32);\n    } else if\
    \ (charCode >= 97 && charCode <= 122) {\n      encoded += String.fromCharCode(charCode\
    \ - 32);\n    } else {\n      encoded += char;\n    }\n  }\n  for (let i = 0;\
    \ i < encoded.length; i++) {\n    const char = encoded[i];\n    if (vowels.includes(char))\
    \ {\n      const charCode = char.charCodeAt(0);\n      encoded = encoded.replace(char,\
    \ String.fromCharCode(charCode + 2));\n    }\n  }\n  return encoded;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\n\
    console.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpay0k0gg4.ts(23,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!') ===\
    \ 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\n\
    console.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello\
    \ World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO\
    \ wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello\
    \ World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO\
    \ wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello\
    \ World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO\
    \ wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello\
    \ World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO\
    \ wOrld\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp280krmkr.ts(45,52): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp280krmkr.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp280krmkr.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpry33p6p5.js:58:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpry33p6p5.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"\
    hello\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5hq5q7x6.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5hq5q7x6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    HELLO

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            encodedMessage += letter.toLowerCase();\n        } else {\n \
    \           encodedMessage += letter.toUpperCase();\n        }\n        if (letter\
    \ === 'a') {\n            encodedMessage += 'c';\n        } else if (letter ===\
    \ 'e') {\n            encodedMessage += 'g';\n        } else if (letter === 'i')\
    \ {\n            encodedMessage += 'k';\n        } else if (letter === 'o') {\n\
    \            encodedMessage += 'q';\n        } else if (letter === 'u') {\n  \
    \          encodedMessage += 'y';\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\n\
    console.log(encode('Hello World?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\n\
    console.log(encode('Hello\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpas6t5ntd.ts(55,26): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpas6t5ntd.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpas6t5ntd.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a' || char ===\
    \ 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result =\
    \ result.slice(0, result.length - 1) + 'c';\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\n\
    console.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcd1ovqu1.ts(40,21): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpcd1ovqu1.ts(41,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpcd1ovqu1.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1659978080
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char.toLowerCase() === char)\
    \ {\n            encodedMessage += char.toUpperCase();\n        } else {\n   \
    \         encodedMessage += char.toLowerCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"\
    Hello World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjtd6aajs.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjtd6aajs.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! hOW ARE YOU?

    '
  timestamp: 1659978080
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (isVowel(char)) {\n   \
    \         encodedMessage += getNextVowel(char);\n        } else if (isUpperCase(char))\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsf216o9z.ts(11,13): error TS2304: Cannot find name
    ''isVowel''.

    ../../../../../tmp/tmpsf216o9z.ts(12,31): error TS2304: Cannot find name ''getNextVowel''.

    ../../../../../tmp/tmpsf216o9z.ts(13,20): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1659978077
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let currentChar = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            encodedMessage += currentChar.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentChar.toUpperCase();\n        }\n   \
    \ }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp68n60dte.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp68n60dte.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978081
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            encodedMessage += letter.toLowerCase();\n        } else {\n \
    \           encodedMessage += letter.toUpperCase();\n        }\n        if (letter\
    \ === 'a') {\n            encodedMessage += 'c';\n        } else if (letter ===\
    \ 'e') {\n            encodedMessage += 'g';\n        } else if (letter === 'i')\
    \ {\n            encodedMessage += 'k';\n        } else if (letter === 'o') {\n\
    \            encodedMessage += 'q';\n        } else if (letter === 'u') {\n  \
    \          encodedMessage += 'y';\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('The quick brown\
    \ fox jumps over the lazy dog'));\nconsole.log(encode('The quick brown fox jumps\
    \ over the lazy dog'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpulvwd1ny.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpulvwd1ny.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    tHEg QUyIkCK BROqWN FOqX JUyMPS OqVEgR THEg LAcZY DOqG

    tHEg QUyIkCK BROqWN FOqX JUyMPS OqVEgR THEg LAcZY DOqG

    '
  timestamp: 1659978081
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded = '';\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (vowels.includes(char)) {\n            let index = vowels.indexOf(char);\n\
    \            encoded += vowels[(index + 2) % 5];\n        } else if (char ===\
    \ char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        }\
    \ else {\n            encoded += char.toUpperCase();\n        }\n    }\n    return\
    \ encoded;\n}\n\nconsole.log(encode('hello')); // hlll\nconsole.log(encode('HELLO'));\
    \ // hlll\nconsole.log(encode('Hello World')); // hlll wlrl\nconsole.log(encode('Hello\
    \ World!')); // hlll wlrl!\nconsole.log(encode('Hello World!!')); // hlll wlrl!!\n\
    console.log(encode('Hello World!!!')); // hlll wlrl!!!\nconsole.log(encode('Hello\
    \ World!!!!')); // hlll wlrl!!!!\nconsole.log(encode('Hello World!!!!!')); //\
    \ hlll wlrl!!!!!\nconsole.log(encode('Hello World!!!!!!')); // hlll wlrl!!!!!!\n\
    console.log(encode('Hello World!!!!!!!')); // hlll wlrl!!!!!!!\nconsole.log(encode('Hello\
    \ World!!!!!!!!')); // hlll wlrl!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!'));\
    \ // hlll wlrl!!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!!')); // hlll\
    \ wlrl!!!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!!!')); // hlll wlrl!!!!!!!!!!!\n\
    console.log(encode('Hello World!!!!!!!!!!!!')); // hlll wlrl!!!!!!!!!!!!\nconsole.log(encode('Hello\
    \ World!!!!!!!!!!!!!')); // hlll wlrl!!!!!!!!!!!!!\nconsole.log(encode('Hello\
    \ World!!!!!!!!!!!!!!')); // hlll wlr\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzzb16ppg.ts(12,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978081
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"\
    Hello World!\")); // hELLO wORLD!\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp174r6fy5.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp174r6fy5.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    '
  timestamp: 1659978081
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5evmjamh.js:59:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5evmjamh.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result = '';\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (vowels.includes(char)) {\n            let index = vowels.indexOf(char);\n\
    \            result += vowels[(index + 2) % 5];\n        } else if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello\
    \ World')); // HllE Wrdl\nconsole.log(encode('Hello World!')); // HllE Wrdl!\n\
    console.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello\
    \ World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\n\
    console.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello\
    \ World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\n\
    console.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello\
    \ World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\n\
    console.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello\
    \ World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\n\
    console.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello\
    \ World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\n\
    console.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn4zg53r2.ts(12,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978081
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    if (isVowel(message[i])) {\n      result += getNextVowel(message[i]);\n\
    \    } else if (isUpperCase(message[i])) {\n      result += message[i].toLowerCase();\n\
    \    } else {\n      result += message[i].toUpperCase();\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprqvr4yvd.ts(10,9): error TS2304: Cannot find name
    ''isVowel''.

    ../../../../../tmp/tmprqvr4yvd.ts(11,17): error TS2304: Cannot find name ''getNextVowel''.

    ../../../../../tmp/tmprqvr4yvd.ts(12,16): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1659978081
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv9mimnd2.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv9mimnd2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('This is a test'));\n\
    console.log(encode('This is a longer test'));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa6osupnd.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa6osupnd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    tHIkS IkS Ac TEgST

    tHIkS IkS Ac LOqNGEgR TEgST

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode('Hello')); // hELLO\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!?')); // hELLO wORLD!?\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3sizrrf4.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3sizrrf4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD!?

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('hello')); // hlllC\nconsole.log(encode('HELLO')); // hlllC\n\
    console.log(encode('hello world')); // hlllC wlrldC\nconsole.log(encode('HELLO\
    \ WORLD')); // hlllC wlrldC\nconsole.log(encode('hello world!')); // hlllC wlrldC!\n\
    console.log(encode('HELLO WORLD!')); // hlllC wlrldC!\nconsole.log(encode('hello\
    \ world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO WORLD!')); // hlllC wlrldC!\n\
    console.log(encode('hello world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO\
    \ WORLD!')); // hlllC wlrldC!\nconsole.log(encode('hello world!')); // hlllC wlrldC!\n\
    console.log(encode('HELLO WORLD!')); // hlllC wlrldC!\nconsole.log(encode('hello\
    \ world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO WORLD!')); // hlllC wlrldC!\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcsj1_f9x.js:52:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcsj1_f9x.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HEgLLOq

    hello

    HEgLLOq WOqRLD

    hello world

    HEgLLOq WOqRLD!

    hello world!

    HEgLLOq WOqRLD!

    hello world!

    HEgLLOq WOqRLD!

    hello world!

    HEgLLOq WOqRLD!

    hello world!

    HEgLLOq WOqRLD!

    hello world!

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char: string = message[i];\n    if (char === char.toUpperCase())\
    \ {\n      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n\
    \    }\n    if (char === \"a\") {\n      result = result.slice(0, -1) + \"c\"\
    ;\n    } else if (char === \"e\") {\n      result = result.slice(0, -1) + \"g\"\
    ;\n    } else if (char === \"i\") {\n      result = result.slice(0, -1) + \"k\"\
    ;\n    } else if (char === \"o\") {\n      result = result.slice(0, -1) + \"q\"\
    ;\n    } else if (char === \"u\") {\n      result = result.slice(0, -1) + \"y\"\
    ;\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello World\")); //\
    \ \"hELLO wORLD\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\n\
    console.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"\
    Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\"));\
    \ // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\
    \nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"\
    Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\"));\
    \ // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\
    \nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"\
    Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\"));\
    \ // \"hELLO wORLD!\"\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0tfocy4i.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0tfocy4i.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hgLLq wqRLD

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        switch (char) {\n            case\
    \ 'a':\n                char = 'c';\n                break;\n            case\
    \ 'e':\n                char = 'g';\n                break;\n            case\
    \ 'i':\n                char = 'k';\n                break;\n            case\
    \ 'o':\n                char = 'q';\n                break;\n            case\
    \ 'u':\n                char = 'y';\n                break;\n        }\n     \
    \   result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpk4z1yi57.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk4z1yi57.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const char =\
    \ message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage\
    \ += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n        if (vowels.includes(char)) {\n            const index = vowels.indexOf(char);\n\
    \            encodedMessage += vowels[(index + 2) % vowels.length];\n        }\n\
    \    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\nconsole.log(encode('HELLO'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello\
    \ World!'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9xenxvt3.ts(17,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978081
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a' || char ===\
    \ 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result =\
    \ result.slice(0, result.length - 1) + String.fromCharCode(char.charCodeAt(0)\
    \ + 2);\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // h\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeqwjsb8r.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeqwjsb8r.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hgLLq wqRLD

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD!

    '
  timestamp: 1659978082
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let letterIndex = alphabet.indexOf(letter.toLowerCase());\n    if (letterIndex\
    \ === -1) {\n      encodedMessage += letter;\n    } else {\n      let newLetterIndex\
    \ = letterIndex + 2;\n      if (newLetterIndex > 25) {\n        newLetterIndex\
    \ -= 26;\n      }\n      let newLetter = alphabet[newLetterIndex];\n      if (letter\
    \ === letter.toUpperCase()) {\n        newLetter = newLetter.toUpperCase();\n\
    \      }\n      encodedMessage += newLetter;\n    }\n  }\n  return encodedMessage;\n\
    }\n\nconsole.log(encode('Hello World')); // Jgnnq Yqtnf\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('The quick brown fox jumps\
    \ over the lazy dog.')); // Vjg swkem dtqyp hqz lworu pwkl zkdw vjg xyb.\nconsole.log(encode('THE\
    \ QUICK BROWN FOX JUMPS OVER THE LAZY DOG.')); // VJG SWKEM DTQYP HQZ LWORU PWKL\
    \ ZKDW VJG XYB.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2dd4nswx.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2dd4nswx.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Jgnnq Yqtnf

    cdefghijklmnopqrstuvwxyzab

    CDEFGHIJKLMNOPQRSTUVWXYZAB

    Vjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.

    VJG SWKEM DTQYP HQZ LWORU QXGT VJG NCBA FQI.

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encodedMessage\
    \ = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char =\
    \ message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage\
    \ += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n        if (alphabet.indexOf(char) !== -1) {\n            encodedMessage\
    \ += alphabet[(alphabet.indexOf(char) + 2) % 26];\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"hello\")); // hlloe\nconsole.log(encode(\"\
    HELLO\")); // hlloe\nconsole.log(encode(\"hello world\")); // hlloe wlrld\nconsole.log(encode(\"\
    HELLO WORLD\")); // hlloe wlrld\nconsole.log(encode(\"hello world!\")); // hlloe\
    \ wlrld!\nconsole.log(encode(\"HELLO WORLD!\")); // hlloe wlrld!\nconsole.log(encode(\"\
    abcdefghijklmnopqrstuvwxyz\")); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode(\"\
    abcdefghijklmnopqrstuvwxyz!\")); // cdefghijklmnopqrstuvwxyzab!\nconsole.log(encode(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ!\")); // cdefghijklmnopqrstuvwxyzab!\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6ne1w9g0.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6ne1w9g0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HjEgLnLnOq

    hello

    HjEgLnLnOq WyOqRtLnDf

    hello world

    HjEgLnLnOq WyOqRtLnDf!

    hello world!

    AcBdCeDfEgFhGiHjIkJlKmLnMoNpOqPrQsRtSuTvUwVxWyXzYaZb

    abcdefghijklmnopqrstuvwxyz

    AcBdCeDfEgFhGiHjIkJlKmLnMoNpOqPrQsRtSuTvUwVxWyXzYaZb!

    abcdefghijklmnopqrstuvwxyz!

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"\
    Hello World!\")); // hELLO wORLD!\nconsole.log(encode(\"Hello World! How are you?\"\
    )); // hELLO wORLD! hOW ARE YOU?\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkc5jhwb2.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkc5jhwb2.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! hOW ARE YOU?

    '
  timestamp: 1659978082
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n  \
    \  let index = alphabet.indexOf(char.toLowerCase());\n    if (index === -1) {\n\
    \      encodedMessage += char;\n    } else {\n      let newIndex = index + 2;\n\
    \      if (newIndex > 25) {\n        newIndex -= 26;\n      }\n      if (char\
    \ === char.toUpperCase()) {\n        encodedMessage += alphabet[newIndex].toUpperCase();\n\
    \      } else {\n        encodedMessage += alphabet[newIndex];\n      }\n    }\n\
    \  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdr2fd0uy.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdr2fd0uy.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_hin4tw7.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_hin4tw7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter\
    \ = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            currentLetter = currentLetter.toLowerCase();\n        } else {\n\
    \            currentLetter = currentLetter.toUpperCase();\n        }\n       \
    \ if (vowels.includes(currentLetter)) {\n            let index = vowels.indexOf(currentLetter);\n\
    \            if (index === 4) {\n                index = -1;\n            }\n\
    \            currentLetter = vowels[index + 2];\n        }\n        encodedMessage\
    \ += currentLetter;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World')); // HllE Wrdl\nconsole.log(encode('Hello World') === 'HllE Wrdl');\n\
    console.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\n\
    console.log(encode('abcdefghijklmnopqrstuvwxyz') === 'cdefghijklmnopqrstuvwxyzab');\n\
    console.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\n\
    console.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'CDEFGHIJKLMNOPQRSTUVWXYZAB');\n\
    console.log(encode('The Quick Brown Fox Jumps Over The Lazy Dog')); // ThE QckBrwn\
    \ Fx Jmps vr ThE Lzy Dg\nconsole.log(encode('The Quick Brown Fox Jumps Over The\
    \ Lazy Dog') === 'ThE QckBrwn Fx Jmps vr ThE Lzy Dg');\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp84j2dkuk.ts(17,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978082
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        switch (char) {\n            case\
    \ 'a':\n                char = 'c';\n                break;\n            case\
    \ 'e':\n                char = 'g';\n                break;\n            case\
    \ 'i':\n                char = 'k';\n                break;\n            case\
    \ 'o':\n                char = 'q';\n                break;\n            case\
    \ 'u':\n                char = 'y';\n                break;\n        }\n     \
    \   result += char;\n    }\n    return result;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\n\
    console.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\n\
    console.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\n\
    console.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\n\
    console.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello\
    \ World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\n\
    console.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7z0qu2ln.ts(55,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7z0qu2ln.ts(55,9): error TS1005: '','' expected.

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter =\
    \ message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            encodedMessage += currentLetter.toLowerCase();\n        } else {\n\
    \            encodedMessage += currentLetter.toUpperCase();\n        }\n     \
    \   if (alphabet.indexOf(currentLetter) !== -1) {\n            let indexOfLetter\
    \ = alphabet.indexOf(currentLetter);\n            let newIndex = indexOfLetter\
    \ + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex\
    \ - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n  \
    \      }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpio8dac6b.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpio8dac6b.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = '';\n  const vowels: string[] = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const currentLetter:\
    \ string = message[i];\n    const isUpperCase: boolean = currentLetter === currentLetter.toUpperCase();\n\
    \    const isVowel: boolean = vowels.includes(currentLetter.toLowerCase());\n\
    \    if (isVowel) {\n      let nextVowel: string = currentLetter;\n      let j:\
    \ number = 0;\n      while (j < 2) {\n        nextVowel = nextLetter(nextVowel);\n\
    \        if (vowels.includes(nextVowel)) {\n          j++;\n        }\n      }\n\
    \      result += isUpperCase ? nextVowel.toUpperCase() : nextVowel;\n    } else\
    \ {\n      result += isUpperCase ? currentLetter.toLowerCase() : currentLetter.toUpperCase();\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4n9xcxec.ts(13,37): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmp4n9xcxec.ts(18,21): error TS2304: Cannot find name ''nextLetter''.

    ../../../../../tmp/tmp4n9xcxec.ts(19,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO\
    \ wOrld');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'bcdfghjklmnpqrstvwxyzab');\n\
    console.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'bcdfghjklmnpqrstvwxyzab');\n\
    console.log(encode('The quick brown fox jumps over the lazy dog') === 'thE qUick\
    \ brOwn fOx jUmpS OvEr thE lAzy dOg');\nconsole.log(encode('THE QUICK BROWN FOX\
    \ JUMPS OVER THE LAZY DOG') === 'thE qUick brOwn fOx jUmpS OvEr thE lAzy dOg');\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3e6vqsvq.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3e6vqsvq.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    false

    false

    false

    false

    false

    '
  timestamp: 1659978082
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a' || char ===\
    \ 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result =\
    \ result.slice(0, result.length - 1) + String.fromCharCode(char.charCodeAt(0)\
    \ + 2);\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!?')); // hELLO wORLD!?\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcxl8wxdm.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcxl8wxdm.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hgLLq wqRLD

    hgLLq wqRLD!

    hgLLq wqRLD!?

    '
  timestamp: 1659978083
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n  \
    \  const char = message[i];\n    if (vowels.includes(char)) {\n      const index\
    \ = alphabet.indexOf(char);\n      encodedMessage += alphabet[index + 2];\n  \
    \  } else if (alphabet.includes(char)) {\n      const index = alphabet.indexOf(char);\n\
    \      encodedMessage += alphabet[index + 2];\n    } else {\n      encodedMessage\
    \ += char;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello'));\
    \ // jgnnq\nconsole.log(encode('world')); // btwqi\nconsole.log(encode('hello\
    \ world')); // jgnnq btwqi\nconsole.log(encode('HELLO WORLD')); // JGNNQ BTWQI\n\
    console.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello\
    \ world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\n\
    console.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello\
    \ world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\n\
    console.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello\
    \ world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\n\
    console.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello\
    \ world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\n\
    console.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp6hsgevl.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpp6hsgevl.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1659978083
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] ===\
    \ message[i].toUpperCase()) {\n      encodedMessage += message[i].toLowerCase();\n\
    \    } else {\n      encodedMessage += message[i].toUpperCase();\n    }\n    if\
    \ (vowels.includes(encodedMessage[i])) {\n      encodedMessage = encodedMessage.slice(0,\
    \ i) + vowels[(vowels.indexOf(encodedMessage[i]) + 2) % 5] + encodedMessage.slice(i\
    \ + 1);\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World')); // 'HllE wlrlD'\nconsole.log(encode('Hello World') === 'HllE wlrlD');\n\
    console.log(encode('abcdefghijklmnopqrstuvwxyz')); // 'cdefghijklmnopqrstuvwxyzab'\n\
    console.log(encode('abcdefghijklmnopqrstuvwxyz') === 'cdefghijklmnopqrstuvwxyzab');\n\
    console.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // 'CDEFGHIJKLMNOPQRSTUVWXYZAB'\n\
    console.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'CDEFGHIJKLMNOPQRSTUVWXYZAB');\n\
    console.log(encode('The quick brown fox jumps over the lazy dog.')); // 'ThE qck\
    \ brwn fx jmps vr thE lzy dg.'\nconsole.log(encode('The quick brown fox jumps\
    \ over the lazy dog.') === 'ThE qck brwn fx jmps vr thE lzy dg.');\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3dmwdj94.ts(16,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"Hello World\"\
    ));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!\
    \ How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprvcgrqj3.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprvcgrqj3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    HELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! hOW ARE YOU?

    '
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let vowels = \"aeiou\";\n  for (let i = 0; i < message.length; i++) {\n \
    \   let currentLetter = message[i];\n    if (vowels.includes(currentLetter)) {\n\
    \      let currentVowelIndex = vowels.indexOf(currentLetter);\n      let encodedVowel\
    \ = vowels[currentVowelIndex + 2];\n      encodedMessage += encodedVowel;\n  \
    \  } else if (alphabet.includes(currentLetter)) {\n      let currentLetterIndex\
    \ = alphabet.indexOf(currentLetter);\n      let encodedLetter = alphabet[currentLetterIndex\
    \ + 2];\n      encodedMessage += encodedLetter;\n    } else {\n      encodedMessage\
    \ += currentLetter;\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr4gexb2t.ts(13,16): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpr4gexb2t.ts(17,25): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter =\
    \ message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            currentLetter = currentLetter.toLowerCase();\n            let index\
    \ = alphabet.indexOf(currentLetter);\n            if (index === -1) {\n      \
    \          encodedMessage += currentLetter;\n            } else {\n          \
    \      let newIndex = index + 2;\n                if (newIndex > 25) {\n     \
    \               newIndex -= 26;\n                }\n                encodedMessage\
    \ += alphabet[newIndex].toUpperCase();\n            }\n        } else {\n    \
    \        let index = alphabet.indexOf(currentLetter);\n            if (index ===\
    \ -1) {\n                encodedMessage += currentLetter;\n            } else\
    \ {\n                let newIndex = index + 2;\n                if (newIndex >\
    \ 25) {\n                    newIndex -= 26;\n                }\n            \
    \    encodedMessage += alphabet[newIndex];\n            }\n        }\n    }\n\
    \    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World!\"));\nconsole.log(encode(\"Hello World!@#$%^&*()\"));\nconsole.log(encode(\"\
    Hello World!@#$%^&*()1234567890\"));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890-=[]\\\
    \\;',./\"));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890-=[]\\\\;',./~`\"\
    ));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890-=[]\\\\;',./~`{}|:\\\
    \"<>?\"));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890-=[]\\\\;',./~`{}|:\\\
    \"<>?qwertyuiopasdfghjklzxcvbnm\"));\nconsole.log(encode(\"Hello World!@#$%^&\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppxvg_cb8.ts(48,39): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmppxvg_cb8.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmppxvg_cb8.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage\
    \ += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpr8r0ahcs.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr8r0ahcs.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978074
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let i = 0;\
    \ i < message.length; i++) {\n        const char = message[i];\n        if (vowels.includes(char))\
    \ {\n            const index = alphabet.indexOf(char);\n            encoded +=\
    \ alphabet[index + 2];\n        } else if (char === char.toUpperCase()) {\n  \
    \          encoded += char.toLowerCase();\n        } else {\n            encoded\
    \ += char.toUpperCase();\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode('Hello\
    \ World!')); // hllE wldr!\nconsole.log(encode('The quick brown fox jumps over\
    \ the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The\
    \ quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE\
    \ lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.'));\
    \ // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown\
    \ fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The\
    \ quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE\
    \ lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.'));\
    \ // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown\
    \ fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The\
    \ quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE\
    \ lzy dg.\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdue0g8ha.ts(34,9): error TS1003: Identifier expected.

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = \"\";\n  let vowels: string = \"aeiou\";\n\
    \  for (let i: number = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i])\
    \ !== -1) {\n      result += String.fromCharCode(message[i].charCodeAt(0) + 2);\n\
    \    } else if (message[i] === message[i].toUpperCase()) {\n      result += message[i].toLowerCase();\n\
    \    } else {\n      result += message[i].toUpperCase();\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(encode(\"Hello World\")); // \"HllE Wrdl\"\nconsole.log(encode(\"\
    Hello World!\")); // \"HllE Wrdl!\"\nconsole.log(encode(\"Hello World!\")); //\
    \ \"HllE Wrdl!\"\nconsole.log(encode(\"Hello World! How are you?\")); // \"HllE\
    \ Wrdl! Hw dyu cmn?\"\nconsole.log(encode(\"Hello World! How are you? I'm fine,\
    \ thank you.\")); // \"HllE Wrdl! Hw dyu cmn? I'm fnE, thnk yu.\"\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbssf99uh.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbssf99uh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hgLLq wqRLD

    hgLLq wqRLD!

    hgLLq wqRLD!

    hgLLq wqRLD! hqW cRg Yqw?

    hgLLq wqRLD! hqW cRg Yqw? i''M FkNg, THcNK Yqw.

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyv2uo28s.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyv2uo28s.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let currentChar = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            encodedMessage += currentChar.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentChar.toUpperCase();\n        }\n   \
    \ }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"\
    HELLO\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"Hello World\"\
    ));\nconsole.log(encode(\"Hello World!\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz5d8_tbi.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5d8_tbi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hello

    HELLO

    hELLO wORLD

    hELLO wORLD!

    '
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const currentLetter\
    \ = message[i];\n    if (vowels.includes(currentLetter)) {\n      const index\
    \ = vowels.indexOf(currentLetter);\n      encodedMessage += vowels[index + 2];\n\
    \    } else if (currentLetter === currentLetter.toUpperCase()) {\n      encodedMessage\
    \ += currentLetter.toLowerCase();\n    } else {\n      encodedMessage += currentLetter.toUpperCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\
    \ // HllE Wrdl\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello\
    \ World') !== 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'hllE wrdl');\n\
    console.log(encode('Hello World') === 'hllE wrdl');\nconsole.log(encode('Hello\
    \ World') !== 'hllE wrdl');\nconsole.log(encode('Hello World') !== 'HllE Wrdl');\n\
    console.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello\
    \ World') !== 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'hllE wrdl');\n\
    console.log(encode('Hello World') === 'hllE wrdl');\nconsole.log(encode('Hello\
    \ World') !== 'hllE wrdl');\nconsole.log(encode('Hello World') !== 'HllE Wrdl');\n\
    console.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello\
    \ World') !== 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'hllE wrdl');\n\
    console.log(encode('Hello World') === 'hllE wrdl');\nconsole.log(encode('Hello\
    \ World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxzzwrvwn.ts(41,32): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpxzzwrvwn.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpxzzwrvwn.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello, World!'));\nconsole.log(encode('Hello, World!') ===\
    \ 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\n\
    console.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello,\
    \ World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO,\
    \ wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello,\
    \ World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO,\
    \ wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello,\
    \ World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO,\
    \ wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello,\
    \ World!') === 'hELL\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy0pv_uh6.ts(44,46): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpy0pv_uh6.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpy0pv_uh6.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n\
    \    }\n    if (char === 'a') {\n      char = 'c';\n    } else if (char === 'e')\
    \ {\n      char = 'g';\n    } else if (char === 'i') {\n      char = 'k';\n  \
    \  } else if (char === 'o') {\n      char = 'q';\n    } else if (char === 'u')\
    \ {\n      char = 'y';\n    }\n    result += char;\n  }\n  return result;\n}\n\
    \nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\n\
    console.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello\
    \ World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO\
    \ wORLD!?\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmddoe68u.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpmddoe68u.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"\
    Hello World!\")); // hELLO wORLD!\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp174r6fy5.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp174r6fy5.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    '
  timestamp: 1659978081
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n    if (char === 'a') {\n      encodedMessage\
    \ += 'c';\n    } else if (char === 'e') {\n      encodedMessage += 'g';\n    }\
    \ else if (char === 'i') {\n      encodedMessage += 'k';\n    } else if (char\
    \ === 'o') {\n      encodedMessage += 'q';\n    } else if (char === 'u') {\n \
    \     encodedMessage += 'w';\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5dfdrst1.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5dfdrst1.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let vowels = \"aeiou\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let currentLetter = message[i];\n        let currentLetterIndex = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let isUpperCase = currentLetter === currentLetter.toUpperCase();\n\
    \            if (vowels.indexOf(currentLetter.toLowerCase()) !== -1) {\n     \
    \           let newLetterIndex = currentLetterIndex + 2;\n                if (newLetterIndex\
    \ > 25) {\n                    newLetterIndex -= 26;\n                }\n    \
    \            encodedMessage += isUpperCase ? alphabet[newLetterIndex].toUpperCase()\
    \ : alphabet[newLetterIndex];\n            } else {\n                encodedMessage\
    \ += isUpperCase ? alphabet[currentLetterIndex].toUpperCase() : alphabet[currentLetterIndex];\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx5z72c_b.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx5z72c_b.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = 'aeiou';\n    const\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const letter = message[i];\n        if (vowels.includes(letter))\
    \ {\n            const index = alphabet.indexOf(letter);\n            encodedMessage\
    \ += alphabet[index + 2];\n        } else if (letter === letter.toUpperCase())\
    \ {\n            encodedMessage += letter.toLowerCase();\n        } else {\n \
    \           encodedMessage += letter.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO'));\
    \ // 'jgnnq'\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello\
    \ World!')); // 'Jgnnq Yqtnf!'\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxzsd5mr3.ts(13,20): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            encodedMessage += letter.toLowerCase();\n        } else {\n \
    \           encodedMessage += letter.toUpperCase();\n        }\n        if (letter\
    \ === \"a\") {\n            encodedMessage += \"c\";\n        } else if (letter\
    \ === \"e\") {\n            encodedMessage += \"g\";\n        } else if (letter\
    \ === \"i\") {\n            encodedMessage += \"k\";\n        } else if (letter\
    \ === \"o\") {\n            encodedMessage += \"q\";\n        } else if (letter\
    \ === \"u\") {\n            encodedMessage += \"w\";\n        }\n    }\n    return\
    \ encodedMessage;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!\"));\n\
    console.log(encode(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello\
    \ World!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!\"));\n\
    console.log(encode(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello\
    \ World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!\"\
    ));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\"\
    ));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0j1g2lu3.ts(52,54): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp0j1g2lu3.ts(53,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp0j1g2lu3.ts(53,9): error TS1005: '','' expected.

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_hin4tw7.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_hin4tw7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (isVowel(char)) {\n           \
    \ char = getNextVowel(char);\n        }\n        encodedMessage += char;\n   \
    \ }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo8v1tuxz.ts(16,13): error TS2304: Cannot find name
    ''isVowel''.

    ../../../../../tmp/tmpo8v1tuxz.ts(17,20): error TS2304: Cannot find name ''getNextVowel''.

    '
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i]))\
    \ {\n      encodedMessage += String.fromCharCode(message[i].charCodeAt(0) + 2);\n\
    \    } else if (message[i] === message[i].toUpperCase()) {\n      encodedMessage\
    \ += message[i].toLowerCase();\n    } else {\n      encodedMessage += message[i].toUpperCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello')); // 'Hlll'\n\
    console.log(encode('Hello World')); // 'Hlll Wrdl'\nconsole.log(encode('Hello\
    \ World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\n\
    console.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello\
    \ World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\n\
    console.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello\
    \ World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\n\
    console.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello\
    \ World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\n\
    console.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello\
    \ World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\n\
    console.log(encode('Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6hiyi9ui.ts(38,32): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp6hiyi9ui.ts(39,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp6hiyi9ui.ts(39,9): error TS1005: '','' expected.

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptheh2b90.js:59:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptheh2b90.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978084
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i\
    \ < message.length; i++) {\n    const letter = message[i];\n    const isUpperCase\
    \ = letter === letter.toUpperCase();\n    const letterLowerCase = letter.toLowerCase();\n\
    \    if (vowels.includes(letterLowerCase)) {\n      const index = alphabet.indexOf(letterLowerCase);\n\
    \      const newLetter = alphabet[index + 2];\n      encodedMessage += isUpperCase\
    \ ? newLetter.toUpperCase() : newLetter;\n    } else {\n      encodedMessage +=\
    \ isUpperCase ? letter.toLowerCase() : letter.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO'));\
    \ // 'jgnnq'\nconsole.log(encode('HELLO WORLD')); // 'jgnnq yqtnf'\nconsole.log(encode('hello\
    \ world')); // 'jgnnq yqtnf'\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpheiwijy4.ts(15,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978084
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        if (message[i] === message[i].toUpperCase()) {\n           \
    \ encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage\
    \ += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World')); // hELLO wORLD\nconsole\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiufq7f6g.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiufq7f6g.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978085
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppcd0p_12.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppcd0p_12.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978085
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\
    console.log(encode('Hello World'));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp67saeyiy.js:58:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp67saeyiy.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978080
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n\
    \    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n\
    \      const newIndex = (index + 2) % vowels.length;\n      encodedMessage +=\
    \ vowels[newIndex];\n    } else if (char === char.toUpperCase()) {\n      encodedMessage\
    \ += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\
    \ // HllE Wrdl\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello\
    \ World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\n\
    console.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello\
    \ World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\n\
    console.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello\
    \ World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\n\
    console.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello\
    \ World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\n\
    console.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello\
    \ World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\n\
    console.log(encode('Hello World') === 'H\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqa6es7ad.ts(41,41): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpqa6es7ad.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqa6es7ad.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1659978085
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let currentLetter = message[i];\n        if (currentLetter ===\
    \ currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentLetter.toUpperCase();\n\
    \        }\n        if (currentLetter === 'a') {\n            encodedMessage +=\
    \ 'c';\n        } else if (currentLetter === 'e') {\n            encodedMessage\
    \ += 'g';\n        } else if (currentLetter === 'i') {\n            encodedMessage\
    \ += 'k';\n        } else if (currentLetter === 'o') {\n            encodedMessage\
    \ += 'q';\n        } else if (currentLetter === 'u') {\n            encodedMessage\
    \ += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp_keuten.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp_keuten.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpry33p6p5.js:58:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpry33p6p5.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (alphabet.indexOf(char) !== -1) {\n            let index = alphabet.indexOf(char);\n\
    \            let newIndex = index + 2;\n            if (newIndex > 25) {\n   \
    \             newIndex -= 26;\n            }\n            encodedMessage += alphabet[newIndex];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"hello\"\
    )); // hlleo\nconsole.log(encode(\"HELLO\")); // hlleo\nconsole.log(encode(\"\
    Hello\")); // hlleo\nconsole.log(encode(\"Hello World\")); // hlleo wlrld\nconsole.log(encode(\"\
    Hello World!\")); // hlleo wlrld!\nconsole.log(encode(\"Hello World! How are you?\"\
    )); // hlleo wlrld! hw ar yu?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3k_ddn_w.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3k_ddn_w.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HjEgLnLnOq

    hello

    hEgLnLnOq

    hEgLnLnOq wOqRtLnDf

    hEgLnLnOq wOqRtLnDf!

    hEgLnLnOq wOqRtLnDf! hOqWy AcRtEg YaOqUw?

    '
  timestamp: 1659978086
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0c24wx6n.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0c24wx6n.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n    if (char === 'a') {\n      encodedMessage\
    \ += 'c';\n    } else if (char === 'e') {\n      encodedMessage += 'g';\n    }\
    \ else if (char === 'i') {\n      encodedMessage += 'k';\n    } else if (char\
    \ === 'o') {\n      encodedMessage += 'q';\n    } else if (char === 'u') {\n \
    \     encodedMessage += 'w';\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5dfdrst1.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5dfdrst1.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978079
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO\
    \ wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyrq_89bl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyrq_89bl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978072
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO\
    \ wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc4q4i3bm.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpc4q4i3bm.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = \"\";\n  let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (let i: number = 0; i < message.length; i++) {\n    let letter: string\
    \ = message[i];\n    let index: number = alphabet.indexOf(letter.toLowerCase());\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      let newIndex:\
    \ number = index + 2;\n      if (newIndex > 25) {\n        newIndex -= 26;\n \
    \     }\n      let newLetter: string = alphabet[newIndex];\n      if (letter ===\
    \ letter.toUpperCase()) {\n        newLetter = newLetter.toUpperCase();\n    \
    \  }\n      result += newLetter;\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"\
    Hello\")); // Jgnnq\nconsole.log(encode(\"My name is Bond, James Bond\")); //\
    \ Oq pcog oc Dqfg, Kcigd Kcigd\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\"\
    )); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode(\"The quick brown fox jumps\
    \ over the lazy dog\")); // Vjg swkem dtqyp hqz lworu jnmbx nx vjg mbzy eph\n\
    console.log(encode(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\")); // VJG SWKEM\
    \ DTQYP HQZ LWORU JNMBX NX VJG MBZY EPH\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpi_q2oix6.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi_q2oix6.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Jgnnq

    Oa pcog ku Dqpf, Lcogu Dqpf

    cdefghijklmnopqrstuvwxyzab

    CDEFGHIJKLMNOPQRSTUVWXYZAB

    Vjg swkem dtqyp hqz lworu qxgt vjg ncba fqi

    VJG SWKEM DTQYP HQZ LWORU QXGT VJG NCBA FQI

    '
  timestamp: 1659978086
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encodedMessage\
    \ = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n\
    \    if (vowels.includes(char)) {\n      const index = vowels.indexOf(char);\n\
    \      encodedMessage += vowels[(index + 2) % vowels.length];\n    } else if (char\
    \ === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n   \
    \ } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'hlll'\nconsole.log(encode('HELLO'));\
    \ // 'hlll'\nconsole.log(encode('hello world')); // 'hlll wrld'\nconsole.log(encode('Hello\
    \ World')); // 'hlll wrld'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\n\
    console.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello\
    \ World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\n\
    console.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello\
    \ World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\n\
    console.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello\
    \ World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\n\
    console.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello\
    \ World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt6a5x26d.ts(12,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978086
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    if (letter === letter.toUpperCase()) {\n      encodedMessage += letter.toLowerCase();\n\
    \    } else {\n      encodedMessage += letter.toUpperCase();\n    }\n    if (alphabet.includes(letter))\
    \ {\n      let index = alphabet.indexOf(letter);\n      let newIndex = index +\
    \ 2;\n      if (newIndex > 25) {\n        newIndex -= 26;\n      }\n      encodedMessage\
    \ += alphabet[newIndex];\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr2aw3aya.ts(17,18): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659978086
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        encodedMessage += char;\n    }\n \
    \   return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpffnyesxh.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpffnyesxh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    '
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n\
    \    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n\
    \      encodedMessage += vowels[(index + 2) % vowels.length];\n    } else if (char\
    \ === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n   \
    \ } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hEllO wOrld\nconsole.log(encode('Hello\
    \ World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\n\
    console.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello\
    \ World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\n\
    console.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello\
    \ World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\n\
    console.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello\
    \ World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\n\
    console.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello\
    \ World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\n\
    console.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_pfafqsi.ts(40,21): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp_pfafqsi.ts(41,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_pfafqsi.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1659978086
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"\
    Hello World!\")); // hELLO wORLD!\nconsole.log(encode(\"Hello World!!!\")); //\
    \ hELLO wORLD!!!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprcl1w_st.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprcl1w_st.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD!!!

    '
  timestamp: 1659978087
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    if (message[i] === message[i].toUpperCase()) {\n      result +=\
    \ message[i].toLowerCase();\n    } else {\n      result += message[i].toUpperCase();\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxw70abvx.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxw70abvx.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const currentLetter = message[i];\n        if (currentLetter\
    \ === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentLetter.toUpperCase();\n\
    \        }\n        if (currentLetter === 'a') {\n            encodedMessage +=\
    \ 'c';\n        } else if (currentLetter === 'e') {\n            encodedMessage\
    \ += 'g';\n        } else if (currentLetter === 'i') {\n            encodedMessage\
    \ += 'k';\n        } else if (currentLetter === 'o') {\n            encodedMessage\
    \ += 'q';\n        } else if (currentLetter === 'u') {\n            encodedMessage\
    \ += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp53aqru_c.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp53aqru_c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  const vowels = 'aeiou';\n  for (let i = 0; i < message.length; i++) {\n   \
    \ const letter = message[i];\n    const isUpperCase = letter === letter.toUpperCase();\n\
    \    const lowerCaseLetter = letter.toLowerCase();\n    if (vowels.includes(lowerCaseLetter))\
    \ {\n      const index = alphabet.indexOf(lowerCaseLetter);\n      const newLetter\
    \ = alphabet[index + 2];\n      encodedMessage += isUpperCase ? newLetter.toUpperCase()\
    \ : newLetter;\n    } else {\n      encodedMessage += isUpperCase ? lowerCaseLetter.toUpperCase()\
    \ : lowerCaseLetter;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // 'cdefghijklmnopqrstuvwxyzab'\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // 'CDEFGHIJKLMNOPQRSTUVWXYZAB'\nconsole.log(encode('The quick brown fox jumps\
    \ over the lazy dog.')); // 'Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj.'\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg47z_kjq.ts(15,16): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659978087
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World!'));\nconsole.log(encode('I am a student at\
    \ Holberton'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj45k68tp.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj45k68tp.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD!

    i AcM Ac STUwDEgNT AcT hOqLBEgRTOqN

    '
  timestamp: 1659978087
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a' || char ===\
    \ 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result =\
    \ result.slice(0, result.length - 1) + 'c';\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') ===\
    \ 'hELLO wORLD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'BCDcFGHJKLMNOPQRSTUVWXYZa');\n\
    console.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'bcdCFGHJKLMNOPQRSTUVWXYZa');\n\
    console.log(encode('The quick brown fox jumps over the lazy dog') === 'tHE qCICK\
    \ bROWN fOX jUMPS oVER tHE lAZY dOG');\nconsole.log(encode('THE QUICK BROWN FOX\
    \ JUMPS OVER THE LAZY DOG') === 'tHE qCICK bROWN fOX jUMPS oVER tHE lAZY dOG');\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw33z0vm8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw33z0vm8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hcLLc wcRLD

    false

    false

    false

    false

    false

    '
  timestamp: 1659978087
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n        if (char === 'a') {\n    \
    \        result = result.slice(0, result.length - 1) + 'c';\n        } else if\
    \ (char === 'e') {\n            result = result.slice(0, result.length - 1) +\
    \ 'g';\n        } else if (char === 'i') {\n            result = result.slice(0,\
    \ result.length - 1) + 'k';\n        } else if (char === 'o') {\n            result\
    \ = result.slice(0, result.length - 1) + 'm';\n        } else if (char === 'u')\
    \ {\n            result = result.slice(0, result.length - 1) + 'o';\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(encode('Hello World!')); // Hlll\
    \ Ccckq!\nconsole.log(encode('Hello World!') === 'Hlll Ccckq!');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // cdefghijklmnopqrstuvwxyzb\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'cdefghijklmnopqrstuvwxyzb');\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpywuz5vpc.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpywuz5vpc.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hgLLm wmRLD!

    false

    cBCDgFGHkJKLMNmPQRSToVWXYZ

    false

    '
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char\
    \ = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n      \
    \  } else if (char === 'i') {\n            char = 'k';\n        } else if (char\
    \ === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n  \
    \          char = 'y';\n        }\n        encodedMessage += char;\n    }\n  \
    \  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\
    console.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(en\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi7r9beoc.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpi7r9beoc.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const letter\
    \ = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage\
    \ += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n\
    \        }\n        if (vowels.includes(letter)) {\n            const index =\
    \ vowels.indexOf(letter);\n            encodedMessage += vowels[(index + 2) %\
    \ vowels.length];\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOr\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxrda2165.ts(42,49): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpxrda2165.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpxrda2165.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"\
    Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!\"));\n\
    console.log(encode(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello\
    \ World!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!\"));\n\
    console.log(encode(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello\
    \ World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!\"\
    ));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\"\
    ));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!\"\
    ));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!\"\
    ));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"\
    Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqz08diix.ts(50,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqz08diix.ts(50,9): error TS1005: '','' expected.

    '
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let currentChar = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            encodedMessage += currentChar.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentChar.toUpperCase();\n        }\n   \
    \     if (currentChar === 'a') {\n            encodedMessage += 'c';\n       \
    \ } else if (currentChar === 'e') {\n            encodedMessage += 'g';\n    \
    \    } else if (currentChar === 'i') {\n            encodedMessage += 'k';\n \
    \       } else if (currentChar === 'o') {\n            encodedMessage += 'q';\n\
    \        } else if (currentChar === 'u') {\n            encodedMessage += 'w';\n\
    \        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO w\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5n4oau2c.ts(46,47): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp5n4oau2c.ts(47,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5n4oau2c.ts(47,9): error TS1005: '','' expected.

    '
  timestamp: 1659978087
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppcd0p_12.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppcd0p_12.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978085
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let i = 0;\
    \ i < message.length; i++) {\n        const letter = message[i];\n        const\
    \ index = alphabet.indexOf(letter.toLowerCase());\n        if (index === -1) {\n\
    \            encoded += letter;\n        } else if (vowels.includes(letter.toLowerCase()))\
    \ {\n            encoded += alphabet[(index + 2) % 26];\n        } else {\n  \
    \          encoded += alphabet[index].toUpperCase();\n        }\n    }\n    return\
    \ encoded;\n}\n\nconsole.log(encode('hello')); // jgnnq\nconsole.log(encode('HELLO'));\
    \ // JGNNQ\nconsole.log(encode('Hello World')); // Jgnnq Yqtnf\nconsole.log(encode('Hello\
    \ World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\n\
    console.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello\
    \ World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\n\
    console.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello\
    \ World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\n\
    console.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello\
    \ World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\n\
    console.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(en\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpedyc8mpd.ts(41,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpedyc8mpd.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1659978087
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let currentChar = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            encodedMessage += currentChar.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentChar.toUpperCase();\n        }\n   \
    \ }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World!\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa0hiu3w2.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa0hiu3w2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    '
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  for (let i = 0; i < message.length; i++) {\n    let currentChar = message[i];\n\
    \    if (vowels.includes(currentChar)) {\n      let index = vowels.indexOf(currentChar);\n\
    \      let newIndex = index + 2;\n      if (newIndex > 4) {\n        newIndex\
    \ = newIndex - 5;\n      }\n      encodedMessage += vowels[newIndex];\n    } else\
    \ if (currentChar === currentChar.toUpperCase()) {\n      encodedMessage += currentChar.toLowerCase();\n\
    \    } else {\n      encodedMessage += currentChar.toUpperCase();\n    }\n  }\n\
    \  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO'));\
    \ // 'jgnnq'\nconsole.log(encode('hello world')); // 'jgnnq yqtnf'\nconsole.log(encode('HELLO\
    \ WORLD')); // 'jgnnq yqtnf'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // 'cdefghijklmnopqrstuvwxyzab'\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // 'cdefghijklmnopqrstuvwxyzab'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZ'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'));\
    \ // 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZ\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplwclcv3d.ts(12,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO\
    \ wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\n\
    console.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello\
    \ World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc4q4i3bm.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpc4q4i3bm.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978071
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World\"));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpry33p6p5.js:58:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpry33p6p5.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    hELLO wORLD

    '
  timestamp: 1659978074
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        let isUpperCase = letter === letter.toUpperCase();\n        let isLowerCase\
    \ = letter === letter.toLowerCase();\n        if (isUpperCase) {\n           \
    \ let index = alphabet.indexOf(letter.toLowerCase());\n            encodedMessage\
    \ += alphabet[index + 2].toUpperCase();\n        } else if (isLowerCase) {\n \
    \           let index = alphabet.indexOf(letter);\n            encodedMessage\
    \ += alphabet[index + 2];\n        } else {\n            encodedMessage += letter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World')); // Jgnnq Yqtnf\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\n\
    console.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello\
    \ World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq\
    \ Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello\
    \ World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq\
    \ Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello\
    \ World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq\
    \ Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello\
    \ World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq\
    \ Yqtnf!?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1gq6_e6k.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1gq6_e6k.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'JgnnqBYqtnf

    JgnnqBYqtnfB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    JgnnqBYqtnfBB

    '
  timestamp: 1659978087
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encoded = '';\n    for (let i = 0; i < message.length; i++)\
    \ {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encoded += char.toLowerCase();\n        } else {\n          \
    \  encoded += char.toUpperCase();\n        }\n        if (char === 'a') {\n  \
    \          encoded += 'c';\n        } else if (char === 'e') {\n            encoded\
    \ += 'g';\n        } else if (char === 'i') {\n            encoded += 'k';\n \
    \       } else if (char === 'o') {\n            encoded += 'q';\n        } else\
    \ if (char === 'u') {\n            encoded += 'w';\n        }\n    }\n    return\
    \ encoded;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\n\
    console.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\
    \ World') === 'hELLO\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpquhuzk32.ts(47,45): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpquhuzk32.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpquhuzk32.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978088
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!') ===\
    \ 'hELLO wORLD!cgkkqkc');\nconsole.log(encode('This is a test') === 'tHIS IS A\
    \ TESTcgkkqkc');\nconsole.log(encode('This is a test'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeuebqdbp.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeuebqdbp.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD!

    false

    false

    tHIkS IkS Ac TEgST

    '
  timestamp: 1659978088
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!') ===\
    \ 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\n\
    console.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello\
    \ World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO\
    \ wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\n\
    console.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello\
    \ World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO\
    \ wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\n\
    console.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp71bv8pku.ts(43,26): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp71bv8pku.ts(44,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp71bv8pku.ts(44,9): error TS1005: '','' expected.

    '
  timestamp: 1659978088
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let result: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppcd0p_12.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppcd0p_12.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978085
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n        if (char ===\
    \ 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e')\
    \ {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n\
    \            encodedMessage += 'k';\n        } else if (char === 'o') {\n    \
    \        encodedMessage += 'q';\n        } else if (char === 'u') {\n        \
    \    encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\
    \nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello\
    \ World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?!')); // hELLO\
    \ wORLD!?!\nconsole.log(encode('Hello World!?!?')); // hELLO wORLD!?!?\nconsole.log(encode('Hello\
    \ World!?!?!')); // hELLO wORLD!?!?!\nconsole.log(encode('Hello World!?!?!?'));\
    \ // hELLO wORLD!?!?!?\nconsole.log(encode('Hello World!?!?!?!')); // hELLO wORLD!?!?!?!\n\
    console.log(encode('Hello World!?!?!?!?')); // hELLO wORLD!?!?!?!?\nconsole.log(encode('Hello\
    \ World!?!?!?!?!')); // hELLO wORLD!?!?!?!?!\nconsole.log(encode('Hello World!?!?!?!?!?'));\
    \ // hELLO wORLD!?!?!?!?!?\nconsole.log(encode('Hello World!?!?!?!?!?!')); //\
    \ hELLO wORLD!?!?!?!?!?!\nconsole.log(encode('Hello World!?!?!?!?!?!?')); // hELLO\
    \ wORLD!?!?!?!?!?!?\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3y60c10h.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3y60c10h.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hEgLLOq wOqRLD

    hEgLLOq wOqRLD!

    hEgLLOq wOqRLD!?!

    hEgLLOq wOqRLD!?!?

    hEgLLOq wOqRLD!?!?!

    hEgLLOq wOqRLD!?!?!?

    hEgLLOq wOqRLD!?!?!?!

    hEgLLOq wOqRLD!?!?!?!?

    hEgLLOq wOqRLD!?!?!?!?!

    hEgLLOq wOqRLD!?!?!?!?!?

    hEgLLOq wOqRLD!?!?!?!?!?!

    hEgLLOq wOqRLD!?!?!?!?!?!?

    '
  timestamp: 1659978088
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter =\
    \ message[i];\n        let currentLetterIndex = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let newLetterIndex = currentLetterIndex + 2;\n\
    \            if (newLetterIndex >= alphabet.length) {\n                newLetterIndex\
    \ -= alphabet.length;\n            }\n            let newLetter = alphabet[newLetterIndex];\n\
    \            if (currentLetter === currentLetter.toUpperCase()) {\n          \
    \      newLetter = newLetter.toUpperCase();\n            }\n            encodedMessage\
    \ += newLetter;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"\
    Hello\")); // Jgnnq\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); // cdefghijklmnopqrstuvwxyzab\n\
    console.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // CDEFGHIJKLMNOPQRSTUVWXYZAB\n\
    console.log(encode(\"The quick brown fox jumps over the lazy dog.\")); // Vjg\
    \ swkem dtqyp hqz lworu vjg ncba fqi.\nconsole.log(encode(\"THE QUICK BROWN FOX\
    \ JUMPS OVER THE LAZY DOG.\")); // VJG SWKEM DTQYP HQZ LWORU VJG NCBA FQI.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr4z7hype.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr4z7hype.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Jgnnq

    cdefghijklmnopqrstuvwxyzab

    CDEFGHIJKLMNOPQRSTUVWXYZAB

    Vjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.

    VJG SWKEM DTQYP HQZ LWORU QXGT VJG NCBA FQI.

    '
  timestamp: 1659978088
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"\
    Hello World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsb9w57gj.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsb9w57gj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD! hOW ARE YOU?

    '
  timestamp: 1659978088
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            encodedMessage += char.toLowerCase();\n        } else {\n   \
    \         encodedMessage += char.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"\
    Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"\
    Hello World!!!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps6y_c2qc.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps6y_c2qc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'hELLO

    hELLO wORLD

    hELLO wORLD!

    hELLO wORLD!!!

    '
  timestamp: 1659978088
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const char = message[i];\n    const isUpperCase = char === char.toUpperCase();\n\
    \    const isLowerCase = char === char.toLowerCase();\n    const isLetter = isUpperCase\
    \ || isLowerCase;\n    if (isLetter) {\n      const charCode = char.charCodeAt(0);\n\
    \      const isVowel = 'aeiou'.includes(char.toLowerCase());\n      if (isVowel)\
    \ {\n        const newCharCode = charCode + 2;\n        const newChar = String.fromCharCode(newCharCode);\n\
    \        encodedMessage += newChar;\n      } else {\n        const newCharCode\
    \ = charCode + 1;\n        const newChar = String.fromCharCode(newCharCode);\n\
    \        encodedMessage += newChar;\n      }\n    } else {\n      encodedMessage\
    \ += char;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello\
    \ World')); // 'Ifmmp Xpsme'\nconsole.log(encode('Hello World!')); // 'Ifmmp Xpsme!'\n\
    console.log(encode('Hello World!?')); // 'Ifmmp Xpsme!?'\nconsole.log(encode('Hello\
    \ World!?!')); // 'Ifmmp Xpsme!?!'\nconsole.log(encode('Hello World!?!?')); //\
    \ 'Ifmmp Xpsme!?!?'\nconsole.log(encode('Hello World!?!?!')); // 'Ifmmp Xpsme!?!?!'\n\
    console.log(encode('Hello World!?!?!?')); // 'Ifmmp Xpsme!?!?!?'\nconsole.log(encode('Hello\
    \ World!?!?!?!')); // 'Ifmmp Xpsme!?!?!?!'\nconsole.log(encode('Hello World!?!?!?!?'));\
    \ // 'Ifmmp Xpsme!?!?!?!?'\nconsole.log(encode('Hello World!?!?!?!?!')); // 'Ifmmp\
    \ Xpsme!?!?!?!?!'\nconsole.log(encode('Hello World!\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcgfpuyep.ts(43,33): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpcgfpuyep.ts(44,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpcgfpuyep.ts(44,9): error TS1005: '','' expected.

    '
  timestamp: 1659978088
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message: string):\
    \ string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const currentLetter\
    \ = message[i];\n        if (vowels.includes(currentLetter)) {\n            const\
    \ index = vowels.indexOf(currentLetter);\n            encodedMessage += vowels[(index\
    \ + 2) % vowels.length];\n        } else if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            encodedMessage += currentLetter.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n \
    \   }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); //\
    \ hELLO wORLD\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz'));\
    \ // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')\
    \ === 'cdefghijklmnopqrstuvwxyzab');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\
    \ // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\
    \ === 'CDEFGHIJKLMNOPQRSTUVWXYZAB');\nconsole.log(encode('The Quick Brown Fox\
    \ Jumps Over The Lazy Dog')); // vJNX fXOWM eBPXJ vJNX rNFSH rJ DYB\nconsole.log(encode('The\
    \ Quick Brown Fox Jumps Over The Lazy Dog') === 'vJNX fXOWM eBPXJ vJNX rNFSH rJ\
    \ DYB');\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvmt675wz.ts(12,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659978088
