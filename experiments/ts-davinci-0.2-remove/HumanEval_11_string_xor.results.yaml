language: ts
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings are not of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n  \
    \          result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings are not of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n  \
    \          result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] == b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings are not of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n  \
    \          result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    var result = '';\n    for (var i = 0; i <\
    \ a.length; i++) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings are not of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i])\
    \ ? \"0\" : \"1\";\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error('Strings must be of equal length');\n    }\n    let result = '';\n\
    \    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n    \
    \        result += '0';\n        } else {\n            result += '1';\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = \"\";\n  for (let i = 0; i < a.length;\
    \ i++) {\n    if (a[i] === b[i]) {\n      result += \"0\";\n    } else {\n   \
    \   result += \"1\";\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = '';\n  for (let i = 0; i < a.length;\
    \ i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n     \
    \ result += '1';\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error('Strings must be of equal length');\n    }\n    let result = '';\n\
    \    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i]) ?\
    \ '0' : '1';\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    const a_bytes = a.split('').map(x => parseInt(x,\
    \ 10));\n    const b_bytes = b.split('').map(x => parseInt(x, 10));\n    const\
    \ c_bytes = a_bytes.map((x, i) => x ^ b_bytes[i]);\n    return c_bytes.map(x =>\
    \ x.toString()).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = \"\";\n  for (let i = 0; i < a.length;\
    \ i++) {\n    result += a[i] === b[i] ? \"0\" : \"1\";\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977802
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings must be of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n  \
    \          result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error('Strings must be of equal length');\n    }\n    let result = '';\n\
    \    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n    \
    \        result += '0';\n        } else {\n            result += '1';\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error('Strings must be of equal length');\n    }\n    let result = '';\n\
    \    for (let i = 0; i < a.length; i++) {\n        result += a[i] === b[i] ? '0'\
    \ : '1';\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = '';\n  for (let i = 0; i < a.length;\
    \ i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n     \
    \ result += '1';\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = \"\";\n  for (let i = 0; i < a.length;\
    \ i++) {\n    if (a[i] === b[i]) {\n      result += \"0\";\n    } else {\n   \
    \   result += \"1\";\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = \"\";\n  for (let i = 0; i < a.length;\
    \ i++) {\n    if (a[i] === b[i]) {\n      result += \"0\";\n    } else {\n   \
    \   result += \"1\";\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings must be of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n  \
    \          result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = '';\n  for (let i = 0; i < a.length;\
    \ i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n     \
    \ result += '1';\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] == b[i]) ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let res = '';\n    for (let i = 0; i < a.length;\
    \ i++) {\n        res += a[i] === b[i] ? '0' : '1';\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Lengths of a and b must be equal\");\n    }\n    let result = \"\
    \";\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i])\
    \ ? \"0\" : \"1\";\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error('Strings must be of equal length');\n    }\n    let result = '';\n\
    \    for (let i = 0; i < a.length; i++) {\n        result += a[i] === b[i] ? '0'\
    \ : '1';\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    var res = \"\";\n    for (var i = 0; i < a.length;\
    \ i++) {\n        res += (a[i] === b[i]) ? \"0\" : \"1\";\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = '';\n  for (let i = 0; i < a.length;\
    \ i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n     \
    \ result += '1';\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += a[i] == b[i] ? '0' : '1';\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977804
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings must be of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i])\
    \ ? \"0\" : \"1\";\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977804
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    var result = '';\n    for (var i = 0; i <\
    \ a.length; i++) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n  let result = \"\";\n  for (let i = 0; i < a.length;\
    \ i++) {\n    if (a[i] === b[i]) {\n      result += \"0\";\n    } else {\n   \
    \   result += \"1\";\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings must be of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] === b[i] ?\
    \ \"0\" : \"1\";\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\"\
    );\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"\
    0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977804
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    if (a.length !== b.length) {\n        throw\
    \ new Error(\"Strings must be of equal length\");\n    }\n    let result = \"\"\
    ;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n  \
    \          result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n\
    \  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"\
    1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\"\
    );\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
    , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
    \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\"\
    ;\n        } else {\n            result += \"1\";\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 0
  program: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
    \ binary XOR on these inputs and return result also as a string.\nfunction string_xor(a:\
    \ string, b: string): string {\n    let result = \"\";\n    for (let i = 0; i\
    \ < a.length; i++) {\n        result += a[i] === b[i] ? \"0\" : \"1\";\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"\
    111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"\
    ),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977803
