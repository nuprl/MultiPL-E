{
  "language": "ts",
  "name": "HumanEval_155_even_odd_count",
  "results": [
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpezws_6jj.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let numString = num.toString();\n    for (let i = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpijm9brvs.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpspvil2cn.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let string = num.toString();\n  for (let i = 0; i < string.length; i++) {\n    if (Number(string[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpc_5ez82k.js:23:12)\n    at Object.<anonymous> (/tmp/tmpc_5ez82k.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n[ 4, 5 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp340aebnd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp340aebnd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4d92qrf7.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_7ulxe0s.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  let num_str = num.toString();\n  for (let i = 0; i < num_str.length; i++) {\n    if (num_str[i] % 2 === 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp52vn1ilt.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpkd49zep5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkd49zep5.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfdriri3t.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbflyxcyp.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(123456789));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpd4s1dv18.js:26:12)\n    at Object.<anonymous> (/tmp/tmpd4s1dv18.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n[ 4, 5 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp340aebnd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp340aebnd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (Number(str[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpob3427fr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpob3427fr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4d92qrf7.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpihcg9bz9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpihcg9bz9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmhe2mhrl.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let arr: number[] = num.toString().split(\"\").map(Number);\n  for (let i: number = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpgsb4wyr9.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgsb4wyr9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavny5vkm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(123456));\nconsole.log(even_odd_count(1234567));\nconsole.log(even_odd_count(12345678));\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmphjj0olld.js:27:12)\n    at Object.<anonymous> (/tmp/tmphjj0olld.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n[ 2, 3 ]\n[ 3, 3 ]\n[ 3, 4 ]\n[ 4, 4 ]\n[ 4, 5 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numArr = num.toString().split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqa2kv0j4.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even: number = 0;\n    let odd: number = 0;\n    let str: string = num.toString();\n    for (let i: number = 0; i < str.length; i++) {\n        if (Number(str[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpe4liva42.js:25:12)\n    at Object.<anonymous> (/tmp/tmpe4liva42.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp_7af7vm1.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_7af7vm1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpayfmuour.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even: number = 0;\n    let odd: number = 0;\n    let numString: string = num.toString();\n    for (let i: number = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpff1b2aut.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7_49r4us.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpqy27y6wa.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqy27y6wa.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpspvil2cn.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi_gnr2nm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi_gnr2nm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmhe2mhrl.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let arr: number[] = num.toString().split(\"\").map(Number);\n  for (let i: number = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(12345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp50a7wcrz.js:22:12)\n    at Object.<anonymous> (/tmp/tmp50a7wcrz.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavny5vkm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3r6daxoo.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpihcg9bz9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpihcg9bz9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even_count = 0;\n    let odd_count = 0;\n    let num_str = num.toString();\n    for (let i = 0; i < num_str.length; i++) {\n        if (parseInt(num_str[i]) % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpwfmy4xm2.js:25:12)\n    at Object.<anonymous> (/tmp/tmpwfmy4xm2.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx_n0inub.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxvykhuqp.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp2algrj7b.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2algrj7b.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyrhtpsf4.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpihcg9bz9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpihcg9bz9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even: number = 0;\n    let odd: number = 0;\n    let numString: string = num.toString();\n    for (let i: number = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\nconsole.log(even_odd_count(12345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbccggm6d.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_c3j6nru.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let numString = num.toString();\n    for (let i = 0; i < numString.length; i++) {\n        if (parseInt(numString[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmplg8u57ew.js:25:12)\n    at Object.<anonymous> (/tmp/tmplg8u57ew.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even: number = 0;\n    let odd: number = 0;\n    let str: string = num.toString();\n    for (let i: number = 0; i < str.length; i++) {\n        if (Number(str[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp26txjl_v.js:24:12)\n    at Object.<anonymous> (/tmp/tmp26txjl_v.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpihcg9bz9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpihcg9bz9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  let str_num = num.toString();\n  for (let i = 0; i < str_num.length; i++) {\n    if (Number(str_num[i]) % 2 === 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpqufm8bqw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpqufm8bqw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3r6daxoo.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numArr = num.toString().split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(12345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo9010gip.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpspvil2cn.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpd2almi_e.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd2almi_e.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmhe2mhrl.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (parseInt(str[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp88_yewkp.js:21:12)\n    at Object.<anonymous> (/tmp/tmp88_yewkp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (parseInt(str[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp6vx823jm.js:25:12)\n    at Object.<anonymous> (/tmp/tmp6vx823jm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let numArr = num.toString().split('');\n    for (let i = 0; i < numArr.length; i++) {\n        if (parseInt(numArr[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpv9ci6xpc.js:25:12)\n    at Object.<anonymous> (/tmp/tmpv9ci6xpc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp556lj9l3.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let strNum = num.toString();\n  for (let i = 0; i < strNum.length; i++) {\n    if (parseInt(strNum[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp_pfz_a6z.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_pfz_a6z.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavny5vkm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpihcg9bz9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpihcg9bz9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  let num_string = num.toString();\n  for (let i = 0; i < num_string.length; i++) {\n    if (num_string[i] % 2 === 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplup97yha.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpspvil2cn.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4d92qrf7.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp14mfz28x.js:21:12)\n    at Object.<anonymous> (/tmp/tmp14mfz28x.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333622
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpkv2loqf4.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkv2loqf4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpd2almi_e.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd2almi_e.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9cmaduca.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpyztt9knm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpyztt9knm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n[ 4, 5 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpv_v2afmw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpv_v2afmw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even: number = 0;\n    let odd: number = 0;\n    let numString: string = num.toString();\n    for (let i: number = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5_lck_l7.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp340aebnd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp340aebnd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavny5vkm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpy5jlj9ik.js:25:12)\n    at Object.<anonymous> (/tmp/tmpy5jlj9ik.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n    let numString = num.toString();\n    for (let i = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpckbdwfvh.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3r6daxoo.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let str: string = num.toString();\n  for (let i: number = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpkr7qmeka.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkr7qmeka.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let numString = num.toString();\n    for (let i = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpijm9brvs.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (parseInt(str[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\nconsole.log(even_odd_count(12345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpvwuofj1j.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvwuofj1j.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxvykhuqp.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n    let numString = num.toString();\n    for (let i = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpckbdwfvh.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpv_v2afmw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpv_v2afmw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpv_v2afmw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpv_v2afmw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let arr = num.toString().split('');\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp953alekr.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even_count = 0;\n    let odd_count = 0;\n    let num_str = num.toString();\n    for (let i = 0; i < num_str.length; i++) {\n        if (num_str[i] % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpps5ucdln.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numArr = num.toString().split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcdoeiji4.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let arr: number[] = num.toString().split(\"\").map(Number);\n  for (let i: number = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(12345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp50a7wcrz.js:22:12)\n    at Object.<anonymous> (/tmp/tmp50a7wcrz.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavny5vkm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let arr = num.toString().split('');\n    arr.forEach(element => {\n        if (parseInt(element) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    });\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpulsah3zz.js:25:12)\n    at Object.<anonymous> (/tmp/tmpulsah3zz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp2h6s999w.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2h6s999w.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyrhtpsf4.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let numString = num.toString();\n    for (let i = 0; i < numString.length; i++) {\n        if (Number(numString[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpv5ukvso2.js:22:12)\n    at Object.<anonymous> (/tmp/tmpv5ukvso2.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let str: string = num.toString();\n  for (let i: number = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp081ngdgm.js:25:12)\n    at Object.<anonymous> (/tmp/tmp081ngdgm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpcipzlhgr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpcipzlhgr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp_l5r9mn9.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_l5r9mn9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp_7af7vm1.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_7af7vm1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\nconsole.log(even_odd_count(12345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp2zbhmz5d.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2zbhmz5d.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavny5vkm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(2));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkyefd7f1.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi_gnr2nm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(2345));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps5cqmoks.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp3a83evec.js:22:12)\n    at Object.<anonymous> (/tmp/tmp3a83evec.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpihcg9bz9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpihcg9bz9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp340aebnd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp340aebnd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_7ulxe0s.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpz_hntbws.js:24:12)\n    at Object.<anonymous> (/tmp/tmpz_hntbws.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(2));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkyefd7f1.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3r6daxoo.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(3456));\nconsole.log(even_odd_count(4567));\nconsole.log(even_odd_count(5678));\nconsole.log(even_odd_count(6789));\nconsole.log(even_odd_count(7890));\nconsole.log(even_odd_count(8901));\nconsole.log(even_odd_count(9012));\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(3456));\nconsole.log(even_odd_count(4567));\nconsole.log(even_odd_count(5678));\nconsole.log(even_odd_count(6789));\nconsole.log(even_odd_count(7890));\nconsole.log(even_odd_count(8901));\nconsole.log(even_odd_count(9012));\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(3456));\nconsole.log(even_odd_count(4567));\nconsole.log(even_odd_count(5678));\nconsole.log(even_odd_count(6789));\nconsole.log(even_odd_count(7890));\nconsole.log(even_odd_count(8901));\nconsole.log(even_odd_count(9012));\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(2345));\nconsole.log(even_odd_count(3456));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuhgrufse.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprdqr8z0_.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpcipzlhgr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpcipzlhgr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpihcg9bz9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpihcg9bz9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n    let numString = num.toString();\n    for (let i = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3cax57hv.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqi9dbibv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpspvil2cn.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpposlqq25.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqd541_gi.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numArr = num.toString().split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    if (parseInt(numArr[i]) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpl88mps8i.js:24:12)\n    at Object.<anonymous> (/tmp/tmpl88mps8i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi_gnr2nm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (parseInt(numString[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpihcg9bz9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpihcg9bz9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpkd49zep5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkd49zep5.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt25is8n9.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (parseInt(arr[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpf79q4xjy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpf79q4xjy.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even_count = 0;\n    let odd_count = 0;\n    let num_str = num.toString();\n    for (let i = 0; i < num_str.length; i++) {\n        if (parseInt(num_str[i]) % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(2));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmprfwm25r_.js:26:12)\n    at Object.<anonymous> (/tmp/tmprfwm25r_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (parseInt(arr[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpkeqaqha3.js:25:12)\n    at Object.<anonymous> (/tmp/tmpkeqaqha3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n    let numStr = num.toString();\n    for (let i = 0; i < numStr.length; i++) {\n        if (parseInt(numStr[i]) % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp7mup1k8q.js:25:12)\n    at Object.<anonymous> (/tmp/tmp7mup1k8q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavny5vkm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let string = num.toString();\n  for (let i = 0; i < string.length; i++) {\n    if (parseInt(string[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpf7r54x2u.js:25:12)\n    at Object.<anonymous> (/tmp/tmpf7r54x2u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (parseInt(str[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp3jqfsgql.js:22:12)\n    at Object.<anonymous> (/tmp/tmp3jqfsgql.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let arr = num.toString().split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfdriri3t.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9cmaduca.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let string = num.toString();\n  for (let i = 0; i < string.length; i++) {\n    if (Number(string[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpmvndrn7_.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmvndrn7_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(2));\nconsole.log(even_odd_count(1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjjac190o.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let strNum = num.toString();\n  for (let i = 0; i < strNum.length; i++) {\n    if (strNum[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdkgcxp0y.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpef6uodel.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi_gnr2nm.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwdb3cq_e.ts(8,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0iynivlv.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_7ulxe0s.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_7ulxe0s.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even_count = 0;\n    let odd_count = 0;\n    let num_str = num.toString();\n    for (let i = 0; i < num_str.length; i++) {\n        if (parseInt(num_str[i]) % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(2));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmprfwm25r_.js:26:12)\n    at Object.<anonymous> (/tmp/tmprfwm25r_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evens = 0;\n  let odds = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evens++;\n    } else {\n      odds++;\n    }\n  }\n  return [evens, odds];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfputmt1z.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let even: number = 0;\n    let odd: number = 0;\n    let str: string = num.toString();\n    for (let i: number = 0; i < str.length; i++) {\n        if (parseInt(str[i]) % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpqes_kukj.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqes_kukj.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzuer6yqz.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (Number(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpd2almi_e.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd2almi_e.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  let num_string = num.toString();\n  for (let i = 0; i < num_string.length; i++) {\n    if (num_string[i] % 2 === 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345)); // [2, 3]\nconsole.log(even_odd_count(2468)); // [4, 0]\nconsole.log(even_odd_count(1357)); // [0, 3]\nconsole.log(even_odd_count(0)); // [1, 0]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1p44xq1e.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpspvil2cn.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxutymyov.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  let num_str = num.toString();\n  for (let i = 0; i < num_str.length; i++) {\n    if (num_str[i] % 2 === 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwdri8bj6.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxutymyov.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let string = num.toString();\n  for (let i = 0; i < string.length; i++) {\n    if (parseInt(string[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpf7r54x2u.js:25:12)\n    at Object.<anonymous> (/tmp/tmpf7r54x2u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpayfmuour.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpkd49zep5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkd49zep5.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpkd49zep5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkd49zep5.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n",
      "timestamp": 1660333616
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_7ulxe0s.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(1234));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz99pp9t0.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_7ulxe0s.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even = 0;\n  let odd = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpii1gp5eu.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n    let numString = num.toString();\n    for (let i = 0; i < numString.length; i++) {\n        let digit = parseInt(numString[i]);\n        if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n\nconsole.log(even_odd_count(1234));\nconsole.log(even_odd_count(2345));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpfkocl3ho.js:24:12)\n    at Object.<anonymous> (/tmp/tmpfkocl3ho.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 2 ]\n[ 2, 2 ]\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  let num_str = num.toString();\n  for (let i = 0; i < num_str.length; i++) {\n    if (parseInt(num_str[i]) % 2 === 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp309xhjbw.js:25:12)\n    at Object.<anonymous> (/tmp/tmp309xhjbw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even_count = 0;\n  let odd_count = 0;\n  let num_string = num.toString();\n  for (let i = 0; i < num_string.length; i++) {\n    if (parseInt(num_string[i]) % 2 === 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count, odd_count];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmpkowwueb0.js:25:12)\n    at Object.<anonymous> (/tmp/tmpkowwueb0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let numString: string = num.toString();\n  for (let i: number = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(123456789));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpspvil2cn.ts(8,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\nfunction even_odd_count(num: number): [number, number] {\n  let even: number = 0;\n  let odd: number = 0;\n  let str: string = num.toString();\n  for (let i: number = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_count(12345));\nconsole.log(even_odd_count(2468));\nconsole.log(even_odd_count(1357));\nconsole.log(even_odd_count(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1\n]\n    at test (/tmp/tmp081ngdgm.js:25:12)\n    at Object.<anonymous> (/tmp/tmp081ngdgm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 2, 3 ]\n[ 4, 0 ]\n[ 0, 4 ]\n[ 1, 0 ]\n",
      "timestamp": 1660333623
    }
  ]
}