{
  "language": "ts",
  "name": "HumanEval_36_fizz_buzz",
  "results": [
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(158));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(420));\nconsole.log(fizz_buzz(917));\nconsole.log(fizz_buzz(1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n14\n44\n47\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i + \"\").split(\"\").filter(x => x === \"7\").length;\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(100));\nconsole.log(fizz_buzz(200));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpo6itcgxr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpo6itcgxr.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "2\n5\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count: number = 0;\n    for (let i: number = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num: number = i;\n            while (num > 0) {\n                if (num % 10 === 7) {\n                    count++;\n                }\n                num = Math.floor(num / 10);\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n            for (let j = 0; j < str.length; j++) {\n                if (str[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n47\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(15));\nconsole.log(fizz_buzz(150));\nconsole.log(fizz_buzz(5000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n4\n239\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            const str = i.toString();\n            for (let j = 0; j < str.length; j++) {\n                if (str[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i + \"\").split(\"\").filter(x => x === \"7\").length;\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnvtqed2a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnvtqed2a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(407));\nconsole.log(fizz_buzz(501));\nconsole.log(fizz_buzz(617));\nconsole.log(fizz_buzz(647));\nconsole.log(fizz_buzz(1008));\nconsole.log(fizz_buzz(1022));\nconsole.log(fizz_buzz(1373));\nconsole.log(fizz_buzz(1999));\nconsole.log(fizz_buzz(7071));\nconsole.log(fizz_buzz(7270));\nconsole.log(fizz_buzz(7770));\nconsole.log(fizz_buzz(10000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n13\n15\n18\n20\n47\n47\n58\n95\n345\n386\n491\n639\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(fizz_buzz(17));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            count += (i + '').split('').filter(x => x === '7').length;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(1000));\nconsole.log(fizz_buzz(1000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "47\n96504\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(420));\nconsole.log(fizz_buzz(580));\nconsole.log(fizz_buzz(600));\nconsole.log(fizz_buzz(660));\nconsole.log(fizz_buzz(910));\nconsole.log(fizz_buzz(1000));\nconsole.log(fizz_buzz(10000));\nconsole.log(fizz_buzz(100000));\nconsole.log(fizz_buzz(1000000));\nconsole.log(fizz_buzz(10000000));\nconsole.log(fizz_buzz(100000000));\nconsole.log(fizz_buzz(1000000000));\nconsole.log(fizz_buzz(10000000000));\nconsole.log(fizz_buzz(100000000000));\nconsole.log(fizz_buzz(1000000000000));\nconsole.log(fizz_buzz(10000000000000));\nconsole.log(fizz_buzz(100000000000000));\nconsole.log(fizz_buzz(1000000000000000));\nconsole.log(fizz_buzz(10000000000000000));\nconsole.log(fizz_buzz(100000000000000000));\nconsole.log(fizz_buzz(1000000000000000000));\nconsole.log(f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd39bue7v.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpd39bue7v.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnvtqed2a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnvtqed2a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(407));\nconsole.log(fizz_buzz(501));\nconsole.log(fizz_buzz(617));\nconsole.log(fizz_buzz(713));\nconsole.log(fizz_buzz(717));\nconsole.log(fizz_buzz(721));\nconsole.log(fizz_buzz(731));\nconsole.log(fizz_buzz(806));\nconsole.log(fizz_buzz(811));\nconsole.log(fizz_buzz(871));\nconsole.log(fizz_buzz(1001));\nconsole.log(fizz_buzz(1017));\nconsole.log(fizz_buzz(1317));\nconsole.log(fizz_buzz(1777));\nconsole.log(fizz_buzz(1871));\nconsole.log(fizz_buzz(1907));\nconsole.log(fizz_buzz(1917));\nconsole.log(fizz_buzz(1937));\nconsole.log(fizz_buzz(1977));\nconsole.log(fizz_buzz(2137));\nconsole.log(fizz_buzz(2237));\nconsole.log(fizz_buzz(2377));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n13\n15\n18\n24\n25\n25\n27\n41\n41\n42\n47\n47\n58\n84\n91\n92\n92\n92\n95\n98\n102\n107\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(143));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(4777));\nconsole.log(fizz_buzz(7077));\nconsole.log(fizz_buzz(7770));\nconsole.log(fizz_buzz(1337));\nconsole.log(fizz_buzz(7331));\nconsole.log(fizz_buzz(10000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n227\n349\n491\n58\n396\n639\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(300));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n10\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(500));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n15\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp64pu43ao.js:19:12)\n    at Object.<anonymous> (/tmp/tmp64pu43ao.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(143));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(1000));\nconsole.log(fizz_buzz(8));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "47\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpp_5elave.js:17:12)\n    at Object.<anonymous> (/tmp/tmpp_5elave.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(143));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpd4jbu4v2.js:24:12)\n    at Object.<anonymous> (/tmp/tmpd4jbu4v2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n0\n0\n0\n0\n3\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            if (num.includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpi32bwky0.js:20:12)\n    at Object.<anonymous> (/tmp/tmpi32bwky0.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpp_5elave.js:17:12)\n    at Object.<anonymous> (/tmp/tmpp_5elave.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(143));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n            for (let j = 0; j < str.length; j++) {\n                if (str[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnvtqed2a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnvtqed2a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(100));\nconsole.log(fizz_buzz(1000));\nconsole.log(fizz_buzz(10000));\nconsole.log(fizz_buzz(100000));\nconsole.log(fizz_buzz(1000000));\nconsole.log(fizz_buzz(10000000));\nconsole.log(fizz_buzz(100000000));\nconsole.log(fizz_buzz(1000000000));\nconsole.log(fizz_buzz(10000000000));\nconsole.log(fizz_buzz(100000000000));\nconsole.log(fizz_buzz(1000000000000));\nconsole.log(fizz_buzz(10000000000000));\nconsole.log(fizz_buzz(100000000000000));\nconsole.log(fizz_buzz(1000000000000000));\nconsole.log(fizz_buzz(10000000000000000));\nconsole.log(fizz_buzz(100000000000000000));\nconsole.log(fizz_buzz(1000000000000000000));\nconsole.log(fizz_buzz(10000000000000000000));\nconsole.log(fizz_buzz(100000000000000000000));\nconsole.log(fizz_buzz(1000000000000000000000));\nconsole.log(fizz_buzz(10000000000000000000000));\nconsole.log(fizz_buzz(100000000000000000000000));\nconsole.log(fizz_buzz(1000000000000000000000000));\nconsole.log(fizz_buzz(10000000000000000000000000));\nconsole.log(fizz_buzz(100000000000000000000000000));\nconsole.log(fizz_buzz(1000000000000000000000000000));\nconsole.log(fizz_buzz(10000000000000000000000000000));\nconsole.log(fizz_buzz(100000000000000000000000000000));\nconsole.log(fizz_buzz(1000000000000000000000000000000));\nconsole.log(f\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiptcfpko.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpiptcfpko.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(100));\nconsole.log(fizz_buzz(200));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "3\n6\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(143));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(143));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(100));\nconsole.log(fizz_buzz(200));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpdf6iz08m.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdf6iz08m.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "2\n5\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(300));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n10\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(333));\nconsole.log(fizz_buzz(343));\nconsole.log(fizz_buzz(1001));\nconsole.log(fizz_buzz(1333));\nconsole.log(fizz_buzz(5000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n10\n47\n58\n239\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n            for (let j = 0; j < str.length; j++) {\n                if (str[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(15));\nconsole.log(fizz_buzz(150));\nconsole.log(fizz_buzz(5000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n4\n239\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnvtqed2a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnvtqed2a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(158));\nconsole.log(fizz_buzz(360));\nconsole.log(fizz_buzz(408));\nconsole.log(fizz_buzz(480));\nconsole.log(fizz_buzz(512));\nconsole.log(fizz_buzz(600));\nconsole.log(fizz_buzz(660));\nconsole.log(fizz_buzz(672));\nconsole.log(fizz_buzz(700));\nconsole.log(fizz_buzz(714));\nconsole.log(fizz_buzz(721));\nconsole.log(fizz_buzz(728));\nconsole.log(fizz_buzz(735));\nconsole.log(fizz_buzz(742));\nconsole.log(fizz_buzz(749));\nconsole.log(fizz_buzz(756));\nconsole.log(fizz_buzz(763));\nconsole.log(fizz_buzz(770));\nconsole.log(fizz_buzz(777));\nconsole.log(fizz_buzz(784));\nconsole.log(fizz_buzz(791));\nconsole.log(fizz_buzz(798));\nconsole.log(fizz_buzz(805));\nconsole.log(fizz_buzz(812));\nconsole.log(fizz_buzz(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmperkay1e1.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpozrclppe.js:22:12)\n    at Object.<anonymous> (/tmp/tmpozrclppe.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n0\n0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(4777));\nconsole.log(fizz_buzz(7077));\nconsole.log(fizz_buzz(7770));\nconsole.log(fizz_buzz(77770));\nconsole.log(fizz_buzz(777777));\nconsole.log(fizz_buzz(7777777));\nconsole.log(fizz_buzz(77777777));\nconsole.log(fizz_buzz(777777777));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n227\n349\n491\n6227\n75033\n875667\n10007789\n112587432\n",
      "timestamp": 1660334157
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(143));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(158));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(420));\nconsole.log(fizz_buzz(427));\nconsole.log(fizz_buzz(1113));\nconsole.log(fizz_buzz(1131));\nconsole.log(fizz_buzz(2001));\nconsole.log(fizz_buzz(2770));\nconsole.log(fizz_buzz(3003));\nconsole.log(fizz_buzz(3007));\nconsole.log(fizz_buzz(4201));\nconsole.log(fizz_buzz(4441));\nconsole.log(fizz_buzz(4931));\nconsole.log(fizz_buzz(4987));\nconsole.log(fizz_buzz(7001));\nconsole.log(fizz_buzz(7331));\nconsole.log(fizz_buzz(8008));\nconsole.log(fizz_buzz(8408));\nconsole.log(fizz_buzz(9001));\nconsole.log(fizz_buzz(9703));\nconsole.log(fizz_buzz(9871));\nconsole.log(fizz_buzz(9901));\nconsole.log(fizz_buzz(9907));\nconsole.log(fizz_buzz(99\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7mhfh9og.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp7mhfh9og.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334143
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i + \"\").split(\"\").filter(x => x === \"7\").length;\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnyejtgpe.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnyejtgpe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334143
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp64pu43ao.js:19:12)\n    at Object.<anonymous> (/tmp/tmp64pu43ao.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(4777));\nconsole.log(fizz_buzz(7077));\nconsole.log(fizz_buzz(7770));\nconsole.log(fizz_buzz(13037));\nconsole.log(fizz_buzz(37037));\nconsole.log(fizz_buzz(47770));\nconsole.log(fizz_buzz(70770));\nconsole.log(fizz_buzz(77701));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n227\n349\n491\n784\n2259\n3053\n4643\n6189\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(1000));\nconsole.log(fizz_buzz(1000000));\nconsole.log(fizz_buzz(10000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "47\n96504\n1125880\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i + \"\").split(\"\").filter(x => x === \"7\").length;\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(407));\nconsole.log(fizz_buzz(460));\nconsole.log(fizz_buzz(630));\nconsole.log(fizz_buzz(1007));\nconsole.log(fizz_buzz(1330));\nconsole.log(fizz_buzz(2013));\nconsole.log(fizz_buzz(2113));\nconsole.log(fizz_buzz(2470));\nconsole.log(fizz_buzz(2730));\nconsole.log(fizz_buzz(3270));\nconsole.log(fizz_buzz(3570));\nconsole.log(fizz_buzz(4770));\nconsole.log(fizz_buzz(5030));\nconsole.log(fizz_buzz(5130));\nconsole.log(fizz_buzz(6370));\nconsole.log(fizz_buzz(7270));\nconsole.log(fizz_buzz(7770));\nconsole.log(fizz_buzz(10070));\nconsole.log(fizz_buzz(11370));\nconsole.log(fizz_buzz(12730));\nconsole.log(fizz_buzz(13770));\nconsole.log(fizz_buzz(20030));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n13\n14\n19\n47\n58\n95\n98\n110\n123\n151\n160\n223\n240\n243\n299\n386\n491\n639\n697\n765\n820\n1281\n",
      "timestamp": 1660334143
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(158));\nconsole.log(fizz_buzz(811));\nconsole.log(fizz_buzz(821));\nconsole.log(fizz_buzz(831));\nconsole.log(fizz_buzz(841));\nconsole.log(fizz_buzz(851));\nconsole.log(fizz_buzz(861));\nconsole.log(fizz_buzz(871));\nconsole.log(fizz_buzz(881));\nconsole.log(fizz_buzz(891));\nconsole.log(fizz_buzz(901));\nconsole.log(fizz_buzz(911));\nconsole.log(fizz_buzz(921));\nconsole.log(fizz_buzz(931));\nconsole.log(fizz_buzz(941));\nconsole.log(fizz_buzz(951));\nconsole.log(fizz_buzz(961));\nconsole.log(fizz_buzz(971));\nconsole.log(fizz_buzz(981));\nconsole.log(fizz_buzz(991));\nconsole.log(fizz_buzz(1001));\nconsole.log(fizz_buzz(1011));\nconsole.log(fizz_buzz(1021));\nconsole.log(fizz_buzz(10\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcw1voh9k.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpcw1voh9k.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334143
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpp_5elave.js:17:12)\n    at Object.<anonymous> (/tmp/tmpp_5elave.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnyejtgpe.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnyejtgpe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334143
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnvtqed2a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnvtqed2a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString().split('');\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(15));\nconsole.log(fizz_buzz(150));\nconsole.log(fizz_buzz(5000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n4\n239\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnvtqed2a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnvtqed2a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let str = i.toString();\n            for (let j = 0; j < str.length; j++) {\n                if (str[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6mmvvlsu.js:17:12)\n    at Object.<anonymous> (/tmp/tmp6mmvvlsu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334144
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString().split('');\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            count += i.toString().split('').filter(x => x === '7').length;\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n3\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(407));\nconsole.log(fizz_buzz(460));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n13\n14\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(407));\nconsole.log(fizz_buzz(460));\nconsole.log(fizz_buzz(630));\nconsole.log(fizz_buzz(1007));\nconsole.log(fizz_buzz(1330));\nconsole.log(fizz_buzz(2013));\nconsole.log(fizz_buzz(2113));\nconsole.log(fizz_buzz(2470));\nconsole.log(fizz_buzz(2730));\nconsole.log(fizz_buzz(3270));\nconsole.log(fizz_buzz(3570));\nconsole.log(fizz_buzz(4770));\nconsole.log(fizz_buzz(5030));\nconsole.log(fizz_buzz(5130));\nconsole.log(fizz_buzz(6370));\nconsole.log(fizz_buzz(7270));\nconsole.log(fizz_buzz(7570));\nconsole.log(fizz_buzz(8270));\nconsole.log(fizz_buzz(8570));\nconsole.log(fizz_buzz(9770));\nconsole.log(fizz_buzz(10030));\nconsole.log(fizz_buzz(10130));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n13\n14\n19\n47\n58\n95\n98\n110\n123\n151\n160\n223\n240\n243\n299\n386\n444\n552\n562\n627\n639\n643\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(158));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(420));\nconsole.log(fizz_buzz(917));\nconsole.log(fizz_buzz(1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n14\n44\n47\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            count += (i + '').split('').filter(x => x === '7').length;\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(407));\nconsole.log(fizz_buzz(460));\nconsole.log(fizz_buzz(630));\nconsole.log(fizz_buzz(1007));\nconsole.log(fizz_buzz(1330));\nconsole.log(fizz_buzz(2013));\nconsole.log(fizz_buzz(2113));\nconsole.log(fizz_buzz(2470));\nconsole.log(fizz_buzz(2730));\nconsole.log(fizz_buzz(3270));\nconsole.log(fizz_buzz(3570));\nconsole.log(fizz_buzz(4770));\nconsole.log(fizz_buzz(5030));\nconsole.log(fizz_buzz(5130));\nconsole.log(fizz_buzz(5370));\nconsole.log(fizz_buzz(5770));\nconsole.log(fizz_buzz(6270));\nconsole.log(fizz_buzz(6370));\nconsole.log(fizz_buzz(6770));\nconsole.log(fizz_buzz(6930));\nconsole.log(fizz_buzz(7270));\nconsole.log(fizz_buzz(7570));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n13\n14\n19\n47\n58\n95\n98\n110\n123\n151\n160\n223\n240\n243\n251\n271\n295\n299\n320\n333\n386\n444\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += i.toString().split(\"\").filter(x => x === \"7\").length;\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(105));\nconsole.log(fizz_buzz(300));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n3\n10\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count: number = 0;\n    for (let i: number = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num: string = i.toString();\n            for (let j: number = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnvtqed2a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnvtqed2a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const num = i.toString();\n      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(143));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += i.toString().split(\"\").filter(x => x === \"7\").length;\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      result += i.toString().split(\"\").filter(x => x === \"7\").length;\n    }\n  }\n  return result;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (i.toString().includes(\"7\")) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnvtqed2a.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnvtqed2a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334137
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp64pu43ao.js:19:12)\n    at Object.<anonymous> (/tmp/tmp64pu43ao.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            count += (i + '').split('').filter(x => x === '7').length;\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334144
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i + \"\").split(\"\").filter(num => num === \"7\").length;\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334145
    },
    {
      "exit_code": -1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\nconsole.log(fizz_buzz(47));\nconsole.log(fizz_buzz(70));\nconsole.log(fizz_buzz(77));\nconsole.log(fizz_buzz(130));\nconsole.log(fizz_buzz(370));\nconsole.log(fizz_buzz(407));\nconsole.log(fizz_buzz(460));\nconsole.log(fizz_buzz(630));\nconsole.log(fizz_buzz(1007));\nconsole.log(fizz_buzz(1337));\nconsole.log(fizz_buzz(7000));\nconsole.log(fizz_buzz(7001));\nconsole.log(fizz_buzz(7070));\nconsole.log(fizz_buzz(7700));\nconsole.log(fizz_buzz(7770));\nconsole.log(fizz_buzz(10000));\nconsole.log(fizz_buzz(100000));\nconsole.log(fizz_buzz(1000000));\nconsole.log(fizz_buzz(10000000));\nconsole.log(fizz_buzz(100000000));\nconsole.log(fizz_buzz(1000000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "0\n0\n0\n0\n0\n0\n4\n10\n13\n14\n19\n47\n58\n334\n334\n345\n469\n491\n639\n8026\n96504\n1125880\n12867136\n",
      "timestamp": 1660334162
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(30));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n0\n",
      "timestamp": 1660334140
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt9iqybsc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt9iqybsc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    },
    {
      "exit_code": 0,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let num = i.toString();\n            for (let j = 0; j < num.length; j++) {\n                if (num[j] === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n",
      "timestamp": 1660334136
    }
  ]
}