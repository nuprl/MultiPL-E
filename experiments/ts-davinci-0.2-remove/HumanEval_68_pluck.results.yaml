language: ts
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2gllzpc6.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2gllzpc6.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \    if (arr.length === 0) {\n        return [];\n    }\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  const minEven = Math.min(...evens);\n  const minEvenIndex = arr.indexOf(minEven);\n\
    \  return [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven: number = Infinity;\n  let minEvenIndex: number = -1;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven)\
    \ {\n      minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex\
    \ === -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven: number = Infinity;\n  let minEvenIndex: number = Infinity;\n \
    \ let minEvenFound: boolean = false;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0) {\n      if (arr[i] < minEven) {\n        minEven =\
    \ arr[i];\n        minEvenIndex = i;\n        minEvenFound = true;\n      }\n\
    \    }\n  }\n  if (minEvenFound) {\n    return [minEven, minEvenIndex];\n  } else\
    \ {\n    return [];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // [2, 1]\nconsole.log(pluck([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvh8g1f0w.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvh8g1f0w.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1660014591
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxjq7pe7f.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014591
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9, 11]));\
    \ // []\nconsole.log(pluck([2, 4, 6, 8, 10])); // [2, 0]\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\nconsole.log(pluck([0, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  let minFound = false;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n      minFound = true;\n\
    \    }\n  }\n  return minFound ? [min, minIndex] : [];\n}\n\nexport default pluck;\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11])); // []\nconsole.log(pluck([2, 4, 6, 8, 10])); // [2, 0]\n\
    console.log(pluck([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])); // [0, 0]\nconsole.log(pluck([]));\
    \ // []\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = -1;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num\
    \ % 2 === 0 && num < min) {\n      min = num;\n      minIndex = i;\n    }\n  }\n\
    \  if (minIndex === -1) return [];\n  return [min, minIndex];\n}\n\nexport default\
    \ pluck;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let smallestEven = Infinity;\n  let smallestEvenIndex\
    \ = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex\
    \ = i;\n    }\n  }\n  if (smallestEven === Infinity) return [];\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014591
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  let minFound = false;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n      minFound = true;\n\
    \    }\n  }\n  return minFound ? [min, minIndex] : [];\n}\n\nconsole.log(pluck([]));\
    \ // []\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pluck([\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdquwivx5.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660014591
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] :\
    \ [min, minIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6qtgn4z8.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014591
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) {\n\
    \    return [];\n  }\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n\
    \      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex === -1 ? [] : [minEven,\
    \ minEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxjq7pe7f.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) {\n\
    \    return [];\n  }\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16])); // [2, 1]\nconsole.log(pluck([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // [\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    '
  timestamp: 1660014592
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([]));\
    \ // []\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pl\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzd4pgrm_.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzd4pgrm_.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = Infinity;\n\
    \  let found = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 === 0) {\n      found = true;\n      if (arr[i] < min) {\n        min =\
    \ arr[i];\n        minIndex = i;\n      } else if (arr[i] === min) {\n       \
    \ minIndex = Math.min(minIndex, i);\n      }\n    }\n  }\n  if (!found) return\
    \ [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    []

    []

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = -1;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9,\
    \ 11])); // []\nconsole.log(pluck([2, 4, 6, 8, 10])); // [2, 0]\nconsole.log(pluck([2,\
    \ 4, 6, 8, 10, 11])); // [2, 0]\nconsole.log(pluck([0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])); // [0, 0]\nconsole.log(pluck([])); // []\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 2, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n\
    \      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex === -1 ? [] : [minEven,\
    \ minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] :\
    \ [min, minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqw7zizk5.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014594
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpjnrkrgol.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjnrkrgol.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([])); //\
    \ []\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3,\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm1add7cm.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let minEven = Infinity;\n  let minEvenIndex\
    \ = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex = i;\n\
    \    }\n  }\n  if (minEven === Infinity) return [];\n  return [minEven, minEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  let found = false;\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min)\
    \ {\n      min = arr[i];\n      minIndex = i;\n      found = true;\n    }\n  }\n\
    \  return found ? [min, minIndex] : [];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9, 11]));\
    \ // []\nconsole.log(pluck([2, 4, 6, 8, 10])); // [2, 0]\nconsole.log(pluck([0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0])); // [0, 0]\nconsole.log(pluck([])); // []\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  let minEven = Infinity;\n\
    \  let minEvenIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n    if\
    \ (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex\
    \ = i;\n    }\n  }\n  if (minEven === Infinity) {\n    return [];\n  }\n  return\
    \ [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let minEven = Infinity;\n  let minEvenIndex\
    \ = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex = i;\n\
    \    }\n  }\n  if (minEven === Infinity) return [];\n  return [minEven, minEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([2, 2, 2, 2, 2, 2])); // [2,\
    \ 0]\nconsole.log(pluck([1, 1, 1, 1, 1, 1])); // []\nconsole.log(pluck([0, 0,\
    \ 0, 0, 0, 0])); // [0, 0]\nconsole.log(pluck([])); // []\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 0 ]

    []

    [ 0, 0 ]

    []

    '
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = -1;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return minIndex === -1 ? [] : [min, minIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgkwuaejh.ts(19,22): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6]));\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp060yzmxx.ts(37,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp060yzmxx.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9]));\nconsole.log(pluck([2, 4, 6, 8, 10]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8fy2gltp.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Number.MAX_SAFE_INTEGER;\n  let minEvenIndex = -1;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven)\
    \ {\n      minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex\
    \ === -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdc6xlgzi.ts(19,24): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] :\
    \ [min, minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpouo8ny1l.ts(41,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpouo8ny1l.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven: number = Infinity;\n  let smallestEvenIndex: number = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n\
    \    }\n  }\n  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9]));\nconsole.log(pluck([2, 2, 2, 2, 2]));\nconsole.log(pluck([0,\
    \ 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\
    console.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20]));\nconsole.log(pluck([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = -1;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([]));\
    \ // []\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0h8unufn.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660014596
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\nconsole.log(pluck([]));\
    \ // []\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzcu7z_ra.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzcu7z_ra.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660014596
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Number.MAX_SAFE_INTEGER;\n  let\
    \ minIndex = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  if (min === Number.MAX_SAFE_INTEGER) return [];\n  return\
    \ [min, minIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpisfcmak_.ts(20,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpisfcmak_.ts(21,25): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpisfcmak_.ts(28,22): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014596
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven: number = Number.MAX_SAFE_INTEGER;\n  let minEvenIndex: number\
    \ = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 &&\
    \ arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex = i;\n    }\n\
    \  }\n  return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnvusigug.ts(19,32): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014596
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11])); // []\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\
    \ // [0, 0]\nconsole.log(pluck([0, 1, 2, 3, 0, 5, 6, 7, 8, 9, 10])); // [0, 0]\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  const smallest = Math.min(...evens);\n  const index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10])); // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9, 11])); // []\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\nconsole.log(pluck([0, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11]));\nconsole.log(pluck([2, 4, 6, 8, 10]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  arr.forEach((num, i) => {\n    if\
    \ (num % 2 === 0 && num < min) {\n      min = num;\n      index = i;\n    }\n\
    \  });\n  return index === -1 ? [] : [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9, 11]));\nconsole.log(pluck([2,\
    \ 4, 6, 8, 10]));\nconsole.log(pluck([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(pluck([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014596
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxxtakso.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n\
    \      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex === -1 ? [] : [minEven,\
    \ minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] :\
    \ [min, minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqw7zizk5.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  let minEvenFound\
    \ = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0)\
    \ {\n      if (arr[i] < minEven) {\n        minEven = arr[i];\n        minEvenIndex\
    \ = i;\n        minEvenFound = true;\n      }\n    }\n  }\n  return minEvenFound\
    \ ? [minEven, minEvenIndex] : [];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // [2, 1]\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const result = [];\n  let min = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     result[0] = min;\n      result[1] = i;\n    }\n  }\n  return result;\n}\n\
    \nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const smallest = Math.min(...evens);\n\
    \  return [smallest, arr.indexOf(smallest)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let smallestEven = Infinity;\n  let smallestEvenIndex\
    \ = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex\
    \ = i;\n    }\n  }\n  if (smallestEven === Infinity) return [];\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  const smallest = Math.min(...evens);\n  const index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    '
  timestamp: 1660014597
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  const min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpuca409d8.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuca409d8.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdn43ygl4.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpdn43ygl4.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1660014597
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  // TODO: implement\n  return [];\n}\n\nexport { pluck };\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpscc1iyua.js:28:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpscc1iyua.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let minEven = Infinity;\n  let minEvenIndex\
    \ = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 &&\
    \ arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex = i;\n    }\n\
    \  }\n  if (minEven === Infinity) return [];\n  return [minEven, minEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014597
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp1u05n2rs.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1u05n2rs.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014598
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = -1;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(x => x % 2 === 0);\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return evens.length ? [min, index] : [];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014599
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(x => x % 2 === 0);\n  const minEven = Math.min(...evens);\n\
    \  const minEvenIndex = arr.indexOf(minEven);\n  return [minEven, minEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmppqptaab5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmppqptaab5.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014599
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = -1;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17])\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqhx0ot_7.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqhx0ot_7.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014599
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Number.MAX_SAFE_INTEGER;\n  let smallestEvenIndex = Number.MAX_SAFE_INTEGER;\n\
    \  let smallestEvenFound = false;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0) {\n      if (arr[i] < smallestEven) {\n        smallestEven\
    \ = arr[i];\n        smallestEvenIndex = i;\n        smallestEvenFound = true;\n\
    \      }\n    }\n  }\n  if (smallestEvenFound) {\n    return [smallestEven, smallestEvenIndex];\n\
    \  } else {\n    return [];\n  }\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7620qq2f.ts(19,29): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp7620qq2f.ts(20,34): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  let minEven = Infinity;\n\
    \  let minEvenIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  const num = arr[i];\n    if (num < min) {\n      min = num;\n    }\n    if\
    \ (num % 2 === 0 && num < minEven) {\n      minEven = num;\n      minEvenIndex\
    \ = i;\n    }\n  }\n  if (minEven === Infinity) {\n    return [];\n  }\n  return\
    \ [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014599
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  // TODO: Implement\n  return [];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpbb7wf90o.js:25:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpbb7wf90o.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9, 11]));\nconsole.log(pluck([2,\
    \ 4, 6, 8, 10]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014600
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  let smallest = Math.min(...evens);\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014599
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxjq7pe7f.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1660014592
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] :\
    \ [min, minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgi8bhekv.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let index = -1;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index\
    \ === -1 ? [] : [min, index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014600
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return min === Infinity ? [] : [min, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n\
    \      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex === -1 ? [] : [minEven,\
    \ minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(x => x % 2 === 0);\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return evens.length ? [min, index] : [];\n\
    }\n\nconsole.log(pluck([])); // []\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16])); // [2, 1]\nconsole.log(pluck\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm9zl04m9.ts(39,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpm9zl04m9.ts(39,9): error TS1005: '','' expected.

    '
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const minEven = Math.min(...evens);\n\
    \  const index = arr.indexOf(minEven);\n  return [minEven, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014600
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 3,\
    \ 5, 7, 9, 11, 13, 15, 17, 19]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(pluck([]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014600
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014600
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9gu1wb06.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9gu1wb06.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11]));\nconsole.log(pluck([2, 4, 6, 8, 10]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014600
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwz3ll9l1.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1660014600
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11]));\nconsole.log(pluck([2, 4, 6, 8, 10]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014600
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const idx = arr.indexOf(min);\n  return [min, idx];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014601
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  let minEven = Infinity;\n\
    \  let minEvenIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n    if\
    \ (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex\
    \ = i;\n    }\n  }\n  return minEven === Infinity ? [] : [minEven, minEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014601
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11])); // []\nconsole.log(pluck([2, 4, 6, 8, 10])); // [2, 0]\n\
    console.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014602
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n\
    \      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex === -1 ? [] : [minEven,\
    \ minEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_5yn1e1a.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1660014602
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \    let minEven = Infinity;\n    let minEvenIndex = -1;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < minEven) {\n\
    \            minEven = arr[i];\n            minEvenIndex = i;\n        }\n   \
    \ }\n    return minEvenIndex > -1 ? [minEven, minEvenIndex] : [];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp463s1ttn.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1660014601
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIdx = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIdx = i;\n    }\n  }\n  return minIdx === -1 ? [] : [min, minIdx];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11]));\nconsole.log(pluck([2, 4, 6, 8, 10]));\nconsole.log(pluck([1,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2]));\nconsole.log(pluck([]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 2, 1 ]

    []

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\nexport default\
    \ pluck;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014591
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] :\
    \ [min, minIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6qtgn4z8.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014591
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) {\n\
    \    return [];\n  }\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014602
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0rie7sax.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minEven === Infinity ?\
    \ [] : [minEven, minIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014602
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6_nr5kyt.ts(41,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp6_nr5kyt.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11]));\nconsole.log(pluck([2, 4, 6, 8, 10]));\nconsole.log(pluck([0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const smallestEven = Math.min(...evens);\n\
    \  const smallestEvenIndex = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([0,\
    \ 0, 0, 0, 0]));\nconsole.log(pluck([]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    []

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014599
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014602
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcg49ba0z.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpcg49ba0z.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014591
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let index = -1;\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      index = i;\n    }\n  }\n  return index === -1 ? [] : [min,\
    \ index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnwukyb1m.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9, 11]));\nconsole.log(pluck([2,\
    \ 4, 6, 8, 10]));\nconsole.log(pluck([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(pluck([]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014603
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n\
    \      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex === -1 ? [] : [minEven,\
    \ minEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014603
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = Number.MAX_SAFE_INTEGER;\n\
    \  let minEven = Number.MAX_SAFE_INTEGER;\n  let minEvenIndex = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num\
    \ < min) {\n      min = num;\n      minIndex = i;\n    }\n    if (num % 2 ===\
    \ 0 && num < minEven) {\n      minEven = num;\n      minEvenIndex = i;\n    }\n\
    \  }\n  return minEven === Number.MAX_SAFE_INTEGER ? [] : [minEven, minEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe_0snov8.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpe_0snov8.ts(20,25): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpe_0snov8.ts(21,24): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpe_0snov8.ts(22,29): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpe_0snov8.ts(34,29): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014603
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(pluck([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014604
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) {\n\
    \    return [];\n  }\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(pluck([1,\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_631ns7o.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1660014603
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9, 11]));\nconsole.log(pluck([2, 4, 6, 8, 10]));\nconsole.log(pluck([0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014604
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1,\
    \ 1, 2, 2, 2, 2, 2, 2, 2, 2])); // [2, 2]\nconsole.log(pluck([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1])); // []\nconsole.log(pluck([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])); //\
    \ [0, 0]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 2 ]

    []

    [ 0, 0 ]

    '
  timestamp: 1660014604
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014598
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16])); // [\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    '
  timestamp: 1660014604
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if (evens.length === 0) return [];\n  let min = Math.min(...evens);\n  return\
    \ [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014604
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] :\
    \ [min, minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqw7zizk5.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9])); // []\nconsole.log(pluck([])); // []\nconsole.log(pluck([0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\nconsole.log(pluck([0, 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014604
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let index = -1;\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      index = i;\n    }\n  }\n  return index === -1 ? [] : [min,\
    \ index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmsmu9vu4.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014604
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  // TODO: implement\n  return [];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsfxa_m51.js:25:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpsfxa_m51.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\nexport default\
    \ pluck;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014604
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([0,\
    \ 0, 0, 0, 0]));\nconsole.log(pluck([]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    []

    '
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(num => num % 2 === 0);\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return evens.length ? [min, index] : [];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([0,\
    \ 0, 0, 0, 0]));\nconsole.log(pluck([]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 0, 0 ]

    []

    '
  timestamp: 1660014602
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const smallestEven = Math.min(...evens);\n\
    \  const smallestIndex = arr.indexOf(smallestEven);\n  return [smallestEven, smallestIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9, 11]));\
    \ // []\nconsole.log(pluck([2, 4, 6, 8, 10])); // [2, 0]\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\nconsole.log(pluck([0, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIdx = Infinity;\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n    \
    \  minEven = arr[i];\n      minEvenIdx = i;\n    }\n  }\n  return minEven ===\
    \ Infinity ? [] : [minEven, minEvenIdx];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9]));\
    \ // []\nconsole.log(pluck([2, 4, 6, 8, 10])); // [2, 0]\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\nconsole.log(pluck([])); // []\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014605
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(pluck([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(pluck([1,\
    \ 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphsbizm4w.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(pluck([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 10 ]

    []

    '
  timestamp: 1660014605
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min: number = Number.MAX_SAFE_INTEGER;\n  let minIndex: number = -1;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex\
    \ === -1 ? [] : [min, minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([0, 0,\
    \ 0, 0, 0]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpny4pfvqe.ts(19,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) {\n\
    \    return [];\n  }\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // [2, 1]\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // [2, 1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    '
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(pluck([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014604
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  let smallestEvenFound\
    \ = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0)\
    \ {\n      if (arr[i] < smallestEven) {\n        smallestEven = arr[i];\n    \
    \    smallestEvenIndex = i;\n        smallestEvenFound = true;\n      }\n    }\n\
    \  }\n  if (smallestEvenFound) {\n    return [smallestEven, smallestEvenIndex];\n\
    \  } else {\n    return [];\n  }\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 0]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0,\
    \ 0]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 0,\
    \ 0]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 0,\
    \ 0, 0]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy44dweg5.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpy44dweg5.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014591
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n\
    \      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex === -1 ? [] : [minEven,\
    \ minEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\
    console.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014605
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let min = Infinity;\n  let minIndex = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min ===\
    \ Infinity) return [];\n  return [min, minIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014606
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  const smallest = Math.min(...evens);\n  const index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014606
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((num) => num %\
    \ 2 === 0);\n  if (evens.length === 0) return [];\n  const smallest = Math.min(...evens);\n\
    \  return [smallest, arr.indexOf(smallest)];\n}\n\nconsole.log(pluck([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([]));\nconsole.log(pluck([1,\
    \ 3, 5, 7, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    []

    []

    '
  timestamp: 1660014606
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([])); // []\nconsole.log(pluck([1, 2, 3, 4, 5])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8]));\
    \ // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_s_kvadn.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_s_kvadn.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660014606
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  return index === -1 ? [] : [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014606
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven: number = Number.MAX_SAFE_INTEGER;\n  let minEvenIndex: number\
    \ = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex\
    \ = i;\n    }\n  }\n  return minEven === Number.MAX_SAFE_INTEGER ? [] : [minEven,\
    \ minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp75nmya6j.ts(19,32): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp75nmya6j.ts(20,37): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp75nmya6j.ts(27,29): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014606
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Number.MAX_SAFE_INTEGER;\n  let minEvenIndex = -1;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven)\
    \ {\n      minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEvenIndex\
    \ === -1 ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9, 11])); //\
    \ []\nconsole.log(pluck([2, 4, 6, 8, 10])); // [2, 0]\nconsole.log(pluck([0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0])); // [0, 0]\nconsole.log(pluck([])); // []\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptfgzqz4c.ts(19,24): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014606
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(pluck([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 10 ]

    '
  timestamp: 1660014606
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  // TODO: implement\n  return [];\n}\n\nexport { pluck };\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpscc1iyua.js:28:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpscc1iyua.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014597
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014594
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  let minArr = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min)\
    \ {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min === Infinity)\
    \ {\n    return [];\n  }\n  minArr.push(min);\n  minArr.push(minIndex);\n  return\
    \ minArr;\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(pluck([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp7ofhel4.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpp7ofhel4.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1660014606
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014592
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((n) => n % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9]));\
    \ // []\nconsole.log(pluck([])); // []\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10])); // [0, 0]\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 0])); // [0, 0]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    []

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014607
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  let smallest = Infinity;\n  let index =\
    \ Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0 && arr[i] < smallest) {\n      smallest = arr[i];\n      index = i;\n    }\n\
    \  }\n  if (smallest === Infinity) return [];\n  return [smallest, index];\n}\n\
    \nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(pluck([0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(pluck([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014607
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  let minValue = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n      minValue = arr[i];\n\
    \    }\n  }\n  if (min === Infinity) {\n    return [];\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(pluck([0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(pluck([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(pluck([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 0, 0 ]

    []

    []

    '
  timestamp: 1660014607
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  let minEvenFound\
    \ = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0)\
    \ {\n      if (arr[i] < minEven) {\n        minEven = arr[i];\n        minEvenIndex\
    \ = i;\n        minEvenFound = true;\n      }\n    }\n  }\n  return minEvenFound\
    \ ? [minEven, minEvenIndex] : [];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // [2, 1]\nconsole.log(pluck([1, 3, 5, 7, 9, 11])); // []\nconsole.log(pluck([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [0, 0]\nconsole.log(pluck([0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 0])); // [0, 0]\nconsole.log(pluck([])); // []\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 0 ]

    [ 0, 0 ]

    []

    '
  timestamp: 1660014607
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Infinity;\n  let minIndex = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  return min === Infinity ? [] : [min, minIndex];\n\
    }\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15])); // [2, 1]\nconsole.log(pluck([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // [2,\
    \ 1]\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])); //\
    \ [2, 1]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    [ 2, 1 ]

    '
  timestamp: 1660014607
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  if (arr.length === 0) return [];\n  const evens = arr.filter((x) => x % 2 ===\
    \ 0);\n  if (evens.length === 0) return [];\n  const smallest = Math.min(...evens);\n\
    \  return [smallest, arr.indexOf(smallest)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014607
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ? [] :\
    \ [min, minIndex];\n}\n\nconsole.log(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(pluck([1, 3, 5, 7, 9, 11]));\nconsole.log(pluck([2, 2, 2, 2, 2]));\n\
    console.log(pluck([0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe_qnc5hz.ts(19,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014607
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  return minEven\
    \ === Infinity ? [] : [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(pluck([1, 3, 5, 7, 9]));\nconsole.log(pluck([2,\
    \ 4, 6, 8, 10]));\nconsole.log(pluck([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    []

    [ 2, 0 ]

    [ 0, 0 ]

    '
  timestamp: 1660014607
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n\
    \  const evens = arr.filter(n => n % 2 === 0);\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp1u05n2rs.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1u05n2rs.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014597
