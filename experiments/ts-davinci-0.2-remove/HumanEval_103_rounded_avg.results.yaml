language: ts
name: HumanEval_103_rounded_avg
results:
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    let count = 0;\n    let avg = 0;\n \
    \   if (n > m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++)\
    \ {\n        sum += i;\n        count++;\n    }\n    avg = Math.round(sum / count);\n\
    \    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(5,\
    \ 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(3,\
    \ 7));\nconsole.log(rounded_avg(3, 6));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(3,\
    \ 4));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 2));\nconsole.log(rounded_avg(3,\
    \ 1));\nconsole.log(rounded_avg(3, 0));\nconsole.log(rounded_avg(3, -1));\nconsole.log(rounded_avg(3,\
    \ -2));\nconsole.log(rounded_avg(3, -3));\nconsole.log(rounded_avg(3, -4));\n\
    console.log(rounded_avg(3, -5));\nconsole.log(rounded_avg(3, -6));\nconsole.log(rounded_avg(3,\
    \ -7));\nconsole.log(rounded_avg(3, -8));\nconsole.log(rounded_avg(3, -9));\n\
    console.log(rounded_avg(3, -10));\nconsole.log(rounded_avg(3, -11));\nconsole.log(rounded_avg(3,\
    \ -12));\nconsole.log(rounded_avg(3, -13));\nconsole.log(rounded_avg(3, -14));\n\
    console.log(rounded_avg(3, -15));\nconsole.log(rounded_avg(3, -16));\nconsole.log(rounded_avg(3\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnm4o60bv.ts(50,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpnm4o60bv.ts(50,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7mxv5b0s.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpzzqjp7d6.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzzqjp7d6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    10

    1

    -1

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpeyu7bxyz.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeyu7bxyz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9w8dbqnp.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5,\
    \ 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp38b97c8m.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp38b97c8m.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    110

    1000

    101

    -1

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjag1iu1a.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjag1iu1a.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1,\
    \ 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\n\
    console.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1,\
    \ 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\n\
    console.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1,\
    \ 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\n\
    console.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1,\
    \ 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\n\
    console.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1,\
    \ 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\n\
    console.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxst_6ufb.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpxst_6ufb.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpp96ydadp.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp96ydadp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10,\
    \ 5));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 20));\n\
    console.log(rounded_avg(20, 10));\nconsole.log(rounded_avg(20, 20));\nconsole.log(rounded_avg(20,\
    \ 30));\nconsole.log(rounded_avg(30, 20));\nconsole.log(rounded_avg(30, 30));\n\
    console.log(rounded_avg(30, 40));\nconsole.log(rounded_avg(40, 30));\nconsole.log(rounded_avg(40,\
    \ 40));\nconsole.log(rounded_avg(40, 50));\nconsole.log(rounded_avg(50, 40));\n\
    console.log(rounded_avg(50, 50));\nconsole.log(rounded_avg(50, 60));\nconsole.log(rounded_avg(60,\
    \ 50));\nconsole.log(rounded_avg(60, 60));\nconsole.log(rounded_avg(60, 70));\n\
    console.log(rounded_avg(70, 60));\nconsole.log(rounded_avg(70, 70));\nconsole.log(rounded_avg(70,\
    \ 80));\nconsole.log(rounded_avg(80, 70));\nconsole.log(rounded_avg(80, 80));\n\
    console.log(rounded_avg(80, 90));\nconsole.log(rounded_avg(90\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw98l52t3.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpw98l52t3.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(7,\
    \ 8));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(11, 12));\n\
    console.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(17,\
    \ 18));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(21, 22));\n\
    console.log(rounded_avg(23, 24));\nconsole.log(rounded_avg(25, 26));\nconsole.log(rounded_avg(27,\
    \ 28));\nconsole.log(rounded_avg(29, 30));\nconsole.log(rounded_avg(31, 32));\n\
    console.log(rounded_avg(33, 34));\nconsole.log(rounded_avg(35, 36));\nconsole.log(rounded_avg(37,\
    \ 38));\nconsole.log(rounded_avg(39, 40));\nconsole.log(rounded_avg(41, 42));\n\
    console.log(rounded_avg(43, 44));\nconsole.log(rounded_avg(45, 46));\nconsole.log(rounded_avg(47,\
    \ 48));\nconsole.log(rounded_avg(49, 50));\nconsole.log(rounded_avg(51, 52));\n\
    console.log(rounded_avg(53, 54));\nconsole.log(rounded_avg(55, 56));\nconsole.log(rounded_avg(57,\
    \ 58));\nconsole.log(rounded_avg(59, 60));\nconsole.log(rounded_avg(61, 62));\n\
    console.log(rounded_avg(63, 64));\nconsole.log(rounded_avg(65, 66));\nconsole.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6j2me1uf.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpagb1gzzc.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpagb1gzzc.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    10

    1

    -1

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5,\
    \ 5));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10,\
    \ 10));\nconsole.log(rounded_avg(10, 15));\nconsole.log(rounded_avg(15, 10));\n\
    console.log(rounded_avg(15, 15));\nconsole.log(rounded_avg(15, 20));\nconsole.log(rounded_avg(20,\
    \ 15));\nconsole.log(rounded_avg(20, 20));\nconsole.log(rounded_avg(20, 25));\n\
    console.log(rounded_avg(25, 20));\nconsole.log(rounded_avg(25, 25));\nconsole.log(rounded_avg(25,\
    \ 30));\nconsole.log(rounded_avg(30, 25));\nconsole.log(rounded_avg(30, 30));\n\
    console.log(rounded_avg(30, 35));\nconsole.log(rounded_avg(35, 30));\nconsole.log(rounded_avg(35,\
    \ 35));\nconsole.log(rounded_avg(35, 40));\nconsole.log(rounded_avg(40, 35));\n\
    console.log(rounded_avg(40, 40));\nconsole.log(rounded_avg(40, 45));\nconsole.log(rounded_avg(45,\
    \ 40));\nconsole.log(rounded_avg(45, 45));\nconsole.log(rounded_avg(45, 50));\n\
    console.log(rounded_avg(50, 45));\nconsole.log(rounded_avg(50\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiratdnt8.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpiratdnt8.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_41dfsjd.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_41dfsjd.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjag1iu1a.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjag1iu1a.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000000));\nconsole.log(rounded_avg(1,\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpasz39t_q.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.log\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpoc2yipmr.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoc2yipmr.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    10001

    10010

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000000));\n\
    console.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10,\
    \ 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(100, 10));\n\
    console.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1000000,\
    \ 10));\nconsole.log(rounded_avg(1000000, 100));\nconsole.log(rounded_avg(1000000,\
    \ 1000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp414x7d9f.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp414x7d9f.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    1

    10

    110

    110011

    1111010000100100001

    -1

    1010

    110111

    -1

    -1

    1100100

    -1

    -1

    -1

    11110100001001000000

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1, 100));\n\
    console.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000,\
    \ 1));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(10000, 1));\n\
    console.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1,\
    \ 10000000));\nconsole.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(100000000, 1));\nconsole.log(rounded_avg(1,\
    \ 1000000000));\nconsole.log(rounded_avg(1000000000, 1));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(10000000000, 1));\nconsole.log(rounded_avg(1,\
    \ 100000000000));\nconsole.log(rounded_avg(100000000000, 1));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1000000000000, 1));\nconsole.log(rounded_avg(1,\
    \ 10000000000000));\nconsole.log(rounded_avg(10000000000000, 1\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7a4pk_7k.ts(47,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7a4pk_7k.ts(47,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1,\
    \ 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(7,\
    \ 1));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(9, 1));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(11, 1));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(13, 1));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(15,\
    \ 1));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(17, 1));\nconsole.log(rounded_avg(1,\
    \ 19));\nconsole.log(rounded_avg(19, 1));\nconsole.log(rounded_avg(1, 21));\n\
    console.log(rounded_avg(21, 1));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(23,\
    \ 1));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(25, 1));\nconsole.log(rounded_avg(1,\
    \ 27));\nconsole.log(rounded_avg(27, 1));\nconsole.log(rounded_avg(1, 29));\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpwu1kofd0.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwu1kofd0.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    110

    -1

    1

    10

    -1

    11

    -1

    100

    -1

    101

    -1

    110

    -1

    111

    -1

    1000

    -1

    1001

    -1

    1010

    -1

    1011

    -1

    1100

    -1

    1101

    -1

    1110

    -1

    1111

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26ztd5vz.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2,\
    \ 6));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpely8xgon.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpely8xgon.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '100

    1000

    -1

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26ztd5vz.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    return Math.round((n\
    \ + m) / 2).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1,\
    \ 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1,\
    \ 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1,\
    \ 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\n\
    console.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1,\
    \ 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\n\
    console.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1,\
    \ 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\n\
    console.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1,\
    \ 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\n\
    console.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1,\
    \ 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\n\
    console.log(rounded_avg(\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdc_3rxn_.ts(47,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const average\
    \ = Math.round((n + m) / 2);\n    return average.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5, 33));\nconsole.log(rounded_avg(5, 34));\n\
    console.log(rounded_avg(5, 35));\nconsole.\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8ye9j3s2.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014231
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgf07warh.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpgf07warh.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014231
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(5,\
    \ 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp1qxycqzk.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1qxycqzk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    101

    100

    -1

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9w8dbqnp.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5)); //3\nconsole.log(rounded_avg(5, 1)); //-1\nconsole.log(rounded_avg(1, 10));\
    \ //5\nconsole.log(rounded_avg(1, 1)); //1\nconsole.log(rounded_avg(1, 100));\
    \ //26\nconsole.log(rounded_avg(100, 1)); //-1\nconsole.log(rounded_avg(1, 999));\
    \ //128\nconsole.log(rounded_avg(999, 1)); //-1\nconsole.log(rounded_avg(1, 99999));\
    \ //1536\nconsole.log(rounded_avg(99999, 1)); //-1\nconsole.log(rounded_avg(1,\
    \ 9999999)); //2048\nconsole.log(rounded_avg(9999999, 1)); //-1\nconsole.log(rounded_avg(1,\
    \ 999999999)); //2560\nconsole.log(rounded_avg(999999999, 1)); //-1\nconsole.log(rounded_avg(1,\
    \ 9999999999)); //3072\nconsole.log(rounded_avg(9999999999, 1)); //-1\nconsole.log(rounded_avg(1,\
    \ 99999999999)); //3584\nconsole.log(rounded_avg(99999999999, 1)); //-1\nconsole.log(rounded_avg(1,\
    \ 999999999999)); //4096\nconsole.log(rounded_avg(999999999999, 1)); //-1\nconsole.log(rounded_avg(1,\
    \ 9999999999999)); //4608\nconsole.log(rounded_avg(9999999999999, 1)); //-1\n\
    console.log(rounded_avg(1, 99999999999999)); //5120\nconsole.log(rounded_avg(99999999\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpht9yjpux.ts(41,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpht9yjpux.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5,\
    \ 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\n\
    console.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000,\
    \ 1));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1, 10000));\n\
    console.log(rounded_avg(10000, 1));\nconsole.log(rounded_avg(10000, 10000));\n\
    console.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(100000,\
    \ 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000,\
    \ 1));\nconsole.log(rounded_avg(1000000, 1000000));\nconsole.log(rounded_avg(1,\
    \ 10000000));\nconsole.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(10000000,\
    \ 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(100000000,\
    \ 1));\nconsole.log(rounded_avg(100000000, 100000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000));\nconsole.log(rounded_av\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph98q_nhr.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmph98q_nhr.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014231
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(2,\
    \ 6));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(3, 6));\nconsole.log(rounded_avg(4,\
    \ 5));\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(6, 6));\nconsole.log(rounded_avg(6, 7));\nconsole.log(rounded_avg(6,\
    \ 8));\nconsole.log(rounded_avg(6, 9));\nconsole.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(6,\
    \ 11));\nconsole.log(rounded_avg(6, 12));\nconsole.log(rounded_avg(6, 13));\n\
    console.log(rounded_avg(6, 14));\nconsole.log(rounded_avg(6, 15));\nconsole.log(rounded_avg(6,\
    \ 16));\nconsole.log(rounded_avg(6, 17));\nconsole.log(rounded_avg(6, 18));\n\
    console.log(rounded_avg(6, 19));\nconsole.log(rounded_avg(6, 20));\nconsole.log(rounded_avg(6,\
    \ 21));\nconsole.log(rounded_avg(6, 22));\nconsole.log(rounded_avg(6, 23));\n\
    console.log(rounded_avg(6, 24));\nconsole.log(rounded_avg(6, 25));\nconsole.log(rounded_avg(6\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpopdrrodw.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpopdrrodw.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014231
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n\
    \ > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp6f863ez3.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6f863ez3.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    10001

    10010

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpeyu7bxyz.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeyu7bxyz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpxmmz5qwo.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxmmz5qwo.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    let count = 0;\n    if (n > m) {\n \
    \       return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum +=\
    \ i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n    return\
    \ avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(2,\
    \ 3));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4egx9_1f.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4egx9_1f.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    11

    110

    1

    -1

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(5, 5));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp16073sxj.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp16073sxj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    110

    101

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000000));\nconsole.log(rounded_avg(1,\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpasz39t_q.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4n9p0dws.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp4n9p0dws.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014231
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(1\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkx6qyn9x.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpkx6qyn9x.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 4));\nconsole.log(rounded_avg(4, 1));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4u7xaqzl.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4u7xaqzl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp431lf4l0.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp431lf4l0.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(5,\
    \ 5));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpfdwyrzl0.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfdwyrzl0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    101

    1000

    -1

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5, 33));\nconsole\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpvt2phc1k.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvt2phc1k.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    10001

    10010

    10010

    10011

    10011

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpxmmz5qwo.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxmmz5qwo.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3jm1g966.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10,\
    \ 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1,\
    \ 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1,\
    \ 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1,\
    \ 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\n\
    console.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1,\
    \ 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\n\
    console.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1,\
    \ 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\n\
    console.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphb3axwsi.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphb3axwsi.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptu1lzjrw.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptu1lzjrw.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9w8dbqnp.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 100000));\n\
    console.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\n\
    console.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\n\
    console.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\n\
    console.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\n\
    console.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\n\
    console.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf1ev7qxq.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpf1ev7qxq.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ Math.round(sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgapagjzm.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgapagjzm.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp61cc3ekh.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp61cc3ekh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptu1lzjrw.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptu1lzjrw.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n\
    \ > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(4,\
    \ 6));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 2));\nconsole.log(rounded_avg(4,\
    \ 5));\nconsole.log(rounded_avg(4, 8));\nconsole.log(rounded_avg(4, 10));\nconsole.log(rounded_avg(4,\
    \ 12));\nconsole.log(rounded_avg(4, 14));\nconsole.log(rounded_avg(4, 16));\n\
    console.log(rounded_avg(4, 18));\nconsole.log(rounded_avg(4, 20));\nconsole.log(rounded_avg(4,\
    \ 22));\nconsole.log(rounded_avg(4, 24));\nconsole.log(rounded_avg(4, 26));\n\
    console.log(rounded_avg(4, 28));\nconsole.log(rounded_avg(4, 30));\nconsole.log(rounded_avg(4,\
    \ 32));\nconsole.log(rounded_avg(4, 34));\nconsole.log(rounded_avg(4, 36));\n\
    console.log(rounded_avg(4, 38));\nconsole.log(rounded_avg(4, 40));\nconsole.log(rounded_avg(4,\
    \ 42));\nconsole.log(rounded_avg(4, 44));\nconsole.log(rounded_avg(4, 46));\n\
    console.log(rounded_avg(4, 48));\nconsole.log(rounded_avg(4, 50));\nconsole.log(rounded_avg(4,\
    \ 52));\nconsole.log(rounded_avg(4, 54));\nconsole.log(rounded_avg(4, 56));\n\
    console.log(rounded_avg(4, 58));\nconsole.log(rounded_avg(4, 60));\nconsole.log(rounded_avg(4,\
    \ 62));\nconsole.log(rounded_avg(4, 64));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0vl9bbw6.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0vl9bbw6.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '101

    100

    -1

    101

    110

    111

    1000

    1001

    1010

    1011

    1100

    1101

    1110

    1111

    10000

    10001

    10010

    10011

    10100

    10101

    10110

    10111

    11000

    11001

    11010

    11011

    11100

    11101

    11110

    11111

    100000

    100001

    100010

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 4));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjby4tzub.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjby4tzub.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    100

    '
  timestamp: 1660014236
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\n\
    console.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 10));\nconsole.log(rounded_avg(20, 20));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpv98tn3dq.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv98tn3dq.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1

    110

    1000

    -1

    1010

    1111

    -1

    10100

    '
  timestamp: 1660014236
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3,\
    \ 8));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5,\
    \ 4));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(6, 6));\nconsole.log(rounded_avg(6,\
    \ 7));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(8,\
    \ 8));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(9, 8));\nconsole.log(rounded_avg(9,\
    \ 9));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 11));\n\
    console.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(11, 11));\nconsole.log(rounded_avg(12,\
    \ 12));\nconsole.log(rounded_avg(12, 13));\nconsole.log(rounded_avg(13, 12));\n\
    console.log(rounded_avg(13, 13));\nconsole.log(rounded_avg(14, 14));\nconsole.log(rounded_avg(14,\
    \ 15));\nconsole.log(rounded_avg(15, 14));\nconsole.log(rounded_avg(15, 15));\n\
    console.log(rounded_avg(16, 16));\nconsole.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17,\
    \ 16));\nconsole.log(rounded_avg(17, 17));\nconsole.log(rounded_avg(18, 18));\n\
    console.log(rounded_avg(18\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl68ciu8s.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpl68ciu8s.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014236
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -10));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1,\
    \ 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1,\
    \ 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1,\
    \ 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\n\
    console.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1,\
    \ 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\n\
    console.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1,\
    \ 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\n\
    console.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprkxshi2o.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014236
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3jm1g966.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(2,\
    \ 5));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5,\
    \ 5));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 5));\n\
    console.log(rounded_avg(10, 2));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(5,\
    \ 2));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(2, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp08pjt_p2.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp08pjt_p2.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    11

    110

    100

    110

    1000

    101

    1010

    -1

    -1

    -1

    -1

    -1

    -1

    '
  timestamp: 1660014236
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2,\
    \ 6));\nconsole.log(rounded_avg(2, 3));\nconsole.log(rounded_avg(2, 2));\nconsole.log(rounded_avg(2,\
    \ 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpo32n4b93.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo32n4b93.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '100

    11

    10

    -1

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptu1lzjrw.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptu1lzjrw.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(5,\
    \ 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpd8lbj6te.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd8lbj6te.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    1

    -1

    '
  timestamp: 1660014236
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    let count = 0;\n    if (n > m) {\n \
    \       return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum +=\
    \ i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n    return\
    \ avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpj6k9scaq.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj6k9scaq.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014237
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpkqapjxy2.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkqapjxy2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014236
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26ztd5vz.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = Math.round((n + m) / 2);\n    return avg > m\
    \ ? -1 : avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(2,\
    \ 3));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(6, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(8,\
    \ 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10, 11));\n\
    console.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(12, 13));\nconsole.log(rounded_avg(13,\
    \ 14));\nconsole.log(rounded_avg(14, 15));\nconsole.log(rounded_avg(15, 16));\n\
    console.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17, 18));\nconsole.log(rounded_avg(18,\
    \ 19));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(20, 21));\n\
    console.log(rounded_avg(21, 22));\nconsole.log(rounded_avg(22, 23));\nconsole.log(rounded_avg(23,\
    \ 24));\nconsole.log(rounded_avg(24, 25));\nconsole.log(rounded_avg(25, 26));\n\
    console.log(rounded_avg(26, 27));\nconsole.log(rounded_avg(27, 28));\nconsole.log(rounded_avg(28,\
    \ 29));\nconsole.log(rounded_avg(29, 30));\nconsole.log(rounded_avg(30, 31));\n\
    console.log(rounded_avg(31, 32));\nconsole.log(rounded_avg(32, 33));\nconsole.log(rounded_avg(33,\
    \ 34));\nconsole.log(rounded_avg(34, 35));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp2cgxll3s.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2cgxll3s.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    11

    100

    101

    110

    111

    1000

    1001

    1010

    1011

    1100

    1101

    1110

    1111

    10000

    10001

    10010

    10011

    10100

    10101

    10110

    10111

    11000

    11001

    11010

    11011

    11100

    11101

    11110

    11111

    100000

    100001

    100010

    100011

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9w8dbqnp.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(10, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp85_oz92h.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp85_oz92h.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    10

    -1

    '
  timestamp: 1660014237
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000000));\nconsole.log\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5dsdksi8.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5dsdksi8.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    100

    -1

    110

    110011

    111110101

    1001110001001

    1100001101010001

    1111010000100100001

    10011000100101101000001

    10111110101111000010000001

    11101110011010110010100000001

    100101010000001011111001000000001

    101110100100001110110111010000000001

    111010001101010010100101000100000000001

    1001000110000100111001110010101000000000001

    1011010111100110001000001111010010000000000001

    1110001101011111101010010011000110100000000000001

    10001110000110111100100110111111000001000000000000000

    10110001101000101011110000101110110001010000000000000000

    11011110000010110110101100111010011101100100000000000000000

    100010101100011100100011000001001000100111101000000000000000000

    101011010111100011101011110001011010110001100010000000000000000000

    110110001101011100100110101101110001011101111010100000000000000000000

    1000011110000110011110000011001001101110101011001001000000000000000000000

    1010100101101000000101100011111100001010010101111011000000000000000000000000

    1101001111000010000110111100111011001100111011011010000000000000000000000000000

    10000100010110010101000101100001010000000001010010001000000000000000000000000000000

    10100101011011111010010110111001100100000001100110101000000000000000000000000000000000

    11001110110010111000111100100111111101000010000000010000000000000000000000000000000000000

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26ztd5vz.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(5,\
    \ 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzimkcjq5.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzimkcjq5.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014236
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\n\
    console.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000,\
    \ 1));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1, 10000));\n\
    console.log(rounded_avg(10000, 1));\nconsole.log(rounded_avg(10000, 10000));\n\
    console.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(100000,\
    \ 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000,\
    \ 1));\nconsole.log(rounded_avg(1000000, 1000000));\nconsole.log(rounded_avg(1,\
    \ 10000000));\nconsole.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(10000000,\
    \ 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(100000000,\
    \ 1));\nconsole.log(rounded_avg(100000000, 100000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000));\nconsole.log(rounded_av\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvn71gu2e.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvn71gu2e.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26ztd5vz.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(1\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkx6qyn9x.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpkx6qyn9x.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ Math.round(sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgapagjzm.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgapagjzm.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp61cc3ekh.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp61cc3ekh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\n\
    console.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(100,\
    \ 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000, 1));\n\
    console.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(10000,\
    \ 1));\nconsole.log(rounded_avg(10000, 10000));\nconsole.log(rounded_avg(1, 100000));\n\
    console.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(100000, 100000));\n\
    console.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000, 1));\n\
    console.log(rounded_avg(1000000, 1000000));\nconsole.log(rounded_avg(1, 10000000));\n\
    console.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(10000000, 10000000));\n\
    console.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(100000000, 1));\n\
    console.log(rounded_avg(100000000, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\n\
    console.log(rounded_avg(1000000000, 1));\nconsole.log(rounded\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprttcry5z.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprttcry5z.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014236
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpxmmz5qwo.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxmmz5qwo.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjag1iu1a.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjag1iu1a.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptu1lzjrw.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptu1lzjrw.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26ztd5vz.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp61cc3ekh.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp61cc3ekh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2,\
    \ 6));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp60fpai_q.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp60fpai_q.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '100

    110

    -1

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26ztd5vz.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n\
    \ > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(4,\
    \ 6));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4,\
    \ 3));\nconsole.log(rounded_avg(4, 2));\nconsole.log(rounded_avg(4, 1));\nconsole.log(rounded_avg(4,\
    \ 0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpz5n3mqa1.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5n3mqa1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '101

    101

    100

    -1

    -1

    -1

    -1

    '
  timestamp: 1660014237
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpbj1gi90b.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbj1gi90b.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    1

    -1

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n\
    \ > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\n\
    console.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000000000000000));\n\
    console.log(rounded_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbo8mz_u2.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpbo8mz_u2.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660014236
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10,\
    \ 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(11, 10));\n\
    console.log(rounded_avg(11, 11));\nconsole.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(12,\
    \ 11));\nconsole.log(rounded_avg(12, 12));\nconsole.log(rounded_avg(12, 13));\n\
    console.log(rounded_avg(13, 12));\nconsole.log(rounded_avg(13, 13));\nconsole.log(rounded_avg(13,\
    \ 14));\nconsole.log(rounded_avg(14, 13));\nconsole.log(rounded_avg(14, 14));\n\
    console.log(rounded_avg(14, 15));\nconsole.log(rounded_avg(15, 14));\nconsole.log(rounded_avg(15,\
    \ 15));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(16, 15));\n\
    console.log(rounded_avg(16, 16));\nconsole.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17,\
    \ 16));\nconsole.log(rounded_avg(17, 17));\nconsole.log(rounded_avg(17, 18));\n\
    console.log(rounded_avg(18, 17));\nconsole.log(rounded_avg(18, 18));\nconsole.log(rounded_avg(18,\
    \ 19));\nconsole.log(rounded_avg(19, 18));\nconsole.log(rounded_avg(19\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl090tjb8.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpl090tjb8.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014237
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(7,\
    \ 8));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(11, 12));\n\
    console.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(17,\
    \ 18));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(21, 22));\n\
    console.log(rounded_avg(23, 24));\nconsole.log(rounded_avg(25, 26));\nconsole.log(rounded_avg(27,\
    \ 28));\nconsole.log(rounded_avg(29, 30));\nconsole.log(rounded_avg(31, 32));\n\
    console.log(rounded_avg(33, 34));\nconsole.log(rounded_avg(35, 36));\nconsole.log(rounded_avg(37,\
    \ 38));\nconsole.log(rounded_avg(39, 40));\nconsole.log(rounded_avg(41, 42));\n\
    console.log(rounded_avg(43, 44));\nconsole.log(rounded_avg(45, 46));\nconsole.log(rounded_avg(47,\
    \ 48));\nconsole.log(rounded_avg(49, 50));\nconsole.log(rounded_avg(51, 52));\n\
    console.log(rounded_avg(53, 54));\nconsole.log(rounded_avg(55, 56));\nconsole.log(rounded_avg(57,\
    \ 58));\nconsole.log(rounded_avg(59, 60));\nconsole.log(rounded_avg(61, 62));\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpflkvibzf.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpflkvibzf.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    100

    110

    1000

    1010

    1100

    1110

    10000

    10010

    10100

    10110

    11000

    11010

    11100

    11110

    100000

    100010

    100100

    100110

    101000

    101010

    101100

    101110

    110000

    110010

    110100

    110110

    111000

    111010

    111100

    111110

    '
  timestamp: 1660014237
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpe9y9nha0.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe9y9nha0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    10

    1

    -1

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(7,\
    \ 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(8,\
    \ 3));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1,\
    \ 99));\nconsole.log(rounded_avg(99, 1));\nconsole.log(rounded_avg(1, 100));\n\
    console.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(1, 101));\nconsole.log(rounded_avg(101,\
    \ 1));\nconsole.log(rounded_avg(1, 102));\nconsole.log(rounded_avg(102, 1));\n\
    console.log(rounded_avg(1, 103));\nconsole.log(rounded_avg(103, 1));\nconsole.log(rounded_avg(1,\
    \ 104));\nconsole.log(rounded_avg(104, 1));\nconsole.log(rounded_avg(1, 105));\n\
    console.log(rounded_avg(105, 1));\nconsole.log(rounded_avg(1, 106));\nconsole.log(rounded_avg(106,\
    \ 1));\nconsole.log(rounded_avg(1, 107));\nconsole.log(rounded_avg(107, 1));\n\
    console.log(rounded_avg(1, 108));\nconsole.log(rounded_avg(108, 1));\nconsole.log(rounded_avg(1,\
    \ 109));\nconsole.log(rounded_avg(109\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi5t1_buj.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpi5t1_buj.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014237
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpeyu7bxyz.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeyu7bxyz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3iighrw.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014240
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp32advvu.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpp32advvu.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014240
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9w8dbqnp.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9_i6ukfg.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n\
    \        return -1;\n    }\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(2, 1));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5,\
    \ 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1,\
    \ 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(1, 1000000));\n\
    console.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1, 100000000));\n\
    console.log(rounded_avg(100000000, 1));\nconsole.log(rounded_avg(1, 10000000000));\n\
    console.log(rounded_avg(10000000000, 1));\nconsole.log(rounded_avg(1, 1000000000000));\n\
    console.log(rounded_avg(1000000000000, 1));\nconsole.log(rounded_avg(1, 100000000000000));\n\
    console.log(rounded_avg(100000000000000, 1));\nconsole.log(rounded_avg(1, 10000000000000000));\n\
    console.log(rounded_avg(1000000000000000, 1));\nconsole.log(rounded_avg(1, 1000000000000000000));\n\
    console.log(rounded_avg(1000000000000000000, 1));\nconsole.log(rounded_avg(1,\
    \ 100000000000000000000));\nconsole.log(rounded_avg(100000000000000000000, 1));\n\
    console.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(10000000000000000000000,\
    \ 1));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1000000000000000000000000,\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpswsg9ojr.ts(44,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptu1lzjrw.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptu1lzjrw.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(5,\
    \ 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1,\
    \ 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1,\
    \ 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1,\
    \ 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\n\
    console.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1,\
    \ 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\n\
    console.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1,\
    \ 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\n\
    console.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq8c8pt_k.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpq8c8pt_k.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgf07warh.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpgf07warh.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014231
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_41dfsjd.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_41dfsjd.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 4));\nconsole.log(rounded_avg(4, 1));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy64rqbij.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_41dfsjd.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_41dfsjd.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(1,\
    \ 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\n\
    console.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\n\
    console.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\n\
    console.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\n\
    console.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\n\
    console.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\n\
    console.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\n\
    console.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000000000000));\nconsole.log(rounded_avg(1,\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9k3jf9kz.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2,\
    \ 6));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(5, 2));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpg9coa2f4.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg9coa2f4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '100

    100

    -1

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9_i6ukfg.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqap_sh40.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -10));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(1, -1));\n\
    console.log(rounded_avg(1, -2));\nconsole.log(rounded_avg(1, -3));\nconsole.log(rounded_avg(1,\
    \ -4));\nconsole.log(rounded_avg(1, -5));\nconsole.log(rounded_avg(1, -6));\n\
    console.log(rounded_avg(1, -7));\nconsole.log(rounded_avg(1, -8));\nconsole.log(rounded_avg(1,\
    \ -9));\nconsole.log(rounded_avg(1, -10));\nconsole.log(rounded_avg(1, -11));\n\
    console.log(rounded_avg(1, -12));\nconsole.log(rounded_avg(1, -13));\nconsole.log(rounded_avg(1,\
    \ -14));\nconsole.log(rounded_avg(1, -15));\nconsole.log(rounded_avg(1, -16));\n\
    console.log(rounded_avg(1, -17));\nconsole.log(rounded_avg(1, -18));\nconsole.log(rounded_avg(1,\
    \ -19));\nconsole.log(rounded_avg(1, -20));\nconsole.log(rounded_avg(1, -21));\n\
    console.log(rounded_avg(1, -22));\nconsole.log(rounded_avg(1, -23));\nconsole.log(rounded_avg(1,\
    \ -24));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpl03r9k7e.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl03r9k7e.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    10

    1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    -1

    '
  timestamp: 1660014242
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    if (n > m) {\n        return -1;\n \
    \   }\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10,\
    \ 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(11, 10));\n\
    console.log(rounded_avg(0, 0));\nconsole.log(rounded_avg(0, 1));\nconsole.log(rounded_avg(1,\
    \ 0));\nconsole.log(rounded_avg(0, 2));\nconsole.log(rounded_avg(2, 0));\nconsole.log(rounded_avg(0,\
    \ 3));\nconsole.log(rounded_avg(3, 0));\nconsole.log(rounded_avg(0, 4));\nconsole.log(rounded_avg(4,\
    \ 0));\nconsole.log(rounded_avg(0, 5));\nconsole.log(rounded_avg(5, 0));\nconsole.log(rounded_avg(0,\
    \ 6));\nconsole.log(rounded_avg(6, 0));\nconsole.log(rounded_avg(0, 7));\nconsole.log(rounded_avg(7,\
    \ 0));\nconsole.log(rounded_avg(0, 8));\nconsole.log(rounded_avg(8, 0));\nconsole.log(rounded_avg(0,\
    \ 9));\nconsole.log(rounded_avg(9, 0));\nconsole.log(rounded_avg(0, 10));\nconsole.log(rounded_avg(10,\
    \ 0));\nconsole.log(rounded_avg(0, 11));\nconsole.log(rounded_avg(11, 0));\nconsole.log(rounded_avg(0,\
    \ 12));\nconsole.log(rounded_avg(12\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvpu0317j.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvpu0317j.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpxmmz5qwo.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxmmz5qwo.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(1\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkx6qyn9x.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpkx6qyn9x.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjag1iu1a.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjag1iu1a.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_41dfsjd.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_41dfsjd.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3,\
    \ 8));\nconsole.log(rounded_avg(3, 10));\nconsole.log(rounded_avg(3, 11));\nconsole.log(rounded_avg(3,\
    \ 12));\nconsole.log(rounded_avg(3, 13));\nconsole.log(rounded_avg(3, 14));\n\
    console.log(rounded_avg(3, 15));\nconsole.log(rounded_avg(3, 16));\nconsole.log(rounded_avg(3,\
    \ 17));\nconsole.log(rounded_avg(3, 18));\nconsole.log(rounded_avg(3, 19));\n\
    console.log(rounded_avg(3, 20));\nconsole.log(rounded_avg(3, 21));\nconsole.log(rounded_avg(3,\
    \ 22));\nconsole.log(rounded_avg(3, 23));\nconsole.log(rounded_avg(3, 24));\n\
    console.log(rounded_avg(3, 25));\nconsole.log(rounded_avg(3, 26));\nconsole.log(rounded_avg(3,\
    \ 27));\nconsole.log(rounded_avg(3, 28));\nconsole.log(rounded_avg(3, 29));\n\
    console.log(rounded_avg(3, 30));\nconsole.log(rounded_avg(3, 31));\nconsole.log(rounded_avg(3,\
    \ 32));\nconsole.log(rounded_avg(3, 33));\nconsole.log(rounded_avg(3, 34));\n\
    console.log(rounded_avg(3, 35));\nconsole.log(rounded_avg(3\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3puxo_2k.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3puxo_2k.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjag1iu1a.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjag1iu1a.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n\
    \        return -1;\n    }\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(2, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(4,\
    \ 1));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1,\
    \ 6));\nconsole.log(rounded_avg(6, 1));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(7,\
    \ 1));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(8, 1));\nconsole.log(rounded_avg(1,\
    \ 9));\nconsole.log(rounded_avg(9, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10,\
    \ 1));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(11, 1));\nconsole.log(rounded_avg(1,\
    \ 12));\nconsole.log(rounded_avg(12, 1));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(13, 1));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(14,\
    \ 1));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(15, 1));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(16, 1));\nconsole.log(rounded_avg(1, 17));\n\
    console.log(rounded_avg(17, 1));\nconsole.log\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpbldmpxlh.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbldmpxlh.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    -1

    1

    10

    -1

    11

    -1

    11

    -1

    100

    -1

    100

    -1

    101

    -1

    101

    -1

    110

    -1

    110

    -1

    111

    -1

    111

    -1

    1000

    -1

    1000

    -1

    1001

    -1

    1001

    -1

    '
  timestamp: 1660014242
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5, 33));\nconsole.log(rounded_avg(5, 34));\n\
    console.log(rounded_avg(5, 35));\nconsole.\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiccm31e7.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014241
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpzzqjp7d6.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzzqjp7d6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    10

    1

    -1

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ Math.round(sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpltwbwbmf.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpltwbwbmf.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1

    110

    110011

    111110101

    1001110001001

    1100001101010001

    1111010000100100001

    '
  timestamp: 1660014242
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9_i6ukfg.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3,\
    \ 8));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5,\
    \ 4));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(8, 3));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp6kehpnfz.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6kehpnfz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    100

    101

    -1

    110

    -1

    '
  timestamp: 1660014242
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 4));\nconsole.log(rounded_avg(4, 1));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp95we5dqh.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp95we5dqh.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    '
  timestamp: 1660014242
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(7,\
    \ 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 10));\nconsole.log(rounded_avg(20, 20));\n\
    console.log(rounded_avg(20, 30));\nconsole.log(rounded_avg(30, 20));\nconsole.log(rounded_avg(30,\
    \ 30));\nconsole.log(rounded_avg(30, 40));\nconsole.log(rounded_avg(40, 30));\n\
    console.log(rounded_avg(40, 40));\nconsole.log(rounded_avg(40, 50));\nconsole.log(rounded_avg(50,\
    \ 40));\nconsole.log(rounded_avg(50, 50));\nconsole.log(rounded_avg(50, 60));\n\
    console.log(rounded_avg(60, 50));\nconsole.log(rounded_avg(60, 60));\nconsole.log(rounded_avg(60,\
    \ 70));\nconsole.log(rounded_avg(70, 60));\nconsole.log(rounded_avg(70, 70));\n\
    console.log(rounded_avg(70, 80));\nconsole.log(rounded_avg(80, 70));\nconsole.log(rounded_avg(80,\
    \ 80));\nconsole.log(rounded_avg(80, 90));\nconsole.log(rounded_avg(90, 80));\n\
    console.log(rounded_avg(90, 90));\nconsole.log(rounded_avg(90\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuv3eoxex.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuv3eoxex.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014241
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 0));\nconsole.log(rounded_avg(0, 0));\nconsole.log(rounded_avg(0, 1));\nconsole.log(rounded_avg(0,\
    \ 2));\nconsole.log(rounded_avg(0, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10,\
    \ 10));\nconsole.log(rounded_avg(10, 0));\nconsole.log(rounded_avg(10, 2));\n\
    console.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(10, 100));\nconsole.log(rounded_avg(100,\
    \ 10));\nconsole.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(100, 0));\n\
    console.log(rounded_avg(100, 2));\nconsole.log(rounded_avg(100, 20));\nconsole.log(rounded_avg(100,\
    \ 100));\nconsole.log(rounded_avg(100, 1000));\nconsole.log(rounded_avg(1000,\
    \ 100));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1000,\
    \ 0));\nconsole.log(rounded_avg(1000, 2));\nconsole.log(rounded_avg(1000, 20));\n\
    console.log(rounded_avg(1000, 100));\nconsole.log(rounded_avg(1000, 1000));\n\
    console.log(rounded_avg(1000, 10000));\nconsole.log(rounded_avg(10000, 1000));\n\
    console.log(rounded_avg(10000\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps76jucgb.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmps76jucgb.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014242
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqap_sh40.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014241
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n\
    \        return -1;\n    }\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(5,\
    \ 8));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 4));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpex_u0qsa.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpex_u0qsa.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '111

    101

    -1

    '
  timestamp: 1660014242
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n\
    \        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(10,\
    \ 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpi79kkddd.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi79kkddd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    1

    -1

    '
  timestamp: 1660014242
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(5,\
    \ 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp3qssmawu.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3qssmawu.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    10

    100

    -1

    '
  timestamp: 1660014242
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5,\
    \ 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5,\
    \ 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\n\
    console.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5,\
    \ 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\n\
    console.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5,\
    \ 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\n\
    console.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5,\
    \ 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\n\
    console.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5,\
    \ 30));\nconsole.log(rounded_avg(5,\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuzn9o4f5.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014242
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5z68q2iv.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014245
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26ztd5vz.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptu1lzjrw.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptu1lzjrw.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.log(rounded_av\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuzelmcuc.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuzelmcuc.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660014245
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3,\
    \ 8));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5,\
    \ 4));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(8, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpf2zfay7x.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf2zfay7x.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    100

    101

    -1

    110

    -1

    '
  timestamp: 1660014246
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5,\
    \ 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(6, 5));\nconsole.log(rounded_avg(6,\
    \ 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpc1sbj7ri.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc1sbj7ri.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    100

    -1

    101

    110

    -1

    110

    '
  timestamp: 1660014246
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(2, 6));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(4,\
    \ 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(7,\
    \ 11));\nconsole.log(rounded_avg(8, 12));\nconsole.log(rounded_avg(9, 13));\n\
    console.log(rounded_avg(10, 14));\nconsole.log(rounded_avg(11, 15));\nconsole.log(rounded_avg(12,\
    \ 16));\nconsole.log(rounded_avg(13, 17));\nconsole.log(rounded_avg(14, 18));\n\
    console.log(rounded_avg(15, 19));\nconsole.log(rounded_avg(16, 20));\nconsole.log(rounded_avg(17,\
    \ 21));\nconsole.log(rounded_avg(18, 22));\nconsole.log(rounded_avg(19, 23));\n\
    console.log(rounded_avg(20, 24));\nconsole.log(rounded_avg(21, 25));\nconsole.log(rounded_avg(22,\
    \ 26));\nconsole.log(rounded_avg(23, 27));\nconsole.log(rounded_avg(24, 28));\n\
    console.log(rounded_avg(25, 29));\nconsole.log(rounded_avg(26, 30));\nconsole.log(rounded_avg(27,\
    \ 31));\nconsole.log(rounded_avg(28, 32));\nconsole.log(rounded_avg(29, 33));\n\
    console.log(rounded_avg(30, 34));\nconsole.log(rounded_avg(31\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe59x8wve.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpe59x8wve.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014245
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\n\
    console.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1,\
    \ 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1,\
    \ 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnltfftcv.ts(47,9): error TS1005: '','' expected.

    '
  timestamp: 1660014245
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1,\
    \ 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1,\
    \ 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(3,\
    \ 10));\nconsole.log(rounded_avg(4, 10));\nconsole.log(rounded_avg(5, 10));\n\
    console.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(8,\
    \ 10));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10, 10));\n\
    console.log(rounded_avg(10, 9));\nconsole.log(rounded_avg(10, 8));\nconsole.log(rounded_avg(10,\
    \ 7));\nconsole.log(rounded_avg(10, 6));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10,\
    \ 4));\nconsole.log(rounded_avg(10, 3));\nconsole.log(rounded_avg(10, 2));\nconsole.log(rounded_avg(10,\
    \ 1));\nconsole.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(12\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzpg2nnhx.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzpg2nnhx.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014245
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(5,\
    \ 10));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\n\
    console.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5,\
    \ 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\n\
    console.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5,\
    \ 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\n\
    console.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5,\
    \ 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\n\
    console.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5, 33));\nconsole.log(rounded_avg(5,\
    \ 34));\nconsole.log(rounded_avg(5, 35));\nconsole.log(rounded_avg(5, 36));\n\
    console.log(rounded_avg(5, 37));\nconsole.log(rounded_avg(5, 38));\nconsole.log(rounded_avg(5,\
    \ 39));\nconsole.log(rounded_avg(5, 40));\nconsole.log(rounded_avg(5\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpts33555h.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpts33555h.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014246
- exit_code: -1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 100));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\n\
    console.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\n\
    console.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\n\
    console.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\n\
    console.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\n\
    console.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\n\
    console.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\n\
    console.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\n\
    console.log(rounded_avg(1, 10000000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000));\n\
    console.log(rounded_avg(1, 10000000000000000000000000000));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '10

    11

    110

    110011

    1100001101010001

    1111010000100100001

    10011000100101101000001

    10111110101111000010000001

    11101110011010110010100000000

    100101010000001011111001000000000

    '
  timestamp: 1660014261
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 1));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpqcfptj8d.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqcfptj8d.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    110

    -1

    '
  timestamp: 1660014246
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum: number = 0;\n    let count: number = 0;\n   \
    \ if (n > m) {\n        return -1;\n    }\n    for (let i: number = n; i <= m;\
    \ i++) {\n        sum += i;\n        count++;\n    }\n    let avg: number = Math.round(sum\
    \ / count);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\n\
    console.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpif0oizzx.ts(50,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpif0oizzx.ts(50,9): error TS1005: '','' expected.

    '
  timestamp: 1660014246
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5)); // 101\nconsole.log(rounded_avg(1, 10)); // 1010\nconsole.log(rounded_avg(1,\
    \ 100)); // 1100100\nconsole.log(rounded_avg(1, 1000)); // 1111101000\nconsole.log(rounded_avg(1,\
n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp03xmg5je.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp03xmg5je.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    110

    110011

    111110101

    1111010000100100001

    '
  timestamp: 1660014246
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0a3n1d2p.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0a3n1d2p.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    101

    110

    110011

    111110101

    '
  timestamp: 1660014246
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(10, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp85_oz92h.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp85_oz92h.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    10

    -1

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2,\
    \ 5));\nconsole.log(rounded_avg(5, 2));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptfg9r10x.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014246
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9w8dbqnp.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(2, 3));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(4,\
    \ 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(6, 7));\nconsole.log(rounded_avg(7,\
    \ 8));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10,\
    \ 11));\nconsole.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(12, 13));\n\
    console.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(14, 15));\nconsole.log(rounded_avg(15,\
    \ 16));\nconsole.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17, 18));\n\
    console.log(rounded_avg(18, 19));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(20,\
    \ 21));\nconsole.log(rounded_avg(21, 22));\nconsole.log(rounded_avg(22, 23));\n\
    console.log(rounded_avg(23, 24));\nconsole.log(rounded_avg(24, 25));\nconsole.log(rounded_avg(25,\
    \ 26));\nconsole.log(rounded_avg(26, 27));\nconsole.log(rounded_avg(27, 28));\n\
    console.log(rounded_avg(28, 29));\nconsole.log(rounded_avg(29, 30));\nconsole.log(rounded_avg(30,\
    \ 31));\nconsole.log(rounded_avg(31,\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpat0e2s3m.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660014246
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    let count = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n\
    \        count++;\n    }\n    let avg = Math.round(sum / count);\n    return avg.toString(2);\n\
    }\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5,\
    \ 5));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5,\
    \ 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\n\
    console.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5,\
    \ 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\n\
    console.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5,\
    \ 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\n\
    console.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5,\
    \ 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\n\
    console.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5,\
    \ 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\n\
    console.log(rounded_avg(5, 33));\nconsole.log(rounded_avg(5, 34));\nconsole.log(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq_xccbqf.ts(51,9): error TS1005: '','' expected.

    '
  timestamp: 1660014246
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd6k_8lzp.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014246
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp61cc3ekh.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp61cc3ekh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014232
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(3,\
    \ 5));\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(5,\
    \ 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9dj9x9mc.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9dj9x9mc.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '100

    101

    100

    -1

    '
  timestamp: 1660014247
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\n\
    console.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpkvf1ai_c.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkvf1ai_c.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    110

    '
  timestamp: 1660014247
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3jm1g966.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1,\
    \ 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\n\
    console.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1,\
    \ 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\n\
    console.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1,\
    \ 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\n\
    console.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1,\
    \ 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\n\
    console.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1,\
    \ 30));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpekjj855_.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpekjj855_.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014246
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpeyu7bxyz.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeyu7bxyz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    11

    -1

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\n\
    console.log(rounded_avg(10, 10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp6w627pwk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6w627pwk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1

    110

    1000

    -1

    1010

    '
  timestamp: 1660014247
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\n\
    console.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(1, 35));\nconsole\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmog4134t.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmog4134t.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    10001

    10010

    10010

    '
  timestamp: 1660014247
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuen8w3t2.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuen8w3t2.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(4, 7));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpwev13mht.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwev13mht.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    110

    1111

    -1

    '
  timestamp: 1660014247
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    let count = 0;\n    if (n > m) {\n \
    \       return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum +=\
    \ i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n    return\
    \ avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1,\
    \ 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1,\
    \ 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1,\
    \ 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1,\
    \ 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\n\
    console.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1,\
    \ 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\n\
    console.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1,\
    \ 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\n\
    console.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1,\
    \ 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\n\
    console.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqau96qos.ts(50,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqau96qos.ts(50,9): error TS1005: '','' expected.

    '
  timestamp: 1660014248
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmph7fuaunx.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph7fuaunx.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    10

    1

    -1

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\n\
    console.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1,\
    \ 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1,\
    \ 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1,\
    \ 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1,\
    \ 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\n\
    console.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\
    \ 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9w8dbqnp.ts(46,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd6k_8lzp.ts(47,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014246
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(6,\
    \ 6));\nconsole.log(rounded_avg(7, 6));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmplyv7uram.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplyv7uram.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    101

    110

    110

    -1

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = sum / (m - n + 1);\n    return Math.round(avg).toString(2);\n}\n\nconsole.log(rounded_avg(3,\
    \ 6));\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(4,\
    \ 4));\nconsole.log(rounded_avg(4, 3));\nconsole.log(rounded_avg(6, 3));\nconsole.log(rounded_avg(6,\
    \ 6));\nconsole.log(rounded_avg(6, 4));\nconsole.log(rounded_avg(6, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(5,\
    \ 3));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(3,\
    \ 3));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(3, 6));\nconsole.log(rounded_avg(3,\
    \ 7));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(3, 9));\nconsole.log(rounded_avg(3,\
    \ 10));\nconsole.log(rounded_avg(3, 11));\nconsole.log(rounded_avg(3, 12));\n\
    console.log(rounded_avg(3, 13));\nconsole.log(rounded_avg(3, 14));\nconsole.log(rounded_avg(3,\
    \ 15));\nconsole.log(rounded_avg(3, 16));\nconsole.log(rounded_avg(3, 17));\n\
    console.log(rounded_avg(3, 18));\nconsole.log(rounded_avg(\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdisinqqx.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014249
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(5,\
    \ 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4h_xmgdg.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4h_xmgdg.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    100

    100

    -1

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3,\
    \ 7));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyl4ywy6p.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpyl4ywy6p.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014249
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1,\
    \ 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1,\
    \ 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\n\
    console.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1,\
    \ 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\n\
    console.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1,\
    \ 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\n\
    console.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1,\
    \ 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\n\
    console.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1,\
    \ 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpxmmz5qwo.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxmmz5qwo.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    10

    11

    11

    100

    100

    101

    101

    110

    110

    111

    111

    1000

    1000

    1001

    1001

    1010

    1010

    1011

    1011

    1100

    1100

    1101

    1101

    1110

    1110

    1111

    1111

    10000

    10000

    10001

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(5,\
    \ 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 10));\n\
    console.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(10, 12));\nconsole.log(rounded_avg(10,\
    \ 13));\nconsole.log(rounded_avg(10, 14));\nconsole.log(rounded_avg(10, 15));\n\
    console.log(rounded_avg(10, 16));\nconsole.log(rounded_avg(10, 17));\nconsole.log(rounded_avg(10,\
    \ 18));\nconsole.log(rounded_avg(10, 19));\nconsole.log(rounded_avg(10, 20));\n\
    console.log(rounded_avg(10, 21));\nconsole.log(rounded_avg(10, 22));\nconsole.log(rounded_avg(10,\
    \ 23));\nconsole.log(rounded_avg(10, 24));\nconsole.log(rounded_avg(10, 25));\n\
    console.log(rounded_avg(10, 26));\nconsole.log(rounded_avg(10, 27));\nconsole.log(rounded_avg(10,\
    \ 28));\nconsole.log(rounded_avg(10, 29));\nconsole.log(rounded_avg(10, 30));\n\
    console.log(rounded_avg(10, 31));\nconsole.log(rounded_avg(10, 32));\nconsole.log(rounded_avg(10,\
    \ 33));\nconsole.log(rounded_avg(10, 34));\nconsole.log(rounded_avg(10, 35));\n\
    console.log(rounded_avg(10, 36));\nconsole.log(rounded_avg(10, 37));\nconsole.log(rounded_avg(10\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmv422zdz.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpmv422zdz.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(7,\
    \ 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(0,\
    \ 0));\nconsole.log(rounded_avg(0, 1));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(0,\
    \ 2));\nconsole.log(rounded_avg(2, 0));\nconsole.log(rounded_avg(0, 3));\nconsole.log(rounded_avg(3,\
    \ 0));\nconsole.log(rounded_avg(0, 4));\nconsole.log(rounded_avg(4, 0));\nconsole.log(rounded_avg(0,\
    \ 5));\nconsole.log(rounded_avg(5, 0));\nconsole.log(rounded_avg(0, 6));\nconsole.log(rounded_avg(6,\
    \ 0));\nconsole.log(rounded_avg(0, 7));\nconsole.log(rounded_avg(7, 0));\nconsole.log(rounded_avg(0,\
    \ 8));\nconsole.log(rounded_avg(8, 0));\nconsole.log(rounded_avg(0, 9));\nconsole.log(rounded_avg(9,\
    \ 0));\nconsole.log(rounded_avg(0, 10));\nconsole.log(rounded_avg(10, 0));\nconsole.log(rounded_avg(0,\
    \ 11));\nconsole.log(rounded_avg(11, 0));\nconsole.log(rounded_avg(0, 12));\n\
    console.log(rounded_avg(12\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvv5aqvrm.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvv5aqvrm.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1,\
    \ -1));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(1, -10));\n\
    console.log(rounded_avg(1, -100));\nconsole.log(rounded_avg(1, -1000));\nconsole.log(rounded_avg(1,\
    \ -10000));\nconsole.log(rounded_avg(1, -100000));\nconsole.log(rounded_avg(1,\
    \ -1000000));\nconsole.log(rounded_avg(1, -10000000));\nconsole.log(rounded_avg(1,\
    \ -100000000));\nconsole.log(rounded_avg(1, -1000000000));\nconsole.log(rounded_avg(1,\
    \ -10000000000));\nconsole.log(rounded_avg(1, -100000000000));\nconsole.log(rounded_avg(1,\
    \ -1000000000000));\nconsole.log(rounded_avg(1, -10000000000000));\nconsole.log(rounded_avg(1,\
    \ -100000000000000));\nconsole.log(rounded_avg(1, -1000000000000000));\nconsole.log(rounded_avg(1,\
    \ -10000000000000000));\nconsole.log(rounded_avg(1, -100000000000000000));\nconsole.log(rounded_avg(1,\
    \ -1000000000000000000));\nconsole.log(rounded_avg(1, -10000000000000000000));\n\
    console.log(rounded_avg(1, -100000000000000000000));\nconsole.log(rounded_avg(1,\
    \ -1000000000000000000000));\nconsole.log(rounded_avg(1, -10000000000000000\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwc5n_iy3.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpwc5n_iy3.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5,\
    \ 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5,\
    \ 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5,\
    \ 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\n\
    console.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5,\
    \ 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\n\
    console.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5,\
    \ 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\n\
    console.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5,\
    \ 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\n\
    console.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5,\
    \ 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjag1iu1a.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjag1iu1a.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014227
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3,\
    \ 7));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(1,\
    \ 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1,\
    \ 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1,\
    \ 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\n\
    console.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1,\
    \ 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\n\
    console.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1,\
    \ 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\n\
    console.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1,\
    \ 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\n\
    console.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpklxr4isw.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpklxr4isw.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660014249
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n\
    \ > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3,\
    \ 8));\nconsole.log(rounded_avg(4, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(8,\
    \ 3));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(8,\
    \ 13));\nconsole.log(rounded_avg(8, 12));\nconsole.log(rounded_avg(13, 8));\n\
    console.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(11, 6));\nconsole.log(rounded_avg(12,\
    \ 20));\nconsole.log(rounded_avg(17, 23));\nconsole.log(rounded_avg(20, 12));\n\
    console.log(rounded_avg(23, 17));\nconsole.log(rounded_avg(6, 11));\nconsole.log(rounded_avg(13,\
    \ 7));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(19, 5));\nconsole.log(rounded_avg(2,\
    \ 10));\nconsole.log(rounded_avg(10, 2));\nconsole.log(rounded_avg(2, 2));\nconsole.log(rounded_avg(10,\
    \ 10));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(5, 2));\nconsole.log(rounded_avg(5,\
    \ 5));\nconsole.log(rounded_avg(2, 8));\nconsole.log(rounded_avg(8, 2));\nconsole.log(rounded_avg(8,\
    \ 8));\nconsole.log(rounded_avg(2, 9));\nconsole.log(rounded_avg(9, 2));\nconsole.log(rounded_avg(9,\
    \ 9));\nconsole.log(rounded_avg(2, 3));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9tkqju8e.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9tkqju8e.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    -1

    11

    -1

    110

    1010

    1011

    1010

    -1

    1010

    -1

    10000

    10100

    -1

    -1

    1001

    -1

    1100

    -1

    110

    -1

    10

    1010

    100

    -1

    101

    101

    -1

    1000

    110

    -1

    1001

    11

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = sum / (m - n + 1);\n    return avg.toFixed(0);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(3,\
    \ 7));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3,\
    \ 8));\nconsole.log(rounded_avg(8, 3));\nconsole.log(rounded_avg(8, 8));\nconsole.log(rounded_avg(1,\
    \ 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\n\
    console.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(100,\
    \ 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000, 1));\n\
    console.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(10000,\
    \ 1));\nconsole.log(rounded_avg(10000, 10000));\nconsole.log(rounded_avg(1, 100000));\n\
    console.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(100000, 100000));\n\
    console.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000, 1));\n\
    console.log(rounded_avg(1000000, 1000000));\nconsole.log(rounded_avg(1, 10000000));\n\
    console.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(10000000, 10000000));\n\
    console.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpko1_pg0j.ts(48,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014249
