name: HumanEval_144_simplify
language: ts
prompt: "//Your task is to implement a function that will simplify the expression\n\
  // x * n. The function returns True if x * n evaluates to a whole number and False\n\
  // otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\nfunction simplify(x: string, n: string):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"\
  5/1\"),true);\n  assert.deepEqual(candidate(\"1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"\
  5/1\", \"3/1\"),true);\n  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n\
  \  assert.deepEqual(candidate(\"2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"\
  7/2\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n\
  \  assert.deepEqual(candidate(\"2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"\
  5/2\", \"3/5\"),false);\n  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n\
  \  assert.deepEqual(candidate(\"2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"\
  1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n\
  }\n\ntest();"
completions: ["  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen]\
    \ = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den = xDen\
    \ * nDen;\n  const gcd = (a: number, b: number): number => {\n    if (b === 0)\
    \ return a;\n    return gcd(b, a % b);\n  };\n  const gcdNum = gcd(num, den);\n\
    \  return num / gcdNum === den / gcdNum;\n}\n\nconsole.log(simplify('1/2', '2/4'));\n\
    console.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '4/5'));\nconsole.log(simplify('1/2', '5/6'));\nconsole.log(simplify('1/2',\
    \ '6/7'));\nconsole.log(simplify('1/2', '7/8'));\nconsole.log(simplify('1/2',\
    \ '8/9'));\nconsole.log(simplify('1/2', '9/10'));\nconsole.log(simplify('1/2',\
    \ '10/11'));\nconsole.log(simplify('1/2', '11/12'));\nconsole.log(simplify('1/2',\
    \ '12/13'));\nconsole.log(simplify('1/2', '13/14'));\nconsole.log(simplify('1/2',\
    \ '14/15'));\nconsole.log(simplify('1/2', '15/16'));\nconsole.log(simplify('1/2',\
    \ '16/17'));\nconsole.log(simplify('1/2', '17/18'));\nconsole.log(simplify('1/2',\
    \ '18/19'));\nconsole.log(simplify('1/2', '19/20'));\nconsole.log(simplify('1/",
  "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  const numerator = xNumerator *\
    \ nDenominator;\n  const denominator = xDenominator * nNumerator;\n  return numerator\
    \ % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1", "    const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \    const [nNumerator, nDenominator] = n.split('/').map(Number);\n    const numerator\
    \ = xNumerator * nDenominator;\n    const denominator = xDenominator * nNumerator;\n\
    \    return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/38'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/42'));\nconsole.log(simplify('1/2',\
    \ '1/44", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen]\
    \ = n.split('/').map(Number);\n  const product = (xNum * nNum) / (xDen * nDen);\n\
    \  return product % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '2/2'));\nconsole.log(simplify('1/2', '3/2'));\nconsole.log(simplify('1/2',\
    \ '4/2'));\nconsole.log(simplify('1/2', '5/2'));\nconsole.log(simplify('1/2',\
    \ '6/2'));\nconsole.log(simplify('1/2', '7/2'));\nconsole.log(simplify('1/2',\
    \ '8/2'));\nconsole.log(simplify('1/2', '9/2'));\nconsole.log(simplify('1/2',\
    \ '10/2'));\nconsole.log(simplify('1/2', '11/2'));\nconsole.log(simplify('1/2',\
    \ '12/2'));\nconsole.log(simplify('1/2', '13/2'));\nconsole.log(simplify('1/2',\
    \ '14/2'));\nconsole.log(simplify('1/2', '15/2'));\nconsole.log(simplify('1/2',\
    \ '16/2'));\nconsole.log(simplify('1/2', '17/2'));\nconsole.log(simplify('1/2',\
    \ '18/2'));\nconsole.log(simplify('1/2', '19/2'));\nconsole.log(simplify('1/2',\
    \ '20/2'));\nconsole.log(simplify('1/2', '21/2'));\n", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const productNumerator = xNumerator * nNumerator;\n  const productDenominator\
    \ = xDenominator * nDenominator;\n  const gcd = greatestCommonDivisor(productNumerator,\
    \ productDenominator);\n  return productNumerator / gcd === productDenominator\
    \ / gcd;\n}\n", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator\
    \ = xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));",
  "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  const numerator = xNumerator *\
    \ nDenominator;\n  const denominator = xDenominator * nNumerator;\n  return numerator\
    \ % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '4/5'));\nconsole.log(simplify('1/2',\
    \ '5/6'));\nconsole.log(simplify('1/2', '6/7'));\nconsole.log(simplify('1/2',\
    \ '7/8'));\nconsole.log(simplify('1/2', '8/9'));\nconsole.log(simplify('1/2',\
    \ '9/10'));\nconsole.log(simplify('1/2', '10/11'));\nconsole.log(simplify('1/2',\
    \ '11/12'));\nconsole.log(simplify('1/2', '12/13'));\nconsole.log(simplify('1/2',\
    \ '13/14'));\nconsole.log(simplify('1/2', '14/15'));\nconsole.log(simplify('1/2',\
    \ '15/16'));\nconsole.log(simplify('1/2', '16/17'));\nconsole.log(simplify('1/2',\
    \ '17/18'));\nconsole.log(simplify('1/2', '18/19'));\nconsole.log(simplify('1/2',\
    \ '19/20'));\nconsole.log(simplify('1/2', '20/21'));\nconsole.log(simplify('1/2',\
    \ '21/22", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen]\
    \ = n.split('/').map(Number);\n  const res = (xNum * nNum) / (xDen * nDen);\n\
    \  return res % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/38'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/42'));\n", "    let xNumerator = Number(x.split('/')[0]);\n\
    \    let xDenominator = Number(x.split('/')[1]);\n    let nNumerator = Number(n.split('/')[0]);\n\
    \    let nDenominator = Number(n.split('/')[1]);\n    let resultNumerator = xNumerator\
    \ * nNumerator;\n    let resultDenominator = xDenominator * nDenominator;\n  \
    \  return resultNumerator % resultDenominator === 0;\n}\n\nconsole.log(simplify('2/3',\
    \ '4/5'));\nconsole.log(simplify('2/3', '4/6'));\nconsole.log(simplify('2/3',\
    \ '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));\nconsole.log(simplify('2/3',\
    \ '4/19'));\nconsole.log(simplify('2/3', '4/20'));\nconsole.log(simplify('2/3',\
    \ '4/21'));\nconsole.log(simplify('2/3', '4/22'));\nconsole.log(simplify('2/3',\
    \ '4/23'));\nconsole.log(simplify('2/3', '4/24'));\nconsole", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const numerator = xNumerator * nDenominator;\n\
    \  const denominator = xDenominator * nNumerator;\n  return numerator % denominator\
    \ === 0;\n}\n\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '2/3'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '4/5'));\nconsole.log(simplify('1/2', '5/6'));\nconsole.log(simplify('1/2',\
    \ '6/7'));\nconsole.log(simplify('1/2', '7/8'));\nconsole.log(simplify('1/2',\
    \ '8/9'));\nconsole.log(simplify('1/2', '9/10'));\nconsole.log(simplify('1/2',\
    \ '10/11'));\nconsole.log(simplify('1/2', '11/12'));\nconsole.log(simplify('1/2',\
    \ '12/13'));\nconsole.log(simplify('1/2', '13/14'));\nconsole.log(simplify('1/2',\
    \ '14/15'));\nconsole.log(simplify('1/2', '15/16'));\nconsole.log(simplify('1/2',\
    \ '16/17'));\nconsole.log(simplify('1/2', '17/18'));\nconsole.log(simplify('1/2',\
    \ '18/19'));\nconsole.log(simplify('1/2', '19/20'));\nconsole.log(simplify('1/2',\
    \ '20/21", "    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum,\
    \ nDen] = n.split('/').map(Number);\n    const result = (xNum * nNum) / (xDen\
    \ * nDen);\n    return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/2'));\nconsole.log(simplify('1/2',\
    \ '4/2'));\nconsole.log(simplify('1/2', '5/2'));\nconsole.log(simplify('1/2',\
    \ '6/2'));\nconsole.log(simplify('1/2', '7/2'));\nconsole.log(simplify('1/2',\
    \ '8/2'));\nconsole.log(simplify('1/2', '9/2'));\nconsole.log(simplify('1/2',\
    \ '10/2'));\nconsole.log(simplify('1/2', '11/2'));\nconsole.log(simplify('1/2',\
    \ '12/2'));\nconsole.log(simplify('1/2', '13/2'));\nconsole.log(simplify('1/2',\
    \ '14/2'));\nconsole.log(simplify('1/2', '15/2'));\nconsole.log(simplify('1/2',\
    \ '16/2'));\nconsole.log(simplify('1/2', '17/2'));\nconsole.log(simplify('1/2',\
    \ '18/2'));\nconsole.log(simplify('1/2', '19/2'));\nconsole.log(simplify('1/2',\
    \ '20/2'));", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const product\
    \ = xNumerator * nNumerator;\n  const denominator = xDenominator * nDenominator;\n\
    \  return product % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/2'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator\
    \ = xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nexport default simplify;", "  \
    \  const xNumerator = Number(x.split('/')[0]);\n    const xDenominator = Number(x.split('/')[1]);\n\
    \    const nNumerator = Number(n.split('/')[0]);\n    const nDenominator = Number(n.split('/')[1]);\n\
    \    const result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const xDec = xNum / xDen;\n\
    \  const nDec = nNum / nDen;\n  const result = xDec * nDec;\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log", "  const xNumerator\
    \ = Number(x.split('/')[0]);\n  const xDenominator = Number(x.split('/')[1]);\n\
    \  const nNumerator = Number(n.split('/')[0]);\n  const nDenominator = Number(n.split('/')[1]);\n\
    \n  const result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \  return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/25'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/27'));\nconsole.log(simplify('1/2', '1/28'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1", "  const xArr = x.split('/');\n\
    \  const nArr = n.split('/');\n  const xNumerator = Number(xArr[0]);\n  const\
    \ xDenominator = Number(xArr[1]);\n  const nNumerator = Number(nArr[0]);\n  const\
    \ nDenominator = Number(nArr[1]);\n  const xNumeratorProduct = xNumerator * nDenominator;\n\
    \  const xDenominatorProduct = xDenominator * nNumerator;\n  return xNumeratorProduct\
    \ % xDenominatorProduct === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.", "  let [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  let [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  let numerator = xNumerator * nDenominator;\n\
    \  let denominator = xDenominator * nNumerator;\n  let gcd = getGcd(numerator,\
    \ denominator);\n  return denominator / gcd === numerator / gcd;\n}\n", "  const\
    \ [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  const productNumerator = xNumerator\
    \ * nNumerator;\n  const productDenominator = xDenominator * nDenominator;\n \
    \ const product = productNumerator / productDenominator;\n  return Number.isInteger(product);\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const result = (xNum * nNum) / (xDen *\
    \ nDen);\n  return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '3/6'));\nconsole.log(simplify('1/2',\
    \ '3/5'));\nconsole.log(simplify('1/2', '3/7'));\nconsole.log(simplify('1/2',\
    \ '3/8'));\nconsole.log(simplify('1/2', '3/9'));\nconsole.log(simplify('1/2',\
    \ '3/10'));\nconsole.log(simplify('1/2', '3/11'));\nconsole.log(simplify('1/2',\
    \ '3/12'));\nconsole.log(simplify('1/2', '3/13'));\nconsole.log(simplify('1/2',\
    \ '3/14'));\nconsole.log(simplify('1/2', '3/15'));\nconsole.log(simplify('1/2',\
    \ '3/16'));\nconsole.log(simplify('1/2', '3/17'));\nconsole.log(simplify('1/2',\
    \ '3/18'));\nconsole.log(simplify('1/2', '3/19'));\nconsole.log(simplify('1/2',\
    \ '3/20'));\nconsole.log(simplify('1/2', '3/21'));\nconsole.log(simplify('1/2',\
    \ '3/22'));", "    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum,\
    \ nDen] = n.split('/').map(Number);\n    const result = (xNum * nNum) / (xDen\
    \ * nDen);\n    return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1'));", "    const [xNum, xDen] = x.split('/');\n    const [nNum, nDen]\
    \ = n.split('/');\n    const num = xNum * nNum;\n    const den = xDen * nDen;\n\
    \    return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1'));\nconsole.log(simplify('1/2', '20/1'));\nconsole.log(simpl", "  const\
    \ [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  const numerator = xNumerator *\
    \ nDenominator;\n  const denominator = xDenominator * nNumerator;\n  return numerator\
    \ % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen]\
    \ = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den = xDen\
    \ * nDen;\n  const gcd = (a: number, b: number): number => (b ? gcd(b, a % b)\
    \ : a);\n  const div = gcd(num, den);\n  return num / div === den / div;\n}\n\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/32'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/40'));\nconsole.log(simplify('1/2',\
    \ '1/42'));\nconsole.log(simplify('1/2', '1/44'));\nconsole.log(simplify('1/2',\
    \ '1/48'));\nconsole.log(simplify('1/2', '1/50'));\nconsole.log(simplify('1",
  "    let [xNum, xDen] = x.split('/').map(Number);\n    let [nNum, nDen] = n.split('/').map(Number);\n\
    \    let num = xNum * nNum;\n    let den = xDen * nDen;\n    return num % den\
    \ === 0;\n}\n\nconsole.log(simplify(\"1/2\", \"1/4\"));\nconsole.log(simplify(\"\
    1/2\", \"1/3\"));\nconsole.log(simplify(\"1/2\", \"1/6\"));\nconsole.log(simplify(\"\
    1/2\", \"1/8\"));\nconsole.log(simplify(\"1/2\", \"1/9\"));\nconsole.log(simplify(\"\
    1/2\", \"1/10\"));\nconsole.log(simplify(\"1/2\", \"1/12\"));\nconsole.log(simplify(\"\
    1/2\", \"1/16\"));\nconsole.log(simplify(\"1/2\", \"1/18\"));\nconsole.log(simplify(\"\
    1/2\", \"1/20\"));\nconsole.log(simplify(\"1/2\", \"1/24\"));\nconsole.log(simplify(\"\
    1/2\", \"1/30\"));\nconsole.log(simplify(\"1/2\", \"1/32\"));\nconsole.log(simplify(\"\
    1/2\", \"1/36\"));\nconsole.log(simplify(\"1/2\", \"1/40\"));\nconsole.log(simplify(\"\
    1/2\", \"1/42\"));\nconsole.log(simplify(\"1/2\", \"1/48\"));\nconsole.log(simplify(\"\
    1/2\", \"1/50\"));\nconsole.log(simplify(\"1/2\", \"1/54\"));\nconsole.log(simplify(\"\
    1/2\", \"1/56\"));\nconsole.log(simplify(\"1/2\", \"1/60\"));\nconsole.log(simplify(\"\
    1/2\", \"1/64\"));\nconsole.log(simplify(\"1/2\", \"1/72\")", "  const [xNum,\
    \ xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const product = (xNum * nNum) / (xDen * nDen);\n  return product % 1 === 0;\n\
    }\n\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/25'));\n", "  const xNumerator = Number(x.split('/')[0]);\n  const xDenominator\
    \ = Number(x.split('/')[1]);\n  const nNumerator = Number(n.split('/')[0]);\n\
    \  const nDenominator = Number(n.split('/')[1]);\n\n  const xMultiplied = xNumerator\
    \ * nDenominator;\n  const nMultiplied = nNumerator * xDenominator;\n\n  return\
    \ xMultiplied % nMultiplied === 0;\n}\n\nconsole.log(simplify('3/4', '2/3'));\n\
    console.log(simplify('4/5', '2/3'));\nconsole.log(simplify('4/5', '2/2'));\nconsole.log(simplify('4/5',\
    \ '2/1'));\nconsole.log(simplify('4/5', '1/2'));\nconsole.log(simplify('4/5',\
    \ '1/1'));\nconsole.log(simplify('4/5', '1/3'));\nconsole.log(simplify('4/5',\
    \ '1/4'));\nconsole.log(simplify('4/5', '1/5'));\nconsole.log(simplify('4/5',\
    \ '1/6'));\nconsole.log(simplify('4/5', '1/7'));\nconsole.log(simplify('4/5',\
    \ '1/8'));\nconsole.log(simplify('4/5', '1/9'));\nconsole.log(simplify('4/5',\
    \ '1/10'));\nconsole.log(simplify('4/5', '1/11'));\nconsole.log(simplify('4/5',\
    \ '1/12'));\nconsole.log(simplify('4/5', '1/13'));\nconsole.log(simplify('4/5',\
    \ '1/14'));\nconsole.log(simplify('4/5', '1/15'));\nconsole.log(simplify('4/5',\
    \ '1/16'));\nconsole", "  const [xNum, xDen] = x.split('/').map(Number);\n  const\
    \ [nNum, nDen] = n.split('/').map(Number);\n  const gcd = (a: number, b: number):\
    \ number => (b ? gcd(b, a % b) : a);\n  const lcm = (a: number, b: number): number\
    \ => (a * b) / gcd(a, b);\n  return (xNum * nDen * nNum) % (xDen * nDen) === 0;\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24'));\n", "  const [xNum, xDen] =\
    \ x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const xProduct = xNum * nNum;\n  const xDenProduct = xDen * nDen;\n  return\
    \ xProduct % xDenProduct === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1'));\nconsole.log(simplify('1/2", "  const [xNumerator, xDenominator] =\
    \ x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const numerator = xNumerator * nDenominator;\n  const denominator = xDenominator\
    \ * nNumerator;\n  const gcd = (a: number, b: number): number => (b === 0 ? a\
    \ : gcd(b, a % b));\n  const simplifiedNumerator = numerator / gcd(numerator,\
    \ denominator);\n  const simplifiedDenominator = denominator / gcd(numerator,\
    \ denominator);\n  return simplifiedNumerator % simplifiedDenominator === 0;\n\
    }\n\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const product = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\
    \  return Number.isInteger(product);\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1'));\nconsole.", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result\
    \ = xNumerator * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '3/2'));\nconsole.log(simplify('1/2', '4/2'));\nconsole.log(simplify('1/2',\
    \ '5/2'));\nconsole.log(simplify('1/2', '6/2'));\nconsole.log(simplify('1/2',\
    \ '7/2'));\nconsole.log(simplify('1/2', '8/2'));\nconsole.log(simplify('1/2',\
    \ '9/2'));\nconsole.log(simplify('1/2', '10/2'));\nconsole.log(simplify('1/2',\
    \ '11/2'));\nconsole.log(simplify('1/2', '12/2'));\nconsole.log(simplify('1/2',\
    \ '13/2'));\nconsole.log(simplify('1/2', '14/2'));\nconsole.log(simplify('1/2',\
    \ '15/2'));\nconsole.log(simplify('1/2', '16/2'));\nconsole.log(simplify('1/2',\
    \ '17/2'));\nconsole.log(simplify('1/2', '18/2'));\nconsole.log(", "  let [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  let [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  let numerator = xNumerator * nDenominator;\n\
    \  let denominator = xDenominator * nNumerator;\n  let gcd = getGcd(numerator,\
    \ denominator);\n  return denominator / gcd === 1;\n}\n", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const product = xNumerator * nNumerator;\n  const\
    \ denominator = xDenominator * nDenominator;\n  return product % denominator ===\
    \ 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));", "  let [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  let [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  let numerator = xNumerator * nDenominator;\n  let denominator = xDenominator\
    \ * nNumerator;\n  let gcd = getGcd(numerator, denominator);\n  return denominator\
    \ / gcd === numerator / gcd;\n}\n", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator\
    \ = xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/36'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/48'));\nconsole.log(simplify('1/2',\
    \ '1/50'));\nconsole.log(simplify('1/2', '1/60'));\nconsole.log(simplify('1/2',\
    \ '1/64", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator =\
    \ xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result = xNumerator\
    \ * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator =\
    \ xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\n\
    console.log(simplify('2/3', '4/6'));\nconsole.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3',\
    \ '4/8'));\nconsole.log(simplify('2/3', '4/9'));\nconsole.log(simplify('2/3',\
    \ '4/10'));\nconsole.log(simplify('2/3', '4/11'));\nconsole.log(simplify('2/3',\
    \ '4/12'));\nconsole.log(simplify('2/3', '4/13'));\nconsole.log(simplify('2/3',\
    \ '4/14'));\nconsole.log(simplify('2/3', '4/15'));\nconsole.log(simplify('2/3',\
    \ '4/16'));\nconsole.log(simplify('2/3', '4/17'));\nconsole.log(simplify('2/3',\
    \ '4/18'));\nconsole.log(simplify('2/3', '4/19'));\nconsole.log(simplify('2/3',\
    \ '4/20'));\nconsole.log(simplify('2/3', '4/21'));\nconsole.log(simplify('2/3',\
    \ '4/22'));\nconsole.log(simplify('2/3', '4/23'));\nconsole.log(simplify('2/3',\
    \ '4/24'));\nconsole.log(simplify('2/3', '4/25'));\nconsole.log(simplify('2/3',\
    \ '4/26", "    const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \    const [nNumerator, nDenominator] = n.split('/').map(Number);\n    const result\
    \ = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n    return result\
    \ % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1'));\nconsole.log", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '2/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '4/4'));\nconsole.log(simplify('1/2', '5/4'));\nconsole.log(simplify('1/2',\
    \ '6/4'));\nconsole.log(simplify('1/2', '7/4'));\nconsole.log(simplify('1/2',\
    \ '8/4'));\nconsole.log(simplify('1/2', '9/4'));\nconsole.log(simplify('1/2',\
    \ '10/4'));\nconsole.log(simplify('1/2', '11/4'));\nconsole.log(simplify('1/2',\
    \ '12/4'));\nconsole.log(simplify('1/2', '13/4'));\nconsole.log(simplify('1/2',\
    \ '14/4'));\nconsole.log(simplify('1/2', '15/4'));\nconsole.log(simplify('1/2',\
    \ '16/4'));\nconsole.log(simplify('1/2', '17/4'));\nconsole.log(simplify('1/2',\
    \ '18/4'));\nconsole.log(simplify('1/2', '19/4'));\nconsole.log(simplify('1/2',\
    \ '20/4')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('3/4', '2/3'));\n\
    console.log(simplify('3/4', '2/4'));\nconsole.log(simplify('3/4', '2/5'));\nconsole.log(simplify('3/4',\
    \ '2/6'));\nconsole.log(simplify('3/4', '2/7'));\nconsole.log(simplify('3/4',\
    \ '2/8'));\nconsole.log(simplify('3/4', '2/9'));\nconsole.log(simplify('3/4',\
    \ '2/10'));\nconsole.log(simplify('3/4', '2/11'));\nconsole.log(simplify('3/4',\
    \ '2/12'));\nconsole.log(simplify('3/4', '2/13'));\nconsole.log(simplify('3/4',\
    \ '2/14'));\nconsole.log(simplify('3/4', '2/15'));\nconsole.log(simplify('3/4',\
    \ '2/16'));\nconsole.log(simplify('3/4', '2/17'));\nconsole.log(simplify('3/4',\
    \ '2/18'));\nconsole.log(simplify('3/4', '2/19'));\nconsole.log(simplify('3/4',\
    \ '2/20'));\nconsole.log(simplify('3/4', '2/21'));\nconsole.log(simplify('3/4',\
    \ '2/22'));\nconsole.log(simplify('3/4', '2/23'));\nconsole.log(simplify('3/4',\
    \ '2/24'));\nconsole.log(simplify('3/4', '2/25')", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  return (xNum * nDen) % (xDen\
    \ * nNum) === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1'));\nconsole.log(simplify('1/2', '20/1'));\nconsole.log(simplify('", " \
    \ const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const result = (xNum * nNum) / (xDen * nDen);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '4/5'));\nconsole.log(simplify('1/2', '5/6'));\nconsole.log(simplify('1/2',\
    \ '6/7'));\nconsole.log(simplify('1/2', '7/8'));\nconsole.log(simplify('1/2',\
    \ '8/9'));\nconsole.log(simplify('1/2', '9/10'));\nconsole.log(simplify('1/2',\
    \ '10/11'));\nconsole.log(simplify('1/2', '11/12'));\nconsole.log(simplify('1/2',\
    \ '12/13'));\nconsole.log(simplify('1/2', '13/14'));\nconsole.log(simplify('1/2',\
    \ '14/15'));\nconsole.log(simplify('1/2', '15/16'));\nconsole.log(simplify('1/2',\
    \ '16/17'));\nconsole.log(simplify('1/2', '17/18'));\nconsole.log(simplify('1/2',\
    \ '18/19'));\nconsole.log(simplify('1/2', '19/20'));\nconsole.log(simplify('1/2',\
    \ '20/21'));\nconsole.log(simplify('1/2', '21/22'));\nconsole.log(simplify('1/2',\
    \ '22/23'));", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const product = xNum * nNum;\n  const productDen\
    \ = xDen * nDen;\n  return product % productDen === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '3/4')); // true\nconsole.log(simplify('1/2', '3/5')); // false\nconsole.log(simplify('1/2',\
    \ '3/3')); // true\nconsole.log(simplify('1/2', '3/6')); // true\nconsole.log(simplify('1/2',\
    \ '3/7')); // false\nconsole.log(simplify('1/2', '3/8')); // false\nconsole.log(simplify('1/2',\
    \ '3/9')); // false\nconsole.log(simplify('1/2', '3/10')); // false\nconsole.log(simplify('1/2',\
    \ '3/11')); // false\nconsole.log(simplify('1/2', '3/12')); // true\nconsole.log(simplify('1/2',\
    \ '3/13')); // false\nconsole.log(simplify('1/2', '3/14')); // false\nconsole.log(simplify('1/2',\
    \ '3/15')); // false\nconsole.log(simplify('1/2', '3/16')); // false\nconsole.log(simplify('1/2',\
    \ '3/17')); // false\nconsole.log(simplify('1/2', '3/18')); // true\nconsole.log(simplify('1/2',\
    \ '3/19')); // false\nconsole.log(simplify('1/2', '3/20')); // false\nconsole.log(simplify('1/2',\
    \ '3/21')); // false\nconsole.log(simplify('1/2', '3/22')); // false\nconsole.log(simplify('1/2',\
    \ '", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const productNumerator\
    \ = xNumerator * nNumerator;\n  const productDenominator = xDenominator * nDenominator;\n\
    \  return productNumerator % productDenominator === 0;\n}\n\nconsole.log(simplify('3/4',\
    \ '2/3'));\nconsole.log(simplify('3/4', '1/3'));\nconsole.log(simplify('3/4',\
    \ '1/2'));\nconsole.log(simplify('3/4', '1/4'));\nconsole.log(simplify('3/4',\
    \ '1/6'));\nconsole.log(simplify('3/4', '1/8'));\nconsole.log(simplify('3/4',\
    \ '1/9'));\nconsole.log(simplify('3/4', '1/12'));\nconsole.log(simplify('3/4',\
    \ '1/16'));\nconsole.log(simplify('3/4', '1/18'));\nconsole.log(simplify('3/4',\
    \ '1/24'));\nconsole.log(simplify('3/4', '1/27'));\nconsole.log(simplify('3/4',\
    \ '1/32'));\nconsole.log(simplify('3/4', '1/36'));\nconsole.log(simplify('3/4',\
    \ '1/48'));\nconsole.log(simplify('3/4', '1/54'));\nconsole.log(simplify('3/4',\
    \ '1/64'));\nconsole.log(simplify('3/4', '1/72'));\nconsole.log(simplify('3/4',\
    \ '1/81'));\nconsole.log(simplify('3/4', '1/96'));\nconsole.log(simplify('3/4',\
    \ '1/108'));\nconsole.log(simplify('", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const result = (xNum * nNum)\
    \ / (xDen * nDen);\n  return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1'));", "    const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \    const [nNumerator, nDenominator] = n.split('/').map(Number);\n    const result\
    \ = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n    return result\
    \ % 1 === 0;\n}\n\nconsole.log(simplify('2/3', '3/4'));\nconsole.log(simplify('2/3',\
    \ '3/5'));\nconsole.log(simplify('2/3', '3/6'));\nconsole.log(simplify('2/3',\
    \ '3/7'));\nconsole.log(simplify('2/3', '3/8'));\nconsole.log(simplify('2/3',\
    \ '3/9'));\nconsole.log(simplify('2/3', '3/10'));\nconsole.log(simplify('2/3',\
    \ '3/11'));\nconsole.log(simplify('2/3', '3/12'));\nconsole.log(simplify('2/3',\
    \ '3/13'));\nconsole.log(simplify('2/3', '3/14'));\nconsole.log(simplify('2/3',\
    \ '3/15'));\nconsole.log(simplify('2/3', '3/16'));\nconsole.log(simplify('2/3',\
    \ '3/17'));\nconsole.log(simplify('2/3', '3/18'));\nconsole.log(simplify('2/3',\
    \ '3/19'));\nconsole.log(simplify('2/3', '3/20'));\nconsole.log(simplify('2/3',\
    \ '3/21'));\nconsole.log(simplify('2/3', '3/22'));\nconsole.log(simplify('2/3',\
    \ '3/23'));\nconsole.log(simplify('2/3', '3/24'));\nconsole.log(simplify('2/3',\
    \ '3/25'));\nconsole.log", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('2/3',\
    \ '4/5'));\nconsole.log(simplify('2/3', '4/6'));\nconsole.log(simplify('2/3',\
    \ '4/4'));\nconsole.log(simplify('2/3', '4/3'));\nconsole.log(simplify('2/3',\
    \ '4/2'));\nconsole.log(simplify('2/3', '4/1'));\nconsole.log(simplify('2/3',\
    \ '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));\nconsole.log(simplify('2/3',\
    \ '4/19'));\nconsole.log(simplify('2/3', '4/20'));\nconsole.log(simplify('2/3',\
    \ '4/21'));\nconsole.log(simplify('2/3', '4/22'));\nconsole.log(simplify('2/3',\
    \ '4/23')", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result\
    \ = xNumerator * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/36'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/48'));\nconsole.log(simplify('1/2',\
    \ '1/50'));\nconsole.log(simplify('1/2', '1/54'));\nconsole.log(simplify('1/2',\
    \ '1/60'));\nconsole.log(simplify('1/2', '1/64'));\nconsole.log(simplify('1/2',\
    \ '1/72'));\nconsole.log(simplify('1/2', '1/80'));\nconsole.log(", "    let xNum\
    \ = Number(x.split('/')[0]);\n    let xDen = Number(x.split('/')[1]);\n    let\
    \ nNum = Number(n.split('/')[0]);\n    let nDen = Number(n.split('/')[1]);\n \
    \   let xNumN = xNum * nDen;\n    let nNumX = nNum * xDen;\n    return xNumN %\
    \ nNumX === 0;\n}\n\nconsole.log(simplify('2/3', '3/4'));\nconsole.log(simplify('2/3',\
    \ '3/5'));\nconsole.log(simplify('2/3', '3/6'));\nconsole.log(simplify('2/3',\
    \ '3/7'));\nconsole.log(simplify('2/3', '3/8'));\nconsole.log(simplify('2/3',\
    \ '3/9'));\nconsole.log(simplify('2/3', '3/10'));\nconsole.log(simplify('2/3',\
    \ '3/11'));\nconsole.log(simplify('2/3', '3/12'));\nconsole.log(simplify('2/3',\
    \ '3/13'));\nconsole.log(simplify('2/3', '3/14'));\nconsole.log(simplify('2/3',\
    \ '3/15'));\nconsole.log(simplify('2/3', '3/16'));\nconsole.log(simplify('2/3',\
    \ '3/17'));\nconsole.log(simplify('2/3', '3/18'));\nconsole.log(simplify('2/3',\
    \ '3/19'));\nconsole.log(simplify('2/3', '3/20'));\nconsole.log(simplify('2/3',\
    \ '3/21'));\nconsole.log(simplify('2/3', '3/22'));\nconsole.log(simplify('2/3',\
    \ '3/23'));\nconsole.log(simplify('2/3', '3/24'));\nconsole.", "    const [xNum,\
    \ xDen] = x.split('/').map(Number);\n    const [nNum, nDen] = n.split('/').map(Number);\n\
    \    const num = xNum * nNum;\n    const den = xDen * nDen;\n    return num %\
    \ den === 0;\n}\n\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2',\
    \ '2/4'));\nconsole.log(simplify('1/2', '2/5'));\nconsole.log(simplify('1/2',\
    \ '2/6'));\nconsole.log(simplify('1/2', '2/7'));\nconsole.log(simplify('1/2',\
    \ '2/8'));\nconsole.log(simplify('1/2', '2/9'));\nconsole.log(simplify('1/2',\
    \ '2/10'));\nconsole.log(simplify('1/2', '2/11'));\nconsole.log(simplify('1/2',\
    \ '2/12'));\nconsole.log(simplify('1/2', '2/13'));\nconsole.log(simplify('1/2',\
    \ '2/14'));\nconsole.log(simplify('1/2', '2/15'));\nconsole.log(simplify('1/2',\
    \ '2/16'));\nconsole.log(simplify('1/2', '2/17'));\nconsole.log(simplify('1/2',\
    \ '2/18'));\nconsole.log(simplify('1/2', '2/19'));\nconsole.log(simplify('1/2',\
    \ '2/20'));\nconsole.log(simplify('1/2', '2/21'));\nconsole.log(simplify('1/2',\
    \ '2/22'));\nconsole.log(simplify('1/2', '2/23')", "    const xNumerator = parseInt(x.split('/')[0]);\n\
    \    const xDenominator = parseInt(x.split('/')[1]);\n    const nNumerator = parseInt(n.split('/')[0]);\n\
    \    const nDenominator = parseInt(n.split('/')[1]);\n    const numerator = xNumerator\
    \ * nDenominator;\n    const denominator = xDenominator * nNumerator;\n    return\
    \ numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(sim", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const product\
    \ = xNumerator * nNumerator;\n  const denominator = xDenominator * nDenominator;\n\
    \  return product % denominator === 0;\n}\n\nexport default simplify;", "  const\
    \ [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nexport default simplify;", "    const [a, b] = x.split('/').map(Number);\n\
    \    const [c, d] = n.split('/').map(Number);\n    const gcd = (a, b) => b ? gcd(b,\
    \ a % b) : a;\n    return (a * d) % (b * c) === 0;\n}\n\nconsole.log(simplify(\"\
    1/2\", \"1/4\"));\nconsole.log(simplify(\"1/2\", \"1/3\"));\nconsole.log(simplify(\"\
    1/2\", \"1/6\"));\nconsole.log(simplify(\"1/2\", \"1/8\"));\nconsole.log(simplify(\"\
    1/2\", \"1/9\"));\nconsole.log(simplify(\"1/2\", \"1/10\"));\nconsole.log(simplify(\"\
    1/2\", \"1/12\"));\nconsole.log(simplify(\"1/2\", \"1/18\"));\nconsole.log(simplify(\"\
    1/2\", \"1/20\"));\nconsole.log(simplify(\"1/2\", \"1/24\"));\nconsole.log(simplify(\"\
    1/2\", \"1/30\"));\nconsole.log(simplify(\"1/2\", \"1/36\"));\nconsole.log(simplify(\"\
    1/2\", \"1/40\"));\nconsole.log(simplify(\"1/2\", \"1/42\"));\nconsole.log(simplify(\"\
    1/2\", \"1/48\"));\nconsole.log(simplify(\"1/2\", \"1/50\"));\nconsole.log(simplify(\"\
    1/2\", \"1/54\"));\nconsole.log(simplify(\"1/2\", \"1/60\"));\nconsole.log(simplify(\"\
    1/2\", \"1/72\"));\nconsole.log(simplify(\"1/2\", \"1/84\"));\nconsole.log(simplify(\"\
    1/2\", \"1/90\"));\nconsole.log(simplify(\"1/2\", \"1/96\"));\nconsole.log(simplify(\"\
    1", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let resultNumerator = xNumerator * nNumerator;\n    let resultDenominator\
    \ = xDenominator * nDenominator;\n    let result = resultNumerator / resultDenominator;\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(simplify(\"1/2\", \"1/3\"));\n\
    console.log(simplify(\"1/2\", \"1/4\"));\nconsole.log(simplify(\"1/2\", \"1/6\"\
    ));\nconsole.log(simplify(\"1/2\", \"1/8\"));\nconsole.log(simplify(\"1/2\", \"\
    1/10\"));\nconsole.log(simplify(\"1/2\", \"1/12\"));\nconsole.log(simplify(\"\
    1/2\", \"1/14\"));\nconsole.log(simplify(\"1/2\", \"1/16\"));\nconsole.log(simplify(\"\
    1/2\", \"1/18\"));\nconsole.log(simplify(\"1/2\", \"1/20\"));\nconsole.log(simplify(\"\
    1/2\", \"1/22\"));\nconsole.log(simplify(\"1/2\", \"1/24\"));\nconsole.log(simplify(\"\
    1/2\", \"1/26\"));\nconsole.log(simplify(\"1/2\", \"1/28\"));\nconsole.log(simplify(\"\
    1/2\", \"1/30\"));\nconsole.log(simplify(\"1/2\", \"1/32\"));\nconsole.log(simplify(\"\
    1/2\", \"1/34\"));\nconsole.log(simplify(\"1/2\", \"1/36\"));\nconsole.log(simplify(\"\
    1/2\", \"1/38\"));\nconsole.log(simplify", "  let [xNum, xDen] = x.split('/').map(Number);\n\
    \  let [nNum, nDen] = n.split('/').map(Number);\n  let num = xNum * nNum;\n  let\
    \ den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const product = (xNum * nNum) / (xDen *\
    \ nDen);\n  return product % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/28'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/32'));\nconsole.log(simplify('1/2',\
    \ '1/34'));\nconsole.log(simplify('1/2', '1/36'));\nconsole.log(simplify('1/2',\
    \ '1/38'));\nconsole.log(simplify('1/2', '1/40'));\nconsole.log(simplify('1/2',\
    \ '1/42'));\nconsole.log(simplify('1/2', '1/44'));\n", "  const [xNum, xDen] =\
    \ x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nconsole.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2', '3/4'));\n\
    console.log(simplify('1/2', '4/6'));\nconsole.log(simplify('1/2', '5/6'));\nconsole.log(simplify('1/2',\
    \ '6/6'));\nconsole.log(simplify('1/2', '7/6'));\nconsole.log(simplify('1/2',\
    \ '8/6'));\nconsole.log(simplify('1/2', '9/6'));\nconsole.log(simplify('1/2',\
    \ '10/6'));\nconsole.log(simplify('1/2', '11/6'));\nconsole.log(simplify('1/2',\
    \ '12/6'));\nconsole.log(simplify('1/2', '13/6'));\nconsole.log(simplify('1/2',\
    \ '14/6'));\nconsole.log(simplify('1/2', '15/6'));\nconsole.log(simplify('1/2',\
    \ '16/6'));\nconsole.log(simplify('1/2', '17/6'));\nconsole.log(simplify('1/2',\
    \ '18/6'));\nconsole.log(simplify('1/2', '19/6'));\nconsole.log(simplify('1/2',\
    \ '20/6'));\nconsole.log(simplify('1/2', '21/6'));\nconsole.log(simplify('1/2',\
    \ '22/6'));\nconsole.log(simplify('1/2', '23/6'));\nconsole.log(simplify('1/2',\
    \ '24/6')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '3/6'));\nconsole.log(simplify('1/2',\
    \ '3/7'));\nconsole.log(simplify('1/2', '3/8'));\nconsole.log(simplify('1/2',\
    \ '3/9'));\nconsole.log(simplify('1/2', '3/10'));\nconsole.log(simplify('1/2',\
    \ '3/11'));\nconsole.log(simplify('1/2', '3/12'));\nconsole.log(simplify('1/2',\
    \ '3/13'));\nconsole.log(simplify('1/2', '3/14'));\nconsole.log(simplify('1/2',\
    \ '3/15'));\nconsole.log(simplify('1/2', '3/16'));\nconsole.log(simplify('1/2',\
    \ '3/17'));\nconsole.log(simplify('1/2', '3/18'));\nconsole.log(simplify('1/2',\
    \ '3/19'));\nconsole.log(simplify('1/2', '3/20'));\nconsole.log(simplify('1/2',\
    \ '3/21'));\nconsole.log(simplify('1/2', '3/22'));\nconsole.log(simplify('1/2',\
    \ '3/23'));\nconsole.log(simplify('1/2', '3/24')", "    let xNum = Number(x.split('/')[0]);\n\
    \    let xDen = Number(x.split('/')[1]);\n    let nNum = Number(n.split('/')[0]);\n\
    \    let nDen = Number(n.split('/')[1]);\n    let num = xNum * nNum;\n    let\
    \ den = xDen * nDen;\n    let gcd = getGCD(num, den);\n    return num / gcd ===\
    \ den / gcd;\n}\n", "  const [xNum, xDen] = x.split('/').map(Number);\n  const\
    \ [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const\
    \ den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/25')", "    const [xNum, xDen] = x.split('/');\n    const [nNum, nDen] =\
    \ n.split('/');\n    const num = Number(xNum) * Number(nNum);\n    const den =\
    \ Number(xDen) * Number(nDen);\n    return Number.isInteger(num / den);\n}\n\n\
    console.log(simplify('1/4', '1/4'));\nconsole.log(simplify('1/4', '1/3'));\nconsole.log(simplify('1/4',\
    \ '1/2'));\nconsole.log(simplify('1/4', '1/1'));\nconsole.log(simplify('1/4',\
    \ '2/1'));\nconsole.log(simplify('1/4', '3/1'));\nconsole.log(simplify('1/4',\
    \ '4/1'));\nconsole.log(simplify('1/4', '5/1'));\nconsole.log(simplify('1/4',\
    \ '6/1'));\nconsole.log(simplify('1/4', '7/1'));\nconsole.log(simplify('1/4',\
    \ '8/1'));\nconsole.log(simplify('1/4', '9/1'));\nconsole.log(simplify('1/4',\
    \ '10/1'));\nconsole.log(simplify('1/4', '11/1'));\nconsole.log(simplify('1/4',\
    \ '12/1'));\nconsole.log(simplify('1/4', '13/1'));\nconsole.log(simplify('1/4',\
    \ '14/1'));\nconsole.log(simplify('1/4', '15/1'));\nconsole.log(simplify('1/4',\
    \ '16/1'));\nconsole.log(simplify('1/4', '17/1'));\nconsole.log(simplify('1/4',\
    \ '18/1'));\nconsole.log(simplify('1/4', '19/1'));\nconsole.log(simplify('1/4',",
  "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  const numerator = xNumerator *\
    \ nDenominator;\n  const denominator = xDenominator * nNumerator;\n  return numerator\
    \ % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '2/2'));\nconsole.log(simplify('1/2', '3/2'));\nconsole.log(simplify('1/2',\
    \ '4/2'));\nconsole.log(simplify('1/2', '5/2'));\nconsole.log(simplify('1/2',\
    \ '6/2'));\nconsole.log(simplify('1/2', '7/2'));\nconsole.log(simplify('1/2',\
    \ '8/2'));\nconsole.log(simplify('1/2', '9/2'));\nconsole.log(simplify('1/2',\
    \ '10/2'));\nconsole.log(simplify('1/2', '11/2'));\nconsole.log(simplify('1/2',\
    \ '12/2'));\nconsole.log(simplify('1/2', '13/2'));\nconsole.log(simplify('1/2',\
    \ '14/2'));\nconsole.log(simplify('1/2', '15/2'));\nconsole.log(simplify('1/2',\
    \ '16/2'));\nconsole.log(simplify('1/2', '17/2'));\nconsole.log(simplify('1/2',\
    \ '18/2'));\nconsole.log(simplify('1/2', '19/2'));\nconsole.log(simplify('1/2',\
    \ '20/2", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator =\
    \ xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\n\
    console.log(simplify('3/4', '3/4'));\nconsole.log(simplify('5/5', '5/5'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '4/5'));\nconsole.log(simplify('1/2',\
    \ '5/6'));\nconsole.log(simplify('1/2', '6/7'));\nconsole.log(simplify('1/2',\
    \ '7/8'));\nconsole.log(simplify('1/2', '8/9'));\nconsole.log(simplify('1/2',\
    \ '9/10'));\nconsole.log(simplify('1/2', '10/11'));\nconsole.log(simplify('1/2',\
    \ '11/12'));\nconsole.log(simplify('1/2', '12/13'));\nconsole.log(simplify('1/2',\
    \ '13/14'));\nconsole.log(simplify('1/2', '14/15'));\nconsole.log(simplify('1/2',\
    \ '15/16'));\nconsole.log(simplify('1/2', '16/17'));\nconsole.log(simplify('1/2',\
    \ '17/18'));\nconsole.log(simplify('1/2', '18/19'));\nconsole.log(simplify('1/2',\
    \ '19/20", "    const xNumerator = parseInt(x.split('/')[0]);\n    const xDenominator\
    \ = parseInt(x.split('/')[1]);\n    const nNumerator = parseInt(n.split('/')[0]);\n\
    \    const nDenominator = parseInt(n.split('/')[1]);\n    const xNumeratorTimesNumerator\
    \ = xNumerator * nNumerator;\n    const xDenominatorTimesDenominator = xDenominator\
    \ * nDenominator;\n    const xNumeratorTimesDenominator = xNumerator * nDenominator;\n\
    \    const xDenominatorTimesNumerator = xDenominator * nNumerator;\n    if (xNumeratorTimesNumerator\
    \ % xDenominatorTimesDenominator === 0) {\n        return true;\n    } else if\
    \ (xNumeratorTimesDenominator % xDenominatorTimesNumerator === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(simplify('2/3',\
    \ '4/5'));\nconsole.log(simplify('2/3', '4/6'));\nconsole.log(simplify('2/3',\
    \ '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const numerator = xNumerator * nDenominator;\n  const denominator = xDenominator\
    \ * nNumerator;\n  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('2/3',\
    \ '4/5'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '2/3'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '4/5'));\nconsole.log(simplify('1/2', '5/6'));\nconsole.log(simplify('1/2',\
    \ '6/7'));\nconsole.log(simplify('1/2', '7/8'));\nconsole.log(simplify('1/2',\
    \ '8/9'));\nconsole.log(simplify('1/2', '9/10'));\nconsole.log(simplify('1/2',\
    \ '10/11'));\nconsole.log(simplify('1/2', '11/12'));\nconsole.log(simplify('1/2',\
    \ '12/13'));\nconsole.log(simplify('1/2', '13/14'));\nconsole.log(simplify('1/2',\
    \ '14/15'));\nconsole.log(simplify('1/2', '15/16'));\nconsole.log(simplify('1/2',\
    \ '16/17'));\nconsole.log(simplify('1/2', '17/18'));\nconsole.log(simplify('1/2',\
    \ '18/19'));\nconsole.log(simplify('1/2', '19/20", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const product = xNum * nNum\
    \ / (xDen * nDen);\n  return Number.isInteger(product);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '4/5'));\nconsole.log(simplify('1/2',\
    \ '5/6'));\nconsole.log(simplify('1/2', '6/7'));\nconsole.log(simplify('1/2',\
    \ '7/8'));\nconsole.log(simplify('1/2', '8/9'));\nconsole.log(simplify('1/2',\
    \ '9/10'));\nconsole.log(simplify('1/2', '10/11'));\nconsole.log(simplify('1/2',\
    \ '11/12'));\nconsole.log(simplify('1/2', '12/13'));\nconsole.log(simplify('1/2',\
    \ '13/14'));\nconsole.log(simplify('1/2', '14/15'));\nconsole.log(simplify('1/2',\
    \ '15/16'));\nconsole.log(simplify('1/2', '16/17'));\nconsole.log(simplify('1/2',\
    \ '17/18'));\nconsole.log(simplify('1/2', '18/19'));\nconsole.log(simplify('1/2',\
    \ '19/20'));\nconsole.log(simplify('1/2', '20/21'));\nconsole.log(simplify('1/2',\
    \ '21/22'));\nconsole", "  const [xNum, xDen] = x.split('/').map(Number);\n  const\
    \ [nNum, nDen] = n.split('/').map(Number);\n  const result = (xNum * nNum) / (xDen\
    \ * nDen);\n  return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24'));", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result\
    \ = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/38'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/42'));\nconsole.", "  const xArr =\
    \ x.split('/');\n  const nArr = n.split('/');\n  const xNum = Number(xArr[0]);\n\
    \  const xDen = Number(xArr[1]);\n  const nNum = Number(nArr[0]);\n  const nDen\
    \ = Number(nArr[1]);\n  const xN = xNum * nDen;\n  const nX = nNum * xDen;\n \
    \ return xN % nDen === 0 && nX % xDen === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const numerator = xNumerator * nDenominator;\n\
    \  const denominator = xDenominator * nNumerator;\n  return numerator % denominator\
    \ === 0;\n}\n\nconsole.log(simplify('2/3', '3/4'));\nconsole.log(simplify('2/3',\
    \ '3/5'));\nconsole.log(simplify('2/3', '3/6'));\nconsole.log(simplify('2/3',\
    \ '3/7'));\nconsole.log(simplify('2/3', '3/8'));\nconsole.log(simplify('2/3',\
    \ '3/9'));\nconsole.log(simplify('2/3', '3/10'));\nconsole.log(simplify('2/3',\
    \ '3/11'));\nconsole.log(simplify('2/3', '3/12'));\nconsole.log(simplify('2/3',\
    \ '3/13'));\nconsole.log(simplify('2/3', '3/14'));\nconsole.log(simplify('2/3',\
    \ '3/15'));\nconsole.log(simplify('2/3', '3/16'));\nconsole.log(simplify('2/3',\
    \ '3/17'));\nconsole.log(simplify('2/3', '3/18'));\nconsole.log(simplify('2/3',\
    \ '3/19'));\nconsole.log(simplify('2/3', '3/20'));\nconsole.log(simplify('2/3',\
    \ '3/21'));\nconsole.log(simplify('2/3', '3/22'));\nconsole.log(simplify('2/3',\
    \ '3/23'));\nconsole.log(simplify('2/3', '3/24'));\nconsole.log(simplify('2/3',\
    \ '3/25", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator =\
    \ xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '3/6'));\nconsole.log(simplify('1/2',\
    \ '3/7'));\nconsole.log(simplify('1/2', '3/8'));\nconsole.log(simplify('1/2',\
    \ '3/9'));\nconsole.log(simplify('1/2', '3/10'));\nconsole.log(simplify('1/2',\
    \ '3/11'));\nconsole.log(simplify('1/2', '3/12'));\nconsole.log(simplify('1/2',\
    \ '3/13'));\nconsole.log(simplify('1/2', '3/14'));\nconsole.log(simplify('1/2',\
    \ '3/15'));\nconsole.log(simplify('1/2', '3/16'));\nconsole.log(simplify('1/2',\
    \ '3/17'));\nconsole.log(simplify('1/2', '3/18'));\nconsole.log(simplify('1/2',\
    \ '3/19'));\nconsole.log(simplify('1/2', '3/20'));\nconsole.log(simplify('1/2',\
    \ '3/21'));\nconsole.log(simplify('1/2', '3/22'));\nconsole.log(simplify('1/2',\
    \ '3/23", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen]\
    \ = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den = xDen\
    \ * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/25')", "    const xNum = Number(x.split('/')[0]);\n\
    \    const xDen = Number(x.split('/')[1]);\n    const nNum = Number(n.split('/')[0]);\n\
    \    const nDen = Number(n.split('/')[1]);\n    const den = xDen * nDen;\n   \
    \ const num = xNum * nNum;\n    return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let numerator = xNumerator\
    \ * nNumerator;\n    let denominator = xDenominator * nDenominator;\n    let gcd\
    \ = getGCD(numerator, denominator);\n    return numerator / gcd === denominator\
    \ / gcd;\n}\n", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result\
    \ = xNumerator * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(", "    let xNumerator\
    \ = Number(x.split('/')[0]);\n    let xDenominator = Number(x.split('/')[1]);\n\
    \    let nNumerator = Number(n.split('/')[0]);\n    let nDenominator = Number(n.split('/')[1]);\n\
    \    let resultNumerator = xNumerator * nNumerator;\n    let resultDenominator\
    \ = xDenominator * nDenominator;\n    let result = resultNumerator / resultDenominator;\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(simplify('2/3', '3/4'));\n\
    console.log(simplify('2/3', '3/3'));\nconsole.log(simplify('2/3', '3/5'));\nconsole.log(simplify('2/3',\
    \ '3/6'));\nconsole.log(simplify('2/3', '3/7'));\nconsole.log(simplify('2/3',\
    \ '3/8'));\nconsole.log(simplify('2/3', '3/9'));\nconsole.log(simplify('2/3',\
    \ '3/10'));\nconsole.log(simplify('2/3', '3/11'));\nconsole.log(simplify('2/3',\
    \ '3/12'));\nconsole.log(simplify('2/3', '3/13'));\nconsole.log(simplify('2/3',\
    \ '3/14'));\nconsole.log(simplify('2/3', '3/15'));\nconsole.log(simplify('2/3',\
    \ '3/16'));\nconsole.log(simplify('2/3', '3/17'));\nconsole.log(simplify('2/3',\
    \ '3/18'));\nconsole.log(simplify('2/3', '3/19'));\nconsole.log(simplify('2/3',\
    \ '3/20'));\nconsole.log(simplify('2/3', '3/21'));\nconsole.log(simplify('2/",
  "  let [xNumerator, xDenominator] = x.split('/').map(Number);\n  let [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  let numerator = xNumerator * nDenominator;\n\
    \  let denominator = xDenominator * nNumerator;\n  let gcd = getGcd(numerator,\
    \ denominator);\n  return denominator / gcd === numerator / gcd;\n}\n", "  const\
    \ [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  const resultNumerator = xNumerator\
    \ * nNumerator;\n  const resultDenominator = xDenominator * nDenominator;\n  return\
    \ resultNumerator % resultDenominator === 0;\n}\n\nconsole.log(simplify('2/3',\
    \ '4/5'));\nconsole.log(simplify('2/3', '4/6'));\nconsole.log(simplify('2/3',\
    \ '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));\nconsole.log(simplify('2/3',\
    \ '4/19'));\nconsole.log(simplify('2/3', '4/20'));\nconsole.log(simplify('2/3',\
    \ '4/21'));\nconsole.log(simplify('2/3', '4/22'));\nconsole.log(simplify('2/3',\
    \ '4/23'));\nconsole.log(simplify('2/3', '4/24'));\nconsole.log(simplify('2/3',\
    \ '4/25'));\nconsole.log(simplify('", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/25')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1'));\nconsole.log(simplify('1/2', '20/1')", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const gcd = (a: number, b:\
    \ number): number => (b ? gcd(b, a % b) : a);\n  const lcm = (a: number, b: number):\
    \ number => (a * b) / gcd(a, b);\n  const den = lcm(xDen, nDen);\n  const num\
    \ = (den / xDen) * xNum * (den / nDen) * nNum;\n  return Number.isInteger(num\
    \ / den);\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2", "    const [xNum, xDen] = x.split('/').map(Number);\n\
    \    const [nNum, nDen] = n.split('/').map(Number);\n    const num = xNum * nNum;\n\
    \    const den = xDen * nDen;\n    return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '2/3'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '4/5'));\nconsole.log(simplify('1/2', '5/6'));\nconsole.log(simplify('1/2',\
    \ '6/7'));\nconsole.log(simplify('1/2', '7/8'));\nconsole.log(simplify('1/2',\
    \ '8/9'));\nconsole.log(simplify('1/2', '9/10'));\nconsole.log(simplify('1/2',\
    \ '10/11'));\nconsole.log(simplify('1/2', '11/12'));\nconsole.log(simplify('1/2',\
    \ '12/13'));\nconsole.log(simplify('1/2', '13/14'));\nconsole.log(simplify('1/2',\
    \ '14/15'));\nconsole.log(simplify('1/2', '15/16'));\nconsole.log(simplify('1/2',\
    \ '16/17'));\nconsole.log(simplify('1/2', '17/18'));\nconsole.log(simplify('1/2',\
    \ '18/19'));\nconsole.log(simplify('1/2', '19/20'));\nconsole.log(simplify('1/2',\
    \ '20/21'));\nconsole.log(simplify('1/2', '21/22'));\nconsole.log(simplify('1/2',\
    \ '22/23')", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % (xDenominator\
    \ * nDenominator) === 0;\n}\n\nconsole.log(simplify(\"1/2\", \"1/2\"));\nconsole.log(simplify(\"\
    1/2\", \"1/3\"));\nconsole.log(simplify(\"1/2\", \"1/4\"));\nconsole.log(simplify(\"\
    1/2\", \"1/5\"));\nconsole.log(simplify(\"1/2\", \"1/6\"));\nconsole.log(simplify(\"\
    1/2\", \"1/7\"));\nconsole.log(simplify(\"1/2\", \"1/8\"));\nconsole.log(simplify(\"\
    1/2\", \"1/9\"));\nconsole.log(simplify(\"1/2\", \"1/10\"));\nconsole.log(simplify(\"\
    1/2\", \"1/11\"));\nconsole.log(simplify(\"1/2\", \"1/12\"));\nconsole.log(simplify(\"\
    1/2\", \"1/13\"));\nconsole.log(simplify(\"1/2\", \"1/14\"));\nconsole.log(simplify(\"\
    1/2\", \"1/15\"));\nconsole.log(simplify(\"1/2\", \"1/16\"));\nconsole.log(simplify(\"\
    1/2\", \"1/17\"));\nconsole.log(simplify(\"1/2\", \"1/18\"));\nconsole.log(simplify(\"\
    1/2\", \"1/19\"));\nconsole.log(simplify(\"1/2\", \"1/20\"));\nconsole.log(simplify(\"\
    1/2\", \"1/21\"));\nconsole", "  const xArr = x.split('/');\n  const nArr = n.split('/');\n\
    \  const xNum = Number(xArr[0]);\n  const xDen = Number(xArr[1]);\n  const nNum\
    \ = Number(nArr[0]);\n  const nDen = Number(nArr[1]);\n  const xDec = xNum / xDen;\n\
    \  const nDec = nNum / nDen;\n  const result = xDec * nDec;\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const product = xNumerator * nNumerator;\n  const\
    \ denominator = xDenominator * nDenominator;\n  return product % denominator ===\
    \ 0;\n}\n\nconsole.log(simplify('1/3', '2/4'));\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const numerator = xNumerator * nDenominator;\n  const denominator = xDenominator\
    \ * nNumerator;\n  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/38'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/42", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  return (xNumerator * nDenominator) % (xDenominator * nNumerator) === 0;\n}\n\
    \nconsole.log(simplify('3/4', '2/3'));", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const result = xNumerator * nNumerator / (xDenominator\
    \ * nDenominator);\n  return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(", "  const [xNum,\
    \ xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const product = xNum * nNum;\n  const gcd = (a: number, b: number): number\
    \ => {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n  };\n  const divisor\
    \ = gcd(product, xDen * nDen);\n  return product / divisor === xDen * nDen;\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22')", "    const [xNum, xDen] = x.split('/').map(Number);\n\
    \    const [nNum, nDen] = n.split('/').map(Number);\n    const num = xNum * nNum;\n\
    \    const den = xDen * nDen;\n    return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  const gcd = getGcd(num, den);\n  return num / gcd === den /\
    \ gcd;\n}\n", "  const xNumerator = parseInt(x.split('/')[0]);\n  const xDenominator\
    \ = parseInt(x.split('/')[1]);\n  const nNumerator = parseInt(n.split('/')[0]);\n\
    \  const nDenominator = parseInt(n.split('/')[1]);\n\n  const xProduct = xNumerator\
    \ * nDenominator;\n  const nProduct = nNumerator * xDenominator;\n\n  return xProduct\
    \ === nProduct;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '2/4'));\nconsole.log(simplify('1/2',\
    \ '2/3'));\nconsole.log(simplify('2/2', '2/3'));\nconsole.log(simplify('1/2',\
    \ '2/2'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '3/2'));\nconsole.log(simplify('1/2', '3/3'));\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '3/5'));\nconsole.log(simplify('1/2',\
    \ '3/6'));\nconsole.log(simplify('1/2', '3/7'));\nconsole.log(simplify('1/2',\
    \ '3/8'));\nconsole.log(simplify('1/2', '3/9'));\nconsole.log(simplify('1/2',\
    \ '3/10'));\nconsole.log(simplify('1/2', '3/11'));\nconsole.log(simplify('1/2',\
    \ '3/12'));\nconsole.log(simplify", "  const xArr = x.split('/');\n  const nArr\
    \ = n.split('/');\n  const xNum = parseInt(xArr[0]);\n  const xDen = parseInt(xArr[1]);\n\
    \  const nNum = parseInt(nArr[0]);\n  const nDen = parseInt(nArr[1]);\n  const\
    \ xNumN = xNum * nDen;\n  const nNumX = nNum * xDen;\n  return xNumN % nNumX ===\
    \ 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('3/4', '2/5'));\n\
    console.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3', '4/6'));\nconsole.log(simplify('2/3',\
    \ '4/8'));\nconsole.log(simplify('2/3', '4/9'));\nconsole.log(simplify('2/3',\
    \ '4/10'));\nconsole.log(simplify('2/3', '4/11'));\nconsole.log(simplify('2/3',\
    \ '4/12'));\nconsole.log(simplify('2/3', '4/13'));\nconsole.log(simplify('2/3',\
    \ '4/14'));\nconsole.log(simplify('2/3', '4/15'));\nconsole.log(simplify('2/3',\
    \ '4/16'));\nconsole.log(simplify('2/3', '4/17'));\nconsole.log(simplify('2/3',\
    \ '4/18'));\nconsole.log(simplify('2/3', '4/19'));\nconsole.log(simplify('2/3',\
    \ '4/20'));\nconsole.log(simplify('2/3', '4/21'));\nconsole.log(simplify('2/3',\
    \ '4/22'));\nconsole.log(simplify('2/3', '4/23'));\nconsole.log", "  const [xNum,\
    \ xDen] = x.split('/');\n  const [nNum, nDen] = n.split('/');\n  const num = xNum\
    \ * nNum;\n  const den = xDen * nDen;\n  const gcd = (a: number, b: number): number\
    \ => {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n  };\n  const g\
    \ = gcd(num, den);\n  return num / g === den / g;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(sim", "  const\
    \ [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  const result = xNumerator * nNumerator\
    \ / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n}\n\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/27'));\nconsole.log(simplify('1/2', '1/28'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/32'));\nconsole.log(", "    const\
    \ [xNumerator, xDenominator] = x.split('/').map(Number);\n    const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n    const product = xNumerator *\
    \ nNumerator;\n    const denominator = xDenominator * nDenominator;\n    return\
    \ product % denominator === 0;\n}\n\nconsole.log(simplify('3/4', '2/3'));\nconsole.log(simplify('3/4',\
    \ '2/4'));\nconsole.log(simplify('3/4', '2/5'));\nconsole.log(simplify('3/4',\
    \ '2/6'));\nconsole.log(simplify('3/4', '2/7'));\nconsole.log(simplify('3/4',\
    \ '2/8'));\nconsole.log(simplify('3/4', '2/9'));\nconsole.log(simplify('3/4',\
    \ '2/10'));\nconsole.log(simplify('3/4', '2/11'));\nconsole.log(simplify('3/4',\
    \ '2/12'));\nconsole.log(simplify('3/4', '2/13'));\nconsole.log(simplify('3/4',\
    \ '2/14'));\nconsole.log(simplify('3/4', '2/15'));\nconsole.log(simplify('3/4',\
    \ '2/16'));\nconsole.log(simplify('3/4', '2/17'));\nconsole.log(simplify('3/4',\
    \ '2/18'));\nconsole.log(simplify('3/4', '2/19'));\nconsole.log(simplify('3/4',\
    \ '2/20'));\nconsole.log(simplify('3/4', '2/21'));\nconsole.log(simplify('3/4',\
    \ '2/22'));\nconsole.log(simplify('3/4', '2/23'));\nconsole.log(simplify('3/4',\
    \ '2/24'));", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const xN = xNum * nDen;\n  const nX = nNum\
    \ * xDen;\n  return xN % nX === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/25'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/27'));\nconsole.log(simplify('1/2', '1/28'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/32'));\nconsole.log(simplify('1/2',\
    \ '1/33'));\nconsole.log(simplify('1/2', '", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '2/2'));\nconsole.log(simplify('1/2', '3/2'));\nconsole.log(simplify('1/2',\
    \ '4/2'));\nconsole.log(simplify('1/2', '5/2'));\nconsole.log(simplify('1/2',\
    \ '6/2'));\nconsole.log(simplify('1/2', '7/2'));\nconsole.log(simplify('1/2',\
    \ '8/2'));\nconsole.log(simplify('1/2', '9/2'));\nconsole.log(simplify('1/2',\
    \ '10/2'));\nconsole.log(simplify('1/2', '11/2'));\nconsole.log(simplify('1/2',\
    \ '12/2'));\nconsole.log(simplify('1/2', '13/2'));\nconsole.log(simplify('1/2',\
    \ '14/2'));\nconsole.log(simplify('1/2', '15/2'));\nconsole.log(simplify('1/2',\
    \ '16/2'));\nconsole.log(simplify('1/2', '17/2'));\nconsole.log(simplify('1/2',\
    \ '18/2'));\nconsole.log(simplify('1/2', '19/2'));\nconsole.log(simplify('1/2',\
    \ '20/2'));\nconsole.log(simplify('1/2', '21/2')", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const xNumTimesN = xNum *\
    \ nNum;\n  const xDenTimesN = xDen * nDen;\n  return xNumTimesN % xDenTimesN ===\
    \ 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('2/3', '4/6'));\n\
    console.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));\nconsole.log(simplify('2/3',\
    \ '4/19'));\nconsole.log(simplify('2/3', '4/20'));\nconsole.log(simplify('2/3',\
    \ '4/21'));\nconsole.log(simplify('2/3', '4/22'));\nconsole.log(simplify('2/3',\
    \ '4/23'));\nconsole.log(simplify('2/3', '4/24'));\nconsole.log(simplify('2/3',\
    \ '4/25'));\nconsole.log(simplify('2/3', '4/26'));\nconsole.log(sim", "  const\
    \ [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1')", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const product\
    \ = xNumerator * nNumerator;\n  const productDenominator = xDenominator * nDenominator;\n\
    \  return product % productDenominator === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const result = xNumerator * nNumerator / (xDenominator * nDenominator);\n \
    \ return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/38'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/42'));\nconsole.log(simplify('1/2',\
    \ '1/44'));\nconsole.log(", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const product = (xNum * nNum) / (xDen *\
    \ nDen);\n  return Number.isInteger(product);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '3/6'));\nconsole.log(simplify('1/2',\
    \ '3/5'));\nconsole.log(simplify('1/2', '3/7'));\nconsole.log(simplify('1/2',\
    \ '3/8'));\nconsole.log(simplify('1/2', '3/9'));\nconsole.log(simplify('1/2',\
    \ '3/10'));\nconsole.log(simplify('1/2', '3/11'));\nconsole.log(simplify('1/2',\
    \ '3/12'));\nconsole.log(simplify('1/2', '3/13'));\nconsole.log(simplify('1/2',\
    \ '3/14'));\nconsole.log(simplify('1/2', '3/15'));\nconsole.log(simplify('1/2',\
    \ '3/16'));\nconsole.log(simplify('1/2', '3/17'));\nconsole.log(simplify('1/2',\
    \ '3/18'));\nconsole.log(simplify('1/2', '3/19'));\nconsole.log(simplify('1/2',\
    \ '3/20'));\nconsole.log(simplify('1/2', '3/21'));\nconsole.log(simplify('1/2',\
    \ '3/22'));", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/25')", "    const xNumerator = parseInt(x.split('/')[0]);\n\
    \    const xDenominator = parseInt(x.split('/')[1]);\n    const nNumerator = parseInt(n.split('/')[0]);\n\
    \    const nDenominator = parseInt(n.split('/')[1]);\n    const xNumeratorTimesNumerator\
    \ = xNumerator * nNumerator;\n    const xDenominatorTimesDenominator = xDenominator\
    \ * nDenominator;\n    return xNumeratorTimesNumerator % xDenominatorTimesDenominator\
    \ === 0;\n}\n\nconsole.log(simplify('1/3', '2/3'));\nconsole.log(simplify('1/3',\
    \ '3/3'));\nconsole.log(simplify('1/3', '4/3'));\nconsole.log(simplify('1/3',\
    \ '5/3'));\nconsole.log(simplify('1/3', '6/3'));\nconsole.log(simplify('1/3',\
    \ '7/3'));\nconsole.log(simplify('1/3', '8/3'));\nconsole.log(simplify('1/3',\
    \ '9/3'));\nconsole.log(simplify('1/3', '10/3'));\nconsole.log(simplify('1/3',\
    \ '11/3'));\nconsole.log(simplify('1/3', '12/3'));\nconsole.log(simplify('1/3',\
    \ '13/3'));\nconsole.log(simplify('1/3', '14/3'));\nconsole.log(simplify('1/3',\
    \ '15/3'));\nconsole.log(simplify('1/3', '16/3'));\nconsole.log(simplify('1/3',\
    \ '17/3'));\nconsole.log(simplify('1/3', '18/3'));\nconsole.log(simplify('1/3',\
    \ '19/3'));\nconsole.log(simplify('1/3', '20/3'));\n", "    const [xNum, xDen]\
    \ = x.split('/').map(Number);\n    const [nNum, nDen] = n.split('/').map(Number);\n\
    \    const num = xNum * nNum;\n    const den = xDen * nDen;\n    return num %\
    \ den === 0;\n}\n\nconsole.log(simplify('3/4', '1/2'));\nconsole.log(simplify('3/4',\
    \ '1/4'));\nconsole.log(simplify('3/4', '1/3'));\nconsole.log(simplify('3/4',\
    \ '1/5'));\nconsole.log(simplify('3/4', '1/6'));\nconsole.log(simplify('3/4',\
    \ '1/7'));\nconsole.log(simplify('3/4', '1/8'));\nconsole.log(simplify('3/4',\
    \ '1/9'));\nconsole.log(simplify('3/4', '1/10'));\nconsole.log(simplify('3/4',\
    \ '1/11'));\nconsole.log(simplify('3/4', '1/12'));\nconsole.log(simplify('3/4',\
    \ '1/13'));\nconsole.log(simplify('3/4', '1/14'));\nconsole.log(simplify('3/4',\
    \ '1/15'));\nconsole.log(simplify('3/4', '1/16'));\nconsole.log(simplify('3/4',\
    \ '1/17'));\nconsole.log(simplify('3/4', '1/18'));\nconsole.log(simplify('3/4',\
    \ '1/19'));\nconsole.log(simplify('3/4', '1/20'));\nconsole.log(simplify('3/4',\
    \ '1/21'));\nconsole.log(simplify('3/4', '1/22'));\nconsole.log(simplify('3/4',\
    \ '1/23'));\nconsole.log(simplify('3/4', '1/24')", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const productNumerator = xNumerator * nNumerator;\n  const productDenominator\
    \ = xDenominator * nDenominator;\n  return productNumerator % productDenominator\
    \ === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('", " \
    \ const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1')", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % (xDenominator\
    \ * nDenominator) === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '2/2'));\nconsole.log(simplify('1/2', '3/2'));\nconsole.log(simplify('1/2',\
    \ '4/2'));\nconsole.log(simplify('1/2', '5/2'));\nconsole.log(simplify('1/2',\
    \ '6/2'));\nconsole.log(simplify('1/2', '7/2'));\nconsole.log(simplify('1/2',\
    \ '8/2'));\nconsole.log(simplify('1/2', '9/2'));\nconsole.log(simplify('1/2',\
    \ '10/2'));\nconsole.log(simplify('1/2', '11/2'));\nconsole.log(simplify('1/2',\
    \ '12/2'));\nconsole.log(simplify('1/2', '13/2'));\nconsole.log(simplify('1/2',\
    \ '14/2'));\nconsole.log(simplify('1/2', '15/2'));\nconsole.log(simplify('1/2',\
    \ '16/2'));\nconsole.log(simplify('1/2', '17/2'));\nconsole.log(simplify('1/2',\
    \ '18/2'));\nconsole", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const productNumerator\
    \ = xNumerator * nNumerator;\n  const productDenominator = xDenominator * nDenominator;\n\
    \  const gcd = getGcd(productNumerator, productDenominator);\n  return productNumerator\
    \ / gcd === productDenominator / gcd;\n}\n", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const numerator = xNumerator * nDenominator;\n  const denominator = xDenominator\
    \ * nNumerator;\n  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2',\
    \ '2/4'));\nconsole.log(simplify('1/2', '2/5'));\nconsole.log(simplify('1/2',\
    \ '2/6'));\nconsole.log(simplify('1/2', '2/7'));\nconsole.log(simplify('1/2',\
    \ '2/8'));\nconsole.log(simplify('1/2', '2/9'));\nconsole.log(simplify('1/2',\
    \ '2/10'));\nconsole.log(simplify('1/2', '2/11'));\nconsole.log(simplify('1/2',\
    \ '2/12'));\nconsole.log(simplify('1/2', '2/13'));\nconsole.log(simplify('1/2',\
    \ '2/14'));\nconsole.log(simplify('1/2', '2/15'));\nconsole.log(simplify('1/2',\
    \ '2/16'));\nconsole.log(simplify('1/2', '2/17'));\nconsole.log(simplify('1/2',\
    \ '2/18'));\nconsole.log(simplify('1/2', '2/19'));\nconsole.log(simplify('1/2',\
    \ '2/20'));\nconsole.log(simplify('1/2', '2/21'));\nconsole.log(simplify('1/2',\
    \ '2/22'));\nconsole.log(simplify('1/2', '2/23", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '3/6'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '3/5'));\nconsole.log(simplify('1/2', '3/7'));\nconsole.log(simplify('1/2',\
    \ '3/8'));\nconsole.log(simplify('1/2', '3/9'));\nconsole.log(simplify('1/2',\
    \ '3/10'));\nconsole.log(simplify('1/2', '3/11'));\nconsole.log(simplify('1/2',\
    \ '3/12'));\nconsole.log(simplify('1/2', '3/13'));\nconsole.log(simplify('1/2',\
    \ '3/14'));\nconsole.log(simplify('1/2', '3/15'));\nconsole.log(simplify('1/2',\
    \ '3/16'));\nconsole.log(simplify('1/2', '3/17'));\nconsole.log(simplify('1/2',\
    \ '3/18'));\nconsole.log(simplify('1/2', '3/19'));\nconsole.log(simplify('1/2',\
    \ '3/20'));\nconsole.log(simplify('1/2', '3/21'));\nconsole.log(simplify('1/2',\
    \ '3/22')", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const product\
    \ = xNumerator * nNumerator;\n  const denominator = xDenominator * nDenominator;\n\
    \  return product % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('2/3', '1/3'));\nconsole.log(simplify('2/3', '2/3'));\nconsole.log(simplify('4/6',\
    \ '2/3'));\nconsole.log(simplify('4/6', '1/3'));\nconsole.log(simplify('4/6',\
    \ '1/2'));\nconsole.log(simplify('4/6', '1/6'));\nconsole.log(simplify('4/6',\
    \ '1/9'));\nconsole.log(simplify('4/6', '1/12'));\nconsole.log(simplify('4/6',\
    \ '1/18'));\nconsole.log(simplify('4/6', '1/24'));\nconsole.log(simplify('4/6',\
    \ '1/36'));\nconsole.log(simplify('4/6', '1/48'));\nconsole.log(simplify('4/6',\
    \ '1/72'));\nconsole.log(simplify('4/6', '1/96'));\nconsole.log(simplify('4/6',\
    \ '1/144'));\nconsole.log(simplify('4/6', '1/288'));\nconsole.log(simplify('4/6',\
    \ '1/576'));\nconsole.log(simplify('4/6', '1/1152'));\nconsole.log(simplify('4/6',\
    \ '1/2304'));\nconsole.log(simplify('4/6', '1/4608'));\nconsole.log(simplify('4/6',\
    \ '1/", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator =\
    \ xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('2/3', '3/4'));\n\
    console.log(simplify('2/3', '4/4'));\nconsole.log(simplify('2/3', '3/3'));\nconsole.log(simplify('2/3',\
    \ '1/3'));\nconsole.log(simplify('2/3', '1/4'));\nconsole.log(simplify('2/3',\
    \ '1/2'));\nconsole.log(simplify('2/3', '1/1'));\nconsole.log(simplify('2/3',\
    \ '2/1'));\nconsole.log(simplify('2/3', '3/1'));\nconsole.log(simplify('2/3',\
    \ '4/1'));\nconsole.log(simplify('2/3', '5/1'));\nconsole.log(simplify('2/3',\
    \ '6/1'));\nconsole.log(simplify('2/3', '7/1'));\nconsole.log(simplify('2/3',\
    \ '8/1'));\nconsole.log(simplify('2/3', '9/1'));\nconsole.log(simplify('2/3',\
    \ '10/1'));\nconsole.log(simplify('2/3', '11/1'));\nconsole.log(simplify('2/3',\
    \ '12/1'));\nconsole.log(simplify('2/3', '13/1'));\nconsole.log(simplify('2/3',\
    \ '14/1'));\nconsole.log(simplify('2/3', '15/1'));\nconsole.log(simplify('2/3',\
    \ '16/1", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let\
    \ xNum = Number(xArr[0]);\n    let xDen = Number(xArr[1]);\n    let nNum = Number(nArr[0]);\n\
    \    let nDen = Number(nArr[1]);\n    let xNumN = xNum * nDen;\n    let nNumX\
    \ = nNum * xDen;\n    return xNumN % nNumX === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify", " \
    \ const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('2/3', '4/6'));\n\
    console.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));\nconsole.log(simplify('2/3',\
    \ '4/19'));\nconsole.log(simplify('2/3', '4/20'));\nconsole.log(simplify('2/3',\
    \ '4/21'));\nconsole.log(simplify('2/3', '4/22'));\nconsole.log(simplify('2/3',\
    \ '4/23'));\nconsole.log(simplify('2/3', '4/24'));\nconsole.log(simplify('2/3',\
    \ '4/25'));\nconsole.log(simplify('2/3', '4/26'));\nconsole.log(simplify('2/3',\
    \ '4/27')", "  const xNumerator = Number(x.split('/')[0]);\n  const xDenominator\
    \ = Number(x.split('/')[1]);\n  const nNumerator = Number(n.split('/')[0]);\n\
    \  const nDenominator = Number(n.split('/')[1]);\n\n  const productNumerator =\
    \ xNumerator * nNumerator;\n  const productDenominator = xDenominator * nDenominator;\n\
    \n  return productNumerator % productDenominator === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '2/4'));\nconsole.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '4/5'));\nconsole.log(simplify('1/2',\
    \ '5/6'));\nconsole.log(simplify('1/2', '6/7'));\nconsole.log(simplify('1/2',\
    \ '7/8'));\nconsole.log(simplify('1/2', '8/9'));\nconsole.log(simplify('1/2',\
    \ '9/10'));\nconsole.log(simplify('1/2', '10/11'));\nconsole.log(simplify('1/2',\
    \ '11/12'));\nconsole.log(simplify('1/2', '12/13'));\nconsole.log(simplify('1/2',\
    \ '13/14'));\nconsole.log(simplify('1/2', '14/15'));\nconsole.log(simplify('1/2',\
    \ '15/16'));\nconsole.log(simplify('1/2', '16/17'));\nconsole.log(simplify('1/2',\
    \ '17/18'));\nconsole.log(simplify('1/2', '18/19'));\nconsole.log(simplify('1/2',\
    \ '19/20'));\nconsole.log(simplify('1/2', '20/21'));\nconsole", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const product = xNumerator * nNumerator;\n  const\
    \ productDenominator = xDenominator * nDenominator;\n  return product % productDenominator\
    \ === 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('2/3',\
    \ '4/6'));\nconsole.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3',\
    \ '4/8'));\nconsole.log(simplify('2/3', '4/9'));\nconsole.log(simplify('2/3',\
    \ '4/10'));\nconsole.log(simplify('2/3', '4/11'));\nconsole.log(simplify('2/3',\
    \ '4/12'));\nconsole.log(simplify('2/3', '4/13'));\nconsole.log(simplify('2/3',\
    \ '4/14'));\nconsole.log(simplify('2/3', '4/15'));\nconsole.log(simplify('2/3',\
    \ '4/16'));\nconsole.log(simplify('2/3', '4/17'));\nconsole.log(simplify('2/3',\
    \ '4/18'));\nconsole.log(simplify('2/3', '4/19'));\nconsole.log(simplify('2/3',\
    \ '4/20'));\nconsole.log(simplify('2/3', '4/21'));\nconsole.log(simplify('2/3',\
    \ '4/22'));\nconsole.log(simplify('2/3', '4/23'));\nconsole.log(simplify('2/3',\
    \ '4/24'));\nconsole.log(simplify('2/3', '4/25'));\nconsole.log(simplify('2/3',\
    \ '4", "    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum, nDen]\
    \ = n.split('/').map(Number);\n    const xN = xNum * nDen;\n    const nD = nNum\
    \ * xDen;\n    return xN % nD === 0;\n}\n\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/38'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/42'));\nconsole.log(simplify('1/2',\
    \ '1/44'));\nconsole.log(simplify('1/2', '", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % (xDenominator\
    \ * nDenominator) === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole", "    const [xNum, xDen] = x.split('/').map(Number);\n \
    \   const [nNum, nDen] = n.split('/').map(Number);\n    const product = (xNum\
    \ * nNum) / (xDen * nDen);\n    return Number.isInteger(product);\n}\n\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '3/5'));\nconsole.log(simplify('1/2',\
    \ '3/6'));\nconsole.log(simplify('1/2', '3/7'));\nconsole.log(simplify('1/2',\
    \ '3/8'));\nconsole.log(simplify('1/2', '3/9'));\nconsole.log(simplify('1/2',\
    \ '3/10'));\nconsole.log(simplify('1/2', '3/11'));\nconsole.log(simplify('1/2',\
    \ '3/12'));\nconsole.log(simplify('1/2', '3/13'));\nconsole.log(simplify('1/2',\
    \ '3/14'));\nconsole.log(simplify('1/2', '3/15'));\nconsole.log(simplify('1/2',\
    \ '3/16'));\nconsole.log(simplify('1/2', '3/17'));\nconsole.log(simplify('1/2',\
    \ '3/18'));\nconsole.log(simplify('1/2', '3/19'));\nconsole.log(simplify('1/2',\
    \ '3/20'));\nconsole.log(simplify('1/2', '3/21'));\nconsole.log(simplify('1/2',\
    \ '3/22'));\nconsole.log(simplify('1/2', '3/23'));\nconsole.log(simplify('1/2',\
    \ '3/24'));\nconsole.log(simplify('1/2', '3/25'));\nconsole.log(simplify('1/2',\
    \ '3/26'));", "    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum,\
    \ nDen] = n.split('/').map(Number);\n    const result = (xNum * nNum) / (xDen\
    \ * nDen);\n    return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24'));", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result\
    \ = xNumerator * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('2/3', '4/6'));\n\
    console.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));\nconsole.log(simplify('2/3',\
    \ '4/19'));\nconsole.log(simplify('2/3', '4/20'));\nconsole.log(simplify('2/3',\
    \ '4/21'));\nconsole.log(simplify('2/3', '4/22'));\nconsole.log(simplify('2/3',\
    \ '4/23'));\nconsole.log(simplify('2/3', '4/24'));\nconsole.log(simplify('2/3',\
    \ '4/25'));\nconsole.log(simplify('2/3', '4/26'));\nconsole.log(", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const result = (xNumerator * nDenominator) *\
    \ (nNumerator * xDenominator);\n  return result % 1 === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log", "  const [xNum,\
    \ xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/38'));\nconsole.log(simplify('1/2',\
    \ '1/40'));\nconsole.log(simplify('1/2', '1/42'));\nconsole.log(simplify('1/2',\
    \ '1/44')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n", "    const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n    const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \    const numerator = xNumerator * nDenominator;\n    const denominator = xDenominator\
    \ * nNumerator;\n    return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/27'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/33", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nNumerator;\n    let resultDenominator = xDenominator * nDenominator;\n  \
    \  return result % resultDenominator === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log", "  const [xNum,\
    \ xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1')", "    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let num = xNum * nNum;\n    let den = xDen * nDen;\n    let gcd = (a: number,\
    \ b: number) => {\n        if (b === 0) {\n            return a;\n        }\n\
    \        return gcd(b, a % b);\n    }\n    let g = gcd(num, den);\n    return\
    \ den / g === 1;\n}\n\nconsole.log(simplify(\"2/3\", \"3/4\"));\nconsole.log(simplify(\"\
    2/3\", \"3/5\"));\nconsole.log(simplify(\"2/3\", \"3/6\"));\nconsole.log(simplify(\"\
    2/3\", \"3/7\"));\nconsole.log(simplify(\"2/3\", \"3/8\"));\nconsole.log(simplify(\"\
    2/3\", \"3/9\"));\nconsole.log(simplify(\"2/3\", \"3/10\"));\nconsole.log(simplify(\"\
    2/3\", \"3/11\"));\nconsole.log(simplify(\"2/3\", \"3/12\"));\nconsole.log(simplify(\"\
    2/3\", \"3/13\"));\nconsole.log(simplify(\"2/3\", \"3/14\"));\nconsole.log(simplify(\"\
    2/3\", \"3/15\"));\nconsole.log(simplify(\"2/3\", \"3/16\"));\nconsole.log(simplify(\"\
    2/3\", \"3/17\"));\nconsole.log(simplify(\"2/3\", \"3/18\"));\nconsole.log(simplify(\"\
    2/3\", \"3/19\"));\nconsole.log(simplify(\"2/3\", \"3/20\"));\nconsole.log(simplify(\"\
    2/3\", \"3/21\"));\nconsole.", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result\
    \ = xNumerator * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const result = (xNumerator * nDenominator) *\
    \ (nNumerator * xDenominator);\n  return result % 1 === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/25'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/27'));\nconsole.log(simplify('1/2', '1/28'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/32'));\nconsole.log", "  const [xNum,\
    \ xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/25')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const product = xNum * nNum;\n  const gcd\
    \ = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));\n  const\
    \ lcm = (a: number, b: number): number => (a * b) / gcd(a, b);\n  const den =\
    \ lcm(xDen, nDen);\n  return product % den === 0;\n}\n\nconsole.log(simplify('1/4',\
    \ '1/4'));\nconsole.log(simplify('1/4', '1/2'));\nconsole.log(simplify('1/4',\
    \ '1/3'));\nconsole.log(simplify('1/4', '1/6'));\nconsole.log(simplify('1/4',\
    \ '1/8'));\nconsole.log(simplify('1/4', '1/9'));\nconsole.log(simplify('1/4',\
    \ '1/12'));\nconsole.log(simplify('1/4', '1/16'));\nconsole.log(simplify('1/4',\
    \ '1/18'));\nconsole.log(simplify('1/4', '1/24'));\nconsole.log(simplify('1/4',\
    \ '1/32'));\nconsole.log(simplify('1/4', '1/36'));\nconsole.log(simplify('1/4',\
    \ '1/48'));\nconsole.log(simplify('1/4', '1/64'));\nconsole.log(simplify('1/4',\
    \ '1/72'));\nconsole.log(simplify('1/4', '1/96'));\nconsole.log(simplify('1/4',\
    \ '1/128'));\nconsole.log(simplify('1/4', '1/144'));\nconsole.log(simplify('1/4',\
    \ '1/192'));\nconsole.log(simplify('", "    const xNumerator = Number(x.split('/')[0]);\n\
    \    const xDenominator = Number(x.split('/')[1]);\n    const nNumerator = Number(n.split('/')[0]);\n\
    \    const nDenominator = Number(n.split('/')[1]);\n    const result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2', '1/38'));\nconsole.log(simplify('1/2',\
    \ '1", "    let xNumerator = Number(x.split('/')[0]);\n    let xDenominator =\
    \ Number(x.split('/')[1]);\n    let nNumerator = Number(n.split('/')[0]);\n  \
    \  let nDenominator = Number(n.split('/')[1]);\n    let productNumerator = xNumerator\
    \ * nNumerator;\n    let productDenominator = xDenominator * nDenominator;\n \
    \   let gcd = findGCD(productNumerator, productDenominator);\n    return productNumerator\
    \ / gcd === productDenominator / gcd;\n}\n", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const [xGcd, nGcd] = [gcd(xNum,\
    \ xDen), gcd(nNum, nDen)];\n  const [xSimp, nSimp] = [xNum / xGcd, nNum / nGcd];\n\
    \  const [xSimpDen, nSimpDen] = [xDen / xGcd, nDen / nGcd];\n  const [xSimpNum,\
    \ nSimpNum] = [xSimp * nSimpDen, nSimp * xSimpDen];\n  const [xSimpNumGcd, nSimpNumGcd]\
    \ = [gcd(xSimpNum, xSimpDen), gcd(nSimpNum, nSimpDen)];\n  const [xSimpNumSimp,\
    \ nSimpNumSimp] = [xSimpNum / xSimpNumGcd, nSimpNum / nSimpNumGcd];\n  const [xSimpDenSimp,\
    \ nSimpDenSimp] = [xSimpDen / xSimpNumGcd, nSimpDen / nSimpNumGcd];\n  return\
    \ xSimpNumSimp === nSimpNumSimp && xSimpDenSimp === nSimpDenSimp;\n}\n", "   \
    \ const xNumerator = parseInt(x.split('/')[0]);\n    const xDenominator = parseInt(x.split('/')[1]);\n\
    \    const nNumerator = parseInt(n.split('/')[0]);\n    const nDenominator = parseInt(n.split('/')[1]);\n\
    \    const result = xNumerator * nNumerator / (xDenominator * nDenominator);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/25'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/27'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1')", "    const xNum = Number(x.split('/')[0]);\n    const xDen = Number(x.split('/')[1]);\n\
    \    const nNum = Number(n.split('/')[0]);\n    const nDen = Number(n.split('/')[1]);\n\
    \    return (xNum * nDen) % (xDen * nNum) === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24'));\nconsole", "  const [xNum,\
    \ xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return num % den ===\
    \ 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/2'));\nconsole.log(simplify('1/2',\
    \ '4/3'));\nconsole.log(simplify('1/2', '5/2'));\nconsole.log(simplify('1/2',\
    \ '6/5'));\nconsole.log(simplify('1/2', '7/2'));\nconsole.log(simplify('1/2',\
    \ '8/3'));\nconsole.log(simplify('1/2', '9/2'));\nconsole.log(simplify('1/2',\
    \ '10/3'));\nconsole.log(simplify('1/2', '11/2'));\nconsole.log(simplify('1/2',\
    \ '12/5'));\nconsole.log(simplify('1/2', '13/2'));\nconsole.log(simplify('1/2',\
    \ '14/3'));\nconsole.log(simplify('1/2', '15/2'));\nconsole.log(simplify('1/2',\
    \ '16/7'));\nconsole.log(simplify('1/2', '17/2'));\nconsole.log(simplify('1/2',\
    \ '18/5'));\nconsole.log(simplify('1/2', '19/2'));\nconsole.log(simplify('1/2',\
    \ '20/3')", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result\
    \ = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n  return result\
    \ % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log", "    const [xNum, xDen] = x.split('/').map(Number);\n\
    \    const [nNum, nDen] = n.split('/').map(Number);\n    const gcd = (a: number,\
    \ b: number): number => b === 0 ? a : gcd(b, a % b);\n    const lcm = (a: number,\
    \ b: number): number => a * b / gcd(a, b);\n    const den = lcm(xDen, nDen);\n\
    \    const num = xNum * (den / xDen) * nNum * (den / nDen);\n    return num %\
    \ den === 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('2/3',\
    \ '4/6'));\nconsole.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3',\
    \ '4/8'));\nconsole.log(simplify('2/3', '4/9'));\nconsole.log(simplify('2/3',\
    \ '4/10'));\nconsole.log(simplify('2/3', '4/11'));\nconsole.log(simplify('2/3',\
    \ '4/12'));\nconsole.log(simplify('2/3', '4/13'));\nconsole.log(simplify('2/3',\
    \ '4/14'));\nconsole.log(simplify('2/3', '4/15'));\nconsole.log(simplify('2/3',\
    \ '4/16'));\nconsole.log(simplify('2/3', '4/17'));\nconsole.log(simplify('2/3',\
    \ '4/18'));\nconsole.log(simplify('2/3', '4/19'));\nconsole.log(simplify('2/3',\
    \ '4/20'));\nconsole.log(simplify('2/3', '4/21'));\nconsole.log(simplify('2/3',\
    \ '4/22'));\nconsole.log(simplify('2/3', '4/23')", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const xFraction = xNum /\
    \ xDen;\n  const nFraction = nNum / nDen;\n  const result = xFraction * nFraction;\n\
    \  return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1'));", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/25'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/27'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/33')", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1')", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const gcd = (a: number, b: number): number\
    \ => (b === 0 ? a : gcd(b, a % b));\n  const lcm = (a: number, b: number): number\
    \ => (a * b) / gcd(a, b);\n  const lcmDen = lcm(xDen, nDen);\n  const xNumSimplified\
    \ = (lcmDen / xDen) * xNum;\n  const nNumSimplified = (lcmDen / nDen) * nNum;\n\
    \  return (xNumSimplified * nNumSimplified) % lcmDen === 0;\n}\n\nconsole.log(simplify('2/3',\
    \ '4/5'));\nconsole.log(simplify('3/4', '2/5'));\nconsole.log(simplify('3/4',\
    \ '1/5'));\nconsole.log(simplify('3/4', '1/4'));\nconsole.log(simplify('3/4',\
    \ '1/2'));\nconsole.log(simplify('3/4', '1/1'));\nconsole.log(simplify('3/4',\
    \ '2/1'));\nconsole.log(simplify('3/4', '3/1'));\nconsole.log(simplify('3/4',\
    \ '4/1'));\nconsole.log(simplify('3/4', '5/1'));\nconsole.log(simplify('3/4',\
    \ '6/1'));\nconsole.log(simplify('3/4', '7/1'));\nconsole.log(simplify('3/4',\
    \ '8/1'));\nconsole.log(simplify('3/4', '9/1'));\nconsole.log(simplify('3/4',\
    \ '10/1'));\nconsole.log(simplify('3/4', '11/1'));\nconsole.log(simplify('3/4',\
    \ '12/1'));", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator\
    \ = xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\n\
    console.log(simplify('2/3', '4/6'));\nconsole.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3',\
    \ '4/8'));\nconsole.log(simplify('2/3', '4/9'));\nconsole.log(simplify('2/3',\
    \ '4/10'));\nconsole.log(simplify('2/3', '4/11'));\nconsole.log(simplify('2/3',\
    \ '4/12'));\nconsole.log(simplify('2/3', '4/13'));\nconsole.log(simplify('2/3',\
    \ '4/14'));\nconsole.log(simplify('2/3', '4/15'));\nconsole.log(simplify('2/3',\
    \ '4/16'));\nconsole.log(simplify('2/3', '4/17'));\nconsole.log(simplify('2/3',\
    \ '4/18'));\nconsole.log(simplify('2/3', '4/19'));\nconsole.log(simplify('2/3',\
    \ '4/20'));\nconsole.log(simplify('2/3', '4/21'));\nconsole.log(simplify('2/3',\
    \ '4/22'));\nconsole.log(simplify('2/3', '4/23'));\nconsole.log(simplify('2/3',\
    \ '4/24'));\nconsole.log(simplify('2/3', '4/25'));\nconsole.log(simplify('2/3',\
    \ '4/26", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result = xNumerator\
    \ * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(", "    const\
    \ xNumerator = Number(x.split('/')[0]);\n    const xDenominator = Number(x.split('/')[1]);\n\
    \    const nNumerator = Number(n.split('/')[0]);\n    const nDenominator = Number(n.split('/')[1]);\n\
    \    const result = xNumerator * nNumerator / (xDenominator * nDenominator);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n\
    \  const den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/25')", "    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum,\
    \ nDen] = n.split('/').map(Number);\n    const num = xNum * nNum;\n    const den\
    \ = xDen * nDen;\n    return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '2/3'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '4/5'));\nconsole.log(simplify('1/2', '5/6'));\nconsole.log(simplify('1/2',\
    \ '6/7'));\nconsole.log(simplify('1/2', '7/8'));\nconsole.log(simplify('1/2',\
    \ '8/9'));\nconsole.log(simplify('1/2', '9/10'));\nconsole.log(simplify('1/2',\
    \ '10/11'));\nconsole.log(simplify('1/2', '11/12'));\nconsole.log(simplify('1/2',\
    \ '12/13'));\nconsole.log(simplify('1/2', '13/14'));\nconsole.log(simplify('1/2',\
    \ '14/15'));\nconsole.log(simplify('1/2', '15/16'));\nconsole.log(simplify('1/2',\
    \ '16/17'));\nconsole.log(simplify('1/2', '17/18'));\nconsole.log(simplify('1/2',\
    \ '18/19'));\nconsole.log(simplify('1/2', '19/20'));\nconsole.log(simplify('1/2',\
    \ '20/21'));\nconsole.log(simplify('1/2', '21/22'));\nconsole.log(simplify('1/2',\
    \ '22/23')", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const productNumerator\
    \ = xNumerator * nNumerator;\n  const productDenominator = xDenominator * nDenominator;\n\
    \  const gcd = getGcd(productNumerator, productDenominator);\n  return productNumerator\
    \ / gcd === productDenominator / gcd;\n}\n", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const productNumerator = xNumerator * nNumerator;\n  const productDenominator\
    \ = xDenominator * nDenominator;\n  const gcd = (a: number, b: number): number\
    \ => (b ? gcd(b, a % b) : a);\n  const productGcd = gcd(productNumerator, productDenominator);\n\
    \  return productNumerator / productGcd === productDenominator / productGcd;\n\
    }\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify", " \
    \   const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum, nDen] = n.split('/').map(Number);\n\
    \    const product = xNum * nNum;\n    const productDen = xDen * nDen;\n    return\
    \ product % productDen === 0;\n}\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('3/4',\
    \ '3/4'));\nconsole.log(simplify('3/4', '2/3'));\nconsole.log(simplify('3/4',\
    \ '2/2'));\nconsole.log(simplify('3/4', '2/4'));\nconsole.log(simplify('3/4',\
    \ '2/5'));\nconsole.log(simplify('3/4', '2/6'));\nconsole.log(simplify('3/4',\
    \ '2/7'));\nconsole.log(simplify('3/4', '2/8'));\nconsole.log(simplify('3/4',\
    \ '2/9'));\nconsole.log(simplify('3/4', '2/10'));\nconsole.log(simplify('3/4',\
    \ '2/11'));\nconsole.log(simplify('3/4', '2/12'));\nconsole.log(simplify('3/4',\
    \ '2/13'));\nconsole.log(simplify('3/4', '2/14'));\nconsole.log(simplify('3/4',\
    \ '2/15'));\nconsole.log(simplify('3/4', '2/16'));\nconsole.log(simplify('3/4',\
    \ '2/17'));\nconsole.log(simplify('3/4', '2/18'));\nconsole.log(simplify('3/4',\
    \ '2/19'));\nconsole.log(simplify('3/4', '2/20'));\nconsole.log(simplify('3/4',\
    \ '2/21'));\nconsole.log(simplify('3/4', '2/", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const numerator = xNumerator * nDenominator;\n  const denominator = xDenominator\
    \ * nNumerator;\n  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const numerator = xNumerator * nDenominator;\n  const denominator = xDenominator\
    \ * nNumerator;\n  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('2/3',\
    \ '4/5'));\nconsole.log(simplify('3/4', '1/2'));\nconsole.log(simplify('3/4',\
    \ '1/3'));\nconsole.log(simplify('3/4', '1/4'));\nconsole.log(simplify('3/4',\
    \ '1/5'));\nconsole.log(simplify('3/4', '1/6'));\nconsole.log(simplify('3/4',\
    \ '1/7'));\nconsole.log(simplify('3/4', '1/8'));\nconsole.log(simplify('3/4',\
    \ '1/9'));\nconsole.log(simplify('3/4', '1/10'));\nconsole.log(simplify('3/4',\
    \ '1/11'));\nconsole.log(simplify('3/4', '1/12'));\nconsole.log(simplify('3/4',\
    \ '1/13'));\nconsole.log(simplify('3/4', '1/14'));\nconsole.log(simplify('3/4',\
    \ '1/15'));\nconsole.log(simplify('3/4', '1/16'));\nconsole.log(simplify('3/4',\
    \ '1/17'));\nconsole.log(simplify('3/4', '1/18'));\nconsole.log(simplify('3/4',\
    \ '1/19'));\nconsole.log(simplify('3/4', '1/20'));\nconsole.log(simplify('3/4',\
    \ '1/21'));\nconsole.log(simplify('3/4', '1/22", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = Number(xArr[0]);\n    let xDen =\
    \ Number(xArr[1]);\n    let nNum = Number(nArr[0]);\n    let nDen = Number(nArr[1]);\n\
    \    let resNum = xNum * nNum;\n    let resDen = xDen * nDen;\n    let res = resNum\
    \ / resDen;\n    return Number.isInteger(res);\n}\n\nconsole.log(simplify('2/3',\
    \ '4/3'));\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('2/3',\
    \ '4/6'));\nconsole.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3',\
    \ '4/8'));\nconsole.log(simplify('2/3', '4/9'));\nconsole.log(simplify('2/3',\
    \ '4/10'));\nconsole.log(simplify('2/3', '4/11'));\nconsole.log(simplify('2/3',\
    \ '4/12'));\nconsole.log(simplify('2/3', '4/13'));\nconsole.log(simplify('2/3',\
    \ '4/14'));\nconsole.log(simplify('2/3', '4/15'));\nconsole.log(simplify('2/3',\
    \ '4/16'));\nconsole.log(simplify('2/3', '4/17'));\nconsole.log(simplify('2/3',\
    \ '4/18'));\nconsole.log(simplify('2/3', '4/19'));\nconsole.log(simplify('2/3',\
    \ '4/20'));\nconsole.log(simplify('2/3', '4/21'));\nconsole.log(simplify('2/3',\
    \ '4/22'));\nconsole.log(simplify('2/3', '4/23'));\nconsole", "    const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n    const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n    const numerator = xNumerator * nDenominator;\n\
    \    const denominator = xDenominator * nNumerator;\n    return numerator % denominator\
    \ === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator =\
    \ xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator =\
    \ xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/28'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/32'));\nconsole.log(simplify('1/2',\
    \ '1/34'));\nconsole.log(simplify('1/2', '1/36'));\nconsole.log(simplify('1/2',\
    \ '1/38'));\nconsole.log(simplify('1/2', '1/40'));\nconsole.log(simplify('1/2',\
    \ '1/42", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let\
    \ xNum = Number(xArr[0]);\n    let xDen = Number(xArr[1]);\n    let nNum = Number(nArr[0]);\n\
    \    let nDen = Number(nArr[1]);\n    let num = xNum * nNum;\n    let den = xDen\
    \ * nDen;\n    let gcd = getGCD(num, den);\n    return num % gcd === 0 && den\
    \ % gcd === 0;\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n\
    \    let xNum = Number(xArr[0]);\n    let xDen = Number(xArr[1]);\n    let nNum\
    \ = Number(nArr[0]);\n    let nDen = Number(nArr[1]);\n    let result = (xNum\
    \ * nDen) * (nNum * xDen);\n    return result % (xDen * nDen) === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2",
  "    const xNumerator = parseInt(x.split('/')[0]);\n    const xDenominator = parseInt(x.split('/')[1]);\n\
    \    const nNumerator = parseInt(n.split('/')[0]);\n    const nDenominator = parseInt(n.split('/')[1]);\n\
    \    const result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/26'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/34'));\nconsole.log(simplify('1/2',\
    \ '1/36'));\nconsole.log(simplify('1/2", "    const xArr = x.split('/');\n   \
    \ const nArr = n.split('/');\n    const xNum = Number(xArr[0]);\n    const xDen\
    \ = Number(xArr[1]);\n    const nNum = Number(nArr[0]);\n    const nDen = Number(nArr[1]);\n\
    \    const xNumN = xNum * nDen;\n    const xDenN = xDen * nNum;\n    return xNumN\
    \ % xDenN === 0;\n}\n\nconsole.log(simplify('1/2', '1/4')); // true\nconsole.log(simplify('1/2',\
    \ '1/3')); // false\nconsole.log(simplify('1/2', '1/2')); // true\nconsole.log(simplify('1/2',\
    \ '1/1')); // true\nconsole.log(simplify('1/2', '2/1')); // true\nconsole.log(simplify('1/2',\
    \ '3/1')); // false\nconsole.log(simplify('1/2', '4/1')); // true\nconsole.log(simplify('1/2',\
    \ '5/1')); // false\nconsole.log(simplify('1/2', '6/1')); // true\nconsole.log(simplify('1/2',\
    \ '7/1')); // false\nconsole.log(simplify('1/2', '8/1')); // true\nconsole.log(simplify('1/2',\
    \ '9/1')); // false\nconsole.log(simplify('1/2', '10/1')); // true\nconsole.log(simplify('1/2',\
    \ '11/1')); // false\nconsole.log(simplify('1/2', '12/1')); // true\nconsole.log(simplify('1/2',\
    \ '13/1')); // false\nconsole.log(simplify('1/2', '14/1')); // true\nconsole.log(simplify('1/2',\
    \ '15/1')); // false\nconsole.log(simplify('1", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const product = (xNum * nNum)\
    \ / (xDen * nDen);\n  return product % 1 === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/25'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/27'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32'));\nconsole.log(simplify('1/2', '1/33'));\nconsole.log(simplify('1/2',\
    \ '1/34'));\n", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/25')", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const xN = xNum * nDen;\n\
    \  const nX = nNum * xDen;\n  return xN % nX === 0;\n}\n\nconsole.log(simplify('3/4',\
    \ '2/3'));\nconsole.log(simplify('3/4', '2/4'));\nconsole.log(simplify('3/4',\
    \ '2/5'));\nconsole.log(simplify('3/4', '2/6'));\nconsole.log(simplify('3/4',\
    \ '2/7'));\nconsole.log(simplify('3/4', '2/8'));\nconsole.log(simplify('3/4',\
    \ '2/9'));\nconsole.log(simplify('3/4', '2/10'));\nconsole.log(simplify('3/4',\
    \ '2/11'));\nconsole.log(simplify('3/4', '2/12'));\nconsole.log(simplify('3/4',\
    \ '2/13'));\nconsole.log(simplify('3/4', '2/14'));\nconsole.log(simplify('3/4',\
    \ '2/15'));\nconsole.log(simplify('3/4', '2/16'));\nconsole.log(simplify('3/4',\
    \ '2/17'));\nconsole.log(simplify('3/4', '2/18'));\nconsole.log(simplify('3/4',\
    \ '2/19'));\nconsole.log(simplify('3/4', '2/20'));\nconsole.log(simplify('3/4',\
    \ '2/21'));\nconsole.log(simplify('3/4', '2/22'));\nconsole.log(simplify('3/4',\
    \ '2/23'));\nconsole.log(simplify('3/4', '2/24'));\nconsole.log(simplify('3/4',\
    \ '", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result = xNumerator\
    \ * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/4', '1/4'));\nconsole.log(simplify('1/4', '1/2'));\n\
    console.log(simplify('1/4', '1/3'));\nconsole.log(simplify('1/4', '1/5'));\nconsole.log(simplify('1/4',\
    \ '1/6'));\nconsole.log(simplify('1/4', '1/7'));\nconsole.log(simplify('1/4',\
    \ '1/8'));\nconsole.log(simplify('1/4', '1/9'));\nconsole.log(simplify('1/4',\
    \ '1/10'));\nconsole.log(simplify('1/4', '1/11'));\nconsole.log(simplify('1/4',\
    \ '1/12'));\nconsole.log(simplify('1/4', '1/13'));\nconsole.log(simplify('1/4',\
    \ '1/14'));\nconsole.log(simplify('1/4', '1/15'));\nconsole.log(simplify('1/4',\
    \ '1/16'));\nconsole.log(simplify('1/4', '1/17'));\nconsole.log(simplify('1/4',\
    \ '1/18'));\nconsole.log(simplify('1/4', '1/19'));\nconsole.log(simplify('1/4',\
    \ '1/20'));\nconsole.log(simplify('1/4', '1/21'));\nconsole.log(simplify('1/4',\
    \ '1/22'));\nconsole.log(simplify('1/4', '1/23'));\nconsole.log(", "  const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n  const productNumerator = xNumerator * nNumerator;\n\
    \  const productDenominator = xDenominator * nDenominator;\n  const gcd = getGcd(productNumerator,\
    \ productDenominator);\n  return productNumerator / gcd === productDenominator\
    \ / gcd;\n}\n", "    const [xNum, xDen] = x.split('/').map(Number);\n    const\
    \ [nNum, nDen] = n.split('/').map(Number);\n    const product = (xNum * nNum)\
    \ / (xDen * nDen);\n    return Number.isInteger(product);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '2/3'));\nconsole.log(simplify('1/2', '3/4'));\nconsole.log(simplify('1/2',\
    \ '4/5'));\nconsole.log(simplify('1/2', '5/6'));\nconsole.log(simplify('1/2',\
    \ '6/7'));\nconsole.log(simplify('1/2', '7/8'));\nconsole.log(simplify('1/2',\
    \ '8/9'));\nconsole.log(simplify('1/2', '9/10'));\nconsole.log(simplify('1/2',\
    \ '10/11'));\nconsole.log(simplify('1/2', '11/12'));\nconsole.log(simplify('1/2',\
    \ '12/13'));\nconsole.log(simplify('1/2', '13/14'));\nconsole.log(simplify('1/2',\
    \ '14/15'));\nconsole.log(simplify('1/2', '15/16'));\nconsole.log(simplify('1/2',\
    \ '16/17'));\nconsole.log(simplify('1/2', '17/18'));\nconsole.log(simplify('1/2',\
    \ '18/19'));\nconsole.log(simplify('1/2', '19/20'));\nconsole.log(simplify('1/2',\
    \ '20/21'));\nconsole.log(simplify('1/2', '21/22'));\nconsole.log(simplify('1/2',\
    \ '22/23'));", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum,\
    \ nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den =\
    \ xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/5'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/7'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/11'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/13'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/17'));\nconsole.log(simplify('1/2', '1/18'));\nconsole.log(simplify('1/2',\
    \ '1/19'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/23'));\nconsole.log(simplify('1/2', '1/24')", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const productNumerator = xNumerator * nNumerator;\n  const productDenominator\
    \ = xDenominator * nDenominator;\n  return productNumerator % productDenominator\
    \ === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/36'));\nconsole.log(simplify('1/2',\
    \ '1/42'));\nconsole.log(simplify('1/2', '1/45'));\nconsole.log(simplify('1/2',\
    \ '1/60'));\nconsole.log(simplify('1/2', '1/72'));\nconsole.log(simplify('1/2',\
    \ '1/84'));\nconsole.log(simplify('1/2', '1/90'));\nconsole.log(simplify('", " \
    \ const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator,\
    \ nDenominator] = n.split('/').map(Number);\n  const numerator = xNumerator *\
    \ nDenominator;\n  const denominator = xDenominator * nNumerator;\n  const gcd\
    \ = (a: number, b: number): number => (b ? gcd(b, a % b) : a);\n  const divisor\
    \ = gcd(numerator, denominator);\n  return numerator / divisor === denominator\
    \ / divisor;\n}\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('2/3',\
    \ '4/6'));\nconsole.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3',\
    \ '4/8'));\nconsole.log(simplify('2/3', '4/9'));\nconsole.log(simplify('2/3',\
    \ '4/10'));\nconsole.log(simplify('2/3', '4/11'));\nconsole.log(simplify('2/3',\
    \ '4/12'));\nconsole.log(simplify('2/3', '4/13'));\nconsole.log(simplify('2/3',\
    \ '4/14'));\nconsole.log(simplify('2/3', '4/15'));\nconsole.log(simplify('2/3',\
    \ '4/16'));\nconsole.log(simplify('2/3', '4/17'));\nconsole.log(simplify('2/3',\
    \ '4/18'));\nconsole.log(simplify('2/3', '4/19'));\nconsole.log(simplify('2/3',\
    \ '4/20'));\nconsole.log(simplify('2/3', '4/21'));\nconsole.log(simplify('2/3',\
    \ '4/22'));\nconsole.log(simplify('2/3', '4/23'));", "    let xNumerator = Number(x.split('/')[0]);\n\
    \    let xDenominator = Number(x.split('/')[1]);\n    let nNumerator = Number(n.split('/')[0]);\n\
    \    let nDenominator = Number(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen]\
    \ = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const den = xDen\
    \ * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '2/3'));\nconsole.log(simplify('1/2',\
    \ '3/4'));\nconsole.log(simplify('1/2', '4/5'));\nconsole.log(simplify('1/2',\
    \ '5/6'));\nconsole.log(simplify('1/2', '6/7'));\nconsole.log(simplify('1/2',\
    \ '7/8'));\nconsole.log(simplify('1/2', '8/9'));\nconsole.log(simplify('1/2',\
    \ '9/10'));\nconsole.log(simplify('1/2', '10/11'));\nconsole.log(simplify('1/2',\
    \ '11/12'));\nconsole.log(simplify('1/2', '12/13'));\nconsole.log(simplify('1/2',\
    \ '13/14'));\nconsole.log(simplify('1/2', '14/15'));\nconsole.log(simplify('1/2',\
    \ '15/16'));\nconsole.log(simplify('1/2', '16/17'));\nconsole.log(simplify('1/2',\
    \ '17/18'));\nconsole.log(simplify('1/2', '18/19'));\nconsole.log(simplify('1/2',\
    \ '19/20'));\nconsole.log(simplify('1/2', '20/21'));\nconsole.log(simplify('1/2',\
    \ '21/22'));\nconsole.log(simplify('1/2', '22/23')", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const result = xNumerator * nNumerator / (xDenominator * nDenominator);\n \
    \ return Number.isInteger(result);\n}\n\nconsole.log(simplify('2/3', '3/4'));\n\
    console.log(simplify('2/3', '3/3'));\nconsole.log(simplify('2/3', '3/5'));\nconsole.log(simplify('2/3',\
    \ '3/6'));\nconsole.log(simplify('2/3', '3/7'));\nconsole.log(simplify('2/3',\
    \ '3/8'));\nconsole.log(simplify('2/3', '3/9'));\nconsole.log(simplify('2/3',\
    \ '3/10'));\nconsole.log(simplify('2/3', '3/11'));\nconsole.log(simplify('2/3',\
    \ '3/12'));\nconsole.log(simplify('2/3', '3/13'));\nconsole.log(simplify('2/3',\
    \ '3/14'));\nconsole.log(simplify('2/3', '3/15'));\nconsole.log(simplify('2/3',\
    \ '3/16'));\nconsole.log(simplify('2/3', '3/17'));\nconsole.log(simplify('2/3',\
    \ '3/18'));\nconsole.log(simplify('2/3', '3/19'));\nconsole.log(simplify('2/3',\
    \ '3/20'));\nconsole.log(simplify('2/3', '3/21'));\nconsole.log(simplify('2/3',\
    \ '3/22'));\nconsole.log(simplify('2/3', '3/23'));\nconsole.log(simplify('2/3',\
    \ '3/24'));\nconsole.log(", "    let xNumerator = Number(x.split('/')[0]);\n \
    \   let xDenominator = Number(x.split('/')[1]);\n    let nNumerator = Number(n.split('/')[0]);\n\
    \    let nDenominator = Number(n.split('/')[1]);\n    let productNumerator = xNumerator\
    \ * nNumerator;\n    let productDenominator = xDenominator * nDenominator;\n \
    \   let gcd = getGCD(productNumerator, productDenominator);\n    return productNumerator\
    \ / gcd === productDenominator / gcd;\n}\n", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const xDec = xNum / xDen;\n\
    \  const nDec = nNum / nDen;\n  const product = xDec * nDec;\n  return Number.isInteger(product);\n\
    }\n\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log", "  const [xNum,\
    \ xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\
    \  const num = xNum * nNum;\n  const den = xDen * nDen;\n  return Number.isInteger(num\
    \ / den);\n}\n\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/6'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/28'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/32'));\nconsole.log(simplify('1/2',\
    \ '1/34'));\nconsole.log(simplify('1/2', '1/36'));\nconsole.log(simplify('1/2',\
    \ '1/38'));\nconsole.log(simplify('1/2', '1/40'));\nconsole.log(simplify('1/2',\
    \ '1/42'));\nconsole.log(simplify('1/2', '1", "  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const product = xNum * nNum\
    \ / (xDen * nDen);\n  return Number.isInteger(product);\n}\n\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole", "  const [xNum, xDen] = x.split('/').map(Number);\n  const\
    \ [nNum, nDen] = n.split('/').map(Number);\n  const num = xNum * nNum;\n  const\
    \ den = xDen * nDen;\n  return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/1'));\nconsole.log(simplify('1/2',\
    \ '4/1'));\nconsole.log(simplify('1/2', '5/1'));\nconsole.log(simplify('1/2',\
    \ '6/1'));\nconsole.log(simplify('1/2', '7/1'));\nconsole.log(simplify('1/2',\
    \ '8/1'));\nconsole.log(simplify('1/2', '9/1'));\nconsole.log(simplify('1/2',\
    \ '10/1'));\nconsole.log(simplify('1/2', '11/1'));\nconsole.log(simplify('1/2',\
    \ '12/1'));\nconsole.log(simplify('1/2', '13/1'));\nconsole.log(simplify('1/2',\
    \ '14/1'));\nconsole.log(simplify('1/2', '15/1'));\nconsole.log(simplify('1/2',\
    \ '16/1'));\nconsole.log(simplify('1/2', '17/1'));\nconsole.log(simplify('1/2',\
    \ '18/1'));\nconsole.log(simplify('1/2', '19/1'));\nconsole.log(simplify('1/2',\
    \ '20/1')", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator\
    \ = xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\n\
    console.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/1'));\nconsole.log(simplify('1/2', '18/1'));\nconsole.log(simplify('1/2',\
    \ '19/1", "  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen]\
    \ = n.split('/').map(Number);\n  const product = (xNum * nNum) / (xDen * nDen);\n\
    \  return Number.isInteger(product);\n}\n\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/12'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/24'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/28'));\nconsole.log(simplify('1/2',\
    \ '1/30'));\nconsole.log(simplify('1/2', '1/32'));\nconsole.log(simplify('1/2',\
    \ '1/34'));\nconsole.log(simplify('1/2', '1/36'));\nconsole.log(simplify('1/2',\
    \ '1/38'));\nconsole.log(simplify('1/2', '1/40'));\nconsole.log(simplify('1/2',\
    \ '1/42'));\nconsole.log(simplify('1/2', '1/44'));", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const numerator = xNumerator * nDenominator;\n  const denominator = xDenominator\
    \ * nNumerator;\n  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('3/4',\
    \ '2/3'));\nconsole.log(simplify('3/4', '2/2'));\nconsole.log(simplify('3/4',\
    \ '2/1'));\nconsole.log(simplify('3/4', '2/5'));\nconsole.log(simplify('3/4',\
    \ '2/6'));\nconsole.log(simplify('3/4', '2/7'));\nconsole.log(simplify('3/4',\
    \ '2/8'));\nconsole.log(simplify('3/4', '2/9'));\nconsole.log(simplify('3/4',\
    \ '2/10'));\nconsole.log(simplify('3/4', '2/11'));\nconsole.log(simplify('3/4',\
    \ '2/12'));\nconsole.log(simplify('3/4', '2/13'));\nconsole.log(simplify('3/4',\
    \ '2/14'));\nconsole.log(simplify('3/4', '2/15'));\nconsole.log(simplify('3/4',\
    \ '2/16'));\nconsole.log(simplify('3/4', '2/17'));\nconsole.log(simplify('3/4',\
    \ '2/18'));\nconsole.log(simplify('3/4', '2/19'));\nconsole.log(simplify('3/4',\
    \ '2/20'));\nconsole.log(simplify('3/4', '2/21'));\nconsole.log(simplify('3/4',\
    \ '2/22'));\nconsole.log(simplify('3/4', '2/23", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const productNumerator = xNumerator * nNumerator;\n  const productDenominator\
    \ = xDenominator * nDenominator;\n  return productNumerator % productDenominator\
    \ === 0;\n}\n\nconsole.log(simplify('3/4', '2/3'));\nconsole.log(simplify('3/4',\
    \ '2/4'));\nconsole.log(simplify('3/4', '2/5'));\nconsole.log(simplify('3/4',\
    \ '2/6'));\nconsole.log(simplify('3/4', '2/7'));\nconsole.log(simplify('3/4',\
    \ '2/8'));\nconsole.log(simplify('3/4', '2/9'));\nconsole.log(simplify('3/4',\
    \ '2/10'));\nconsole.log(simplify('3/4', '2/11'));\nconsole.log(simplify('3/4',\
    \ '2/12'));\nconsole.log(simplify('3/4', '2/13'));\nconsole.log(simplify('3/4',\
    \ '2/14'));\nconsole.log(simplify('3/4', '2/15'));\nconsole.log(simplify('3/4',\
    \ '2/16'));\nconsole.log(simplify('3/4', '2/17'));\nconsole.log(simplify('3/4',\
    \ '2/18'));\nconsole.log(simplify('3/4', '2/19'));\nconsole.log(simplify('3/4',\
    \ '2/20'));\nconsole.log(simplify('3/4', '2/21'));\nconsole.log(simplify('3/4',\
    \ '2/22'));\nconsole.log(simplify('3/4', '2/23'));\nconsole.log(simplify('", " \
    \ const xNumerator = parseInt(x.split('/')[0]);\n  const xDenominator = parseInt(x.split('/')[1]);\n\
    \  const nNumerator = parseInt(n.split('/')[0]);\n  const nDenominator = parseInt(n.split('/')[1]);\n\
    \n  const xNumeratorMultiplied = xNumerator * nDenominator;\n  const xDenominatorMultiplied\
    \ = xDenominator * nNumerator;\n\n  return xNumeratorMultiplied % xDenominatorMultiplied\
    \ === 0;\n}\n\nconsole.log(simplify('2/3', '3/4'));\nconsole.log(simplify('2/3',\
    \ '3/5'));\nconsole.log(simplify('2/3', '3/6'));\nconsole.log(simplify('2/3',\
    \ '3/7'));\nconsole.log(simplify('2/3', '3/8'));\nconsole.log(simplify('2/3',\
    \ '3/9'));\nconsole.log(simplify('2/3', '3/10'));\nconsole.log(simplify('2/3',\
    \ '3/11'));\nconsole.log(simplify('2/3', '3/12'));\nconsole.log(simplify('2/3',\
    \ '3/13'));\nconsole.log(simplify('2/3', '3/14'));\nconsole.log(simplify('2/3',\
    \ '3/15'));\nconsole.log(simplify('2/3', '3/16'));\nconsole.log(simplify('2/3',\
    \ '3/17'));\nconsole.log(simplify('2/3', '3/18'));\nconsole.log(simplify('2/3',\
    \ '3/19'));\nconsole.log(simplify('2/3', '3/20'));\nconsole.log(simplify('2/3',\
    \ '3/21'));\nconsole.log(simplify('2/3', '3/22'));\nconsole.log(", "    let xNumerator\
    \ = Number(x.split('/')[0]);\n    let xDenominator = Number(x.split('/')[1]);\n\
    \    let nNumerator = Number(n.split('/')[0]);\n    let nDenominator = Number(n.split('/')[1]);\n\
    \    let numerator = xNumerator * nNumerator;\n    let denominator = xDenominator\
    \ * nDenominator;\n    return numerator % denominator === 0;\n}\n\nconsole.log(simplify('2/3',\
    \ '4/5'));\nconsole.log(simplify('2/3', '4/6'));\nconsole.log(simplify('2/3',\
    \ '4/4'));\nconsole.log(simplify('2/3', '4/2'));\nconsole.log(simplify('2/3',\
    \ '4/1'));\nconsole.log(simplify('2/3', '4/3'));\nconsole.log(simplify('2/3',\
    \ '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));\nconsole.log(simplify('2/3',\
    \ '4/19'));\nconsole.log(simplify('2/3', '4/20'));\nconsole.log(simplify('2",
  "    const xArr = x.split('/');\n    const nArr = n.split('/');\n    const xNumerator\
    \ = parseInt(xArr[0]);\n    const xDenominator = parseInt(xArr[1]);\n    const\
    \ nNumerator = parseInt(nArr[0]);\n    const nDenominator = parseInt(nArr[1]);\n\
    \    const result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const numerator =\
    \ xNumerator * nDenominator;\n  const denominator = xDenominator * nNumerator;\n\
    \  return numerator % denominator === 0;\n}\n\nconsole.log(simplify('3/4', '2/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/8'));\nconsole.log(simplify('1/2',\
    \ '1/9'));\nconsole.log(simplify('1/2', '1/10'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/14'));\nconsole.log(simplify('1/2',\
    \ '1/15'));\nconsole.log(simplify('1/2', '1/16'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/20'));\nconsole.log(simplify('1/2',\
    \ '1/21'));\nconsole.log(simplify('1/2', '1/22'));\nconsole.log(simplify('1/2',\
    \ '1/24'));\nconsole.log(simplify('1/2', '1/25'));\nconsole.log(simplify('1/2',\
    \ '1/26'));\nconsole.log(simplify('1/2', '1/27'));\nconsole.log(simplify('1/2',\
    \ '1/28'));\nconsole.log(simplify('1/2', '1/30'));\nconsole.log(simplify('1/2',\
    \ '1/32", "    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum,\
    \ nDen] = n.split('/').map(Number);\n    const num = xNum * nNum;\n    const den\
    \ = xDen * nDen;\n    return num % den === 0;\n}\n\nconsole.log(simplify('1/2',\
    \ '1/4'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/2',\
    \ '1/2'));\nconsole.log(simplify('1/2', '1/1'));\nconsole.log(simplify('1/2',\
    \ '2/1'));\nconsole.log(simplify('1/2', '3/2'));\nconsole.log(simplify('1/2',\
    \ '4/2'));\nconsole.log(simplify('1/2', '5/2'));\nconsole.log(simplify('1/2',\
    \ '6/2'));\nconsole.log(simplify('1/2', '7/2'));\nconsole.log(simplify('1/2',\
    \ '8/2'));\nconsole.log(simplify('1/2', '9/2'));\nconsole.log(simplify('1/2',\
    \ '10/2'));\nconsole.log(simplify('1/2', '11/2'));\nconsole.log(simplify('1/2',\
    \ '12/2'));\nconsole.log(simplify('1/2', '13/2'));\nconsole.log(simplify('1/2',\
    \ '14/2'));\nconsole.log(simplify('1/2', '15/2'));\nconsole.log(simplify('1/2',\
    \ '16/2'));\nconsole.log(simplify('1/2', '17/2'));\nconsole.log(simplify('1/2',\
    \ '18/2'));\nconsole.log(simplify('1/2', '19/2'));\nconsole.log(simplify('1/2',\
    \ '20/2')", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result\
    \ = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/3'));\n\
    console.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2', '1/5'));\nconsole.log(simplify('1/2',\
    \ '1/6'));\nconsole.log(simplify('1/2', '1/7'));\nconsole.log(simplify('1/2',\
    \ '1/8'));\nconsole.log(simplify('1/2', '1/9'));\nconsole.log(simplify('1/2',\
    \ '1/10'));\nconsole.log(simplify('1/2', '1/11'));\nconsole.log(simplify('1/2',\
    \ '1/12'));\nconsole.log(simplify('1/2', '1/13'));\nconsole.log(simplify('1/2',\
    \ '1/14'));\nconsole.log(simplify('1/2', '1/15'));\nconsole.log(simplify('1/2',\
    \ '1/16'));\nconsole.log(simplify('1/2', '1/17'));\nconsole.log(simplify('1/2',\
    \ '1/18'));\nconsole.log(simplify('1/2', '1/19'));\nconsole.log(simplify('1/2',\
    \ '1/20'));\nconsole.log(simplify('1/2', '1/21'));\nconsole.log(simplify('1/2',\
    \ '1/22'));\nconsole.log(simplify('1/2', '1/23'));\nconsole.", "    const [xn,\
    \ xd] = x.split('/').map(Number);\n    const [nn, nd] = n.split('/').map(Number);\n\
    \    const num = xn * nn;\n    const den = xd * nd;\n    const gcd = (a: number,\
    \ b: number): number => {\n        if (b === 0) {\n            return a;\n   \
    \     }\n        return gcd(b, a % b);\n    };\n    return num % den === 0 &&\
    \ gcd(num, den) === den;\n}\n\nconsole.log(simplify('1/2', '1/4'));\nconsole.log(simplify('1/2',\
    \ '1/3'));\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2',\
    \ '1/1'));\nconsole.log(simplify('1/2', '2/1'));\nconsole.log(simplify('1/2',\
    \ '3/1'));\nconsole.log(simplify('1/2', '4/1'));\nconsole.log(simplify('1/2',\
    \ '5/1'));\nconsole.log(simplify('1/2', '6/1'));\nconsole.log(simplify('1/2',\
    \ '7/1'));\nconsole.log(simplify('1/2', '8/1'));\nconsole.log(simplify('1/2',\
    \ '9/1'));\nconsole.log(simplify('1/2', '10/1'));\nconsole.log(simplify('1/2',\
    \ '11/1'));\nconsole.log(simplify('1/2', '12/1'));\nconsole.log(simplify('1/2',\
    \ '13/1'));\nconsole.log(simplify('1/2', '14/1'));\nconsole.log(simplify('1/2',\
    \ '15/1'));\nconsole.log(simplify('1/2', '16/1'));\nconsole.log(simplify('1/2',\
    \ '17/", "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const\
    \ [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result = xNumerator\
    \ * nNumerator / (xDenominator * nDenominator);\n  return Number.isInteger(result);\n\
    }\n\nconsole.log(simplify('2/3', '4/5'));\nconsole.log(simplify('2/3', '4/6'));\n\
    console.log(simplify('2/3', '4/7'));\nconsole.log(simplify('2/3', '4/8'));\nconsole.log(simplify('2/3',\
    \ '4/9'));\nconsole.log(simplify('2/3', '4/10'));\nconsole.log(simplify('2/3',\
    \ '4/11'));\nconsole.log(simplify('2/3', '4/12'));\nconsole.log(simplify('2/3',\
    \ '4/13'));\nconsole.log(simplify('2/3', '4/14'));\nconsole.log(simplify('2/3',\
    \ '4/15'));\nconsole.log(simplify('2/3', '4/16'));\nconsole.log(simplify('2/3',\
    \ '4/17'));\nconsole.log(simplify('2/3', '4/18'));\nconsole.log(simplify('2/3',\
    \ '4/19'));\nconsole.log(simplify('2/3', '4/20'));\nconsole.log(simplify('2/3',\
    \ '4/21'));\nconsole.log(simplify('2/3', '4/22'));\nconsole.log(simplify('2/3',\
    \ '4/23'));\nconsole.log(simplify('2/3', '4/24'));\nconsole.log(simplify('2/3',\
    \ '4/25'));\nconsole.log(simplify('2/3', '4/26'));\nconsole.log("]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
