language: ts
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    let res = 1;\n    let a = 2;\n    while (n > 0) {\n\
    \        if (n % 2 == 1) {\n            res = (res * a) % p;\n        }\n    \
    \    a = (a * a) % p;\n        n = Math.floor(n / 2);\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ === 1) {\n        return 2;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return (modp(n - 1, p) ** 2 * 2) % p;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp6ntoid4k.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ntoid4k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    let res = 1;\n    while (n > 0) {\n        if (n &\
    \ 1) {\n            res = (res * 2) % p;\n        }\n        n >>= 1;\n      \
    \  if (n > 0) {\n            res = (res * res) % p;\n        }\n    }\n    return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphgwih0ne.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphgwih0ne.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n\
    \    if (n % 2 === 0) {\n        const t = modp(n / 2, p);\n        return (2\
    \ * t) % p;\n    }\n    return (2 * modp(n - 1, p)) % p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbe4jkuuo.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbe4jkuuo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ === 1) {\n        return 2;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return (modp(n - 1, p) ** 2 * 2) % p;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp6ntoid4k.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ntoid4k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpreakx51g.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpreakx51g.js:3:5)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:12)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n === 1)\
    \ {\n    return 2;\n  } else if (n % 2 === 0) {\n    return modp(n / 2, p) **\
    \ 2 % p;\n  } else {\n    return 2 * modp(n - 1, p) % p;\n  }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    } else if (n\
    \ % 2 == 0) {\n        const t = modp(n / 2, p);\n        return (t * t) % p;\n\
    \    } else {\n        return (2 * modp(n - 1, p)) % p;\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    var r\
    \ = modp(Math.floor(n / 2), p);\n    r = r * r % p;\n    if (n % 2 == 1) {\n \
    \       r = r * 2 % p;\n    }\n    return r;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n == 0) {\n    return 1;\n  } else if (n % 2 ==\
    \ 0) {\n    let c = modp(n / 2, p);\n    return (c * c) % p;\n  } else {\n   \
    \ return (2 * modp(n - 1, p)) % p;\n  }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (p == 2) {\n    return n & 1;\n  }\n  if (n < p)\
    \ {\n    return n;\n  }\n  if (n >= 2 * p) {\n    return modp(n, 2 * p) % p;\n\
    \  }\n  return (modp(n, p / 2) * modp(2, p)) % p;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgxiuu2sp.js:3\n    if (p == 2) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpgxiuu2sp.js:3:5)\n    at modp\
    \ (/tmp/tmpgxiuu2sp.js:12:13)\n    at modp (/tmp/tmpgxiuu2sp.js:10:16)\n    at\
    \ modp (/tmp/tmpgxiuu2sp.js:12:13)\n    at modp (/tmp/tmpgxiuu2sp.js:10:16)\n\
    \    at modp (/tmp/tmpgxiuu2sp.js:12:13)\n    at modp (/tmp/tmpgxiuu2sp.js:10:16)\n\
    \    at modp (/tmp/tmpgxiuu2sp.js:12:13)\n    at modp (/tmp/tmpgxiuu2sp.js:10:16)\n\
    \    at modp (/tmp/tmpgxiuu2sp.js:12:13)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n == 0) return 1;\n  if (n == 1) return 2;\n  if\
    \ (n % 2 == 0) {\n    let t = modp(n / 2, p);\n    return (t * t) % p;\n  } else\
    \ {\n    return (2 * modp(n - 1, p)) % p;\n  }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n == 0) {\n    return 1;\n  } else if (n % 2 ==\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return 2 * modp(n\
    \ - 1, p) % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return 2 * modp(n\
    \ - 1, p) % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1,\
    \ p) * 2 % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpreakx51g.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpreakx51g.js:3:5)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:12)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    } else if (n\
    \ == 1) {\n        return 2;\n    } else {\n        let x = modp(n >> 1, p);\n\
    \        x = (x * x) % p;\n        if (n & 1) {\n            x = (x * 2) % p;\n\
    \        }\n        return x;\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n < 0) {\n        return modp(-n, p);\n    }\n\
    \    if (n === 0) {\n        return 1;\n    }\n    if (n === 1) {\n        return\
    \ 2;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return 2 * modp(n - 1, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  else {\n        return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        let t = modp(n / 2, p);\n        return (t * t) % p;\n\
    \    }\n    return (2 * modp(n - 1, p)) % p;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n \
    \ if (n % 2 === 0) {\n    const t = modp(n / 2, p);\n    return (2 * t) % p;\n\
    \  }\n  return (2 * modp(n - 1, p)) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpngmff8b4.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpngmff8b4.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    } else if (n\
    \ == 1) {\n        return 2;\n    } else {\n        let r = modp(n >> 1, p);\n\
    \        r = (r * r) % p;\n        if (n & 1) {\n            r = (r * 2) % p;\n\
    \        }\n        return r;\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1,\
    \ p) * 2 % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n   \
    \     let t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return\
    \ (2 * modp(n - 1, p)) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpreakx51g.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpreakx51g.js:3:5)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:12)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n == 0) {\n    return 1;\n  } else if (n % 2 ==\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1,\
    \ p) * 2 % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ === 1) {\n        return 2;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return (modp(n - 1, p) ** 2 * 2) % p;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp6ntoid4k.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ntoid4k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return modp(n - 1, p) * 2 % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ == 1) {\n        return 2;\n    }\n    if (n % 2 == 0) {\n        return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(1, p)\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return 2 * modp(n - 1, p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpreakx51g.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpreakx51g.js:3:5)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:12)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ == 1) {\n        return 2;\n    }\n    let res = modp(n >> 1, p);\n    res =\
    \ (res * res) % p;\n    if (n & 1) {\n        res = (res * 2) % p;\n    }\n  \
    \  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  else {\n        return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    let result = 1;\n    let a = 2;\n    while (n > 0)\
    \ {\n        if (n % 2 == 1) {\n            result = (result * a) % p;\n     \
    \   }\n        n = Math.floor(n / 2);\n        a = (a * a) % p;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    let res = 1;\n    let a = 2;\n    while (n > 0) {\n\
    \        if (n % 2 == 1) {\n            res = (res * a) % p;\n        }\n    \
    \    a = (a * a) % p;\n        n = Math.floor(n / 2);\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1,\
    \ p) * 2 % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    let res = 1;\n    for (let i = 0; i < n; i++) {\n\
    \        res = (res * 2) % p;\n    }\n    return res;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  let res = 1;\n  while (n > 0) {\n    if (n & 1) res\
    \ = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp97e7mzob.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp97e7mzob.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n\
    \    if (n % 2 === 0) {\n        const x = modp(n / 2, p);\n        return (x\
    \ * x) % p;\n    }\n    return (2 * modp(n - 1, p)) % p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbxli3pix.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbxli3pix.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    let\
    \ res = 1;\n    let x = 2;\n    let y = n;\n    while (y > 0) {\n        if (y\
    \ % 2 === 1) {\n            res = (res * x) % p;\n        }\n        x = (x *\
    \ x) % p;\n        y = Math.floor(y / 2);\n    }\n    return res;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n === 1)\
    \ {\n    return 2;\n  } else if (n % 2 === 0) {\n    return modp(n / 2, p) **\
    \ 2 % p;\n  } else {\n    return 2 * modp(n - 1, p) % p;\n  }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return 2 * modp(n\
    \ - 1, p) % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpreakx51g.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpreakx51g.js:3:5)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:12)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return modp(n - 1, p) * 2 % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) return 1;\n  if (n % 2 === 0) {\n    let\
    \ t = modp(n / 2, p);\n    return (t * t) % p;\n  } else {\n    return (2 * modp(n\
    \ - 1, p)) % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return modp(n - 1, p) * 2 % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n   \
    \     let t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return\
    \ (2 * modp(n - 1, p)) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1,\
    \ p) * 2 % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ === 1) {\n        return 2;\n    } else if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    } else {\n        return 2 * modp(n - 1, p) % p;\n  \
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n === 1)\
    \ {\n    return 2;\n  } else if (n % 2 === 0) {\n    return modp(n / 2, p) **\
    \ 2 % p;\n  } else {\n    return (modp(n - 1, p) * 2) % p;\n  }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) return 1;\n    if (n == 1) return 2;\n\
    \    if (n % 2 == 0) return modp(n / 2, p) * modp(n / 2, p) % p;\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return 2 *\
    \ modp(n - 1, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  } else if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1,\
    \ p) * 2 % p;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ == 1) {\n        return 2;\n    }\n    if (n % 2 == 0) {\n        return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(1, p)\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ === 1) {\n        return 2;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return (modp(n - 1, p) ** 2 * 2) % p;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp6ntoid4k.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ntoid4k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpreakx51g.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpreakx51g.js:3:5)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:12)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        let x = modp(n / 2, p);\n        return (x * x) % p;\n\
    \    }\n    else {\n        return (2 * modp(n - 1, p)) % p;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    let\
    \ res = 1;\n    let b = 2;\n    while (n > 0) {\n        if (n % 2 === 1) {\n\
    \            res = (res * b) % p;\n        }\n        n = Math.floor(n / 2);\n\
    \        b = (b * b) % p;\n    }\n    return res;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    let res\
    \ = 1;\n    let a = 2;\n    while (n > 0) {\n        if (n % 2 == 1) {\n     \
    \       res = (res * a) % p;\n        }\n        a = (a * a) % p;\n        n =\
    \ Math.floor(n / 2);\n    }\n    return res;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n == 0) return 1;\n  if (n % 2 == 0) return modp(n\
    \ / 2, p) ** 2 % p;\n  return modp(n - 1, p) * 2 % p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015390
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpreakx51g.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpreakx51g.js:3:5)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:12)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpreakx51g.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpreakx51g.js:3:5)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:12)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n    at modp (/tmp/tmpreakx51g.js:9:29)\n    at modp\
    \ (/tmp/tmpreakx51g.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    } else if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n      \
    \  return 2 * modp(n - 1, p) % p;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return sqrmod(modp(n / 2, p), p) % p;\n    }\n    return\
    \ (modp(n - 1, p) * 2) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0rscyhim.ts(7,16): error TS2304: Cannot find name
    ''sqrmod''.

    '
  timestamp: 1660015390
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n\
    \    if (n % 2 === 0) {\n        const t = modp(n / 2, p);\n        return (2\
    \ * t) % p;\n    }\n    return (2 * modp(n - 1, p)) % p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbe4jkuuo.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbe4jkuuo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n  if (n < 0) {\n    return modp(p - (-n % p), p);\n  }\n\
    \  let result = 1;\n  let x = 2;\n  let power = n;\n  while (power > 0) {\n  \
    \  const bit = power % 2;\n    if (bit === 1) {\n      result = (result * x) %\
    \ p;\n    }\n    x = (x * x) % p;\n    power = power >> 1;\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015390
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmso5jqy4.js:3\n    if (n == 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpmso5jqy4.js:3:5)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:12)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n    at modp (/tmp/tmpmso5jqy4.js:9:29)\n    at modp\
    \ (/tmp/tmpmso5jqy4.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ == 1) {\n        return 2;\n    }\n    if (n % 2 == 0) {\n        return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(1, p)\
    \ % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    else\
    \ if (n == 1) {\n        return 2;\n    }\n    else {\n        let a = modp(Math.floor(n\
    \ / 2), p);\n        a = (a * a) % p;\n        if (n % 2 == 0) {\n           \
    \ return a;\n        }\n        else {\n            return (a * 2) % p;\n    \
    \    }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015390
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfeaxi1ct.js:3\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpfeaxi1ct.js:3:5)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:12)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp (/tmp/tmpfeaxi1ct.js:9:29)\n    at modp\
    \ (/tmp/tmpfeaxi1ct.js:9:29)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return 2 *\
    \ modp(n - 1, p) % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015389
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015386
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number,\
    \ p: number): number {\n    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015387
