language: ts
name: HumanEval_158_find_max
results:
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let char of word) {\n\
    \            if (word.indexOf(char) === word.lastIndexOf(char)) {\n          \
    \      count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"abcdef\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5i1t1xb3.ts(31,75): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp5i1t1xb3.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5i1t1xb3.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word.split(''));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde',\
    \ 'abcd', 'abcd', 'abcd']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpel6sgdvj.ts(10,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let unique_chars = new Set(word.split(''));\n    \
    \    if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc',\
    \ 'de', 'fgh', 'de', 'ijkl', 'mnop', 'o']));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3x0klqta.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max: number = 0;\n  let maxWord: string = \"\";\n  for (let\
    \ i: number = 0; i < words.length; i++) {\n    let word: string = words[i];\n\
    \    let unique: string[] = [];\n    for (let j: number = 0; j < word.length;\
    \ j++) {\n      if (unique.indexOf(word[j]) === -1) {\n        unique.push(word[j]);\n\
    \      }\n    }\n    if (unique.length > max) {\n      max = unique.length;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpj62puzvu.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj62puzvu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcd

    abcd

    abcd

    '
  timestamp: 1660014531
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"cdef\"]));\n\
    console.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"cdef\", \"efgh\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp70pd9omr.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max: number = 0;\n  let maxWord: string = \"\";\n  for (let\
    \ word of words) {\n    let unique: string[] = [];\n    for (let char of word)\
    \ {\n      if (unique.indexOf(char) === -1) {\n        unique.push(char);\n  \
    \    }\n    }\n    if (unique.length > max) {\n      max = unique.length;\n  \
    \    maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdl4kwxxz.ts(10,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let set = new Set(word);\n    if (set.size > max) {\n      max = set.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_kvpqeo7.ts(9,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660014530
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max: string = \"\";\n  let max_count: number = 0;\n  for (let\
    \ i = 0; i < words.length; i++) {\n    let word: string = words[i];\n    let count:\
    \ number = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.indexOf(word[j])\
    \ === word.lastIndexOf(word[j])) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max = word;\n      max_count = count;\n    }\n  }\n  return\
    \ max;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\"\
    , \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpd04fsird.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd04fsird.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'ijkl

    '
  timestamp: 1660014531
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let i = 0; i\
    \ < words.length; i++) {\n        let word = words[i];\n        let unique_chars\
    \ = 0;\n        for (let j = 0; j < word.length; j++) {\n            let char\
    \ = word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n\
    \                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max) {\n            max = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\"]));\n\
    console.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"\
    aaa\", \"aaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaaa\"]));\n\
    console.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph1wwh_7v.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: number = 0;\n    let max_word: string = \"\";\n    for\
    \ (let word of words) {\n        let unique_chars: string[] = [];\n        for\
    \ (let char of word) {\n            if (unique_chars.indexOf(char) === -1) {\n\
    \                unique_chars.push(char);\n            }\n        }\n        if\
    \ (unique_chars.length > max) {\n            max = unique_chars.length;\n    \
    \        max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuj9behdl.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphaer58zn.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = words[0];\n  let max_count = 0;\n  for (let word\
    \ of words) {\n    let count = 0;\n    let chars = new Set();\n    for (let char\
    \ of word) {\n      if (!chars.has(char)) {\n        chars.add(char);\n      \
    \  count++;\n      }\n    }\n    if (count > max_count) {\n      max_count = count;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqde671fe.ts(10,21): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpqde671fe.ts(11,22): error TS2494: Using a string in a ''for...of''
    statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"\
    xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5br9_az1.ts(10,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let unique_chars = new Set(word.split(''));\n    \
    \    if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['a',\
    \ 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab',\
    \ 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd',\
    \ 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd',\
    \ 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\n\
    console.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a',\
    \ 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac',\
    \ 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd',\
    \ 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd',\
    \ 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\n\
    console.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq_psohz2.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de',\
    \ 'ijkl', 'mnop']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9duriyo3.ts(10,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"aaa\", \"bbbb\", \"ccccc\", \"dddddd\"]));\nconsole.log(find_max([\"\
    apple\", \"banana\", \"orange\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]));\nconsole.log(find_max([\"a\", \"\
    aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"a\"\
    , \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"\
    , \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"\
    aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"\
    aaaaaaaaa\", \"aaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"\
    aaaaaaaaaa\", \"aaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"\
    aaaaaaaaaa\", \"aaaaaaaaaaa\", \"aaaaaaaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpavcbmic0.ts(30,31): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpavcbmic0.ts(31,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpavcbmic0.ts(31,9): error TS1005: '','' expected.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(''));\n        if (unique.size >\
    \ max) {\n            max = unique.size;\n            maxWord = word;\n      \
    \  }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'cde', 'efg',\
    \ 'abcd', 'cdef']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'cdef',\
    \ 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'cdef', 'abcde',\
    \ 'abcdef']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0tw6zeoc.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word.split(\"\
    \"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n    \
    \  maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzsz7kuvz.ts(10,29): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word);\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"apple\", \"banana\", \"carrot\"]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv_5zhzxb.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014531
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph99wjjan.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014531
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word);\n        if (unique.size > max) {\n \
    \           max = unique.size;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"\
    de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa19zrsre.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n    \
    \            unique++;\n            }\n        }\n        if (unique > max) {\n\
    \            max = unique;\n            max_word = word;\n        }\n    }\n \
    \   return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdef\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7g4_x4c7.ts(31,64): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp7g4_x4c7.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7g4_x4c7.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique_chars = new Set(word);\n  \
    \  if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplncbqydd.ts(10,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\"\
    , \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sb6dh10.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max\
    \ = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\n\
    console.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"apple\", \"banana\"\
    , \"pear\", \"strawberry\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7alg6nl5.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = words[0];\n  let max_unique = 0;\n  for (let word\
    \ of words) {\n    let unique = 0;\n    for (let i = 0; i < word.length; i++)\
    \ {\n      if (word.indexOf(word[i]) === i) {\n        unique++;\n      }\n  \
    \  }\n    if (unique > max_unique) {\n      max_unique = unique;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7cgt61yy.ts(31,65): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp7cgt61yy.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7cgt61yy.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jklm']));\nconsole.log(find_max(['python', 'perl', 'java', 'c',\
    \ 'haskell', 'ruby']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0k8gqjur.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4xit9b7y.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp38jkjs93.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let result = \"\";\n    for (let i = 0; i <\
    \ words.length; i++) {\n        let word = words[i];\n        let unique = 0;\n\
    \        for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n\
    \            if (word.indexOf(char) === word.lastIndexOf(char)) {\n          \
    \      unique++;\n            }\n        }\n        if (unique > max) {\n    \
    \        max = unique;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\",\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplf3zsdnk.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi',\
    \ 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr', 'stu', 'vwx', 'yz']));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp00v2i9bm.ts(10,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"\
    xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5br9_az1.ts(10,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp827oty2q.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx', 'yz']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7n18hwon.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx', 'yz']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7n18hwon.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abcd\", \"abc\", \"abd\", \"a\"]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9t90fk8y.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"\
    , \"abcdefghijkl\", \"abcdefghijkl\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbxww60k_.ts(26,151): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpbxww60k_.ts(27,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpbxww60k_.ts(27,9): error TS1005: '','' expected.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzlqdul_k.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = words[0];\n    for (let i = 1; i < words.length; i++)\
    \ {\n        if (words[i].length > max.length) {\n            max = words[i];\n\
    \        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkson0ftg.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkson0ftg.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = words[0];\n  let max_count = 0;\n  for (let word\
    \ of words) {\n    let count = 0;\n    let letters = word.split(\"\");\n    for\
    \ (let letter of letters) {\n      if (letters.indexOf(letter) === letters.lastIndexOf(letter))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"\
    aaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"\
    , \"aaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"\
    , \"aaaaaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"\
    aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"\
    , \"aaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"\
    aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp86umevhe.ts(35,115): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp86umevhe.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp86umevhe.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"\
    efg\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abc\"]));\nconsole.log(find_max([\"\
    abc\", \"cde\", \"efg\", \"abc\", \"cde\"]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7v1bvybw.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcde\", \"abcdefgh\", \"abcdefghijklmnopqrstuvwxyz\"]));\nconsole.log(find_max([\"\
    abc\", \"abcde\", \"abcdefgh\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2bwwnz0s.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2bwwnz0s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcdefgh

    abcdefghijklmnopqrstuvwxyz

    abcdefghijklmnopqrstuvwxyz

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let uniqueChars = new Set(word.split(\"\"));\n    if (uniqueChars.size >\
    \ max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n \
    \ return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\"\
    , \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppo0o_r45.ts(9,27): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"\
    aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvotb5eup.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size\
    \ > max) {\n            max = unique.size;\n            maxWord = word;\n    \
    \    }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\",\
    \ \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abc\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphr75w4eb.ts(27,111): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmphr75w4eb.ts(28,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphr75w4eb.ts(28,9): error TS1005: '','' expected.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size\
    \ > max) {\n            max = unique.size;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdef\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprz3lu2a_.ts(26,162): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmprz3lu2a_.ts(27,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprz3lu2a_.ts(27,9): error TS1005: '','' expected.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max\
    \ = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptcoyoy86.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = \"\";\n  let max_count = 0;\n  for (let word of words)\
    \ {\n    let count = new Set(word).size;\n    if (count > max_count) {\n     \
    \ max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnd2bu74a.ts(9,21): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word);\n        if (unique.size > max) {\n \
    \           max = unique.size;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"\
    jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abd\", \"a\", \"xyz\"\
    ]));\nconsole.log(find_max([\"zyx\", \"xyz\", \"yx\", \"xzxy\", \"zxzyx\"]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl6xk9fao.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = \"\";\n    let max_count = 0;\n    for (let word\
    \ of words) {\n        let unique_chars = new Set(word);\n        if (unique_chars.size\
    \ > max_count) {\n            max_count = unique_chars.size;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\nconsole.log(find_max([\"aaa\",\
    \ \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\"]));\nconsole.log(find_max([\"aaa\"\
    , \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\", \"a\"]));\nconsole.log(find_max([\"\
    aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\", \"a\", \"ab\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2y6tkvw5.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = words[0];\n  let max_unique = unique_chars(words[0]);\n\
    \  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    const\
    \ unique = unique_chars(word);\n    if (unique > max_unique) {\n      max_unique\
    \ = unique;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0_r3rxyn.ts(7,20): error TS2304: Cannot find name
    ''unique_chars''.

    ../../../../../tmp/tmp0_r3rxyn.ts(10,20): error TS2304: Cannot find name ''unique_chars''.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abcd\", \"abc\", \"abd\", \"a\"]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9t90fk8y.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"abcd\", \"abcde\"]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz0i0j3rd.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = '';\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'de',\
    \ 'fgh', 'de', 'ijkl', 'mnop']));\nconsole.log(find_max(['abc', 'abc', 'abc']));\n\
    console.log(find_max(['abc', 'abcd', 'ab', 'abcde']));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmzn00dbl.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j]))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abc\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpelbbhd9o.ts(38,51): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpelbbhd9o.ts(39,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpelbbhd9o.ts(39,9): error TS1005: '','' expected.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cde\", \"a\", \"ab\"]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ke5rlkc.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef']));\nconsole.log(find_max(['a',\
    \ 'aa', 'aaa', 'aaaa']));\nconsole.log(find_max(['a', 'ab', 'abc', 'abcd']));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpczycc9va.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word);\n        if (unique.size > max) {\n \
    \           max = unique.size;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"abcd\",\
    \ \"ab\", \"abcde\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgmm9_dk2.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: number = 0;\n    let max_word: string = \"\";\n    for\
    \ (let word of words) {\n        let unique_chars: string[] = [];\n        for\
    \ (let char of word) {\n            if (unique_chars.indexOf(char) === -1) {\n\
    \                unique_chars.push(char);\n            }\n        }\n        if\
    \ (unique_chars.length > max) {\n            max = unique_chars.length;\n    \
    \        max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph1wo39ra.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmph1wo39ra.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  words.forEach(word => {\n\
    \    const unique = new Set(word);\n    if (unique.size > max) {\n      max =\
    \ unique.size;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n}\n\n\
    console.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"\
    aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgi_cos8r.ts(9,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words)\
    \ {\n        let unique = new Set(word);\n        if (unique.size > max) {\n \
    \           max = unique.size;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'abcdefghijklmno']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'abcdefghijklmno', 'abcdefghijklmno']));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg73szt5t.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = words[0];\n  let max_count = 0;\n  for (let word\
    \ of words) {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size\
    \ > max_count) {\n      max_count = unique_chars.size;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmf2g2lx7.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = \"\";\n    let max_unique = 0;\n    for (let word\
    \ of words) {\n        let unique = 0;\n        let chars = new Set<string>();\n\
    \        for (let char of word) {\n            if (!chars.has(char)) {\n     \
    \           chars.add(char);\n                unique++;\n            }\n     \
    \   }\n        if (unique > max_unique) {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxtxullaz.ts(10,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpxtxullaz.ts(11,26): error TS2494: Using a string in a ''for...of''
    statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcde\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcde\", \"\
    abcdefg\", \"abcdefghijklmnopqrstuvwxyz\"]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeykrr8a8.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"\
    aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvotb5eup.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max\
    \ = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\n\
    console.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"\
    aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf7n6tdgz.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphaer58zn.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghij\", \"klmno\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghij\", \"klmno\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9njnrw_q.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique\
    \ > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"\
    , \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"\
    abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefgh\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5a97o_qb.ts(33,68): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp5a97o_qb.ts(34,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5a97o_qb.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words)\
    \ {\n        let uniqueChars = new Set(word.split(''));\n        if (uniqueChars.size\
    \ > max) {\n            max = uniqueChars.size;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd',\
    \ 'cde', 'cdf', 'efg']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcboqwlxu.ts(9,31): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"ab\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsjiyg95p.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  words.forEach(word => {\n \
    \   const uniqueChars = new Set(word.split(''));\n    if (uniqueChars.size > max)\
    \ {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  });\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\n\
    console.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a',\
    \ 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac',\
    \ 'd', 'cd', 'bcd', 'abcd']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptrxq_a_e.ts(9,29): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cba\", \"bac\", \"cab\", \"bca\"]));\nconsole.log(find_max([\"\
    abc\", \"cba\", \"bac\", \"cab\", \"bca\", \"abcd\"]));\nconsole.log(find_max([\"\
    abc\", \"cba\", \"bac\", \"cab\", \"bca\", \"abcd\", \"abcd\"]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmph6k3h79s.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph6k3h79s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abc

    abcd

    abcd

    '
  timestamp: 1660014536
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size\
    \ > max) {\n            max = unique.size;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\"\
    , \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\",\
    \ \"aa\", \"aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpthh5sxl8.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014535
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmgbnxiwu.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014537
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphaer58zn.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max: string = \"\";\n  let max_count: number = 0;\n  for (let\
    \ word of words) {\n    let count: number = 0;\n    for (let i: number = 0; i\
    \ < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n\
    \      }\n    }\n    if (count > max_count) {\n      max = word;\n      max_count\
    \ = count;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc_0ufi26.ts(31,65): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpc_0ufi26.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpc_0ufi26.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let char of word) {\n\
    \            if (word.indexOf(char) === word.lastIndexOf(char)) {\n          \
    \      count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\"\
    , \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"\
    abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgki4up5r.ts(33,59): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpgki4up5r.ts(34,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpgki4up5r.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max\
    \ = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\n\
    console.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"deff\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jklmnopqr\"]));\nconsole.log(find_max([\"abcdef\", \"def\", \"ghi\"\
    , \"jklmn\"]));\nconsole.log(find_max([\"abcdef\", \"adef\", \"aghidef\", \"jklmn\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3jkj0z0f.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_m0m7idv.ts(27,104): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp_m0m7idv.ts(28,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_m0m7idv.ts(28,9): error TS1005: '','' expected.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"\
    , \"abcdefghi\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxy4cq2bg.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    const unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\"\
    , \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8stk3xrh.ts(9,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count\
    \ = 0;\n        for (let j = 0; j < word.length; j++) {\n            let char\
    \ = word[j];\n            if (word.indexOf(char) === j) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cba\", \"bac\", \"bca\", \"cab\"]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpc12kgobq.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc12kgobq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abc

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  words.forEach(word => {\n \
    \   let unique = new Set(word.split(''));\n    if (unique.size > max) {\n    \
    \  max = unique.size;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnopq']));\nconsole.log(find_max(['abc',\
    \ 'abc', 'abc']));\nconsole.log(find_max(['abc', 'abcd', 'ab']));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwhllsss6.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnopq']));\nconsole.log(find_max(['abc',\
    \ 'abc', 'abc']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplofz3t5a.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abcd', 'abc', 'abd', 'a']));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0nigi66z.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let result = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      result = word;\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"\
    aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpou6mi5os.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let result = \"\";\n    for (let i = 0; i <\
    \ words.length; i++) {\n        let word = words[i];\n        let unique = 0;\n\
    \        for (let j = 0; j < word.length; j++) {\n            if (word.indexOf(word[j])\
    \ === word.lastIndexOf(word[j])) {\n                unique++;\n            }\n\
    \        }\n        if (unique > max) {\n            max = unique;\n         \
    \   result = word;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbdyxe410.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = \"\";\n    let max_count = 0;\n    for (let word\
    \ of words) {\n        let unique_chars = new Set(word);\n        if (unique_chars.size\
    \ > max_count) {\n            max_count = unique_chars.size;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"python\", \"java\"\
    , \"csharp\", \"javascript\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppfjrz5vj.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de',\
    \ 'ijkl', 'mnop']));\nconsole.log(find_max(['abc', 'abc', 'abc']));\nconsole.log(find_max(['abc',\
    \ 'abcd', 'ab']));\nconsole.log(find_max(['abc', 'abcd', 'ab', 'abcde']));\nconsole.log(find_max(['abcd',\
    \ 'abc', 'ab', 'abcde']));\nconsole.log(find_max(['abcd', 'ab', 'abc', 'abcde']));\n\
    console.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef']));\nconsole.log(find_max(['abcd',\
    \ 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg']));\nconsole.log(find_max(['abcd',\
    \ 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh']));\nconsole.log(find_max(['abcd',\
    \ 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abcd',\
    \ 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']));\n\
    console.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk']));\nconsole.log(find_max(['abcd',\
    \ 'ab',\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptpkot5ij.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word.split(''));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'cde', 'efg']));\n\
    console.log(find_max(['abc', 'cde', 'efg', 'abcd']));\nconsole.log(find_max(['abc',\
    \ 'cde', 'efg', 'abcd', 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg',\
    \ 'abcd', 'abcde', 'abcdef']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_mbvqfki.ts(10,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_unique = unique_chars(words[0]);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let unique = unique_chars(words[i]);\n\
    \        if (unique > max_unique) {\n            max_unique = unique;\n      \
    \      max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpon58we54.ts(7,22): error TS2304: Cannot find name
    ''unique_chars''.

    ../../../../../tmp/tmpon58we54.ts(9,22): error TS2304: Cannot find name ''unique_chars''.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiuh75egw.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = \"\";\n  let max_count = 0;\n  for (let word of words)\
    \ {\n    let count = 0;\n    let chars = new Set();\n    for (let char of word)\
    \ {\n      if (!chars.has(char)) {\n        chars.add(char);\n        count++;\n\
    \      }\n    }\n    if (count > max_count) {\n      max_count = count;\n    \
    \  max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaub0ze8c.ts(10,21): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpaub0ze8c.ts(11,22): error TS2494: Using a string in a ''for...of''
    statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word);\n        if (unique.size > max) {\n \
    \           max = unique.size;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"\
    jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"\
    apple\", \"banana\", \"pear\", \"strawberry\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjo61oey4.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\"\
    , \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1a90iabb.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cde\", \"bcd\", \"def\"]));\nconsole.log(find_max([\"\
    abc\", \"cde\", \"bcd\", \"def\", \"abcdef\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwegs0iox.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique_chars = 0;\n    for (let j\
    \ = 0; j < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max) {\n      max = unique_chars;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\",\
    \ \"efg\", \"abcd\", \"cdef\"]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpashkk7fc.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpashkk7fc.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcd

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    const unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\"\
    , \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8stk3xrh.ts(9,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word.split(''));\n\
    \    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord\
    \ = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['hello',\
    \ 'world', 'before', 'all']));\nconsole.log(find_max(['hello', 'world', 'after',\
    \ 'all']));\nconsole.log(find_max(['hello', 'world', 'after', 'all', 'zebra']));\n\
    console.log(find_max(['hello', 'world', 'after', 'all', 'before']));\nconsole.log(find_max(['ant',\
    \ 'anna', 'sandra', 'ben']));\nconsole.log(find_max(['ant', 'anna', 'sandra',\
    \ 'ben', 'ben']));\nconsole.log(find_max(['ant', 'anna', 'sandra', 'ben', 'aardvark']));\n\
    console.log(find_max(['ant', 'anna', 'sandra', 'ben', 'benjamin']));\nconsole.log(find_max(['ant',\
    \ 'anna', 'sandra', 'ben', 'benjamin', 'bob']));\nconsole.log(find_max(['ant',\
    \ 'anna', 'sandra', 'ben', 'benjamin', 'bob', 'ana']));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpalfzw4cu.ts(10,29): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014539
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max: string = \"\";\n  let max_count: number = 0;\n  for (let\
    \ word of words) {\n    let count: number = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max = word;\n      max_count = count;\n\
    \    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\"\
    , \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5z8e1f4v.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5z8e1f4v.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abc

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\"\
    , \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqfvqwhzt.ts(10,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\",\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt0oviu49.ts(28,9): error TS1005: '','' expected.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max\
    \ = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\n\
    console.log(find_max([\"abc\", \"bcd\", \"cde\", \"cdf\", \"efg\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp873ickap.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9iuf3xdu.ts(31,65): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp9iuf3xdu.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9iuf3xdu.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = '';\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm0hyxpk5.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        let chars = new Set<string>();\n\
    \        for (let char of word) {\n            if (!chars.has(char)) {\n     \
    \           chars.add(char);\n                count++;\n            }\n      \
    \  }\n        if (count > max_count) {\n            max_count = count;\n     \
    \       max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgmxq75tx.ts(10,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpgmxq75tx.ts(11,26): error TS2494: Using a string in a ''for...of''
    statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size\
    \ > max) {\n            max = unique.size;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"\
    aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphqngt0kz.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j]))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbanyzjc6.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbanyzjc6.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcdef

    abcdefg

    abcdefgh

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx', 'yz']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxfgr87r1.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"aaa\", \"aa\", \"bbb\"]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv4ubw4gr.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\", \"def\", \"efg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"cde\", \"def\", \"efg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"cde\", \"def\", \"efg\", \"efgh\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyqya908r.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique\
    \ > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"aa\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"abcde\", \"abcd\", \"abc\", \"ab\"]));\n\
    console.log(find_max([\"abcd\", \"abc\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"ab\", \"abcd\"]));\nconsole.log(find_max([\"abcd\", \"abcd\", \"abcd\", \"\
    abc\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcd\", \"abcd\"]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpki2t4f2o.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpki2t4f2o.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcdef

    a

    abcd

    abcde

    abcde

    abcde

    abcd

    abcd

    abcd

    '
  timestamp: 1660014541
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = \"\";\n  let max_count = 0;\n  for (let word of words)\
    \ {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if\
    \ (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\"\
    , \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxy_qp_o4.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxy_qp_o4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'ijkl

    '
  timestamp: 1660014541
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = '';\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let unique = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique++;\n\
    \            }\n        }\n        if (unique > max) {\n            max = unique;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp92eu6ntk.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp92eu6ntk.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014541
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghia\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghiz\", \"\
    jklmn\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcnj6i5ef.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  words.forEach(word => {\n\
    \    let unique = 0;\n    word.split(\"\").forEach(letter => {\n      if (word.indexOf(letter)\
    \ === word.lastIndexOf(letter)) {\n        unique++;\n      }\n    });\n    if\
    \ (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  });\n\
    \  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpitifwxrk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpitifwxrk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abc

    '
  timestamp: 1660014541
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: string = \"\";\n    let max_count: number = 0;\n    for\
    \ (let word of words) {\n        let unique_chars: string[] = [];\n        for\
    \ (let char of word) {\n            if (unique_chars.indexOf(char) === -1) {\n\
    \                unique_chars.push(char);\n            }\n        }\n        if\
    \ (unique_chars.length > max_count) {\n            max = word;\n            max_count\
    \ = unique_chars.length;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]));\nconsole.log(find_max([\"abc\",\
    \ \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"]));\nconsole.log(find_max([\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\"\
    ]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"\
    ]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\"\
    , \"mno\", \"abc\", \"def\", \"ghi\"]\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj_zgc3x1.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpj_zgc3x1.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014541
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word);\n        if (unique.size > max) {\n \
    \           max = unique.size;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"\
    jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abd\", \"a\"]));\nconsole.log(find_max([\"\
    apple\", \"banana\", \"pear\", \"grapefruit\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq_yo8fhq.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014541
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = \"\";\n    let max_unique = 0;\n    for (let word\
    \ of words) {\n        let unique = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i]))\
    \ {\n                unique++;\n            }\n        }\n        if (unique >\
    \ max_unique) {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpr0jffnah.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr0jffnah.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpda01g38l.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014541
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc45fibxn.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014541
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === word.lastIndexOf(word[i])) {\n        unique++;\n      }\n    }\n    if\
    \ (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n \
    \ return maxWord;\n}\n\nconsole.log(find_max(['abc', 'xyz', 'aba', '1221']));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1b6qq47v.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1b6qq47v.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abc

    '
  timestamp: 1660014542
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size\
    \ > max) {\n            max = unique.size;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7us_2utq.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014542
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abcd', 'abc', 'abd',\
    \ 'a']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnjq2jrr_.ts(10,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014542
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: number = 0;\n    let max_word: string = \"\";\n    for\
    \ (let word of words) {\n        let unique_chars: string[] = [];\n        for\
    \ (let char of word) {\n            if (unique_chars.indexOf(char) == -1) {\n\
    \                unique_chars.push(char);\n            }\n        }\n        if\
    \ (unique_chars.length > max) {\n            max = unique_chars.length;\n    \
    \        max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj74j_473.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9iuf3xdu.ts(31,65): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp9iuf3xdu.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9iuf3xdu.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu6kay_zn.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'cdf', 'efg']));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1uxk7c_3.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: string = \"\";\n    let max_count: number = 0;\n    for\
    \ (let word of words) {\n        let count: number = 0;\n        for (let i =\
    \ 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpz8ln3cab.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz8ln3cab.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"bcd\", \"cde\", \"cdf\", \"efg\"]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb8iweu_u.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"\
    mno\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\",\
    \ \"pqr\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    , \"pqr\", \"stu\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\"\
    , \"mno\", \"pqr\", \"stu\", \"vwx\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph0ycnqi7.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_length = new Set(words[0]).size;\n\
    \    for (let i = 1; i < words.length; i++) {\n        const word = words[i];\n\
    \        const length = new Set(word).size;\n        if (length > max_length)\
    \ {\n            max_length = length;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aa\", \"\
    aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzqy1fq52.ts(7,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpzqy1fq52.ts(10,28): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words)\
    \ {\n        let unique = new Set(word);\n        if (unique.size > max) {\n \
    \           max = unique.size;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\n\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd',\
    \ 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd',\
    \ 'abcd']) === 'abcd');\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd',\
    \ 'abcd']) === 'abc');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkvpjfk62.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word);\n\
    \    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord\
    \ = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\",\
    \ \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7ctz_bu5.ts(10,29): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"ab\", \"cdef\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprxy01z90.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(''));\n        if (unique.size >\
    \ max) {\n            max = unique.size;\n            maxWord = word;\n      \
    \  }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde',\
    \ 'cdf', 'efg']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplk65f_o5.ts(9,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"aaa\", \"aa\", \"bbb\"]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv4ubw4gr.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    const unique_chars = new Set(word);\n    if (unique_chars.size > max)\
    \ {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw1v916lv.ts(9,30): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_unique_chars = find_unique_chars(max_word);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let word = words[i];\n\
    \        let unique_chars = find_unique_chars(word);\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeylk4i__.ts(7,28): error TS2304: Cannot find name
    ''find_unique_chars''.

    ../../../../../tmp/tmpeylk4i__.ts(10,28): error TS2304: Cannot find name ''find_unique_chars''.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = words[0];\n  let max_count = count_unique(words[0]);\n\
    \  for (let i = 1; i < words.length; i++) {\n    let count = count_unique(words[i]);\n\
    \    if (count > max_count) {\n      max_count = count;\n      max_word = words[i];\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzxayj0gk.ts(7,19): error TS2304: Cannot find name
    ''count_unique''.

    ../../../../../tmp/tmpzxayj0gk.ts(9,17): error TS2304: Cannot find name ''count_unique''.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: string = \"\";\n    let max_count: number = 0;\n    for\
    \ (let word of words) {\n        let count: number = 0;\n        for (let i: number\
    \ = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\",\
    \ \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9evy6i_l.ts(31,65): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp9evy6i_l.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9evy6i_l.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014543
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words)\
    \ {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n    \
    \            unique++;\n            }\n        }\n        if (unique > max) {\n\
    \            max = unique;\n            maxWord = word;\n        }\n    }\n  \
    \  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'abcc', 'abcdd', 'abcde']));\n\
    console.log(find_max(['abc', 'abcc', 'abcdd', 'abcde', 'abcd']));\nconsole.log(find_max(['abc',\
    \ 'abcc', 'abcdd', 'abcde', 'abcd', 'abc']));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmptaryh6na.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptaryh6na.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcde

    abcde

    abcde

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let uniqueChars = new Set(word);\n   \
    \ if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord\
    \ = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\",\
    \ \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwk03mil6.ts(10,27): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = '';\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word);\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'bcd',\
    \ 'cde', 'def']));\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef']));\n\
    console.log(find_max(['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg']));\nconsole.log(find_max(['abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh']));\nconsole.log(find_max(['abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']));\n\
    console.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij']));\nconsole.log(find_max(['a', 'ab',\
    \ 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij',\
    \ 'abcdefghijk']));\nconsole.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl']));\n\
    console.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg',\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzbd9b84y.ts(28,9): error TS1005: '','' expected.

    '
  timestamp: 1660014543
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n    \
    \            unique++;\n            }\n        }\n        if (unique > max) {\n\
    \            max = unique;\n            max_word = word;\n        }\n    }\n \
    \   return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdef\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7g4_x4c7.ts(31,64): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp7g4_x4c7.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7g4_x4c7.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014530
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique\
    \ > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"]));\n\
    console.log(find_max([\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\", \"abcdefghi\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0g4iqqls.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0g4iqqls.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcdefgh

    abcdefghi

    '
  timestamp: 1660014544
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiuh75egw.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014538
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let result = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word.split(''));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      result = word;\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde',\
    \ 'cdf', 'efg']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt1rs502a.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014544
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique\
    \ > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abcd\", \"abc\", \"abd\", \"a\"]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpz7bcz7o4.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz7bcz7o4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcd

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0p_e0h32.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  words.forEach(word => {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abc\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwcp6u2ch.ts(27,111): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpwcp6u2ch.ts(28,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpwcp6u2ch.ts(28,9): error TS1005: '','' expected.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = \"\";\n    let max_count = 0;\n    for (let word\
    \ of words) {\n        let count = 0;\n        let unique_chars = new Set();\n\
    \        for (let char of word) {\n            if (!unique_chars.has(char)) {\n\
    \                unique_chars.add(char);\n                count++;\n         \
    \   }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpefb0n9qn.ts(33,44): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpefb0n9qn.ts(34,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpefb0n9qn.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = words[0];\n  for (let i = 1; i < words.length; i++) {\n\
    \    if (unique_chars(words[i]) > unique_chars(max)) {\n      max = words[i];\n\
    \    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3fwe7rv0.ts(8,9): error TS2304: Cannot find name
    ''unique_chars''.

    ../../../../../tmp/tmp3fwe7rv0.ts(8,34): error TS2304: Cannot find name ''unique_chars''.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let maxWord = \"\";\n    for (let word of words)\
    \ {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n    \
    \            unique++;\n            }\n        }\n        if (unique > max) {\n\
    \            max = unique;\n            maxWord = word;\n        }\n    }\n  \
    \  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\",\
    \ \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9hqp3gdl.ts(31,69): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp9hqp3gdl.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9hqp3gdl.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = \"\";\n  let max_count = 0;\n  for (let word of words)\
    \ {\n    let count = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"abcdefgh\",\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7fpwik7h.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\"]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbmp09jbv.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\"\
    , \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sb6dh10.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014533
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"\
    abcd\", \"cdef\"]));\nconsole.log(find_max([\"abc\", \"abc\", \"abc\"]));\nconsole.log(find_max([\"\
    abc\", \"cde\", \"efg\", \"abcd\", \"cdef\", \"abcde\"]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeqpei52o.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp0n5ka9z.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphaer58zn.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === word.lastIndexOf(word[i])) {\n        unique++;\n      }\n    }\n    if\
    \ (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n \
    \ return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\",\
    \ \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpje88x78y.ts(31,69): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpje88x78y.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpje88x78y.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014545
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j]))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpe91tmejw.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe91tmejw.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014546
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"a\", \"ab\", \"cba\"]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw4otykg_.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"aab\", \"def\", \"ghi\"]));\n\
    console.log(find_max([\"abc\", \"aab\", \"def\", \"ghi\", \"abcdefghijklmnopqrstuvwxyz\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplw6ra20k.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9iuf3xdu.ts(31,65): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp9iuf3xdu.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9iuf3xdu.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max: string = \"\";\n  let max_count: number = 0;\n  for (let\
    \ word of words) {\n    let count: number = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max = word;\n      max_count = count;\n\
    \    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgnzavdio.ts(31,69): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpgnzavdio.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpgnzavdio.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\"\
    , \"abcdefgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7xg67zz.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014546
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = \"\";\n    let max_count = 0;\n    for (let word\
    \ of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplv80qgwh.ts(31,69): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmplv80qgwh.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmplv80qgwh.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = words[0];\n  let max_unique = 0;\n  for (let word\
    \ of words) {\n    let unique = new Set(word.split(\"\")).size;\n    if (unique\
    \ > max_unique) {\n      max_unique = unique;\n      max_word = word;\n    }\n\
    \  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\"\
    , \"cdf\", \"bbb\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\",\
    \ \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"\
    , \"aaaaaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaurrf0ke.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        let chars = new Set();\n \
    \       for (let char of word) {\n            if (!chars.has(char)) {\n      \
    \          chars.add(char);\n                count++;\n            }\n       \
    \ }\n        if (count > max_count) {\n            max_count = count;\n      \
    \      max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi66rrc7h.ts(10,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpi66rrc7h.ts(11,26): error TS2494: Using a string in a ''for...of''
    statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014545
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word);\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    bcd\", \"cde\", \"abcd\", \"abcde\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvgbmhk5m.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014546
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['hello', 'world', 'before', 'all']));\nconsole.log(find_max(['hello',\
    \ 'world', 'after', 'all']));\nconsole.log(find_max(['hello', 'world', 'before',\
    \ 'all']));\nconsole.log(find_max(['hello', 'world', 'after', 'all']));\nconsole.log(find_max(['ant',\
    \ 'anna', 'bonobo', 'baby']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdpnezuw3.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014546
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\"\
    , \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aaa\", \"aa\", \"bbb\"\
    ]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp37vth__z.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014546
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ih5oidr.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014546
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"a\", \"abcd\", \"ab\"\
    , \"abcde\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpexebsyh0.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014547
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max_word = words[0];\n  let max_count = 0;\n  for (let word\
    \ of words) {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n\
    \    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"\
    fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpd4_6zm8z.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd4_6zm8z.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'ijkl

    '
  timestamp: 1660014547
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: number = 0;\n    let maxWord: string = \"\";\n    for\
    \ (let i: number = 0; i < words.length; i++) {\n        let word: string = words[i];\n\
    \        let uniqueChars: string[] = [];\n        for (let j: number = 0; j <\
    \ word.length; j++) {\n            if (uniqueChars.indexOf(word[j]) === -1) {\n\
    \                uniqueChars.push(word[j]);\n            }\n        }\n      \
    \  if (uniqueChars.length > max) {\n            max = uniqueChars.length;\n  \
    \          maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"a\"\
    , \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    , \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdef\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpskn4etbl.ts(33,98): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpskn4etbl.ts(34,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpskn4etbl.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1660014547
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: number = 0;\n    let max_word: string = \"\";\n    for\
    \ (let word of words) {\n        let unique_chars: number = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i]))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max) {\n            max = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"\
    aaaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\"\
    , \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"\
    abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpn4_ysvqx.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn4_ysvqx.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcde

    a

    abcd

    abcde

    abcdef

    abcdefg

    abcdefgh

    abcdefghi

    abcdefghij

    abcdefghijk

    '
  timestamp: 1660014547
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let uniqueChars = word.split(\"\").filter((v,\
    \ i, a) => a.indexOf(v) === i);\n    if (uniqueChars.length > max) {\n      max\
    \ = uniqueChars.length;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"cde\", \"ghi\"]));\nconsole.log(find_max([\"\
    abc\", \"cde\", \"efg\", \"cde\", \"ghi\", \"abc\"]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpask__nzr.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpask__nzr.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abc

    abc

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphaer58zn.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = '';\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbfbfci8n.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014547
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count\
    \ = 0;\n        let unique_chars = {};\n        for (let j = 0; j < word.length;\
    \ j++) {\n            let char = word[j];\n            if (!unique_chars[char])\
    \ {\n                count++;\n                unique_chars[char] = true;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"\
    abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"aaa\", \"aa\", \"bbb\"]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpey8yx9z6.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpey8yx9z6.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'abcd

    abcd

    a

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9iuf3xdu.ts(31,65): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp9iuf3xdu.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9iuf3xdu.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014540
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"\
    abd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpicnz9bka.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014547
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"def\", \"ghi\", \"jklm\"]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk7ar3hu5.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcdef\", \"abcd\", \"abcde\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"a\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp47f3ftma.ts(10,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'cde', 'efg']));\nconsole.log(find_max(['abc',\
    \ 'cde', 'efg', 'abcd']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd',\
    \ 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef']));\n\
    console.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg']));\n\
    console.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abc',\
    \ 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk']));\n\
    console.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl']));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaz9mb6qv.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let ch of word) {\n \
    \           if (word.indexOf(ch) === word.lastIndexOf(ch)) {\n               \
    \ count++;\n            }\n        }\n        if (count > max_count) {\n     \
    \       max_count = count;\n            max_word = word;\n        }\n    }\n \
    \   return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxj8x7zhl.ts(10,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphaer58zn.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014530
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max: number = 0;\n  let max_word: string = \"\";\n  for (let\
    \ word of words) {\n    let unique_chars: string[] = [];\n    for (let char of\
    \ word) {\n      if (unique_chars.indexOf(char) === -1) {\n        unique_chars.push(char);\n\
    \      }\n    }\n    if (unique_chars.length > max) {\n      max = unique_chars.length;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmedkm57i.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n   \
    \   max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a',\
    \ 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']) === 'abcd');\nconsole.log(find_max(['a',\
    \ 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']) === 'abc');\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4z119s7n.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let unique_chars = new Set(word.split(''));\n    \
    \    if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc',\
    \ 'de', 'fghi', 'jklmno']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpek47dcn5.ts(9,32): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique\
    \ > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg1u6ns0s.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"cde\", \"efg\", \"cdf\"]));\nconsole.log(find_max([\"abc\", \"cde\",\
    \ \"efg\", \"cdf\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"\
    efg\", \"cdf\", \"abcdefg\", \"abcdefgh\"]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphzfylcba.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppt7gu2vy.ts(9,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph99wjjan.ts(9,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014531
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max = 0;\n    let max_word = '';\n    for (let i = 0; i <\
    \ words.length; i++) {\n        const word = words[i];\n        const unique =\
    \ new Set(word.split(''));\n        if (unique.size > max) {\n            max\
    \ = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max(['abc', 'defgh', 'a', 'abcd']));\nconsole.log(find_max(['abc',\
    \ 'defgh', 'a', 'abcd', 'abcd']));\nconsole.log(find_max(['abc', 'defgh', 'a',\
    \ 'abcd', 'abcd', 'abcde']));\nconsole.log(find_max(['abc', 'defgh', 'a', 'abcd',\
    \ 'abcd', 'abcde', 'abcdef']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuij00wju.ts(10,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word.split(\"\
    \"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n    \
    \  maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"defg\", \"ghijkl\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp30kusiqw.ts(10,29): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014548
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\nfunction find_max(words: string[]):\
    \ string {\n    let max: number = 0;\n    let maxWord: string = \"\";\n    for\
    \ (let word of words) {\n        let unique: string[] = [];\n        for (let\
    \ char of word) {\n            if (unique.indexOf(char) === -1) {\n          \
    \      unique.push(char);\n            }\n        }\n        if (unique.length\
    \ > max) {\n            max = unique.length;\n            maxWord = word;\n  \
    \      }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"\
    aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    aabbcc\", \"aaabbbccc\", \"aaaabbbcccc\"]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph7t0tjhd.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014548
