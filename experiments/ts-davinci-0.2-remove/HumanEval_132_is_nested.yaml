name: HumanEval_132_is_nested
language: ts
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return True if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\nfunction is_nested(string: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
  ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
  [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
  [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
  []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
  [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '(') {\n            stack.push(')');\n   \
    \     } else if (string[i] === '[') {\n            stack.push(']');\n        }\
    \ else if (string[i] === '{') {\n            stack.push('}');\n        } else\
    \ if (stack.length === 0 || stack.pop() !== string[i]) {\n            return false;\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([)]'));\nconsole.log(is_nested('([)'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([])'));\nconsole.log(is_nested", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '(') {\n            stack.push(')');\n        } else if (string[i] === '[')\
    \ {\n            stack.push(']');\n        } else if (string[i] === '{') {\n \
    \           stack.push('}');\n        } else if (stack.length === 0 || stack.pop()\
    \ !== string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n\nconsole.log(is_nested('()'));\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([)]'));\nconsole.log(is_nested('([{}])'));\nconsole.log(is_nested('([{}]()[])'));\n\
    console.log(is_nested('([{}]()[]){}'));\nconsole.log(is_nested('([{}]()[]){}('));\n\
    console.log(is_nested('([{}]()[]){}('));\nconsole.log(is_nested('([{}]()[]){}(]'));\n\
    console.log(is_nested('([{}]()[]){}(]'));\nconsole.log(is_nested('([{}]()[]){}(]{'));\n\
    console.log(is_nested('([{}]()[]){}(]{}'));\nconsole.log(is_nested('([{}]()[]){}(]{}('));\n\
    console.log(is_nested('([{}]()[]){}(]{}()'));\nconsole.log(is_nested('([{}]()[]){}(]{}()['));\n\
    console.log(is_nested('([{}]()[]){}(]{}()[)'));\nconsole.log(is_nested('([{}]()[]){}(]{}()[)]'));\n\
    console.log(", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[' || string[i] === '{' || string[i] ===\
    \ '(') {\n            stack.push(string[i]);\n        } else if (string[i] ===\
    \ ']' || string[i] === '}' || string[i] === ')') {\n            if (stack.length\
    \ === 0) {\n                return false;\n            }\n            let last\
    \ = stack.pop();\n            if (string[i] === ']' && last !== '[') {\n     \
    \           return false;\n            }\n            if (string[i] === '}' &&\
    \ last !== '{') {\n                return false;\n            }\n            if\
    \ (string[i] === ')' && last !== '(') {\n                return false;\n     \
    \       }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[{}]'));\n\
    console.log(is_nested('[{]'));\nconsole.log(is_nested('[{}]{}'));\nconsole.log(is_nested('[{}]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{}'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}['));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{", "    let stack: string[] = [];\n  \
    \  for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[]\"));\n\
    console.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"[][\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"\
    [][][\"));\nconsole.log(is_nested(\"[][][]][\"));\nconsole.log(is_nested(\"[][][][][\"\
    ));\nconsole.log(is_nested(\"[][][][]][][\"));\nconsole.log(is_nested(\"[][][][][][][\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][\"));\nconsole.log(is_nested(\"[][][][][][][][][\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][\"\
    ));\nconsole.log(is_nested(\"[", "    let stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === ']') {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[][]]['));\n\
    console.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('['));\nconsole.log(is_nested(']'));\nconsole.log(is_nested(']['));\n\
    console.log(is_nested
  "    let brackets: string[] = string.split('');\n    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '[') {\n            stack.push(brackets[i]);\n        } else {\n           \
    \ if (stack.length === 0) {\n                return false;\n            } else\
    \ {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '(') {\n           \
    \ stack.push(')');\n        } else if (string[i] === '[') {\n            stack.push(']');\n\
    \        } else if (string[i] === '{') {\n            stack.push('}');\n     \
    \   } else if (stack.length === 0 || stack.pop() !== string[i]) {\n          \
    \  return false;\n        }\n    }\n    return stack.length === 0;\n}\n", "  \
    \  const stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            }\n            stack.pop();\n      \
    \  }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[[][]]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[[][]][]'));\nconsole.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[[][]][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[[][]][][][]'));\n\
    console.log(is_nested('[][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"[][\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"\
    [][][\"));\nconsole.log(is_nested(\"[][][][\"));\nconsole.log(is_nested(\"][][][]\"\
    ));\nconsole.log(is_nested(\"][][][][\"));\nconsole.log(is_nested(\"[][]][][\"\
    ));\nconsole.log(is_nested(\"[][][]][\"));\nconsole.log(is_nested(\"[][][][]][\"\
    ));\nconsole.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"[][][][][][\"\
    ));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][\"\
    ));\nconsole.log(is_nested(\"[][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][\"\
    ));\nconsole.log(is_nested(\"[][][][][", "    let stack: string[] = [];\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n  \
    \          stack.push(')');\n        } else if (string[i] === '[') {\n       \
    \     stack.push(']');\n        } else if (string[i] === '{') {\n            stack.push('}');\n\
    \        } else if (stack.length === 0 || stack.pop() !== string[i]) {\n     \
    \       return false;\n        }\n    }\n    return stack.length === 0;\n}\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[[]][]\"));\nconsole.log(is_nested(\"[][[]]\"\
    ));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\"));\nconsole.log(is_nested(\"\
    ][\"));\nconsole.log(is_nested(\"[[][\"));\nconsole.log(is_nested(\"[]]\"));\n\
    console.log(is_nested(\"[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    let map: { [key: string]: string } = {\n        \"\
    (\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\"\n    };\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"(\" || string[i]\
    \ === \"[\" || string[i] === \"{\") {\n            stack.push(string[i]);\n  \
    \      } else {\n            let last = stack.pop();\n            if (string[i]\
    \ !== map[last]) {\n                return false;\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    let openBrackets: string[] = ['[', '{', '('];\n    let closeBrackets: string[]\
    \ = [']', '}', ')'];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (openBrackets.indexOf(string[i]) > -1) {\n            stack.push(string[i]);\n\
    \        } else if (closeBrackets.indexOf(string[i]) > -1) {\n            if (stack.length\
    \ === 0) {\n                return false;\n            }\n            let last\
    \ = stack.pop();\n            if (openBrackets.indexOf(last) !== closeBrackets.indexOf(string[i]))\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '(') {\n           \
    \ stack.push(')');\n        } else if (string[i] === '[') {\n            stack.push(']');\n\
    \        } else if (string[i] === '{') {\n            stack.push('}');\n     \
    \   } else if (stack.length === 0 || stack.pop() !== string[i]) {\n          \
    \  return false;\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('()'));\n\
    console.log(is_nested('[()]'));\nconsole.log(is_nested('[(])'));\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[()]'));",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[][][][][][]'));\n\
    console.log(is_nested('[][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[]][[]'));\nconsole.log(is_nested('[][]][[]'));\nconsole.log(is_nested('[][[]]'));\n\
    console.log(is_nested('[][[]][]'));\nconsole.log(is_nested('[][[][]]'));\nconsole.log(is_nested('[][[][][]]'));\n\
    console.log(is_nested('[][[][][][]]'));\nconsole.log(is_nested('[][[][][][][]]'));\n\
    console.log(is_nested('[][[][][][][][]]'));\nconsole.log(is_nested('[][[][][][][][][]]'));\n\
    console.log(is_nested('[][[][][][][][][][]]'));\nconsole.log(is_nested('[][[][][][][][][][][]]'));\n\
    console.log(is_nested('[][[][][][][][][][][][]]'));\nconsole.log(is_nested('[][[][][][][][][][][][][]]'));\n\
    console.log(is_nested('[][[][][][][][][][][][][][]]'));\nconsole.log(is_nested('[][[][][][][][][][][][][][][]]'));\n\
    console.log", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('['));\nconsole.log(is_nested(']'));\nconsole.log(is_nested('[]['));\n\
    console.log(is_nested(']['));\nconsole.log(is_nested('[][]['));\nconsole.log(is_nested('[][][]['));\n\
    console.log(is_nested('][][]['));\nconsole.log(is_nested('][][][]['));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[][][][]['));\nconsole.log(is_nested('][][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[][][][][]['));\nconsole.log(is_nested('][][][][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[][][][][][]['));\n\
    console.log(is_nested('][][][][][][]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][]['));\nconsole.log(is_nested('][][][][][][][]'));\n\
    console", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"[[]\"));\nconsole.log(is_nested(\"[][]][\"));\n\
    console.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"\
    []][][][]\"));\nconsole.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"\
    []][][][][]\"));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"\
    []][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\n\
    console.log(is_nested(\"[]][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[]][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '(') {\n            stack.push(')');\n   \
    \     } else if (string[i] === '[') {\n            stack.push(']');\n        }\
    \ else if (string[i] === '{') {\n            stack.push('}');\n        } else\
    \ if (stack.length === 0 || stack.pop() !== string[i]) {\n            return false;\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[(])'));\nconsole.log(is_nested('[()[]]'));\nconsole.log(is_nested('[()[]{}]'));\n\
    console.log(is_nested('[()[]{}]{}'));\nconsole.log(is_nested('[()[]{}]{}['));\n\
    console.log(is_nested('[()[]{}]{}[]'));\nconsole.log(is_nested('[()[]{}]{}[]{'));\n\
    console.log(is_nested('[()[]{}]{}[]{}'));\nconsole.log(is_nested('[()[]{}]{}[]{}('));\n\
    console.log(is_nested('[()[]{}]{}[]{})'));\nconsole.log(is_nested('[()[]{}]{}[]{}()'));\n\
    console.log(is_nested('[()[]{}]{}[]{}()['));\nconsole.log(is_nested('[()[]{}]{}[]{}()[]'));\n\
    console.log(is_nested('[()[]{}]{}[]{}()[]{'));\nconsole.log(is_nested('[()[]{}]{}[]{}()[]{}'));\n\
    console.log(is_nested('[()[]{}]{}[]{}()[]{}('));\nconsole", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[]'));\nconsole.log(is_nested('[][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][", "    const stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    }\n            stack.pop();\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"[[[[]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[]]]]]\"));\nconsole.log(is_nested(\"[[[[[[]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[[]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[[]]]]]]]]]]]\"));\n\
    console.log(is_nested(\"[[[[[[[[[[[[]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[[[[]]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[[[[[]]]]]]]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[[[[[[[[]]]]]]",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '(') {\n            stack.push(')');\n        } else if\
    \ (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(')\
    \ {\n            stack.push(')');\n        } else if (string[i] === '[') {\n \
    \           stack.push(']');\n        } else if (string[i] === '{') {\n      \
    \      stack.push('}');\n        } else if (stack.length === 0 || stack.pop()\
    \ !== string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')':\
    \ '(',\n        ']': '[',\n        '}': '{'\n    };\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '(' || string[i] === '[' || string[i] ===\
    \ '{') {\n            stack.push(string[i]);\n        } else if (string[i] ===\
    \ ')' || string[i] === ']' || string[i] === '}') {\n            if (stack.length\
    \ === 0 || stack[stack.length - 1] !== map[string[i]]) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"[][\"));\nconsole.log(is_nested(\"\
    ][][\"));\nconsole.log(is_nested(\"[][][\"));\nconsole.log(is_nested(\"[][][][\"\
    ));\nconsole.log(is_nested(\"][][][]\"));\nconsole.log(is_nested(\"][][][][\"\
    ));\nconsole.log(is_nested(\"][][][][][\"));\nconsole.log(is_nested(\"[][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][\"));\nconsole.log(is_nested(\"[][][][][][][\"\
    ));\nconsole.log(is_nested(\"][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][]\"\
    ));\nconsole.log(is_nested(\"][][][][][][][\"));\nconsole.log(is_nested(\"[][][][][][][][\"\
    ));\nconsole.log(is_nested(\"][][][][][][][][\"));\nconsole.log(is_nested(\"[][][][][][][][][\"\
    ));\nconsole.log", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[][][]\"\
    ));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[][][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[]]\"));\nconsole.log(is_nested(\"\
    [][]][\"));\nconsole.log(is_nested(\"[][][]][\"));\nconsole.log(is_nested(\"[][][][]][\"\
    ));\nconsole.log(is_nested(\"[][][][][]][\"));\nconsole.log(is_nested(\"][\"));\n\
    console.log(is_nested(\"][][\"));\nconsole.log(is_nested(\"][][][\"));\nconsole.log(is_nested(\"\
    ][][][][\"));\nconsole.log(is_nested(\"][][][][][\"));\nconsole.log(is_nested(\"\
    \"));\nconsole.log(is_nested(\"][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][]]\"));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][]]\"));\nconsole.log(is_nested(\"[][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][][]]\"));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][]]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][]]\"));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][][]]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][]\"));\n\
    console.log(is_nested(\"[[][][][][][][][][][]]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][", "    let count: number = 0;\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n         \
    \   count++;\n        } else if (string[i] === ']') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count === 0;\n}\n\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[]['));\n\
    console.log(is_nested(']['));\nconsole.log(is_nested('[][]['));\nconsole.log(is_nested('][]['));\n\
    console.log(is_nested('[][][]['));\nconsole.log(is_nested('][][]['));\nconsole.log(is_nested('[][][][]['));\n\
    console.log(is_nested('][][][]['));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('][][][][]['));\nconsole.log(is_nested('[][][][][][]['));\n\
    console.log(is_nested('][][][][][]['));\nconsole.log(is_nested('[][][][][][][]['));\n\
    console.log(is_nested('][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][]['));\n\
    console.log(is_nested('][][][][][", "    let stack: string[] = [];\n    let openBrackets:\
    \ string[] = ['[', '{', '('];\n    let closeBrackets: string[] = [']', '}', ')'];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (openBrackets.indexOf(string[i])\
    \ > -1) {\n            stack.push(string[i]);\n        } else if (closeBrackets.indexOf(string[i])\
    \ > -1) {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            let last = stack.pop();\n            if (openBrackets.indexOf(last)\
    \ !== closeBrackets.indexOf(string[i])) {\n                return false;\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\
    \ // True\nconsole.log(is_nested('[][][]')); // True\nconsole.log(is_nested('[][][][]'));\
    \ // True\nconsole.log(is_nested('[]')); // True\nconsole.log(is_nested('['));\
    \ // False\nconsole.log(is_nested('][')); // False\nconsole.log(is_nested('[][][][][]'));\
    \ // True\nconsole.log(is_nested('[]][[]')); // False\nconsole.log(is_nested('[][][][][][][][]'));\
    \ // True\nconsole.log(is_nested('[][][][][][][][][]')); // True\nconsole.log(is_nested('[][][][][][][][][][]'));\
    \ // True\nconsole.log(is_nested('[][][][][][][][][][][]')); // True\nconsole.log(is_nested('[][][][][][][][][][][][]'));\
    \ // True\nconsole.log(is_nested('[][][][][][][][][][][][][]')); // True\nconsole.log(is_nested('[][][][][][][][][][][][][][]'));\
    \ // True\nconsole.log(is_nested('[][][][][][][][][][][][][][][]')); // True\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][]')); // True\nconsole.log(is_nested('[][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '(') {\n            stack.push(')');\n        } else\
    \ if (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('{[()]}'));\n\
    console.log(is_nested('{[(])}'));\nconsole.log(is_nested('{{[[(())]]}}'));\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[[]]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[][][][][][]'));\n\
    console.log(is_nested('[][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    let openBrackets: string[] = ['[', '{', '('];\n\
    \    let closedBrackets: string[] = [']', '}', ')'];\n    for (let i = 0; i <\
    \ string.length; i++) {\n        if (openBrackets.indexOf(string[i]) > -1) {\n\
    \            stack.push(string[i]);\n        } else if (closedBrackets.indexOf(string[i])\
    \ > -1) {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            let last = stack.pop();\n            if (openBrackets.indexOf(last)\
    \ !== closedBrackets.indexOf(string[i])) {\n                return false;\n  \
    \          }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[][]][]\"));\nconsole.log(is_nested(\"[[][]][][]\"));\nconsole.log(is_nested(\"\
    [[][]][][][]\"));\nconsole.log(is_nested(\"[[[[][]][]][][]\"));\nconsole.log(is_nested(\"\
    [[[[][]][]][][][]\"));\nconsole.log(is_nested(\"[][][]][\"));\nconsole.log(is_nested(\"\
    [][][][]][\"));\nconsole.log(is_nested(\"[[][]][][]][\"));\nconsole.log(is_nested(\"\
    [[][]][][][]][\"));\nconsole.log(is_nested(\"[[[[][]][]][][]][\"));\nconsole.log(is_nested(\"\
    [[[[][]][]][][][]][\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"\
    ][][\"));\nconsole.log(is_nested(\"][][][\"));\nconsole.log(is_nested(\"][][][][\"\
    ));\nconsole.log(is_nested(\"][][][][][\"));\nconsole.log(is_nested(\"][][][][][][\"\
    ));\nconsole.log(is_nested(\"][][][][][", "    let stack: string[] = [];\n   \
    \ for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\")\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[][][]\"\
    )); // True\nconsole.log(is_nested(\"[][]][\")); // False\nconsole.log(is_nested(\"\
    [][[]][]\")); // True\nconsole.log(is_nested(\"[]][[]\")); // False\nconsole.log(is_nested(\"\
    [][][][]\")); // True\nconsole.log(is_nested(\"[]\")); // True\nconsole.log(is_nested(\"\
    \")); // True\nconsole.log(is_nested(\"][\")); // False\nconsole.log(is_nested(\"\

  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[]'));\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[]][[]'));\n\
    console.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]][][[]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[]][][][[]'));\nconsole.log(is_nested('[][][][][][]'));\n\
    console.log(is_nested('[]][][][][[]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[]][][][][][[]'));\nconsole.log(is_nested('[][][][][][][][]'));\n\
    console.log(is_nested('[]][][][][][][[]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[]][][][][][][][[]'));\nconsole.log(is_nested('[][][][][][][][][][]'));\n\
    console.log(is_nested('[]][][][][][][][][[]'));\nconsole.log(is_nested('[][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[]['));\nconsole.log(is_nested(']['));\nconsole.log(is_nested('[][]['));\n\
    console.log(is_nested('[][][]['));\nconsole.log(is_nested('[][][][]['));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('[][][][][][]['));\nconsole.log(is_nested('[][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[", "    let stack: string[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"[[][]]\"\
    ));\nconsole.log(is_nested(\"[[][]][]\"));\nconsole.log(is_nested(\"[[][]][][]\"\
    ));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][[][]]\"));\n\
    console.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"\
    ][][\"));\nconsole.log(is_nested(\"][][][\"));\nconsole.log(is_nested(\"][][][][\"\
    ));\nconsole.log(is_nested(\"][][][][][\"));\nconsole.log(is_nested(\"][][][][][][\"\
    ));\nconsole.log(is_nested(\"][][][][][][][\"));\nconsole.log(is_nested(\"][][][][][][][][\"\
    ));\nconsole.log(is_nested(\"][][][][][][][][][\"));\nconsole.log(is_nested(\"\
    ][][][][][][][][][][\"));\nconsole.log(is_nested(\"][][][][][][][][][][][\"));\n\
    console.log(is_nested(\"][][][][][][][][][][][][\"));\nconsole.log(is_nested",
  "    let stack: string[] = [];\n    let openBrackets: string[] = ['(', '[', '{'];\n\
    \    let closeBrackets: string[] = [')', ']', '}'];\n    let isNested: boolean\
    \ = false;\n\n    for (let i = 0; i < string.length; i++) {\n        if (openBrackets.indexOf(string[i])\
    \ > -1) {\n            stack.push(string[i]);\n        } else if (closeBrackets.indexOf(string[i])\
    \ > -1) {\n            if (stack.length > 0) {\n                let lastBracket:\
    \ string = stack.pop();\n                if (openBrackets.indexOf(lastBracket)\
    \ === closeBrackets.indexOf(string[i])) {\n                    isNested = true;\n\
    \                }\n            }\n        }\n    }\n\n    return isNested;\n\
    }\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    let open: string[] = ['[', '{', '('];\n    let close:\
    \ string[] = [']', '}', ')'];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (open.indexOf(string[i]) > -1) {\n            stack.push(string[i]);\n\
    \        } else if (close.indexOf(string[i]) > -1) {\n            if (stack.length\
    \ === 0) {\n                return false;\n            }\n            let last\
    \ = stack.pop();\n            if (open.indexOf(last) !== close.indexOf(string[i]))\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '(') {\n           \
    \ stack.push(')');\n        } else if (string[i] === '[') {\n            stack.push(']');\n\
    \        } else if (string[i] === '{') {\n            stack.push('}');\n     \
    \   } else if (stack.length === 0 || stack.pop() !== string[i]) {\n          \
    \  return false;\n        }\n    }\n    return stack.length === 0;\n}\n", "  \
    \  let stack: string[] = [];\n    let openBrackets: string[] = ['[', '{', '('];\n\
    \    let closeBrackets: string[] = [']', '}', ')'];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (openBrackets.indexOf(string[i]) > -1) {\n            stack.push(string[i]);\n\
    \        } else if (closeBrackets.indexOf(string[i]) > -1) {\n            if (stack.length\
    \ === 0) {\n                return false;\n            }\n            if (openBrackets.indexOf(stack[stack.length\
    \ - 1]) === closeBrackets.indexOf(string[i])) {\n                stack.pop();\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[{}]'));\n\
    console.log(is_nested('[{]'));\nconsole.log(is_nested('[{}]{}'));\nconsole.log(is_nested('[{}]{}['));\n\
    console.log(is_nested('[{}]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{}'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}['));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[]['));\nconsole.log(is_nested(']['));\nconsole.log(is_nested('[][]['));\n\
    console.log(is_nested('[][][]['));\nconsole.log(is_nested('[][][][]['));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('[][][][][][]['));\nconsole.log(is_nested('[][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[", "    let stack: string[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[]['));\nconsole.log(is_nested(']['));\nconsole.log(is_nested('['));\n\
    console.log(is_nested(']'));\nconsole.log(is_nested('[[]][]'));\nconsole.log(is_nested('[][][[]]'));\n\
    console.log(is_nested('[][][[][]]'));\nconsole.log(is_nested('[][][[][]][]'));\n\
    console.log(is_nested('[][][[][]][][]'));\nconsole.log(is_nested('[][][[][]][][][]'));\n\
    console.log(is_nested('[][][[][]][][][][]'));\nconsole.log(is_nested('[][][[][]][][][][][]'));\n\
    console.log(is_nested('[][][[][]][][][][][][]'));\nconsole.log(is_nested('[][][[][]][][][][][][][]'));\n\
    console.log(is_nested('[][][[][]][][][][][][][][]'));\nconsole.log(is_nested('[][][[][]][][][][][][][][][]'));\n\
    console.log(is_nested('[][][[][]][][][", "    let stack: string[] = [];\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n  \
    \          stack.push(')');\n        } else if (string[i] === '[') {\n       \
    \     stack.push(']');\n        } else if (string[i] === '{') {\n            stack.push('}');\n\
    \        } else if (stack.length === 0 || stack.pop() !== string[i]) {\n     \
    \       return false;\n        }\n    }\n    return stack.length === 0;\n}\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[][][]]\"));\n\
    console.log(is_nested(\"[[][][][]]\"));\nconsole.log(is_nested(\"[][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][", "    let stack: string[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === '(') {\n            stack.push(')');\n\
    \        } else if (string[i] === '[') {\n            stack.push(']');\n     \
    \   } else if (string[i] === '{') {\n            stack.push('}');\n        } else\
    \ if (stack.length === 0 || stack.pop() !== string[i]) {\n            return false;\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('([])'));\n\
    console.log(is_nested('([)]'));\nconsole.log(is_nested('([{}])'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is_nested('([{}])({})'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is_nested('([{}])({})'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is_nested('([{}])({})'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is_nested('([{}])({})'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is_nested('([{}])({})'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is_nested('([{}])({})'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is_nested('([{}])({})'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is_nested('([{}])({})'));\nconsole.log(is_nested('([{}])({})'));\n\
    console.log(is", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][]\"));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"\
    [][][]][[]\"));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"\
    ));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested(\"[][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][]\"));\n\
    console.log(is_nested(\"[][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][][]\"\
    ));\nconsole.", "    let stack: string[] = [];\n    let open: string[] = ['[',\
    \ '{', '('];\n    let close: string[] = [']', '}', ')'];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (open.indexOf(string[i]) !== -1) {\n \
    \           stack.push(string[i]);\n        } else if (close.indexOf(string[i])\
    \ !== -1) {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            let last = stack.pop();\n            if (open.indexOf(last)\
    \ !== close.indexOf(string[i])) {\n                return false;\n           \
    \ }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[][][]\"\
    ));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested(\"[][][][]\"));\n\
    console.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[][[]]\"));\nconsole.log(is_nested(\"[[][][]]\"));\nconsole.log(is_nested(\"\
    [[][][][]]\"));\nconsole.log(is_nested(\"[[][][][][]]\"));\nconsole.log(is_nested(\"\
    [[][][][][][]]\"));\nconsole.log(is_nested(\"[[][][][][][][]]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][]]\"));\nconsole.log(is_nested(\"[[][][][][][][][][]]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][][][]]\"));\nconsole.log(is_nested(\"[[][][][][][][][][][][]]\"\
    ));\nconsole.log(is_nested(\"[[][][][][][][][][][][][]]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][][][][][][]]\"));\nconsole.log(is_nested(\"[[][][][][][][][][][][][][][]]\"\
    ));\nconsole.log(is_nested(\"[[][][][][", "    let stack: string[] = [];\n   \
    \ for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\")\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(')\
    \ {\n            stack.push(')');\n        } else if (string[i] === '[') {\n \
    \           stack.push(']');\n        } else if (string[i] === '{') {\n      \
    \      stack.push('}');\n        } else if (stack.length === 0 || stack.pop()\
    \ !== string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '(') {\n            stack.push(')');\n   \
    \     } else if (string[i] === '[') {\n            stack.push(']');\n        }\
    \ else if (string[i] === '{') {\n            stack.push('}');\n        } else\
    \ if (stack.length === 0 || stack.pop() !== string[i]) {\n            return false;\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][]\"));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][", "   \
    \ let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n \
    \       if (string[i] === \"[\") {\n            stack.push(string[i]);\n     \
    \   } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"\
    ][\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\
    \"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[[][][]]\"\
    ));\nconsole.log(is_nested(\"[[][]][]\"));\nconsole.log(is_nested(\"[[][]]][\"\
    ));\nconsole.log(is_nested(\"[[][]]]\"));\nconsole.log(is_nested(\"[[]][][]\"\
    ));\nconsole.log(is_nested(\"[[]][]\"));\nconsole.log(is_nested(\"[][[]]\"));\n\
    console.log(is_nested(\"[]][[]]\"));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"\
    [][][[]]\"));\nconsole.log(is_nested(\"[][][[]][]\"));\nconsole.log(is_nested(\"\
    [][][[][]]\"));\nconsole.log(is_nested(\"[][][[]][][]\"));\nconsole.log(is_nested(\"\
    [][][[][]][]\"));\nconsole.log(is_nested(\"[][][[][][]]\"));\nconsole.", "   \
    \ let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n \
    \       if (string[i] === '[') {\n            stack.push(string[i]);\n       \
    \ } else if (string[i] === ']') {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[]][[]'));\nconsole.log(is_nested('[][][][][][]'));\n\
    console.log(is_nested('[][][][]][[][]'));\nconsole.log(is_nested('[]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"[][\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"\

  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[\"));\n\
    console.log(is_nested(\"]\"));\nconsole.log(is_nested(\"[[]\"));\nconsole.log(is_nested(\"\
    []]\"));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"[[[]]]\"\
    ));\nconsole.log(is_nested(\"[[]]][[]\"));\nconsole.log(is_nested(\"[[]]]][[]\"\
    ));\nconsole.log(is_nested(\"[[]]][[]]\"));", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"\
    ));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\"));\nconsole.log(is_nested(\"\
    [][\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"[][][\"));\n\
    console.log(is_nested(\"[][][][\"));\nconsole.log(is_nested(\"[][][][][\"));\n\
    console.log(is_nested(\"][][][][][\"));\nconsole.log(is_nested(\"][][][][\"));\n\
    console.log(is_nested(\"][][][\"));\nconsole.log(is_nested(\"][][\"));\nconsole.log(is_nested(\"\
    ][\"));\nconsole.log(is_nested(\"[][][][]][\"));\nconsole.log(is_nested(\"[][][][][]][\"\
    ));\nconsole.log(is_nested(\"[][][][][][]][\"));\nconsole.log(is_nested(\"[][][][][][][]][\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]][\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][]][\"));\nconsole.log(is_nested(\"", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [[]][][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[]][][\"\
    ));\nconsole.log(is_nested(\"[[]][]\"));", "    let stack: string[] = [];\n  \
    \  let openBrackets: string[] = ['[', '{', '('];\n    let closeBrackets: string[]\
    \ = [']', '}', ')'];\n    let isNested: boolean = false;\n\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (openBrackets.indexOf(string[i]) > -1)\
    \ {\n            stack.push(string[i]);\n        } else if (closeBrackets.indexOf(string[i])\
    \ > -1) {\n            if (stack.length > 0) {\n                let lastBracket\
    \ = stack.pop();\n                if (openBrackets.indexOf(lastBracket) === closeBrackets.indexOf(string[i]))\
    \ {\n                    isNested = true;\n                }\n            }\n\
    \        }\n    }\n\n    return isNested;\n}\n\nconsole.log(is_nested('[{}]'));\n\
    console.log(is_nested('[{]}'));\nconsole.log(is_nested('[{}]{}'));\nconsole.log(is_nested('[{}]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}[]",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '(') {\n            stack.push(')');\n        } else\
    \ if (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[{}]'));\nconsole.log(is_nested('[{]}'));\n\
    console.log(is_nested('[{}]{}'));\nconsole.log(is_nested('[{}]{}['));\nconsole.log(is_nested('[{}]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{}'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}['));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}[]{}'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}[]{}['));\nconsole.", "    let stack:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[][][][][][]'));\n\
    console.log(is_nested('[]][[]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '(') {\n           \
    \ stack.push(')');\n        } else if (string[i] === '[') {\n            stack.push(']');\n\
    \        } else if (string[i] === '{') {\n            stack.push('}');\n     \
    \   } else if (stack.length === 0 || stack.pop() !== string[i]) {\n          \
    \  return false;\n        }\n    }\n    return stack.length === 0;\n}\n", "  \
    \  let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('['));\nconsole.log(is_nested(']'));\nconsole.log(is_nested(']['));\n\
    console.log(is_nested('[]['));\nconsole.log(is_nested('][]['));\nconsole.log(is_nested('[][]['));\n\
    console.log(is_nested('[][][]['));\nconsole.log(is_nested('[][][][]['));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('[][][][][][]['));\nconsole.log(is_nested('[][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][')", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]][[]'));\n\
    console.log(is_nested
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    const\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            }\n            stack.pop();\n        }\n   \
    \ }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n  \
    \  for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[]\"));\n\
    console.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"[[[]]][]\"\
    ));\nconsole.log(is_nested(\"[[[]]][][]\"));\nconsole.log(is_nested(\"[[[[[[]]]]]]\"\
    ));\nconsole.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"\"));\n\
    console.log(is_nested(\"[\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\
    ][\"));\nconsole.log(is_nested(\"[][\"));\nconsole.log(is_nested(\"][][\"));\n\
    console.log(is_nested(\"[][][\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[[][]]]\"));\nconsole.log(is_nested(\"[[[[][]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[][]]]]]\"));\nconsole.log(is_nested(\"[[[[[[][]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[][]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[][]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[][]]]]]]]]]\"));\nconsole.log(is_nested", "    let stack: string[] =\
    \ [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ '[') {\n            stack.push(string[i]);\n        } else if (string[i] ===\
    \ ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('['));\nconsole.log(is_nested(']'));\nconsole.log(is_nested(']['));\n\
    console.log(is_nested('[]['));\nconsole.log(is_nested('][]['));\nconsole.log(is_nested('[][]['));\n\
    console.log(is_nested('[][][]['));\nconsole.log(is_nested('[][][][]['));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('[][][][][][]['));\nconsole.log(is_nested('[][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][')", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[]\"));\n\
    console.log(is_nested(\"[\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[]][[]\"\
    ));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][][]]\"\
    ));\nconsole.log(is_nested(\"[[][][][][][][]]\"));\nconsole.log(is_nested(\"[[][][][][][][][]]\"\
    ));\nconsole.log(is_nested(\"[[][][][][][][][][]]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][][][]]\"));\nconsole.log(is_nested(\"[[][][][][][][][][][][]]\"\
    ));\nconsole.log(is_nested(\"[[][][][][][][][][][][][]]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][][][][][][]]\"));\nconsole.log(is_nested(\"[[][][][][][][][][][][][][][]]\"\
    ));\nconsole.log(is_nested(\"[[][][][][][][][][][][][][][][]]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][][][][][][][][][", "    let stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\
    [][\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"[[]\"));\n\
    console.log(is_nested(\"[]]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[[]]]\"\
    ));\nconsole.log(is_nested(\"[[[[]]]]\"));\nconsole.log(is_nested(\"[[[[[]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[]]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[[[]]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[[]]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[[[]]]]]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[[[[[[]]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[[[[[]]", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"[[[[]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[]]]]]\"));\nconsole.log(is_nested(\"[[[[[[]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[]]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[[]]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[[[]]]]]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[[[[[[]]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[[[[[]]]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[[[[[[[[[]]",
  "    let stack: string[] = [];\n    for (let char of string) {\n        if (char\
    \ === '[') {\n            stack.push(char);\n        } else if (char === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('['));\nconsole.log(is_nested(']'));\nconsole.log(is_nested(']['));\n\
    console.log(is_nested('[]['));\nconsole.log(is_nested('][]['));\nconsole.log(is_nested('[][]['));\n\
    console.log(is_nested('[][][]['));\nconsole.log(is_nested('[][][][]['));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('[][][][][][]['));\nconsole.log(is_nested('[][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '(') {\n            stack.push(')');\n        } else if\
    \ (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[[][]]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[[][]][]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[[][]][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[[][]][][][]'));\n\
    console.log(is_nested('[][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is_nested('[[][]][][][",
  "  let stack: string[] = [];\n  for (let i = 0; i < string.length; i++) {\n    if\
    \ (string[i] === \"[\") {\n      stack.push(string[i]);\n    } else if (string[i]\
    \ === \"]\") {\n      if (stack.length === 0) {\n        return false;\n     \
    \ } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length ===\
    \ 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[][][]][]['));\n\
    console.log(is_nested('][][][]['));\nconsole.log(is_nested('][][][][]['));\nconsole.log(is_nested('][][][][][]['));\n\
    console.log(is_nested('][][][][][][]['));\nconsole.log(is_nested('][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][][]['));\nconsole.log(is_nested('][][][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][][][][]['));\nconsole.log(is_nested('][][][][][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][][][][][][]['));\nconsole.log(is_nested('][][][][][][][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][][][][][][][][]['));\nconsole.log(is_nested('][][][][][][][][][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][", "    let stack: string[] = [];\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n  \
    \          stack.push(')');\n        } else if (string[i] === '[') {\n       \
    \     stack.push(']');\n        } else if (string[i] === '{') {\n            stack.push('}');\n\
    \        } else if (stack.length === 0 || stack.pop() !== string[i]) {\n     \
    \       return false;\n        }\n    }\n    return stack.length === 0;\n}\n\n\
    console.log(is_nested('[{}]'));\nconsole.log(is_nested('[{]'));\nconsole.log(is_nested('[{}]{}'));\n\
    console.log(is_nested('[{}]{}['));\nconsole.log(is_nested('[{}]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}'));\n\
    console.log(is_nested('[{}]{}[]{}['));\nconsole.log(is_nested('[{}]{}[]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}['));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}[]{}['));\n\
    console.", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    let open: string[] = ['[', '{', '('];\n    let close:\
    \ string[] = [']', '}', ')'];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (open.indexOf(string[i]) > -1) {\n            stack.push(string[i]);\n\
    \        } else if (close.indexOf(string[i]) > -1) {\n            if (stack.length\
    \ === 0) {\n                return false;\n            }\n            let last\
    \ = stack.pop();\n            if (open.indexOf(last) !== close.indexOf(string[i]))\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '[') {\n           \
    \ stack.push(string[i]);\n        } else if (string[i] === ']') {\n          \
    \  if (stack.length === 0) {\n                return false;\n            } else\
    \ {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    let open: string[] = [\"[\"];\n    let close: string[]\
    \ = [\"]\"];\n    for (let i = 0; i < string.length; i++) {\n        if (open.includes(string[i]))\
    \ {\n            stack.push(string[i]);\n        } else if (close.includes(string[i]))\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[()]\"));\n\
    console.log(is_nested(\"[()[]\"));\nconsole.log(is_nested(\"[()[]]\"));\nconsole.log(is_nested(\"\
    [()[]][]\"));\nconsole.log(is_nested(\"[()[]][]][\"));\nconsole.log(is_nested(\"\
    [()[]][]]\"));", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"[]][[][]\"));\n\
    console.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[][][]]\"));\nconsole.log(is_nested(\"[[][]][]\"));\n\
    console.log(is_nested(\"[[][]][][]\"));\nconsole.log(is_nested(\"[[][][]][]\"\
    ));\nconsole.log(is_nested(\"[[][][][]]\"));\nconsole.log(is_nested(\"[[][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][", "    let stack:\
    \ string[] = [];\n    let map: { [key: string]: string } = {\n        ']': '[',\n\
    \        '}': '{',\n        ')': '('\n    };\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[' || string[i] === '{' || string[i] ===\
    \ '(') {\n            stack.push(string[i]);\n        } else {\n            let\
    \ topElement = stack.pop();\n            if (topElement !== map[string[i]]) {\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[[][]]\"\
    ));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[[][]][]\"\
    ));\nconsole.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"[[][][]][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[[][][][]][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][]][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][][]][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][]][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][]][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][]\"));\n\
    console.log(is_nested(\"[[][][][][][][][][]][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][]\"));\n", "    let stack: string[] = [];\n    let openBrackets:\
    \ string[] = ['(', '[', '{'];\n    let closeBrackets: string[] = [')', ']', '}'];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (openBrackets.indexOf(string[i])\
    \ > -1) {\n            stack.push(string[i]);\n        } else if (closeBrackets.indexOf(string[i])\
    \ > -1) {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            let top = stack.pop();\n            if (openBrackets.indexOf(top)\
    \ !== closeBrackets.indexOf(string[i])) {\n                return false;\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[]][[]'));\nconsole.log(is_nested('[]][['));\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[]'));\nconsole.log(is_nested('['));\nconsole.log(is_nested(']'));\n\
    console.log(is_nested(''));", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '(') {\n           \
    \ stack.push(')');\n        } else if (string[i] === '[') {\n            stack.push(']');\n\
    \        } else if (string[i] === '{') {\n            stack.push('}');\n     \
    \   } else if (stack.length === 0 || stack.pop() !== string[i]) {\n          \
    \  return false;\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('(())'));\n\
    console.log(is_nested('(()))'));\nconsole.log(is_nested('(()()()())'));\nconsole.log(is_nested('(()()()()'));\n\
    console.log(is_nested('((()()()()'));\nconsole.log(is_nested('()()()()()'));\n\
    console.log(is_nested('(()((())()))'));\nconsole.log(is_nested('(((())))'));\n\
    console.log(is_nested('(()()))(()'));\nconsole.log(is_nested('((()()()()))'));\n\
    console.log(is_nested('((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('['));\nconsole.log(is_nested(']'));\nconsole.log(is_nested(']['));\n\
    console.log(is_nested('[]['));\nconsole.log(is_nested('][]['));\nconsole.log(is_nested('[][]['));\n\
    console.log(is_nested('[][][]['));\nconsole.log(is_nested('[][][][]['));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('[][][][][][]['));\nconsole.log(is_nested('[][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][')", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '(') {\n            stack.push(')');\n        } else if (string[i] === '[')\
    \ {\n            stack.push(']');\n        } else if (string[i] === '{') {\n \
    \           stack.push('}');\n        } else if (stack.length === 0 || stack.pop()\
    \ !== string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '(') {\n            stack.push(')');\n        } else if\
    \ (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]][[]'));\n\
    console.log(is_nested('[]][[]]'));\nconsole.log(is_nested('[][[][]]'));", "  \
    \  let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[[][]]\"\
    ));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[]\"));\n\
    console.log(is_nested(\"[\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\
    [][\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"[]][\"));\n\
    console.log(is_nested(\"[][]]\"));\nconsole.log(is_nested(\"[[][]\"));\nconsole.log(is_nested(\"\
    [[][]]]\"));\nconsole.log(is_nested(\"[[][]]][\"));\nconsole.log(is_nested(\"\
    [[][]]][][\"));\nconsole.log(is_nested(\"[[][]]][][][\"));\nconsole.log(is_nested(\"\
    [[][]]][][][][\"));\nconsole.log(is_nested(\"[[][]]][][][][][\"));\nconsole.log(is_nested(\"\
    [[][]]][][][][][][\"));\nconsole.log(is_nested(\"[[][]]][][][][][][][\"));\nconsole.log(is_nested(\"\
    [[][]]][][][][][][][][\"));\nconsole.log(is_nested(\"[[][]]][][][][][][][][][\"\
    ));\nconsole.log(is_nested(\"[[][]]][][][][][][][][][][\"));\nconsole.log(is",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[[][]]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[[][]][]'));\nconsole.log(is_nested('[][[][]]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[[][]][][]'));\nconsole.log(is_nested('[][[][]][]'));\n\
    console.log(is_nested('[][][[][]]'));\nconsole.log(is_nested('[][][][[]]'));\n\
    console.log(is_nested('[[][][]][]'));\nconsole.log(is_nested('[[][]][][]'));\n\
    console.log(is_nested('[][[][][]]'));\nconsole.log(is_nested('[[][][][]]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[[][][][][]]'));\n\
    console.log(is_nested('[[][][][][][]]'));\nconsole.log(is_nested('[[][][][][][][]]'));\n\
    console.log(is_nested('[[][][][][][][][]]'));\nconsole.log(is_nested('[[][][][][][][][][]]'));\n\
    console.log(is_nested('[[][][][][][][][][][]]')", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[[]]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[][[[]]]'));\nconsole.log(is_nested('[][[[]]][]'));\nconsole.log(is_nested('[][[[]]][][]'));\n\
    console.log(is_nested('[][[[]]][][][]'));\nconsole.log(is_nested('[][[[]]][][][][]'));\n\
    console.log(is_nested('[][[[]]][][][][][]'));\nconsole.log(is_nested('[][[[]]][][][][][][]'));\n\
    console.log(is_nested('[][[[]]][][][][][][][]'));\nconsole.log(is_nested('[][[[]]][][][][][][][][]'));\n\
    console.log(is_nested('[][[[]]][][][][][][][][][]'));\nconsole.log(is_nested('[][[[]]][][][][][][][][][][]'));\n\
    console.log(is_nested('[][[[]]][][][][][][][][][][][]'));\nconsole.log(is_nested('[][[[]]][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][[[]]][][][][][][][][][][][][][]'));\nconsole.log(is_nested",
  "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n   \
    \     ')': '(',\n        ']': '[',\n        '}': '{'\n    };\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '(' || string[i] ===\
    \ '[' || string[i] === '{') {\n            stack.push(string[i]);\n        } else\
    \ if (stack.length === 0 || map[string[i]] !== stack.pop()) {\n            return\
    \ false;\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[(])'));\nconsole.log(is_nested('[()[]]'));\nconsole.log(is_nested('[()[]{()[]}]'));\n\
    console.log(is_nested('[()[]{()[]}'));\nconsole.log(is_nested('[()[]{()[]}]{'));\n\
    console.log(is_nested('[()[]{()[]}]{}'));\nconsole.log(is_nested('[()[]{()[]}]{}('));\n\
    console.log(is_nested('[()[]{()[]}]{}()'));\nconsole.log(is_nested('[()[]{()[]}]{}()['));\n\
    console.log(is_nested('[()[]{()[]}]{}()[]'));\nconsole.log(is_nested('[()[]{()[]}]{}()[]{'));\n\
    console.log(is_nested('[()[]{()[]}]{}()[]{}'));\nconsole.log(is_nested('[()[]{()[]}]{}()[]{}('));\n\
    console.log(is_nested('[()[]{()[]}]{}()[]{}()'));\nconsole.log(is_nested('[()[]{()[]}]{}()[]{}()['));\n\
    console.log(", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"[[[]]][]\"));\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[[][]]\"\
    ));\nconsole.log(is_nested(\"[]]\"));\nconsole.log(is_nested(\"[]]][[[\"));\n\
    console.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"[[[[[[[[[]]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[[]]]]]]]]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '(') {\n            stack.push(')');\n        } else if\
    \ (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[][][]\"\
    ));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested(\"[]][[]\"));\n\
    console.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    \"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\

  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[][][]]'));\nconsole.log(is_nested('[[][][][]]'));\nconsole.log(is_nested('[[][][][][]]'));\n\
    console.log(is_nested('[][[]]'));\nconsole.log(is_nested('[][[][]]'));\nconsole.log(is_nested('[][[][][]]'));\n\
    console.log(is_nested('[][[][][][]]'));\nconsole.log(is_nested('[][[][][][][]]'));\n\
    console.log(is_nested('[][[[]]]'));\nconsole.log(is_nested('[][[[][]]]'));\nconsole.log(is_nested('[][[[][][]]]'));\n\
    console.log(is_nested('[][[[][][][]]]'));\nconsole.log(is_nested('[][[[][][][][]]]'));\n\
    console.log(is_nested('[][[[][][][][][]]]'));\nconsole.log(is_nested('[[][]]'));\n\
    console.log(is_nested('[[][][]]'));\nconsole.", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(')\
    \ {\n            stack.push(')');\n        } else if (string[i] === '[') {\n \
    \           stack.push(']');\n        } else if (string[i] === '{') {\n      \
    \      stack.push('}');\n        } else if (stack.length === 0 || stack.pop()\
    \ !== string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]][[]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[][][][][][]'));\n\
    console.log(is_nested('[]'));\nconsole.log(is_nested
  "    let stack: string[] = [];\n    let openBrackets: string[] = ['[', '{', '('];\n\
    \    let closeBrackets: string[] = [']', '}', ')'];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (openBrackets.indexOf(string[i]) > -1) {\n            stack.push(string[i]);\n\
    \        } else if (closeBrackets.indexOf(string[i]) > -1) {\n            if (stack.length\
    \ === 0) {\n                return false;\n            }\n            let last\
    \ = stack.pop();\n            if (openBrackets.indexOf(last) !== closeBrackets.indexOf(string[i]))\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"\"));", "    let stack: string[] = [];\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[[][]]\"\
    ));\nconsole.log(is_nested(\"[[][][]]\"));\nconsole.log(is_nested(\"[[][][][]]\"\
    ));\nconsole.log(is_nested(\"[[[[][]]]]\"));\nconsole.log(is_nested(\"[[[[][]][]]]\"\
    ));\nconsole.log(is_nested(\"[[[[][]][]][]]\"));\nconsole.log(is_nested(\"[[[[][]][]][]][]]\"\
    ));\nconsole.log(is_nested(\"[[[[][]][]][]][]][]]\"));\nconsole.log(is_nested(\"\
    [[[[][]][]][]][]][]][]]\"));\nconsole.log(is_nested(\"[[[[][]][]][]][]][]][]][]]\"\
    ));\nconsole.log(is_nested(\"[[[[][]][]][]][]][]][]][]][]]\"));\nconsole.log(is_nested(\"\
    [[[[][]][]][]][]][]][]][]][]][]]\"));\nconsole.log(is_nested(\"[[[[][]][]][]][]][]][]][]][]][]][]]\"\
    ));\nconsole.log(is_nested(\"[[[[][]][]][]][]][]][]][]][]][]][]][]]\"));\nconsole.log(is_nested(\"\
    [[[[][]][]", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '(') {\n            stack.push(')');\n   \
    \     } else if (string[i] === '[') {\n            stack.push(']');\n        }\
    \ else if (string[i] === '{') {\n            stack.push('}');\n        } else\
    \ if (stack.length === 0 || stack.pop() !== string[i]) {\n            return false;\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [][[]]\"));\nconsole.log(is_nested(\"[][[][]]\"));\nconsole.log(is_nested(\"[][[][[]]]\"\
    ));\nconsole.log(is_nested(\"[][[][[][]]]\"));\nconsole.log(is_nested(\"[][[][[][][]]]\"\
    ));\nconsole.log(is_nested(\"[][[][[][][][]]]\"));\nconsole.log(is_nested(\"[][[][[][][][][]]]\"\
    ));\nconsole.log(is_nested(\"[][[][[][][][][][]]]\"));\nconsole.log(is_nested(\"\
    [][[][[][][][][][][]]]\"));\nconsole.log(is_nested(\"[][[][[][][][][][][][]]]\"\
    ));\nconsole.log(is_nested(\"[][[][[][][][][][][][][]]]\"));\nconsole.log(is_nested(\"\
    [][[][[][][][][][][][][][]]]\"));\nconsole.log(is_nested(\"[][[][[][][][][][][][][][][]]]\"\
    ));\nconsole.log(is_nested(\"[][[][[][][][][][][][][][][][]]", "    let stack:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[]][[]'));\nconsole.log(is_nested
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '(') {\n            stack.push(')');\n        } else\
    \ if (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[][][]\"\
    ));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested(\"[][][][]\"));\n\
    console.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"[][][][][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\"));\nconsole.log(is_nested(\"\
    ][\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]][][]\"));\nconsole.log(is_nested(\"[][][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][][]\"));\nconsole.log(is_nested(\"[]]][[][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[]]][[][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][][][][][][]\"));\nconsole.log(is_nested(\"\
    []]][[][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][][][][][]\"));\nconsole.log(is_nested(\"[]]][[][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][][][][][][]\"));\n\
    console.log(is_nested(\"[]]][[][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('['));\nconsole.log(is_nested(']'));\nconsole.log(is_nested('[]['));\n\
    console.log(is_nested(']['));\nconsole.log(is_nested('[][]['));\nconsole.log(is_nested('[][][]['));\n\
    console.log(is_nested('[][][][]['));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('[][][][][][]['));\nconsole.log(is_nested('[][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][][][][][][][][][][][]['));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]['));\nconsole.log(is_nested('[][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][][][", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[][][][][]['));\n\
    console.log(is_nested('][][][][][]'));\nconsole.log(is_nested('][][][][][]['));\n\
    console.log(is_nested(']['));\nconsole.log(is_nested('][]['));\nconsole.log(is_nested('][][]['));\n\
    console.log(is_nested('][][][]['));\nconsole.log(is_nested('][][][][]['));\nconsole.log(is_nested('][][][][][]['));\n\
    console.log(is_nested('][][][][][][]['));\nconsole.log(is_nested('][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][][]['));\nconsole.log(is_nested('][][][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][][][][]['));\nconsole.log(is_nested('][][][][][][][][][][][]['));\n\
    console.log(is_nested('][][][][][][][][][][][][]['));\nconsole.log(is_nested('][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[]][[]'));\n\
    console.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]][[][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[]][[][][]'));\nconsole.log(is_nested('[][][][][][]'));\n\
    console.log(is_nested('[]][[][][][]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[]][[][][][][]'));\nconsole.log(is_nested('[][][][][][][][]'));\n\
    console.log(is_nested('[]][[][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[]][[][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][]'));\n\
    console.log(is_nested('[]][[][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][]'));\n\
    console.log(is_nested('[]][[][][][][][][][][]'));\nconsole.log(is_nested('[][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"\
    [\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"[][\"));\nconsole.log(is_nested(\"\
    ][\"));\nconsole.log(is_nested(\"[]]\"));\nconsole.log(is_nested(\"[[]]]\"));\n\
    console.log(is_nested(\"[[]\"));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[[][]]]\"));\nconsole.log(is_nested(\"[[[[]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[]]]]]\"));\nconsole.log(is_nested(\"[[[[[[]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[[]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"[][]][\"));\nconsole.log(is_nested(\"[][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    let openBrackets: string[] = ['(', '[', '{'];\n \
    \   let closedBrackets: string[] = [')', ']', '}'];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (openBrackets.indexOf(string[i]) > -1) {\n            stack.push(string[i]);\n\
    \        } else if (closedBrackets.indexOf(string[i]) > -1) {\n            if\
    \ (stack.length > 0) {\n                let lastBracket = stack.pop();\n     \
    \           if (closedBrackets.indexOf(string[i]) !== openBrackets.indexOf(lastBracket))\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '[') {\n           \
    \ stack.push(string[i]);\n        } else if (string[i] === ']') {\n          \
    \  if (stack.length === 0) {\n                return false;\n            } else\
    \ {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"]\"));\nconsole.log(is_nested(\"\
    [][\"));\nconsole.log(is_nested(\"][\"));\nconsole.log(is_nested(\"[[]\"));\n\
    console.log(is_nested(\"[]]\"));\nconsole.log(is_nested(\"[]][\"));\nconsole.log(is_nested(\"\
    []][[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[][][]]\"\
    ));\nconsole.log(is_nested(\"[[][]][]\"));\nconsole.log(is_nested(\"[[][]][][]\"\
    ));\nconsole.log(is_nested(\"[[][]][][][]\"));\nconsole.log(is_nested(\"[[][]][][][][]\"\
    ));\nconsole.log(is_nested(\"[[][]][][][][][]\"));\nconsole.log(is_nested(\"[[][]][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[[][]][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][]][][][][][][][][]\"));\nconsole.log(is_nested(\"[[][]][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[[][]][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][]][][", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length === 0) {\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[[]]'));\n\
    console.log(is_nested('[][]'));\nconsole.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\n\
    console.log(is_nested('[][][][][]'));\nconsole.log(is_nested('[][][][][][]'));\n\
    console.log(is_nested('[][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][][]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[][]][\"\
    ));\nconsole.log(is_nested(\"[][][][\"));\nconsole.log(is_nested(\"][][][\"));\n\
    console.log(is_nested(\"[][[[]]]\"));\nconsole.log(is_nested(\"[[[[]]]]\"));\n\
    console.log(is_nested(\"[[[[]]]][\"));\nconsole.log(is_nested(\"[[[[]]]]][\"));\n\
    console.log(is_nested(\"[[[[]]]]][][\"));\nconsole.log(is_nested(\"[[[[]]]]][][][\"\
    ));\nconsole.log(is_nested(\"[[[[]]]]][][][][\"));\nconsole.log(is_nested(\"[[[[]]]]][][][][][\"\
    ));\nconsole.log(is_nested(\"[[[[]]]]][][][][][][\"));\nconsole.log(is_nested(\"\
    [[[[]]]]][][][][][][][\"));\nconsole.log(is_nested(\"[[[[]]]]][][][][][][][][\"\
    ));\nconsole.log(is_nested(\"[[[[]]]]][][][][][][][][][\"));\nconsole.log(is_nested(\"\
    [[[[]]]]][][][][][][][][][][\"));\nconsole.log(is_nested(\"[[[[]]]]][][][][][][][][][][][\"\
    ));\nconsole.log(is_nested(\"[[[[]]]]][][][][][][][][][][][][\"));\nconsole",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][]'));\n\
    console.log(is_nested('[][][]'));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][][]'));\n\
    console.log(is_nested('[][][][][][]'));\nconsole.log(is_nested('[][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested('[][][][][][][][][][][][][][][][][]'));\n\
    console.log(is_nested('[][][][][][][][][][][][][][][][][][]'));\nconsole.log(is_nested",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '(') {\n            stack.push(')');\n        } else if\
    \ (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('{[()]}'));\n\
    console.log(is_nested('{[(])}'));\nconsole.log(is_nested('{{[[(())]]}}'));\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '(') {\n            stack.push(')');\n        } else\
    \ if (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('(()[])'));\n\
    console.log(is_nested('(()[)]'));\nconsole.log(is_nested('(()[{}])'));\nconsole.log(is_nested('(()[{}]))'));\n\
    console.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\n\
    console.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\n\
    console.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\n\
    console.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\n\
    console.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\nconsole.log(is_nested('(()[{}]))'));\n\
    console.log(is_nested('(()[{}]))'));", "    let stack: string[] = [];\n    for\
    \ (let i: number = 0; i < string.length; i++) {\n        if (string[i] === \"\
    [\") {\n            stack.push(string[i]);\n        } else if (string[i] === \"\
    ]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(')\
    \ {\n            stack.push(')');\n        } else if (string[i] === '[') {\n \
    \           stack.push(']');\n        } else if (string[i] === '{') {\n      \
    \      stack.push('}');\n        } else if (stack.length === 0 || stack.pop()\
    \ !== string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n\nconsole.log(is_nested('{[()]}'));\nconsole.log(is_nested('{[(])}'));\n\
    console.log(is_nested('{{[[(())]]}}'));\n", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[][][][]['));\n\
    console.log(is_nested('[[][][][]'));\nconsole.log(is_nested('[[][][][]['));\n\
    console.log(is_nested('[[][][][][]'));\nconsole.log(is_nested('[[][][][][]]'));\n\
    console.log(is_nested('[[][][][][]]]'));\nconsole.log(is_nested('[[][][][][]]]['));\n\
    console.log(is_nested('[[][][][][]]][]['));\nconsole.log(is_nested('[[][][][][]]][][]['));\n\
    console.log(is_nested('[[][][][][]]][][][]['));\nconsole.log(is_nested('[[][][][][]]][][][][]['));\n\
    console.log(is_nested('[[][][][][]]][][][][][]['));\nconsole.log(is_nested('[[][][][][]]][][][][][][]['));\n\
    console.log(is_nested('[[][][][][]]][][][][][][][]['));\nconsole.log(is_nested('[[][][][][]]][][][][][][][][]['));\n\
    console.log(is_nested('[[][][][][]]][][][][][][][][][]['));\nconsole.log(is_nested('",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"[[[]]][]\"\
    ));\nconsole.log(is_nested(\"[[[[]]]]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[][][][][]\"));\n\
    console.log(is_nested(\"[[][][][]]\"));\nconsole.log(is_nested(\"[[][][][]][]\"\
    ));\nconsole.log(is_nested(\"[[][][][]][][]\"));\nconsole.log(is_nested(\"[[][][][]][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][][]][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][]][][][][][]\"));\nconsole.log(is_nested(\"[[][][][]][][][][][][]\"));\n\
    console.log(is_nested(\"[[][][][]][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][]][][][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][]][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][][]][][][][][][", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"\
    [[[]]][]\"));\nconsole.log(is_nested(\"[[[]]][][]\"));\nconsole.log(is_nested(\"\
    [[[[[[]]]]]]\"));\nconsole.log(is_nested
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '(') {\n            stack.push(')');\n        } else\
    \ if (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[][][]\"\
    ));\nconsole.log(is_nested(\"[][]][][\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[]][[]\"));\n", "    let stack: string[] = [];\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n  \
    \          stack.push(')');\n        } else if (string[i] === '[') {\n       \
    \     stack.push(']');\n        } else if (string[i] === '{') {\n            stack.push('}');\n\
    \        } else if (stack.length === 0 || stack.pop() !== string[i]) {\n     \
    \       return false;\n        }\n    }\n    return stack.length === 0;\n}\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[][][][]'));\nconsole.log(is_nested('[]][[]'));\n\
    console.log(is_nested
  "  let stack: string[] = [];\n  for (let i = 0; i < string.length; i++) {\n    if\
    \ (string[i] === \"[\") {\n      stack.push(string[i]);\n    } else if (string[i]\
    \ === \"]\") {\n      if (stack.length === 0) {\n        return false;\n     \
    \ } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length ===\
    \ 0;\n}\n\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][]][\"\
    ));\nconsole.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[]][[]\"));\n\
    console.log(is_nested
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '(') {\n            stack.push(')');\n        } else if\
    \ (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[(])'));\nconsole.log(is_nested('[()]'));\n\
    console.log(is_nested('[()]{}{[()()]()}'));\nconsole.log(is_nested('[()]{}{[()()]()}('));\n\
    console.log(is_nested('[()]{}{[()()]()}('));\nconsole.log(is_nested('[()]{}{[()()]()}('));\n\
    console.log(is_nested('[()]{}{[()()]()}('));\nconsole.log(is_nested('[()]{}{[()()]()}('));\n\
    console.log(is_nested('[()]{}{[()()]()}('));\nconsole.log(is_nested('[()]{}{[()()]()}('));\n\
    console.log(is_nested('[()]{}{[()()]()}('));\nconsole.log(is_nested('[()]{}{[()()]()}('));\n\
    console.log(is_nested('[()]{}{[()()]()}('));\nconsole.log(is_nested('[()]{}{[()()]()}('));\n\
    console.log(is_nested('[()]{}{[()()]()}('));\nconsole.log(is_nested('[()]{}{[()()]()}('));\n\
    console.log(is_nested('[()]{}{[()()]()}", "    let stack: string[] = [];\n   \
    \ for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n\
    \            stack.push(')');\n        } else if (string[i] === '[') {\n     \
    \       stack.push(']');\n        } else if (string[i] === '{') {\n          \
    \  stack.push('}');\n        } else if (stack.length === 0 || stack.pop() !==\
    \ string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[(])'));\n\
    console.log(is_nested('[()[]]'));\nconsole.log(is_nested('[()[]]{}'));\nconsole.log(is_nested('[()[]]{}()'));\n\
    console.log(is_nested('[()[]]{}()[()]'));\nconsole.log(is_nested('[()[]]{}()[()]{}'));\n\
    console.log(is_nested('[()[]]{}()[()]{}['));\nconsole.log(is_nested('[()[]]{}()[()]{}[}'));\n\
    console.log(is_nested('[()[]]{}()[()]{}[}]'));\nconsole.log(is_nested('[()[]]{}()[()]{}[}]['));\n\
    console.log(is_nested('[()[]]{}()[()]{}[}][]'));\nconsole.log(is_nested('[()[]]{}()[()]{}[}][]{'));\n\
    console.log(is_nested('[()[]]{}()[()]{}[}][]{}'));\nconsole.log(is_nested('[()[]]{}()[()]{}[}][]{}('));\n\
    console.log(is_nested('[()[]]{}()[()]{}", "    let stack: string[] = [];\n   \
    \ for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\")\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[\"));\nconsole.log(is_nested(\"\
    ]\"));\nconsole.log(is_nested(\"\"));\nconsole.log(is_nested(\"[[]\"));\nconsole.log(is_nested(\"\
    []]\"));\nconsole.log(is_nested(\"[[[]]]\"));\nconsole.log(is_nested(\"[[][]]\"\
    ));\nconsole.log(is_nested(\"[[[][]]]\"));\nconsole.log(is_nested(\"[[[[]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[][]]]]\"));\nconsole.log(is_nested(\"[[[[[]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[][]]]]]\"));\nconsole.log(is_nested(\"[[[[[[]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[][]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[]]]]]]]]\"\
    ));\nconsole.log(is_nested(\"[[[[[[[[][]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[][]]]]]]]]]]\"));\n\
    console.log(is_nested(\"[[[[[[[[[[[[]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"\
    [[[[[[[[[[[[][]]]]]]]]]]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[]][[]\"));\nconsole.log(is_nested(\"\
    [][]][[]\"));\nconsole.log(is_nested(\"[][]][[][]\"));\nconsole.log(is_nested(\"\
    [][]][[][][]\"));\nconsole.log(is_nested(\"[][]][[][][][]\"));\nconsole.log(is_nested(\"\
    [][]][[][][][][]\"));\nconsole.log(is_nested(\"[][]][[][][][][][]\"));\nconsole.log(is_nested(\"\
    [][]][[][][][][][][]\"));\nconsole.log(is_nested(\"[][]][[][][][][][][][]\"));\n\
    console.log(is_nested(\"[][]][[][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][]][[][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][]][[][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][]][[][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][]][[][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][]", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '(') {\n            stack.push(')');\n        } else if\
    \ (string[i] === '[') {\n            stack.push(']');\n        } else if (string[i]\
    \ === '{') {\n            stack.push('}');\n        } else if (stack.length ===\
    \ 0 || stack.pop() !== string[i]) {\n            return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[()]'));\nconsole.log(is_nested('[(])'));\n\
    console.log(is_nested('[()[]]'));\nconsole.log(is_nested('[()]{}'));\nconsole.log(is_nested('[()]{}[()]'));\n\
    console.log(is_nested('[()]{}[()]{}'));\nconsole.log(is_nested('[()]{}[()]{}[()]'));\n\
    console.log(is_nested('[()]{}[()]{}[()]{}'));\nconsole.log(is_nested('[()]{}[()]{}[()]{}[()]'));\n\
    console.log(is_nested('[()]{}[()]{}[()]{}[()]{}'));\nconsole.log(is_nested('[()]{}[()]{}[()]{}[()]{}[()]'));\n\
    console.log(is_nested('[()]{}[()]{}[()]{}[()]{}[()]{}'));\nconsole.log(is_nested('[()]{}[()]{}[()]{}[()]{}[()]{}[()]'));\n\
    console.log(is_nested('[()]{}[()]{}[()]{}[()]{}[()]{}[()]{}'));", "    let stack:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '(') {\n            stack.push(')');\n        } else if (string[i] === '[')\
    \ {\n            stack.push(']');\n        } else if (string[i] === '{') {\n \
    \           stack.push('}');\n        } else if (stack.length === 0 || stack.pop()\
    \ !== string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n\nconsole.log(is_nested('[{}]'));\nconsole.log(is_nested('[{]}'));\n\
    console.log(is_nested('[{}]{}'));\nconsole.log(is_nested('[{}]{}['));\nconsole.log(is_nested('[{}]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{}'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}['));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}['));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}[]'));\nconsole.log(is_nested('[{}]{}[]{}[]{}[]{}[]{}'));\n\
    console.log(is_nested('[{}]{}[]{}[]{}[]{}[]{}['));\nconsole.", "    let stack:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested('[][][]'));\n\
    console.log(is_nested('[][]]['));\nconsole.log(is_nested('[[[]]]'));\nconsole.log(is_nested('[[]]]['));\n\
    console.log(is_nested('[[]]]'));\nconsole.log(is_nested('[[[]]'));\nconsole.log(is_nested('[[]]'));\n\
    console.log(is_nested('[]'));\nconsole.log(is_nested('['));\nconsole.log(is_nested(']'));\n\
    console.log(is_nested(''));", "    let stack: string[] = [];\n    let open: string[]\
    \ = ['[', '{', '('];\n    let close: string[] = [']', '}', ')'];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (open.indexOf(string[i]) > -1)\
    \ {\n            stack.push(string[i]);\n        } else if (close.indexOf(string[i])\
    \ > -1) {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            let last = stack.pop();\n            if (open.indexOf(last)\
    \ !== close.indexOf(string[i])) {\n                return false;\n           \
    \ }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '(') {\n            stack.push(')');\n        } else if (string[i] === '[')\
    \ {\n            stack.push(']');\n        } else if (string[i] === '{') {\n \
    \           stack.push('}');\n        } else if (stack.length === 0 || stack.pop()\
    \ !== string[i]) {\n            return false;\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[][][][][]\"));\n\
    console.log(is_nested(\"[[][][][][]]\"));\nconsole.log(is_nested(\"[[][][][][]][]\"\
    ));\nconsole.log(is_nested(\"[[][][][][]][][]\"));\nconsole.log(is_nested(\"[[][][][][]][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][][][]][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][]][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][]][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][][][]][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][]][][][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][]][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][][][]][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][]][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[[][][][][]][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n   \
    \             return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[][][]\"));\n\
    console.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[][][][][]\"));\n\
    console.log(is_nested(\"[][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"\
    [][][][][][][][][][][][][][][][][]\"));\nconsole.log(is_nested(\"[][][][][][][][][][][][][][][][][",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"[][][][]\"\
    ));\nconsole.log(is_nested(\"[][][][][]\"));\nconsole.log(is_nested(\"[[][]]\"\
    ));\nconsole.log(is_nested(\"[[][][]]\"));\nconsole.log(is_nested(\"[[][][][]]\"\
    ));\nconsole.log(is_nested(\"[[][][][][]]\"));\nconsole.log(is_nested(\"[[][]][]\"\
    ));\nconsole.log(is_nested(\"[[][]][][]\"));\nconsole.log(is_nested(\"[[][]][][][]\"\
    ));\nconsole.log(is_nested(\"[[][]][][][][]\"));\nconsole.log(is_nested(\"[[][][]][]\"\
    ));\nconsole.log(is_nested(\"[[][][]][][]\"));\nconsole.log(is_nested(\"[[][][]][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][]][][][][]\"));\nconsole.log(is_nested(\"[[][][][]][]\"\
    ));\nconsole.log(is_nested(\"[[][][][]][][]\"));\nconsole.log(is_nested(\"[[][][][]][][][]\"\
    ));\nconsole.log(is_nested(\"[[][][][]][][][][]\"));\nconsole.log(is_nested(\"\
    [[][][][][]][]\"));\nconsole.log(is_nested(\"[[][][]["]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
