name: HumanEval_119_match_parens
language: ts
prompt: "//You are given a list of two strings, both strings consist of open\n// parentheses\
  \ '(' or close parentheses ')' only.\n// Your job is to check if it is possible\
  \ to concatenate the two strings in\n// some order, that the resulting string will\
  \ be good.\n// A string S is considered to be good if and only if all parentheses\
  \ in S\n// are balanced. For example: the string '(())()' is good, while the string\n\
  // '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n// Examples:\nfunction match_parens(lst: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\"\
  , \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"\
  ]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n\
  \  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"\
  ]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  )(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n\
  \  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();"
completions: ["  let s = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n   \
    \   if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1,\
    \ match_parens(['(())', '()']));\nconsole.log(2, match_parens(['(())', '))']));\n\
    console.log(3, match_parens(['(())', '()(']));\nconsole.log(4, match_parens(['(())',\
    \ '())(']));\nconsole.log(5, match_parens(['(())', '())((']));\nconsole.log(6,\
    \ match_parens(['(())', '())(()']));\nconsole.log(7, match_parens(['(())', '())(())']));\n\
    console.log(8, match_parens(['(())', '())(())(']));\nconsole.log(9, match_parens(['(())',\
    \ '())(())((']));\nconsole.log(10, match_parens(['(())', '())(())(()']));\nconsole.log(11,\
    \ match_parens(['(())', '())(())(())']));\nconsole.log(12, match_parens(['(())',\
    \ '())(())(())(']));\nconsole.log(13, match_parens(['(())', '())(())(())((']));\n\
    console.log(14, match_parens(['(())', '())(())(())(()']));\nconsole.log(15, match_parens(['(())',\
    \ '())(())(())(())']));\nconsole.log(16, match_parens(['(())', '())(())(())(())(']));\n\
    console.log(17, match_parens(", "  let str1 = lst[0];\n  let str2 = lst[1];\n\
    \  let str3 = str1 + str2;\n  let str4 = str2 + str1;\n  let str5 = str3.split(\"\
    \").reverse().join(\"\");\n  let str6 = str4.split(\"\").reverse().join(\"\");\n\
    \  let str7 = str5.replace(/\\(/g, \")\");\n  let str8 = str6.replace(/\\(/g,\
    \ \")\");\n  let str9 = str7.replace(/\\)/g, \"(\");\n  let str10 = str8.replace(/\\\
    )/g, \"(\");\n  if (str9 === str10) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"])); //'Yes'\n\
    console.log(match_parens([\"(())\", \"())(\"])); //'No'\nconsole.log(match_parens([\"\
    ()()\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"()()\", \"())(\"]));\
    \ //'No'\nconsole.log(match_parens([\"()()\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    ()()\", \"())(\"])); //'No'\nconsole.log(match_parens([\"()()\", \"()()\"]));\
    \ //'Yes'\nconsole.log(match_parens([\"()()\", \"())(\"])); //'No'\nconsole.log(match_parens([\"\
    ()()\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"()()\", \"())(\"]));\
    \ //'No'\nconsole.log(match_parens([\"()()\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    ()()\", \"())(\"])); //'No'\nconsole.log(match_parens([\"()()\", \"()()\"]));\
    \ //'Yes'\nconsole.log(match_parens([\"()()\", \"())(\"])); //'", "  let s = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); //Yes\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); //No\nconsole.log(match_parens(['(()))', '()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); //No\nconsole.log(match_parens(['(()))', '()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()))', '()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()))', '()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()))', '()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()))', '()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()))', '()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()))', '()))", "  let s = \"\"\
    ;\n  for (let i = 0; i < lst.length; i++) {\n    s += lst[i];\n  }\n  let count\
    \ = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"(\") {\n  \
    \    count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n   \
    \   return \"No\";\n    }\n  }\n  if (count === 0) {\n    return \"Yes\";\n  }\
    \ else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"\
    ()()\"])); // Yes\nconsole.log(match_parens([\"(())\", \"))()\"])); // No\nconsole.log(match_parens([\"\
    (())\", \"()))\"])); // No\nconsole.log(match_parens([\"(()))\", \"()))\"]));\
    \ // No\nconsole.log(match_parens([\"(()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()))\", \"()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"(()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()))\", \"()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"(()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()))\", \"()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"(()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()))\", \"()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"(()))\", \"()()", "  let [s1, s2] = lst;\n\
    \  let s = s1 + s2;\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === \"(\") {\n      stack.push(s[i]);\n    } else {\n      if (stack.length\
    \ === 0) {\n        return \"No\";\n      }\n      stack.pop();\n    }\n  }\n\
    \  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(1, match_parens([\"\
    (())\", \"()()\"]));\nconsole.log(2, match_parens([\"(()\", \"()(\"]));\nconsole.log(3,\
    \ match_parens([\"()\", \"()()\"]));\nconsole.log(4, match_parens([\"()\", \"\
    ()()()\"]));\nconsole.log(5, match_parens([\"()()()\", \"()()()\"]));\nconsole.log(6,\
    \ match_parens([\"()()()\", \"()()()()\"]));\nconsole.log(7, match_parens([\"\
    ()()()()\", \"()()()()\"]));\nconsole.log(8, match_parens([\"()()()()\", \"()()()()()\"\
    ]));\nconsole.log(9, match_parens([\"()()()()()\", \"()()()()()\"]));\nconsole.log(10,\
    \ match_parens([\"()()()()()\", \"()()()()()()\"]));\nconsole.log(11, match_parens([\"\
    ()()()()()()\", \"()()()()()()\"]));\nconsole.log(12, match_parens([\"()()()()()()\"\
    , \"()()()()()()()\"]));\nconsole.log(13, match_parens([\"()()()()()()()\", \"\
    ()()()()()()()\"]));\nconsole.log(14, match_parens([\"()()()()()()()\", \"()()()()()()()()\"\
    ]));\nconsole.log(15, match_parens([\"()()()()()()()()\", \"()()()()", "  let\
    \ str = lst.join('');\n  let stack = [];\n  for (let i = 0; i < str.length; i++)\
    \ {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else {\n    \
    \  if (stack.length > 0) {\n        stack.pop();\n      } else {\n        return\
    \ 'No';\n      }\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\
    \nconsole.log(match_parens(['(())', '()()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '()))'])); // 'No'\nconsole.log(match_parens(['(()))', '()))'])); // 'No'\n\
    console.log(match_parens(['(()))', '()()'])); // 'Yes'\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // 'Yes'\nconsole.log(match_parens(['(()))', '()()'])); // 'Yes'\n\
    console.log(match_parens(['(()))', '()()'])); // 'Yes'\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // 'Yes'\nconsole.log(match_parens(['(()))', '()()'])); // 'Yes'\n\
    console.log(match_parens(['(()))', '()()'])); // 'Yes'\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // 'Yes'\nconsole.log(match_parens(['(()))', '()()'])); // 'Yes'\n\
    console.log(match_parens(['(()))', '()()'])); // 'Yes'\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // 'Yes'\nconsole.log(match_parens(['(()))', '()()'])); // 'Yes'\n\
    console.log(match_parens(['(()))', '()()'", "  let str = lst.join('');\n  let\
    \ count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(')\
    \ {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ ')('])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // No\nconsole.log(match_parens(['(())', '())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(()'])); // No\nconsole.log(match_parens(['(())', '())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())(())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(()", "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i\
    \ < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n\
    \  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())',\
    \ '()']));", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str = str1 + str2;\n\
    \  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ===\
    \ \"(\") {\n      count++;\n    } else {\n      count--;\n    }\n    if (count\
    \ < 0) {\n      return \"No\";\n    }\n  }\n  if (count === 0) {\n    return \"\
    Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"(()\", \"()(\"])); //'No'\n\
    console.log(match_parens([\"()\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    (()())\", \"()()()\"])); //'Yes'\nconsole.log(match_parens([\"(()\", \"()))\"\
    ])); //'No'\nconsole.log(match_parens([\"()()()()()()()\", \"()()()()()()()\"\
    ])); //'Yes'\nconsole.log(match_parens([\"(()))\", \"()()()\"])); //'No'\nconsole.log(match_parens([\"\
    (()))\", \"()()()\"])); //'No'\nconsole.log(match_parens([\"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str = str1 + str2;\n  let stack\
    \ = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"(\") {\n\
    \      stack.push(str[i]);\n    } else {\n      if (stack.length === 0) {\n  \
    \      return \"No\";\n      } else {\n        stack.pop();\n      }\n    }\n\
    \  }\n  if (stack.length === 0) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //No\nconsole.log(match_parens([\"(()\", \")()\"])); //No\n\
    console.log(match_parens([\"(()\", \")()\"])); //No\nconsole.log(match_parens([\"\
    (()\", \")()\"])); //No\nconsole.log(match_parens([\"(()\", \")()\"])); //No\n\
    console.log(match_parens([\"(()\", \")()\"])); //No\nconsole.log(match_parens([\"\
    (()\", \")()\"])); //No\nconsole.log(match_parens([\"(()\", \")()\"])); //No\n\
    console.log(match_parens([\"(()\", \")()\"])); //No\nconsole.log(match_parens([\"\
    (()\", \")()\"])); //No\nconsole.log(match_parens([\"(()\", \")()\"])); //No\n\
    console.log(match_parens([\"(()\", \")()\"])); //No\nconsole.log(match_parens([\"\
    (()\", \")()\"])); //No\nconsole.log(match_parens([\"(()\", \")()\"])); //No\n\
    console.log(match_parens([\"(()\", \")()\"])); //No\n", "  let s = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '())('])); // No\nconsole.log(match_parens(['(()', '())'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(()', ''])); // Yes\nconsole.log(match_parens(['(()',\
    \ '))'])); // No\nconsole.log(match_parens(['(()', ')('])); // No\nconsole.log(match_parens(['(()',\
    \ '('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ '('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ '('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ '('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ '('])); // No\nconsole.log(match_parens(['(()',", "  let str = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ===\
    \ '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count <\
    \ 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ ')('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(()', '()('])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(()', '()()('])); // No\nconsole.log(match_parens(['(()',\
    \ '()()()'])); // Yes\nconsole.log(match_parens(['(()', '()()()('])); // No\n\
    console.log(match_parens(['(()', '()()()()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()()()()('])); // No\nconsole.log(match_parens(['(()', '()()()()()'])); //\
    \ Yes\nconsole.log(match_parens(['(()', '()()()()()('])); // No\nconsole.log(match_parens(['(()',\
    \ '()()()()()()'])); // Yes\nconsole.log(match_parens(['(()', '()()()()()()(']));\
    \ // No\nconsole.log(match_parens(['(()', '()()()()()()()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()()()()()()()('])); // No\nconsole.log(match_parens", "  let str1 = lst[0];\n\
    \  let str2 = lst[1];\n  let str1_open = 0;\n  let str2_open = 0;\n  let str1_close\
    \ = 0;\n  let str2_close = 0;\n  for (let i = 0; i < str1.length; i++) {\n   \
    \ if (str1[i] === '(') {\n      str1_open++;\n    } else {\n      str1_close++;\n\
    \    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(')\
    \ {\n      str2_open++;\n    } else {\n      str2_close++;\n    }\n  }\n  if (str1_open\
    \ === str1_close && str2_open === str2_close) {\n    return 'Yes';\n  } else if\
    \ (str1_open === str1_close) {\n    if (str2_open > str2_close) {\n      return\
    \ 'Yes';\n    } else {\n      return 'No';\n    }\n  } else if (str2_open ===\
    \ str2_close) {\n    if (str1_open > str1_close) {\n      return 'Yes';\n    }\
    \ else {\n      return 'No';\n    }\n  } else {\n    return 'No';\n  }\n}\n\n\
    console.log(match_parens(['(())', '()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['()', '()))']));\nconsole.log(match_parens(['()',\
    \ '()']));\nconsole.log(match_parens(['(()', '()']));\nconsole.log(match_parens(['(()',\
    \ '()))']));\nconsole.log(match_parens(['(()', '())']));\nconsole.log(match_parens(['(()',\
    \ '()()']));\nconsole.log(match_parens(['(()', '())(']));\nconsole.log(match_paren",
  "  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n\
    \    if (lst[0][i] === \"(\") {\n      open++;\n    } else {\n      close++;\n\
    \    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] ===\
    \ \"(\") {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open\
    \ === close) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\n\
    console.log(match_parens([\"(())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \")()\"])); // No\nconsole.log(match_parens([\"(()\", \"())\"])); // Yes\n\
    console.log(match_parens([\"()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"()()\", \"()()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"()()()\", \"()()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()()()\", \"()()()()\"])); // Yes\nconsole.log(match_parens([\"()()()\", \"()()()()()\"\
    ])); // Yes\nconsole.log(match_parens([\"()()()\", \"()()()()()()\"])); // Yes\n\
    console.log(match_parens([\"()()()\", \"()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()()()\", \"()()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"()()()\"\
    , \"()()()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"()()()\", \"\
    ()()()()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"()()()\", \"()()()",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); //Yes\n\
    console.log(match_parens(['(())', '())('])); //No\nconsole.log(match_parens(['()()',\
    \ '()()'])); //Yes\nconsole.log(match_parens(['()()', '())('])); //No\nconsole.log(match_parens(['()()',\
    \ '())('])); //No\nconsole.log(match_parens(['()()', '())('])); //No\nconsole.log(match_parens(['()()',\
    \ '())('])); //No\nconsole.log(match_parens(['()()', '())('])); //No\nconsole.log(match_parens(['()()',\
    \ '())('])); //No\nconsole.log(match_parens(['()()', '())('])); //No\nconsole.log(match_parens(['()()',\
    \ '())('])); //No\nconsole.log(match_parens(['()()', '())('])); //No\nconsole.log(match_parens(['()()',\
    \ '())('])); //No\nconsole.log(match_parens(['()()', '())('])); //No\nconsole.log(match_parens(['()()',\
    \ '())('])); //No\nconsole.log(match_parens(['()()', '())('])); //No\nconsole.log(match_parens(['()()',\
    \ '())('])); //No\nconsole.log(match_parens(['()()', '())('])); //No\nconsole.log(match_parens(['",
  "  let s1 = lst[0];\n  let s2 = lst[1];\n  let s1_open = 0;\n  let s2_open = 0;\n\
    \  let s1_close = 0;\n  let s2_close = 0;\n  for (let i = 0; i < s1.length; i++)\
    \ {\n    if (s1[i] === \"(\") {\n      s1_open++;\n    } else {\n      s1_close++;\n\
    \    }\n  }\n  for (let i = 0; i < s2.length; i++) {\n    if (s2[i] === \"(\"\
    ) {\n      s2_open++;\n    } else {\n      s2_close++;\n    }\n  }\n  if (s1_open\
    \ + s2_open === s1_close + s2_close) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\nconsole.log(match_parens([\"(())\", \"()\"])); //Yes\nconsole.log(match_parens([\"\
    (())\", \"))\"])); //No\nconsole.log(match_parens([\"(()\", \"))\"])); //No\n\
    console.log(match_parens([\"(()\", \"())\"])); //Yes\nconsole.log(match_parens([\"\
    (()\", \"()(\"])); //No\nconsole.log(match_parens([\"(()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"(()\", \"())(\"])); //No\nconsole.log(match_parens([\"\
    (()\", \"())(()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"())(())(\"]));\
    \ //No\nconsole.log(match_parens([\"(()\", \"())(())(()\"])); //Yes\nconsole.log(match_parens([\"\
    (()\", \"())(())(())(\"])); //No\nconsole.log(match_parens([\"(()\", \"())(())(())(()\"\
    ])); //Yes\nconsole.log(match_parens([\"(()\", \"())(())(())(())(\"])); //", " \
    \ let s = lst.join('');\n  let c = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      c++;\n    } else {\n      c--;\n    }\n    if\
    \ (c < 0) {\n      return 'No';\n    }\n  }\n  return c === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(1, match_parens(['(())', '()']));\nconsole.log(2, match_parens(['(())',\
    \ ')(']));\nconsole.log(3, match_parens(['(())', '()))']));\nconsole.log(4, match_parens(['(())',\
    \ '())(']));\nconsole.log(5, match_parens(['(())', '()))']));\nconsole.log(6,\
    \ match_parens(['(())', '()))']));\n", "  let s = lst.join('');\n  let c = 0;\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      c++;\n\
    \    } else {\n      c--;\n    }\n    if (c < 0) {\n      return 'No';\n    }\n\
    \  }\n  return c === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()']));\nconsole.log(match_parens(['(())', '()(']));\nconsole.log(match_parens(['(())',\
    \ '())(']));\nconsole.log(match_parens(['(())', '())((']));\nconsole.log(match_parens(['(())',\
    \ '())(((']));\nconsole.log(match_parens(['(())', '())((((']));\nconsole.log(match_parens(['(())',\
    \ '())(((((']));\nconsole.log(match_parens(['(())', '())((((((']));\nconsole.log(match_parens(['(())',\
    \ '())(((((((']));\nconsole.log(match_parens(['(())', '())((((((((']));\nconsole.log(match_parens(['(())',\
    \ '())(((((((((']));\nconsole.log(match_parens(['(())', '())((((((((((']));\n\
    console.log(match_parens(['(())', '())(((((((((((']));\nconsole.log(match_parens(['(())',\
    \ '())((((((((((((']));\nconsole.log(match_parens(['(())', '())(((((((((((((']));\n\
    console.log(match_parens(['(())', '())((((((((((((((']));\nconsole.log(match_parens(['(())',\
    \ '())(((((((((((((((']));\nconsole.log(match_parens(['(())', '())(((((((", " \
    \ let [s1, s2] = lst;\n  let s = s1 + s2;\n  let c = 0;\n  for (let i = 0; i <\
    \ s.length; i++) {\n    if (s[i] === \"(\") {\n      c++;\n    } else {\n    \
    \  c--;\n    }\n    if (c < 0) {\n      return \"No\";\n    }\n  }\n  return c\
    \ === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(1, match_parens([\"(())\", \"()()\"\
    ]));\nconsole.log(2, match_parens([\"(()\", \"()()\"]));\nconsole.log(3, match_parens([\"\
    (()\", \"())\"]));\nconsole.log(4, match_parens([\"()\", \"()()\"]));\nconsole.log(5,\
    \ match_parens([\"()\", \"()()()\"]));\nconsole.log(6, match_parens([\"(()()\"\
    , \"()()\"]));\nconsole.log(7, match_parens([\"(()()\", \"()()()\"]));\nconsole.log(8,\
    \ match_parens([\"(()()\", \"()()()()\"]));\nconsole.log(9, match_parens([\"(()()\"\
    , \"()()()()()\"]));\nconsole.log(10, match_parens([\"(()()\", \"()()()()()()\"\
    ]));\nconsole.log(11, match_parens([\"(()()\", \"()()()()()()()\"]));\nconsole.log(12,\
    \ match_parens([\"(()()\", \"()()()()()()()()\"]));\nconsole.log(13, match_parens([\"\
    (()()\", \"()()()()()()()()()\"]));\nconsole.log(14, match_parens([\"(()()\",\
    \ \"()()()()()()()()()()\"]));\nconsole.log(15, match_parens([\"(()()\", \"()()()()()()()()()()()\"\
    ]));\nconsole.log(16, match_parens([\"(()()\", \"()()()()()()()()()", "  let s\
    \ = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n      if (stack.length\
    \ === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return\
    \ stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))", "  let str = lst.join('');\n  let open = 0;\n  let close = 0;\n  for\
    \ (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      open++;\n\
    \    } else {\n      close++;\n    }\n    if (close > open) {\n      return 'No';\n\
    \    }\n  }\n  return open === close ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', ')()'])); // No\nconsole.log(match_parens(['(()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(()', '())'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()('])); // No\nconsole.log(match_parens(['(()', '())('])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '())))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))))'])); // No\nconsole.log(match_parens(['(()', '()))))))'])); // No\n\
    console.log(match_parens(['(()', '())))))))))'])); // No\nconsole.log(match_parens(['(()',\
    \ '())))))))))()'])); // No\nconsole.log(match_parens(['(()', '())))))))))()))']));\
    \ // No\nconsole.log(match_parens(['(()', '())))))))))())))'])); // No\nconsole.log(match_parens(['(()',\
    \ '())))))))))()))))'])); // No\nconsole.log(match_parens(['(()', '())))))))))()))))))']));\
    \ // No\nconsole.log(match_parens(['(()', '())))))))))())))))))'])); // No\nconsole.",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let count1 = 0;\n  let count2 = 0;\n\
    \  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n   \
    \   count1++;\n    } else {\n      count1--;\n    }\n  }\n  for (let i = 0; i\
    \ < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      count2++;\n    }\
    \ else {\n      count2--;\n    }\n  }\n  if (count1 === 0 && count2 === 0) {\n\
    \    return \"Yes\";\n  } else if (count1 === 0 && count2 < 0) {\n    return \"\
    No\";\n  } else if (count1 < 0 && count2 === 0) {\n    return \"No\";\n  } else\
    \ if (count1 < 0 && count2 < 0) {\n    return \"No\";\n  } else if (count1 < 0\
    \ && count2 > 0) {\n    return \"Yes\";\n  } else if (count1 > 0 && count2 < 0)\
    \ {\n    return \"Yes\";\n  } else if (count1 > 0 && count2 > 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(match_parens([\"\
    ()\", \"()\"])); //'Yes'\nconsole.log(match_parens([\"(())\", \"()\"])); //'Yes'\n\
    console.log(match_parens([\"(()\", \"()\"])); //'Yes'\nconsole.log(match_parens([\"\
    (())\", \"))\"])); //'No'\nconsole.log(match_parens([\"(()\", \"))\"])); //'No'\n\
    console.log(match_parens([\"(()))\", \"))\"])); //'Yes'\nconsole.log(match_parens([\"\
    (()))\", \")()\"])); //'Yes'\nconsole.log(match_parens([\"(()))\", \")()(\"]));\
    \ //'No'\nconsole.log(match_parens(", "  let str = lst.join('');\n  let count\
    \ = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n\
    \      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n \
    \     return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); // Yes\n\
    console.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()'])); // No\nconsole.log(match_parens(['(()))', '((()))'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '((()))()'])); // Yes\nconsole.log(match_parens(['(()))', '((()))()))'])); //\
    \ No\nconsole.log(match_parens(['(()))', '((()))()))()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()))()))()))'])); // No\nconsole.log(match_parens(['(()))', '((()))()))()))()']));\
    \ // No\nconsole.log(match_parens(['(()))', '((()))()))()))()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()))()))()))()))()'])); // No\nconsole.log(match_parens(['(()))', '((()))()))()))()))()))']));\
    \ // No\nconsole.log(match_parens(['(()))', '((()))()))()))()))()))()'])); //\
    \ No\nconsole.log(match_parens", "  let s = lst.join('');\n  let stack = [];\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n\
    \    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n\
    \      stack.pop();\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '())(']));\nconsole.log(match_parens(['(())', '())(()']));\nconsole.log(match_parens(['(())',\
    \ '())(())(']));\nconsole.log(match_parens(['(())', '())(())((']));\nconsole.log(match_parens(['(())',\
    \ '())(())(()']));\nconsole.log(match_parens(['(())', '())(())(())']));\nconsole.log(match_parens(['(())',\
    \ '())(())(())(']));\nconsole.log(match_parens(['(())', '())(())(())((']));\n\
    console.log(match_parens(['(())', '())(())(())(()']));\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())']));\nconsole.log(match_parens(['(())', '())(())(())(())(']));\n\
    console.log(match_parens(['(())', '())(())(())(())((']));\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())(()']));\nconsole.log(match_parens(['(())', '())(())(())(())(())']));\n\
    console.log(match_parens(['(())', '())(())(())(())(())(']));\nconsole.log(match_parens(['(())',",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_parens = 0;\n  let str2_parens\
    \ = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\")\
    \ {\n      str1_parens++;\n    } else {\n      str1_parens--;\n    }\n  }\n  for\
    \ (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      str2_parens++;\n\
    \    } else {\n      str2_parens--;\n    }\n  }\n  if (str1_parens === 0 && str2_parens\
    \ === 0) {\n    return \"Yes\";\n  } else if (str1_parens > 0 && str2_parens <\
    \ 0) {\n    if (str1_parens === -str2_parens) {\n      return \"Yes\";\n    }\n\
    \  } else if (str1_parens < 0 && str2_parens > 0) {\n    if (str1_parens === -str2_parens)\
    \ {\n      return \"Yes\";\n    }\n  }\n  return \"No\";\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\n\
    console.log(match_parens([\"(()\", \"()(\"])); //No\nconsole.log(match_parens([\"\
    (()\", \"())\"])); //Yes\nconsole.log(match_parens([\"()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"()\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    ()\", \"()(\"])); //Yes\nconsole.log(match_parens([\"()\", \"())\"])); //Yes\n\
    console.log(match_parens([\"(\", \"()\"])); //Yes\nconsole.log(match_parens([\"\
    (\", \")\"])); //No\nconsole.log(match_parens", "  let s = lst.join('');\n  let\
    \ cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n\
    \      cnt++;\n    } else {\n      cnt--;\n    }\n    if (cnt < 0) {\n      return\
    \ 'No';\n    }\n  }\n  return cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())',\
    \ '()']));\nconsole.log(2, match_parens(['()', ')(']));\nconsole.log(3, match_parens(['(())',\
    \ ')(']));\nconsole.log(4, match_parens(['(())', '()))']));\nconsole.log(5, match_parens(['(())',\
    \ '())(']));\nconsole.log(6, match_parens(['(())', '())(()']));\nconsole.log(7,\
    \ match_parens(['(())', '())(())(']));\nconsole.log(8, match_parens(['(())', '())(())((']));\n\
    console.log(9, match_parens(['(())', '())(())(()']));\nconsole.log(10, match_parens(['(())',\
    \ '())(())(())']));\nconsole.log(11, match_parens(['(())', '())(())(())(']));\n\
    console.log(12, match_parens(['(())', '())(())(())((']));\nconsole.log(13, match_parens(['(())',\
    \ '())(())(())(()']));\nconsole.log(14, match_parens(['(())', '())(())(())(())']));\n\
    console.log(15, match_parens(['(())', '())(())(())(())(']));\nconsole.log(16,\
    \ match_parens(['(())', '())(())(())(())((']));\nconsole.log(17, match_parens(['",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '))'])); // No\nconsole.log(match_parens(['(()))', '))('])); // No\nconsole.log(match_parens(['(()))',\
    \ '))((()'])); // No\nconsole.log(match_parens(['(()))', '))((()))'])); // Yes\n\
    console.log(match_parens(['(()))', '))((()))('])); // No\nconsole.log(match_parens(['(()))',\
    \ '))((()))(('])); // No\nconsole.log(match_parens(['(()))', '))((()))(((']));\
    \ // No\nconsole.log(match_parens(['(()))', '))((()))((()))'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '))((()))((()))('])); // No\nconsole.log(match_parens(['(()))', '))((()))((()))((']));\
    \ // No\nconsole.log(match_parens(['(()))', '))((()))((()))((('])); // No\nconsole.log(match_parens(['(()))',\
    \ '))((()))((()))((()))'])); // Yes\nconsole.log(match_parens(['(()))', '))((()))((()))((()))(']));\
    \ // No\nconsole.log(match_parens(['(()))', '))((()", "  let str = lst.join('');\n\
    \  let open = 0;\n  let close = 0;\n  for (let i = 0; i < str.length; i++) {\n\
    \    if (str[i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n\
    \    if (close > open) {\n      return 'No';\n    }\n  }\n  return open === close\
    \ ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '))'])); // No\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '))('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))('])); // No\nconsole.log(match_parens(['(())', ')))(('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))((('])); // No\nconsole.log(match_parens(['(())', ')))(((('])); // No\n\
    console.log(match_parens(['(())', ')))((((('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))(((((('])); // No\nconsole.log(match_parens(['(())', ')))((((((('])); //\
    \ No\nconsole.log(match_parens(['(())', ')))(((((((('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))((((((((('])); // No\nconsole.log(match_parens(['(())', ')))((((((((((']));\
    \ // No\nconsole.log(match_parens(['(())', ')))((((((((((('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))(((((((((((('])); // No\n", "  let str = lst.join('');\n  let count = 0;\n\
    \  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n\
    \    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['()', '()))'])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '()()()'])); // Yes\nconsole.log(match_parens(['()',\
    \ '()()()()'])); // Yes\nconsole.log(match_parens(['()', '()()()()()'])); // Yes\n\
    console.log(match_parens(['()', '()()()()()()'])); // Yes\nconsole.log(match_parens(['()',\
    \ '()()()()()()()'])); // Yes\nconsole.log(match_parens(['()', '()()()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['()', '()()()()()()()()()'])); // Yes\nconsole.log(match_parens(['()',\
    \ '()()()()()()()()()()'])); // Yes\nconsole.log(match_parens(['()', '()()()()()()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['()', '()()()()()()()", "    let open = 0;\n\
    \    let close = 0;\n    let good = true;\n    for (let i = 0; i < lst[0].length;\
    \ i++) {\n        if (lst[0][i] === \"(\") {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n        if (close > open) {\n          \
    \  good = false;\n        }\n    }\n    if (good) {\n        for (let i = 0; i\
    \ < lst[1].length; i++) {\n            if (lst[1][i] === \"(\") {\n          \
    \      open++;\n            } else {\n                close++;\n            }\n\
    \            if (close > open) {\n                good = false;\n            }\n\
    \        }\n    }\n    if (open !== close) {\n        good = false;\n    }\n \
    \   return good ? \"Yes\" : \"No\";\n}\n\nconsole.log(match_parens([\"(())\",\
    \ \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(()\", \"()(\"]), \"No\"\
    );\nconsole.log(match_parens([\"()\", \")\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(()())\", \"()()()\"\
    ]), \"Yes\");\nconsole.log(match_parens([\"(()\", \"())\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()\", \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); //Yes\nconsole.log(match_parens(['(())',\
    \ '))'])); //No\nconsole.log(match_parens(['(())', '()('])); //No\nconsole.log(match_parens(['(())',\
    \ '()()'])); //Yes\nconsole.log(match_parens(['(())', '())('])); //No\nconsole.log(match_parens(['(())',\
    \ '())(()'])); //No\nconsole.log(match_parens(['(())', '())(())'])); //Yes\nconsole.log(match_parens(['(())',\
    \ '())(())('])); //No\nconsole.log(match_parens(['(())', '())(())(()'])); //Yes\n\
    console.log(match_parens(['(())', '())(())(())'])); //Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())('])); //No\nconsole.log(match_parens(['(())', '())(())(())(()']));\
    \ //Yes\nconsole.log(match_parens(['(())', '())(())(())(())'])); //Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())('])); //No\nconsole.log(match_parens(['(())', '())(())(())(())(()']));\
    \ //Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())'])); //Yes\nconsole.log(match_parens(['(())',",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_open = 0;\n  let str2_open\
    \ = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\")\
    \ {\n      str1_open++;\n    } else {\n      str1_open--;\n    }\n  }\n  for (let\
    \ i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      str2_open++;\n\
    \    } else {\n      str2_open--;\n    }\n  }\n  if (str1_open === 0 && str2_open\
    \ === 0) {\n    return \"Yes\";\n  } else if (str1_open === -1 && str2_open ===\
    \ 1) {\n    return \"Yes\";\n  } else if (str1_open === 1 && str2_open === -1)\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(())\", \"()))\"]));\
    \ // No\nconsole.log(match_parens([\"(()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \"()))\"])); // No\nconsole.log(match_parens([\"()\", \"()()\"])); // Yes\n\
    console.log(match_parens([\"()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ()()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"()()\", \"()))\"]));\
    \ // No\nconsole.log(match_parens([\"()()\", \"()()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()()\", \"()()))\"])); // No\nconsole.log(match_parens([\"()()\", \"()))()\"]));\
    \ // No\nconsole.log(match_parens([\"()()\", \"())()\"])); // No\nconsole.log",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str3 = str1 + str2;\n  let str4\
    \ = str2 + str1;\n  let count1 = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let\
    \ count4 = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] ===\
    \ \"(\") {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for\
    \ (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      count2++;\n\
    \    } else {\n      count2--;\n    }\n  }\n  for (let i = 0; i < str3.length;\
    \ i++) {\n    if (str3[i] === \"(\") {\n      count3++;\n    } else {\n      count3--;\n\
    \    }\n  }\n  for (let i = 0; i < str4.length; i++) {\n    if (str4[i] === \"\
    (\") {\n      count4++;\n    } else {\n      count4--;\n    }\n  }\n  if (count1\
    \ === 0 && count2 === 0) {\n    return \"Yes\";\n  } else if (count3 === 0 &&\
    \ count4 === 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n\
    }\n\nconsole.log(match_parens([\"(())\", \"()()\"]));\nconsole.log(match_parens([\"\
    ()()\", \"()()\"]));\nconsole.log(match_parens([\"()()\", \"()))\"]));\nconsole.log(match_parens([\"\
    ()()\", \"()()\"]));\nconsole.log(match_parens([\"()()\", \"()))\"]));\nconsole.log(match_parens([\"\
    ((()))\", \"()()\"]));\nconsole.log(match_parens([\"((()))\", \"()))\"]));\nconsole.log(match_parens([\"\
    ((()))\", \"()()\"]));\nconsole", "  let s = lst.join('');\n  let count = 0;\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      count++;\n\
    \    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); //Yes\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()()'])); //Yes\nconsole.log(match_parens(['(()',\
    \ '))()'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['",
  "  let s = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    s += lst[i];\n \
    \ }\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ===\
    \ \"(\") {\n      stack.push(s[i]);\n    } else {\n      if (stack.length ===\
    \ 0) {\n        return \"No\";\n      } else {\n        stack.pop();\n      }\n\
    \    }\n  }\n  if (stack.length === 0) {\n    return \"Yes\";\n  } else {\n  \
    \  return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); // No\nconsole.log(match_parens([\"\
    ()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()))\", \"()()\"])); //\
    \ No\nconsole.log(match_parens([\"(()\", \"())\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // No\nconsole.log(match_parens([\"(()))\", \"()()\"]));\
    \ // No\nconsole.log(match_parens([\"(()))\", \"()()\"])); // No\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // No\nconsole.log(match_parens([\"(()))\", \"()()\"]));\
    \ // No\nconsole.log(match_parens([\"(()))\", \"()()\"])); // No\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // No\nconsole.log(match_parens([\"(()))\", \"()()\"]));\
    \ // No\nconsole.log(match_parens([\"(()))\", \"()()\"])); // No\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // No\nconsole.log(match_parens([\"(()))\", \"()()\"]));\
    \ // No\nconsole.log(match", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let\
    \ str3 = str1 + str2;\n  let str4 = str2 + str1;\n  let str5 = str3.split(\"\"\
    );\n  let str6 = str4.split(\"\");\n  let count1 = 0;\n  let count2 = 0;\n  let\
    \ count3 = 0;\n  let count4 = 0;\n  for (let i = 0; i < str5.length; i++) {\n\
    \    if (str5[i] === \"(\") {\n      count1++;\n    } else {\n      count1--;\n\
    \    }\n    if (count1 < 0) {\n      return \"No\";\n    }\n  }\n  for (let i\
    \ = 0; i < str6.length; i++) {\n    if (str6[i] === \"(\") {\n      count2++;\n\
    \    } else {\n      count2--;\n    }\n    if (count2 < 0) {\n      return \"\
    No\";\n    }\n  }\n  if (count1 === 0 && count2 === 0) {\n    return \"Yes\";\n\
    \  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\"\
    , \"()()\"]));\nconsole.log(match_parens([\"(()\", \"()()\"]));\nconsole.log(match_parens([\"\
    (())\", \"()))\"]));\nconsole.log(match_parens([\"(()))\", \"()()\"]));\nconsole.log(match_parens([\"\
    (()))\", \"()()\"]));\nconsole.log(match_parens([\"(()))\", \"()()\"]));\nconsole.log(match_parens([\"\
    (()))\", \"()()\"]));\nconsole.log(match_parens([\"(()))\", \"()()\"]));\nconsole.log(match_parens([\"\
    (()))\", \"()()\"]));\nconsole.log(match_parens([\"(()))\", \"()()\"]));\nconsole.log(match_parens([\"\
    (()))\", \"()()\"]));\nconsole.log(match_parens", "  let str = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ===\
    \ '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count <\
    \ 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['(())', '())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // 'No'\nconsole.log(match_parens(['(())', '())(())('])); // 'No'\n\
    console.log(match_parens(['(())', '())(())(()'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '())(())(())(()'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '())(())(())(())(()'])); // 'No'\n\
    console.log(match_parens(['(())', '())(())(())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())(())('])); // 'No'\nconsole.log(match_parens(['(())', '())(())(())(()",
  "  let s = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n      if\
    \ (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1,\
    \ match_parens(['(())', '()']));\nconsole.log(2, match_parens(['(())', '()(']));\n\
    console.log(3, match_parens(['(())', '())(']));\nconsole.log(4, match_parens(['(())',\
    \ '()))']));\nconsole.log(5, match_parens(['(())', '()))(']));\nconsole.log(6,\
    \ match_parens(['(())', '()))()']));\nconsole.log(7, match_parens(['(())', '()))()(']));\n\
    console.log(8, match_parens(['(())', '()))())(']));\nconsole.log(9, match_parens(['(())',\
    \ '()))()))']));\nconsole.log(10, match_parens(['(())', '()))())))']));\nconsole.log(11,\
    \ match_parens(['(())', '()))()))))']));\nconsole.log(12, match_parens(['(())',\
    \ '()))()))))(']));\nconsole.log(13, match_parens(['(())', '()))()))))))']));\n\
    console.log(14, match_parens(['(())', '()))())))))))']));\nconsole.log(15, match_parens(['(())',\
    \ '()))()))))))))']));\nconsole.log(16, match_parens(['(())', '()))()))))))))(']));\n\
    console.log(17, match_parens(['(())', '()))()))))))))))", "  let s = lst.join('');\n\
    \  let c = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n\
    \      c++;\n    } else {\n      c--;\n    }\n    if (c < 0) {\n      return 'No';\n\
    \    }\n  }\n  return c === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())',\
    \ '()']));\nconsole.log(2, match_parens(['(())', '))']));\nconsole.log(3, match_parens(['(())',\
    \ '()(']));\nconsole.log(4, match_parens(['(())', '())(']));\nconsole.log(5, match_parens(['(())',\
    \ '())((']));\nconsole.log(6, match_parens(['(())', '())(()']));\nconsole.log(7,\
    \ match_parens(['(())', '())(())']));\nconsole.log(8, match_parens(['(())', '())(())(']));\n\
    console.log(9, match_parens(['(())', '())(())((']));\nconsole.log(10, match_parens(['(())',\
    \ '())(())(()']));\nconsole.log(11, match_parens(['(())', '())(())(())']));\n\
    console.log(12, match_parens(['(())', '())(())(())(']));\nconsole.log(13, match_parens(['(())',\
    \ '())(())(())((']));\nconsole.log(14, match_parens(['(())', '())(())(())(()']));\n\
    console.log(15, match_parens(['(())', '())(())(())(())']));\nconsole.log(16, match_parens(['(())',\
    \ '())(())(())(())(']));\nconsole.log(17, match_parens(['(())', '())(())(()",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let count1 = 0;\n  let count2 = 0;\n\
    \  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n   \
    \   count1++;\n    } else {\n      count1--;\n    }\n  }\n  for (let i = 0; i\
    \ < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      count2++;\n    }\
    \ else {\n      count2--;\n    }\n  }\n  if (count1 === 0 && count2 === 0) {\n\
    \    return \"Yes\";\n  } else if (count1 < 0 && count2 < 0) {\n    return \"\
    No\";\n  } else if (count1 > 0 && count2 > 0) {\n    return \"No\";\n  } else\
    \ {\n    return \"Yes\";\n  }\n}\nconsole.log(match_parens([\"(())\", \"()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); //No\nconsole.log(match_parens([\"(()))\", \"()))\"]));\
    \ //No\nconsole.log(match_parens([\"(()))\", \"((()\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); //No\nconsole.log(match_parens([\"(()))\", \"()))\"]));\
    \ //No\nconsole.log(match_parens([\"(()))\", \"((()\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"((()\"])); //No\nconsole.log(match_parens([\"(()))\", \"((()\"]));\
    \ //No\nconsole.log(match_parens([\"(()))\", \"((()\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"((()\"])); //No\nconsole.log(match_parens([\"(()))\", \"((()\"]));\
    \ //", "  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length;\
    \ i++) {\n    if (lst[0][i] === \"(\") {\n      open++;\n    } else {\n      close++;\n\
    \    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] ===\
    \ \"(\") {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open\
    \ === close) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\
    console.log(match_parens([\"(())\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    (()\", \"()(\"])); //'No'\nconsole.log(match_parens([\"(()\", \"()()\"])); //'Yes'\n\
    console.log(match_parens([\"()\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    ()\", \"()()()\"])); //'Yes'\nconsole.log(match_parens([\"()\", \"()()()()\"]));\
    \ //'Yes'\nconsole.log(match_parens([\"()\", \"()()()()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    ()\", \"()()()()()()\"])); //'Yes'\nconsole.log(match_parens([\"()\", \"()()()()()()()\"\
    ])); //'Yes'\nconsole.log(match_parens([\"()\", \"()()()()()()()()\"])); //'Yes'\n\
    console.log(match_parens([\"()\", \"()()()()()()()()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    ()\", \"()()()()()()()()()()\"])); //'Yes'\nconsole.log(match_parens([\"()\",\
    \ \"()()()()()()()()()()()\"])); //'Yes'\nconsole.log(match_parens([\"()\", \"\
    ()()()()()()()()()", "  let str = lst.join('');\n  let count = 0;\n  for (let\
    \ i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n \
    \   } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(())', '()('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()()'])); // 'Yes'\nconsole.log(match_parens(['(())', '())('])); // 'No'\n\
    console.log(match_parens(['(())', '()))'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // 'No'\nconsole.log(match_parens(['(())', '())(())'])); // 'Yes'\n\
    console.log(match_parens(['(())', '())(())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(()'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())']));\
    \ // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(())(()'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(())']));\
    \ // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(())('])); // 'No'\n\
    console.log(match_parens(['(())', '())(())(())(())(()'])); // 'Yes'\nconsole.log(match_parens(['(",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_parens = str1.match(/\\\
    (/g).length;\n  let str2_parens = str2.match(/\\(/g).length;\n  let str1_closing_parens\
    \ = str1.match(/\\)/g).length;\n  let str2_closing_parens = str2.match(/\\)/g).length;\n\
    \  if (str1_parens === str1_closing_parens && str2_parens === str2_closing_parens)\
    \ {\n    return 'Yes';\n  } else if (str1_parens === str2_closing_parens && str2_parens\
    \ === str1_closing_parens) {\n    return 'Yes';\n  } else {\n    return 'No';\n\
    \  }\n}\n\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(()',\
    \ '()(']));\nconsole.log(match_parens(['()', '()']));\nconsole.log(match_parens(['(())',\
    \ '())(']));\nconsole.log(match_parens(['(())(', '()()']));\nconsole.log(match_parens(['(())(',\
    \ '())(']));\nconsole.log(match_parens(['(())(', '()()']));\nconsole.log(match_parens(['(())(',\
    \ '())(']));\nconsole.log(match_parens(['(())(', '())(']));\nconsole.log(match_parens(['(())(',\
    \ '())(']));\nconsole.log(match_parens(['(())(', '())(']));\nconsole.log(match_parens(['(())(',\
    \ '())(']));\nconsole.log(match_parens(['(())(', '())(']));\nconsole.log(match_parens(['(())(',\
    \ '())(']));\nconsole.log(match_parens(", "  let str = lst.join('');\n  let stack\
    \ = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n\
    \      stack.push(str[i]);\n    } else {\n      if (stack.length === 0) {\n  \
    \      return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length\
    \ === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); //\
    \ Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))", "  let [s1, s2] = lst;\n  let s = s1 + s2;\n  let stack = [];\n  for\
    \ (let i = 0; i < s.length; i++) {\n    if (s[i] === \"(\") {\n      stack.push(s[i]);\n\
    \    } else {\n      if (stack.length === 0) {\n        return \"No\";\n     \
    \ }\n      stack.pop();\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"\
    No\";\n}\n\nconsole.log(1, match_parens([\"(())\", \"()()\"]));\nconsole.log(2,\
    \ match_parens([\"(()\", \"()(\"]));\nconsole.log(3, match_parens([\"()\", \"\
    ()()\"]));\nconsole.log(4, match_parens([\"()\", \"()()()\"]));\nconsole.log(5,\
    \ match_parens([\"()\", \"()()()()\"]));\nconsole.log(6, match_parens([\"()\"\
    , \"()()()()()\"]));\nconsole.log(7, match_parens([\"()\", \"()()()()()()\"]));\n\
    console.log(8, match_parens([\"()\", \"()()()()()()()\"]));\nconsole.log(9, match_parens([\"\
    ()\", \"()()()()()()()()\"]));\nconsole.log(10, match_parens([\"()\", \"()()()()()()()()()\"\
    ]));\nconsole.log(11, match_parens([\"()\", \"()()()()()()()()()()\"]));\nconsole.log(12,\
    \ match_parens([\"()\", \"()()()()()()()()()()()\"]));\nconsole.log(13, match_parens([\"\
    ()\", \"()()()()()()()()()()()()\"]));\nconsole.log(14, match_parens([\"()\",\
    \ \"()()()()()()()()()()()()()\"]));\nconsole.log(15, match_parens([\"()\", \"\
    ()()()()()()()()()()()()()()\"]));\nconsole.log(", "  let s = lst.join('');\n\
    \  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      stack.push(s[i]);\n    } else {\n      if (stack.length === 0) {\n\
    \        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length\
    \ === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ ')()('])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))('])); // No\nconsole.log(match_parens(['(())', '()))()'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))()('])); // No\nconsole.log(match_parens(['(())', '()))()))'])); // No\n\
    console.log(match_parens(['(())', '()))()))('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))()))()'])); // No\nconsole.log(match_parens(['(())', '()))()))()(']));\
    \ // No\nconsole.log(match_parens(['(())', '()))()))()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))()))()))('])); // No\nconsole.log(match_parens(['(())', '()))()))()))()']));\
    \ // No\nconsole.log(match_parens(['(())', '()))()))()))()('", "  let str = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ===\
    \ '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count <\
    \ 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '))'])); // No\nconsole.log(match_parens(['(())', '()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '))('])); // No\nconsole.log(match_parens(['(())', ')('])); // No\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ ')(()'])); // No\nconsole.log(match_parens(['(())', '())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())('])); // No\n\
    console.log(match_parens(['(())', '())(())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // No\nconsole.log(match_parens", "  let str1 = lst[0];\n  let str2 = lst[1];\n\
    \  let str = str1 + str2;\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === \"(\") {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return \"No\";\n    }\n  }\n  if (count ===\
    \ 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"(()\", \"()()\"])); //No\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //No\nconsole.log(match_parens([\"()\", \"()()()\"])); //Yes\n\
    console.log(match_parens([\"()\", \"()()()()\"])); //No\nconsole.log(match_parens([\"\
    ()\", \"()()()()()\"])); //No\nconsole.log(match_parens([\"()\", \"()()()()()()\"\
    ])); //No\nconsole.log(match_parens([\"()\", \"()()()()()()()\"])); //No\nconsole.log(match_parens([\"\
    ()\", \"()()()()()()()()\"])); //No\nconsole.log(match_parens([\"()\", \"()()()()()()()()()\"\
    ])); //No\nconsole.log(match_parens([\"()\", \"()()()()()()()()()()\"])); //No\n\
    console.log(match_parens([\"()\", \"()()()()()()()()()()()\"])); //No\nconsole.log(match_parens([\"\
    ()\", \"()()()()()()()()()()()()\"])); //No\nconsole.log(match_parens([\"()\"\
    , \"()()()()()()()()()()()()()\"])); //No\nconsole.", "  let str1 = lst[0];\n\
    \  let str2 = lst[1];\n  let str3 = str1 + str2;\n  let str4 = str2 + str1;\n\
    \  let str5 = str3.split(\"\");\n  let str6 = str4.split(\"\");\n  let count1\
    \ = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let count4 = 0;\n  for (let i\
    \ = 0; i < str5.length; i++) {\n    if (str5[i] === \"(\") {\n      count1++;\n\
    \    } else {\n      count1--;\n    }\n    if (count1 < 0) {\n      return \"\
    No\";\n    }\n  }\n  for (let i = 0; i < str6.length; i++) {\n    if (str6[i]\
    \ === \"(\") {\n      count2++;\n    } else {\n      count2--;\n    }\n    if\
    \ (count2 < 0) {\n      return \"No\";\n    }\n  }\n  if (count1 === 0 && count2\
    \ === 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // 'Yes'\nconsole.log(match_parens([\"(())\", \"()))\"]));\
    \ // 'No'\nconsole.log(match_parens([\"()()\", \"()()\"])); // 'Yes'\nconsole.log(match_parens([\"\
    ()()\", \"()))\"])); // 'No'\nconsole.log(match_parens([\"()()\", \"()()()\"]));\
    \ // 'Yes'\nconsole.log(match_parens([\"()()\", \"()())(\"])); // 'No'\nconsole.log(match_parens([\"\
    ()()\", \"()()()()\"])); // 'Yes'\nconsole.log(match_parens([\"()()\", \"()()()))\"\
    ])); // 'No'\nconsole.log(match_parens([\"()()\", \"()()()()()\"])); // 'Yes'\n\
    console.log(match_parens([\"", "  let s = lst.join('');\n  let cnt = 0;\n  for\
    \ (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      cnt++;\n  \
    \  } else {\n      cnt--;\n    }\n    if (cnt < 0) {\n      return 'No';\n   \
    \ }\n  }\n  return cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(())', '))'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())'])); // 'Yes'\nconsole.log(match_parens(['(())', '()('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()()'])); // 'Yes'\nconsole.log(match_parens(['(())', '())('])); // 'No'\n\
    console.log(match_parens(['(())', '())(()'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())('])); //\
    \ 'No'\nconsole.log(match_parens(['(())', '())(())(()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '())(())(())(()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '()", "  let s = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())'])); //\
    \ Yes\nconsole.log(match_parens(['(())', '())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())(())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())(())(", "  let str1\
    \ = lst[0];\n  let str2 = lst[1];\n  let str1_count = 0;\n  let str2_count = 0;\n\
    \  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n   \
    \   str1_count++;\n    } else {\n      str1_count--;\n    }\n  }\n  for (let i\
    \ = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      str2_count++;\n\
    \    } else {\n      str2_count--;\n    }\n  }\n  if (str1_count === 0 && str2_count\
    \ === 0) {\n    return \"Yes\";\n  } else if (str1_count === str2_count) {\n \
    \   return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //\
    \ No\nconsole.log(match_parens([\"(()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()))\", \"()()()\"\
    ])); // No\nconsole.log(match_parens([\"(()))\", \"()()()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()\"])); // No\nconsole.log(match_parens([\"(()))\", \"()()()()()()\"\
    ])); // Yes\nconsole.log(match_parens([\"(()))\", \"()()()()()()()\"])); // No\n\
    console.log(match_parens([\"(()))\", \"()()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()()()()()\"])); // No\nconsole.log(match_parens([\"(()))\"\
    , \"()()()()()()", "  let str = lst.join('');\n  let stack = [];\n  for (let i\
    \ = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n\
    \    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n\
    \      stack.pop();\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()))', '()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()))', '((()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '((()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()'])); // No\nconsole.log(match_parens(['(()))', '((()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()'])); // No\nconsole.log(match_parens(['(()))', '((()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()'])); // No\nconsole.log(match_parens(['(()))', '((()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()'])); // No\nconsole.log(match_parens(['(()))', '((()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()'])); // No\nconsole.log(match_parens(['(()))', '((()'])); // No\nconsole.log(match_paren",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); // 'Yes'\n\
    console.log(match_parens(['(())', '()))'])); // 'No'\nconsole.log(match_parens(['(()',\
    \ '()))'])); // 'No'\nconsole.log(match_parens(['(()', '()()'])); // 'Yes'\nconsole.log(match_parens(['(()',\
    \ ')'])); // 'No'\nconsole.log(match_parens(['(()', '))'])); // 'No'\nconsole.log(match_parens(['(()',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(()', '('])); // 'No'\nconsole.log(match_parens(['(()',\
    \ ')'])); // 'No'\nconsole.log(match_parens(['(()', '))'])); // 'No'\nconsole.log(match_parens(['(()',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(()', '('])); // 'No'\nconsole.log(match_parens(['(()',\
    \ ')'])); // 'No'\nconsole.log(match_parens(['(()', '))'])); // 'No'\nconsole.log(match_parens(['(()',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(()', '('])); // 'No'\nconsole.log(match_parens(['(()',\
    \ ')'])); // 'No'\nconsole.log(match_parens(['(()', '))']));", "  let s = lst.join('');\n\
    \  let c = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n\
    \      c++;\n    } else {\n      c--;\n    }\n    if (c < 0) {\n      return 'No';\n\
    \    }\n  }\n  return c === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()))', '()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '())('])); // No\nconsole.log(match_parens(['(()))',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '())('])); // No\nconsole.log(match_parens(['(()))',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '())('])); // No\nconsole.log(match_parens(['(()))',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '())('])); // No\nconsole.log(match_parens(['(()))',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '())('])); // No\nconsole.log(match_parens(['(()))',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '())(", "  let str = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ===\
    \ '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count <\
    \ 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(()', '()('])); // No\nconsole.log(match_parens(['(()',\
    \ '))('])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()',", "  let [s1, s2] = lst;\n\
    \  let s = s1 + s2;\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === \"(\") {\n      stack.push(s[i]);\n    } else {\n      if (stack.length\
    \ === 0) {\n        return \"No\";\n      }\n      stack.pop();\n    }\n  }\n\
    \  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(())\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()(()\", \"()()\"]), \"\
    Yes\");\nconsole.log(match_parens([\"()(()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"()(()\", \"()))\"\
    ]), \"No\");\nconsole.log(match_parens([\"()(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()(()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()(()\", \"()()\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"()(()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"()(()\", \"()))\"\
    ]), \"No\");\nconsole.log(match_parens([\"()(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()(()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()(()\", \"()()\"]),\
    \ \"Yes\");", "  let s1 = lst[0];\n  let s2 = lst[1];\n  let s1_parens = 0;\n\
    \  let s2_parens = 0;\n  for (let i = 0; i < s1.length; i++) {\n    if (s1[i]\
    \ === \"(\") {\n      s1_parens++;\n    } else {\n      s1_parens--;\n    }\n\
    \  }\n  for (let i = 0; i < s2.length; i++) {\n    if (s2[i] === \"(\") {\n  \
    \    s2_parens++;\n    } else {\n      s2_parens--;\n    }\n  }\n  if (s1_parens\
    \ === 0 && s2_parens === 0) {\n    return \"Yes\";\n  } else if (s1_parens ===\
    \ s2_parens) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\n\
    console.log(match_parens([\"(())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (())\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    (()\", \"))(\"]), \"No\");\nconsole.log(match_parens([\"(()\", \"))()\"]), \"\
    Yes\");\nconsole.log(match_parens([\"(()\", \")))(\"]), \"No\");\nconsole.log(match_parens([\"\
    (()\", \"))()(\"]), \"No\");\nconsole.log(match_parens([\"(()\", \"))()()\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"(()\", \"))()()(\"]), \"No\");\nconsole.log(match_parens([\"\
    (()\", \"))()()))\"]), \"No\");\nconsole.log(match_parens([\"(()\", \"))()()))(\"\
    ]), \"No\");\nconsole.log(match_parens(", "  let str = lst.join('');\n  let open\
    \ = 0;\n  let close = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]\
    \ === '(') {\n      open++;\n    } else {\n      close++;\n    }\n    if (close\
    \ > open) {\n      return 'No';\n    }\n  }\n  return open === close ? 'Yes' :\
    \ 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '))'])); // No\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ ')()'])); // No\nconsole.log(match_parens(['(())', ')('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '((()'])); // No\nconsole.log(match_parens(['(())',\
    \ '))()'])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()()()()'])); // Yes\nconsole.log(match_parens(['(())', '()()()()()'])); //\
    \ Yes\nconsole.log(match_parens(['(())', '()()()()()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()()()()()()()'])); // Yes\nconsole.log(match_parens(['(())', '()()()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '()()()()()()()()()'])); // Yes\n\
    console.", "  let s = lst.join('');\n  let cnt = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === '(') {\n      cnt++;\n    } else {\n      cnt--;\n\
    \    }\n    if (cnt < 0) {\n      return 'No';\n    }\n  }\n  return cnt === 0\
    \ ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())', '()()']));\nconsole.log(2,\
    \ match_parens(['(())', '))()']));\nconsole.log(3, match_parens(['(())', '()))']));\n\
    console.log(4, match_parens(['(())', ')))(']));\nconsole.log(5, match_parens(['(())',\
    \ ')()(']));\nconsole.log(6, match_parens(['(())', ')))(']));\n", "  let s = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1,\
    \ match_parens(['(())', '()']));", "  let s = \"\";\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    s += lst[i];\n  }\n  let count = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === \"(\") {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return \"No\";\n    }\n  }\n  if (count ===\
    \ 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //No\n\
    console.log(match_parens([\"(())\", \"()))\"])); //No\nconsole.log(match_parens([\"\

  "  let s = lst.join('');\n  let c = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      c++;\n    } else {\n      c--;\n    }\n    if\
    \ (c < 0) {\n      return 'No';\n    }\n  }\n  return c === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(1, match_parens(['(())', '()()']));\nconsole.log(2, match_parens(['(())',\
    \ '))()']));\nconsole.log(3, match_parens(['(())', ')()(']));\nconsole.log(4,\
    \ match_parens(['(())', '())(']));\nconsole.log(5, match_parens(['(())', '()()']));\n\
    console.log(6, match_parens(['(())', '()()']));\n", "  let s = lst.join('');\n\
    \  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      stack.push(s[i]);\n    } else {\n      if (stack.length === 0) {\n\
    \        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length\
    \ === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())', '()']));\n\
    console.log(2, match_parens(['(())', '))']));\nconsole.log(3, match_parens(['(())',\
    \ '()(']));\nconsole.log(4, match_parens(['(())', '())(']));\nconsole.log(5, match_parens(['(())',\
    \ '())((']));\nconsole.log(6, match_parens(['(())', '())(()']));\n", "    let\
    \ left = 0;\n    let right = 0;\n    for (let i = 0; i < lst[0].length; i++) {\n\
    \        if (lst[0][i] === '(') {\n            left++;\n        } else {\n   \
    \         right++;\n        }\n    }\n    for (let i = 0; i < lst[1].length; i++)\
    \ {\n        if (lst[1][i] === '(') {\n            left++;\n        } else {\n\
    \            right++;\n        }\n    }\n    if (left === right) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()']));\nconsole.log(match_parens(['(()', '))']));\nconsole.log(match_parens(['((',\
    \ '))']));\n", "  let s = lst.join('');\n  let cnt = 0;\n  for (let i = 0; i <\
    \ s.length; i++) {\n    if (s[i] === '(') {\n      cnt++;\n    } else {\n    \
    \  cnt--;\n    }\n    if (cnt < 0) {\n      return 'No';\n    }\n  }\n  return\
    \ cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '())'])); // Yes\nconsole.log(match_parens(['(()', '()('])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '))()'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_paren",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '())('])); // No\nconsole.log(match_parens(['(()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(()', '()('])); // No\nconsole.log(match_parens(['(()',\
    \ '())('])); // No\nconsole.log(match_parens(['(()', '()()'])); // Yes\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '())('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '())('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '())('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '())('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '())('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match", "  let str = lst.join('');\n  let open\
    \ = 0;\n  let close = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]\
    \ === '(') {\n      open++;\n    } else {\n      close++;\n    }\n    if (close\
    \ > open) {\n      return 'No';\n    }\n  }\n  return open === close ? 'Yes' :\
    \ 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); //Yes\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()()'])); //Yes\nconsole.log(match_parens(['(()',\
    \ '())'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()))'])); //No\nconsole.log(match", "  let s = lst.join('');\n  let count =\
    \ 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      count++;\n\
    \    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '())))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()()()))'])); // No\nconsole.log(match_parens(['(()))', '()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(()))', '()()()()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()()()))']));\
    \ // No\nconsole.log(match_parens(['(()))', '()()", "  let s = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()(()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()(())'])); // Yes\nconsole.log(match_parens(['(()))', '()(()))'])); // No\n\
    console.log(match_parens(['(()))', '()(()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()(()())'])); // Yes\nconsole.log(match_parens(['(()))', '()(()()))'])); //\
    \ No\nconsole.log(match_parens(['(()))', '()(()()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()(()()())'])); // Yes\nconsole.log(match_parens(['(()))', '()(()()()))']));\
    \ // No\nconsole.log(match_parens(['(()))', '()(()()()", "  let str = lst.join('');\n\
    \  let open = 0;\n  let close = 0;\n  for (let i = 0; i < str.length; i++) {\n\
    \    if (str[i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n\
    \    if (close > open) {\n      return 'No';\n    }\n  }\n  return open === close\
    \ ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['()', '('])); // No\nconsole.log(match_parens(['()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '())'])); // Yes\nconsole.log(match_parens(['(()', '()('])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(()', '())('])); // No\nconsole.log(match_parens(['(()',\
    \ '()()('])); // No\nconsole.log(match_parens(['(()', '()()()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()()()('])); // No\nconsole.log(match_parens(['(()', '()()()()'])); // Yes\n\
    console.log(match_parens(['(()', '()()()()('])); // No\nconsole.log(match_parens(['(()',\
    \ '()()()()()'])); // Yes\nconsole.log(match_parens(['(()', '()()()()()(']));\
    \ // No\nconsole.log(match_parens(['(()', '()()()()()()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()()()()()()", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_open\
    \ = 0;\n  let str2_open = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if\
    \ (str1[i] === \"(\") {\n      str1_open++;\n    } else {\n      str1_open--;\n\
    \    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"\
    (\") {\n      str2_open++;\n    } else {\n      str2_open--;\n    }\n  }\n  if\
    \ (str1_open === 0 && str2_open === 0) {\n    return \"Yes\";\n  } else if (str1_open\
    \ === str2_open) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n\
    }\n\nconsole.log(match_parens([\"(())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (())\", \"()))\"])); // No\nconsole.log(match_parens([\"((()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"((()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ((()\", \"())\"])); // No\nconsole.log(match_parens([\"()\", \"()()\"])); // Yes\n\
    console.log(match_parens([\"()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ()\", \"((()\"])); // No\nconsole.log(match_parens([\"()\", \"()()\"])); // Yes\n\
    console.log(match_parens([\"()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ()\", \"((()\"])); // No\nconsole.log(match_parens([\"()\", \"()()\"])); // Yes\n\
    console.log(match_parens([\"()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ()\", \"((()\"])); // No\nconsole.log(", "  let str = lst.join('');\n  let count\
    \ = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n\
    \      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n \
    \     return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '())('])); // No\nconsole.log(match_parens(['()',\
    \ ')('])); // No\nconsole.log(match_parens(['()', ')(()'])); // No\nconsole.log(match_parens(['()',\
    \ '())(()'])); // No\nconsole.log(match_parens(['()', '()())(()'])); // No\nconsole.log(match_parens(['()',\
    \ '()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "  let left = 0;\n  let right = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n\
    \    if (lst[0][i] === \"(\") {\n      left++;\n    } else {\n      right++;\n\
    \    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] ===\
    \ \"(\") {\n      left++;\n    } else {\n      right++;\n    }\n  }\n  if (left\
    \ === right) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\n\
    console.log(match_parens([\"(())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()\", \"()(\"])); //No\nconsole.log(match_parens([\"(()))\", \"()()\"])); //No\n\
    console.log(match_parens
  "  let s = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n      if\
    \ (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '())'])); // Yes\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.",
  "    let s1 = lst[0];\n    let s2 = lst[1];\n    let s1_open = 0;\n    let s2_open\
    \ = 0;\n    let s1_close = 0;\n    let s2_close = 0;\n    for (let i = 0; i <\
    \ s1.length; i++) {\n        if (s1[i] === '(') {\n            s1_open++;\n  \
    \      } else {\n            s1_close++;\n        }\n    }\n    for (let i = 0;\
    \ i < s2.length; i++) {\n        if (s2[i] === '(') {\n            s2_open++;\n\
    \        } else {\n            s2_close++;\n        }\n    }\n    if (s1_open\
    \ + s2_open === s1_close + s2_close) {\n        return 'Yes';\n    } else {\n\
    \        return 'No';\n    }\n}\n\nconsole.log(match_parens(['(())', '()()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['()()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['((()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['((()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['((()', '()()'])); // Yes\nconsole.log(match_parens(['((()',\
    \ '()))'])); // No\nconsole.log(match_parens(['((()))', '()()'])); // Yes\nconsole.log(match_parens(['((()))',\
    \ '()))']));", "  let s = lst.join('');\n  let count = 0;\n  for (let i = 0; i\
    \ < s.length; i++) {\n    if (s[i] === '(') {\n      count++;\n    } else {\n\
    \      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n\
    \  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()'])); // Yes\n\
    console.log(match_parens(['(()))', '()()()()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()'])); // No\nconsole.log(match_parens(['(()))', '()()()()()()()']));\
    \ // No\nconsole.log(match_parens(['(()))', '()()()()()()()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()()()()'])); // No\nconsole.log(match_parens(['(()))', '()()()()()()()()()()']));\
    \ // No\nconsole.log(match_parens(['(()))', '()()()()()()()()()()()'])); // No\n\
    console.log(match_parens(['(()))', '()()()()()()()()()()()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()()()()()()()()'])); //", "  let s = lst.join('');\n  let count\
    \ = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n    \
    \  count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n     \
    \ return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['())', '()'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['(())(())', '()'])); // 'Yes'\n\
    console.log(match_parens(['(())(())', '()('])); // 'No'\nconsole.log(match_parens(['(())(())',\
    \ '())('])); // 'No'\nconsole.log(match_parens(['(())(())', '())(('])); // 'No'\n\
    console.log(match_parens(['(())(())', '())(()'])); // 'No'\nconsole.log(match_parens(['(())(())',\
    \ '())(())'])); // 'Yes'\nconsole.log(match_parens(['(())(())', '())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(())(())', '())(())(('])); // 'No'\nconsole.log(match_parens(['(())(())',\
    \ '())(())(()'])); // 'No'\nconsole.log(match_parens(['(())(())', '())(())(())']));\
    \ // 'Yes'\nconsole.log(match_parens(['(())(())', '())(())(())('])); // 'No'\n\
    console.log(match_parens(['(())(())', '())(())(())(('])); // 'No'\nconsole.log(match_parens",
  "  let s = lst.join('');\n  let count = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      count++;\n    } else {\n      count--;\n \
    \   }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // No\nconsole.log(match_parens(['(())', '())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(()'])); // No\nconsole.log(match_parens(['(())', '())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())(())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(()", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str3 = str1 + str2;\n\
    \  let str4 = str2 + str1;\n  let count1 = 0;\n  let count2 = 0;\n  let count3\
    \ = 0;\n  let count4 = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i]\
    \ === \"(\") {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n \
    \ for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n    \
    \  count2++;\n    } else {\n      count2--;\n    }\n  }\n  for (let i = 0; i <\
    \ str3.length; i++) {\n    if (str3[i] === \"(\") {\n      count3++;\n    } else\
    \ {\n      count3--;\n    }\n  }\n  for (let i = 0; i < str4.length; i++) {\n\
    \    if (str4[i] === \"(\") {\n      count4++;\n    } else {\n      count4--;\n\
    \    }\n  }\n  if (count1 === 0 && count2 === 0) {\n    return \"Yes\";\n  } else\
    \ if (count3 === 0 && count4 === 0) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"(())\", \"))()\"])); //No\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"()))\"])); //No\n\
    console.log(match_parens([\"()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()\", \"()))\"])); //No\nconsole.log(match_parens([\"()\", \"())\"])); //No\n\
    console.log(match_parens([\"()\", \"", "  let left = 0;\n  let right = 0;\n  for\
    \ (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === \"(\") {\n    \
    \  left++;\n    } else {\n      right++;\n    }\n  }\n  for (let i = 0; i < lst[1].length;\
    \ i++) {\n    if (lst[1][i] === \"(\") {\n      left++;\n    } else {\n      right++;\n\
    \    }\n  }\n  if (left === right) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\nconsole.log(match_parens([\"(())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //No\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\n\
    console.log(match_parens([\"(())\", \"()()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()\", \"()()()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"()()()()\"]));\
    \ //No\nconsole.log(match_parens([\"(()))\", \"()()()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()\"])); //No\nconsole.log(match_parens([\"(()))\", \"()()()()()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()()()()()()\"])); //No\n\
    console.log(match_parens([\"(()))\", \"()()()()()()()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()()()()()\"])); //No\nconsole.log(match_parens([\"(()))\"\
    , \"()()()()()()()()()()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"\
    ()()()()()()()()()()()\"])); //No\nconsole.log(match_", "    let s1 = lst[0];\n\
    \    let s2 = lst[1];\n    let s3 = s1 + s2;\n    let s4 = s2 + s1;\n    let s5\
    \ = s3.split(\"\");\n    let s6 = s4.split(\"\");\n    let stack = [];\n    let\
    \ stack2 = [];\n    let stack3 = [];\n    let stack4 = [];\n    for (let i = 0;\
    \ i < s5.length; i++) {\n        if (s5[i] === \"(\") {\n            stack.push(s5[i]);\n\
    \        } else {\n            if (stack.length > 0) {\n                stack.pop();\n\
    \            } else {\n                stack3.push(s5[i]);\n            }\n  \
    \      }\n    }\n    for (let i = 0; i < s6.length; i++) {\n        if (s6[i]\
    \ === \"(\") {\n            stack2.push(s6[i]);\n        } else {\n          \
    \  if (stack2.length > 0) {\n                stack2.pop();\n            } else\
    \ {\n                stack4.push(s6[i]);\n            }\n        }\n    }\n  \
    \  if (stack.length === 0 && stack3.length === 0) {\n        return \"Yes\";\n\
    \    } else if (stack2.length === 0 && stack4.length === 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"]));\nconsole.log(match_parens([\"()()\", \"()()\"]));\nconsole.log(match_parens([\"\
    ()()\", \"()\"]));\nconsole.log(match_parens([\"()\", \"()()\"]));\nconsole.log(match_parens([\"\
    (())\", \"()\"]));\nconsole.log(match_parens([\"()\", \"()\"]));\nconsole.log(match_parens([\"\
    (()\", \"()\"]));\nconsole.log(match_parens([\"(()\", \"())\"]));\nconsole.log(match_parens([\"\
    (()\", \"()(\"", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_open\
    \ = 0;\n  let str2_open = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if\
    \ (str1[i] === \"(\") {\n      str1_open++;\n    } else {\n      str1_open--;\n\
    \    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"\
    (\") {\n      str2_open++;\n    } else {\n      str2_open--;\n    }\n  }\n  if\
    \ (str1_open === 0 && str2_open === 0) {\n    return \"Yes\";\n  } else if (str1_open\
    \ > 0 && str2_open < 0) {\n    if (str1_open === -str2_open) {\n      return \"\
    Yes\";\n    }\n  } else if (str1_open < 0 && str2_open > 0) {\n    if (str2_open\
    \ === -str1_open) {\n      return \"Yes\";\n    }\n  }\n  return \"No\";\n}\n\n\
    console.log(match_parens([\"(())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (())\", \"))()\"])); // No\nconsole.log(match_parens([\"(()\", \"))()\"])); //\
    \ Yes\nconsole.log(match_parens([\"(()\", \")))(\"])); // No\nconsole.log(match_parens([\"\
    (()\", \"))\"])); // Yes\nconsole.log(match_parens([\"(()\", \")\"])); // No\n\
    console.log(match_parens([\"(()\", \"()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \"(\"])); // No\nconsole.log(match_parens([\"(()\", \")()\"])); // Yes\n\
    console.log(match_parens([\"(()\", \"()(\"])); // No\nconsole.log(match_parens([\"\
    (()\", \")(\"])); //", "  let str = lst.join('');\n  let count = 0;\n  for (let\
    \ i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n \
    \   } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['())', '()'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(('])); // No\nconsole.log(match_parens(['(())', '())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())('])); // No\n\
    console.log(match_parens(['(())', '())(())(('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(()'])); // No\nconsole.log(match_parens(['(())', '())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(('])); // No\nconsole.log(match_parens(['(())', '())(())(())(()']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(())(",
  "  let str = lst.join('');\n  let stack = [];\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else {\n\
    \      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(())', '))'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['()', '()'])); // 'Yes'\nconsole.log(match_parens(['()',\
    \ '))'])); // 'No'\nconsole.log(match_parens(['()', '()('])); // 'No'\nconsole.log(match_parens(['(',\
    \ ')'])); // 'Yes'\nconsole.log(match_parens(['(', '))'])); // 'No'\nconsole.log(match_parens(['(',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['', ''])); // 'Yes'\nconsole.log(match_parens(['',\
    \ '))'])); // 'No'\nconsole.log(match_parens(['', '()('])); // 'No'\nconsole.log(match_parens(['(()',\
    \ ')'])); // 'Yes'\nconsole.log(match_parens(['(()', '))'])); // 'No'\nconsole.log(match_parens(['(()',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['()', ''])); // 'Yes'\nconsole.log(match_parens(['()',\
    \ '))'])); // 'No'\nconsole.log(match_parens(['()', '()('])); // 'No'\nconsole.log",
  "    let s = lst[0] + lst[1];\n    let count = 0;\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (s[i] === '(') {\n            count++;\n        } else {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ 'No';\n        }\n    }\n    return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()']));\nconsole.log(match_parens(['(())', '()(']));\nconsole.log(match_parens(['()()',\
    \ '()']));\nconsole.log(match_parens(['()()', '()(']));\nconsole.log(match_parens(['()()',\
    \ ')(']));\nconsole.log(match_parens(['()()', ')((']));\nconsole.log(match_parens(['()()',\
    \ '(((']));\nconsole.log(match_parens(['()()', '))(']));\nconsole.log(match_parens(['()()',\
    \ ')))(']));\nconsole.log(match_parens(['()()', ')))((']));\nconsole.log(match_parens(['()()',\
    \ ')))(((']));\nconsole.log(match_parens(['()()', ')))((((']));\nconsole.log(match_parens(['()()',\
    \ ')))(((((']));\nconsole.log(match_parens(['()()', ')))((((((']));\nconsole.log(match_parens(['()()',\
    \ ')))(((((((']));\nconsole.log(match_parens(['()()', ')))((((((((']));\nconsole.log(match_parens(['()()',\
    \ ')))(((((((((']));\nconsole.log(match_parens(['()()', ')))((((((((((']));\n\
    console.log(match_parens(['()()', ')))(((((((((((']));\nconsole.log(match", " \
    \ let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n\
    \    if (lst[0][i] === \"(\") {\n      open++;\n    } else {\n      close++;\n\
    \    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] ===\
    \ \"(\") {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open\
    \ === close) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\
    console.log(match_parens([\"(())\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //'No'\nconsole.log(match_parens([\"(()\", \"()))\"])); //'No'\n\
    console.log(match_parens([\"(()\", \")()\"])); //'No'\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //'No'\nconsole.log(match_parens([\"(()\", \"()()\"])); //'No'\n\
    console.log(match_parens([\"(()\", \"()()\"])); //'No'\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //'No'\nconsole.log(match_parens([\"(()\", \"()()\"])); //'No'\n\
    console.log(match_parens([\"(()\", \"()()\"])); //'No'\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //'No'\nconsole.log(match_parens([\"(()\", \"()()\"])); //'No'\n\
    console.log(match_parens([\"(()\", \"()()\"])); //'No'\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //'No'\nconsole.log(match_parens([\"(()\", \"()()\"])); //'No'\n\
    console.log(match_parens([\"(", "  let s = \"\";\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    s += lst[i];\n  }\n  let count = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === \"(\") {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return \"No\";\n    }\n  }\n  if (count ===\
    \ 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \")()(\"])); // Yes\nconsole.log(match_parens([\"(())\", \"())(\"]));\
    \ // No\nconsole.log(match_parens([\"()\", \")()(\"])); // No\nconsole.log(match_parens([\"\
    ()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens(", "  let [s1, s2] = lst;\n  let s = s1 + s2;\n\
    \  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"\
    (\") {\n      stack.push(s[i]);\n    } else {\n      if (stack.length === 0) {\n\
    \        return \"No\";\n      }\n      stack.pop();\n    }\n  }\n  return stack.length\
    \ === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"\
    ]), \"Yes\");\nconsole.log(match_parens([\"()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"()()\"]), \"No\");\nconsole.log(match_parens([\"(())\", \"())(\"]), \"\
    No\");\nconsole.log(match_parens([\"()\", \"()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"())\"]), \"Yes\");\nconsole.log(match_parens([\"(()\", \"()\"]), \"No\"\
    );\nconsole.log(match_parens([\"()\", \"(\"]), \"No\");\nconsole.log(match_parens([\"\
    ()\", \")\"]), \"No\");\nconsole.log(match_parens([\"(\", \")\"]), \"No\");\n\
    console.log(match_parens([\"\", \"\"]), \"Yes\");\nconsole.log(match_parens([\"\
    \", \")\"]), \"No\");\nconsole.log(match_parens([\"\", \"(\"]), \"No\");\nconsole.log(match_parens([\"\
    (\", \"\"]), \"No\");\nconsole.log(match_parens([\"(\", \"(\"]), \"No\");\nconsole.log(match_parens([\"\
    (\", \")\"]), \"No\");\nconsole.log(match_parens([\"(()\", \"(\"]), \"No\");\n\
    console.log(match_parens([\"(()\", \")\"]), \"No\");\nconsole.log(match_parens([\"\
    (()\", \"()\"]), \"No\");\nconsole", "  let s = lst.join('');\n  let cnt = 0;\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      cnt++;\n\
    \    } else {\n      cnt--;\n    }\n    if (cnt < 0) {\n      return 'No';\n \
    \   }\n  }\n  return cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(())', '))'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['(())', ')('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()))'])); // 'No'\nconsole.log(match_parens(['(())', '())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // 'No'\nconsole.log(match_parens(['(())', '())(())'])); // 'Yes'\n\
    console.log(match_parens(['(())', '())(())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(()'])); // 'No'\nconsole.log(match_parens(['(())', '())(())(())']));\
    \ // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(())(()'])); // 'No'\nconsole.log(match_parens(['(())', '())(())(())(())']));\
    \ // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(())('])); // 'No'\n\
    console.log(match_parens(['(())', '()", "  let s = lst.join('');\n  let cnt =\
    \ 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      cnt++;\n\
    \    } else {\n      cnt--;\n    }\n    if (cnt < 0) {\n      return 'No';\n \
    \   }\n  }\n  return cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(())', '()('])); // 'No'\nconsole.log(match_parens(['()',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['()', ')('])); // 'No'\nconsole.log(match_parens(['(()',\
    \ ')()'])); // 'Yes'\nconsole.log(match_parens(['(()', '()('])); // 'No'\nconsole.log(match_parens(['(()',\
    \ '())('])); // 'No'\nconsole.log(match_parens(['(()', ')(()'])); // 'No'\nconsole.log(match_parens(['(()',\
    \ ')()('])); // 'No'\nconsole.log(match_parens(['(()', ')())('])); // 'No'\nconsole.log(match_parens(['(()',\
    \ ')(())('])); // 'No'\nconsole.log(match_parens(['(()', ')(())(()'])); // 'No'\n\
    console.log(match_parens(['(()', ')(())(())('])); // 'No'\nconsole.log(match_parens(['(()',\
    \ ')(())(())(()'])); // 'No'\nconsole.log(match_parens(['(()', ')(())(())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(()', ')(())(())(())(()'])); // 'No'\nconsole.",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_parens = 0;\n  let str2_parens\
    \ = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\")\
    \ {\n      str1_parens++;\n    } else {\n      str1_parens--;\n    }\n  }\n  for\
    \ (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      str2_parens++;\n\
    \    } else {\n      str2_parens--;\n    }\n  }\n  if (str1_parens + str2_parens\
    \ === 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"()()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"(())\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    ()\", \")\"])); //No\nconsole.log(match_parens([\"()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()\"])); //Yes\nconsole.log(match_parens([\"()()\", \"()()()\"])); //Yes\n\
    console.log(match_parens([\"()()\", \"()()()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()()()()()\"])); //Yes\nconsole.log(match_parens([\"()()\", \"()()()()()()\"\
    ])); //Yes\nconsole.log(match_parens([\"()()\", \"()()()()()()()\"])); //Yes\n\
    console.log(match_parens([\"()()\", \"()()()()()()()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()()()()()()()()()\"])); //Yes\nconsole.log(match_parens", "  let s\
    \ = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n      if (stack.length\
    \ === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return\
    \ stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()()'])); // Yes\n\
    console.log(match_parens(['(()))', '()()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()))'])); //\
    \ No\nconsole.log(match_parens(['(()))', '()()()()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()()()()))'])); // No\nconsole.log(match_parens(['(()))', '()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(()))', '()()()()()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()()'])); // Yes\nconsole.", "  let s = lst.join('');\n  let cnt\
    \ = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n    \
    \  cnt++;\n    } else {\n      cnt--;\n    }\n    if (cnt < 0) {\n      return\
    \ 'No';\n    }\n  }\n  return cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', ')('])); // No\nconsole.log(match_parens(['(()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(()', '())'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()('])); // No\nconsole.log(match_parens(['(()', '())('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', ')('])); // No\nconsole.log(match_parens(['()',\
    \ '())('])); // No\nconsole.log(match_parens(['()', '())(()'])); // No\nconsole.log(match_parens(['()',\
    \ '())(())('])); // No\nconsole.log(match_parens(['()', '())(())(()'])); // No\n\
    console.log(match_parens(['()', '())(())(())('])); // No\nconsole.log(match_parens(['()',\
    \ '())(())(())(()'])); // No\nconsole.log(match_parens(['()', '())(())(())(())']));\
    \ // No\nconsole.log(match_parens(['()', '())(())(())(())('])); //", "  let s\
    \ = lst.join('');\n  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n  \
    \  if (s[i] === '(') {\n      cnt++;\n    } else {\n      cnt--;\n    }\n    if\
    \ (cnt < 0) {\n      return 'No';\n    }\n  }\n  return cnt === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '))()'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match", "  let str1 = lst[0];\n  let str2 = lst[1];\n\
    \  let str3 = str1 + str2;\n  let str4 = str2 + str1;\n  let str5 = str1 + str1;\n\
    \  let str6 = str2 + str2;\n  let str7 = str1 + str2 + str1;\n  let str8 = str2\
    \ + str1 + str2;\n  let str9 = str1 + str2 + str2;\n  let str10 = str2 + str1\
    \ + str1;\n  let str11 = str1 + str1 + str2;\n  let str12 = str2 + str2 + str1;\n\
    \  let str13 = str1 + str1 + str1;\n  let str14 = str2 + str2 + str2;\n  let str15\
    \ = str1 + str2 + str1 + str2;\n  let str16 = str2 + str1 + str2 + str1;\n  let\
    \ str17 = str1 + str2 + str2 + str1;\n  let str18 = str2 + str1 + str1 + str2;\n\
    \  let str19 = str1 + str1 + str2 + str2;\n  let str20 = str2 + str2 + str1 +\
    \ str1;\n  let str21 = str1 + str1 + str1 + str2;\n  let str22 = str2 + str2 +\
    \ str2 + str1;\n  let str23 = str1 + str1 + str1 + str1;\n  let str24 = str2 +\
    \ str2 + str2 + str2;\n  let str25 = str1 + str2 + str1 + str2 + str1;\n  let\
    \ str26 = str2 + str1 + str2 + str1 + str2;\n  let str27 = str1 + str2 + str2\
    \ + str1 + str2;\n  let str28 = str2 + str1 + str1 + str2 + str1;\n  let str29\
    \ = str1 + str1 + str2 + str2 + str1;\n  let str30 = str2 + str2 + str1 + str1\
    \ + str2;\n  let str31 = str1 + str1 + str1 + str", "  let str1 = lst[0];\n  let\
    \ str2 = lst[1];\n  let str1_open = 0;\n  let str2_open = 0;\n  for (let i = 0;\
    \ i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n      str1_open++;\n\
    \    } else {\n      str1_open--;\n    }\n  }\n  for (let i = 0; i < str2.length;\
    \ i++) {\n    if (str2[i] === \"(\") {\n      str2_open++;\n    } else {\n   \
    \   str2_open--;\n    }\n  }\n  if (str1_open === 0 && str2_open === 0) {\n  \
    \  return \"Yes\";\n  } else if (str1_open > 0 && str2_open < 0) {\n    if (str1_open\
    \ === -str2_open) {\n      return \"Yes\";\n    }\n  } else if (str1_open < 0\
    \ && str2_open > 0) {\n    if (str2_open === -str1_open) {\n      return \"Yes\"\
    ;\n    }\n  }\n  return \"No\";\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"()))\"])); //No\n\
    console.log(match_parens([\"()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()\", \"()))\"])); //No\nconsole.log(match_parens([\"))\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"))\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    ))(\", \"()()\"])); //No\nconsole.log(match_parens([\"))(\", \"()))\"])); //No\n\
    console.log(match_parens([\"()\", \"))(\"])); //", "  let s = lst.join('');\n\
    \  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      cnt++;\n    } else {\n      cnt--;\n    }\n    if (cnt < 0) {\n   \
    \   return 'No';\n    }\n  }\n  return cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '())))'])); // No\nconsole.log(match_parens(['(()', '())))))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))))))'])); // No\nconsole.log(match_parens(['(()', '())))))))))'])); //\
    \ No\nconsole.log(match_parens(['(()', '())))))))))()'])); // No\nconsole.log(match_parens(['(()',\
    \ '())))))))))()))'])); // No\nconsole.log(match_parens(['(()', '())))))))))()))))']));\
    \ // No\nconsole.log(match_parens(['(()', '())))))))))()))))))'])); // No\nconsole.log(match_parens(['(()',\
    \ '())))))))))())))))))'])); // No\nconsole.log(match_parens(['(()', '())))))))))()))))))))']));\
    \ // No\nconsole.log(match_parens(['(()', '())))))))))()))))))))))'])); // No\n\
    console.log(match_parens(['(()', '())))))))))())))))))))))'])); // No\nconsole.log(match_paren",
  "  let [s1, s2] = lst;\n  let s = s1 + s2;\n  let stack = [];\n  for (let i = 0;\
    \ i < s.length; i++) {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n   \
    \ } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n \
    \     stack.pop();\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(1, match_parens(['(())', '()']));\nconsole.log(2, match_parens(['()',\
    \ '()']));\nconsole.log(3, match_parens(['(())', '))']));\nconsole.log(4, match_parens(['(()',\
    \ '))']));\nconsole.log(5, match_parens(['(()', '()']));\nconsole.log(6, match_parens(['(()',\
    \ '()']));\nconsole.log(7, match_parens(['(()', '()']));\nconsole.log(8, match_parens(['(()',\
    \ '()']));\nconsole.log(9, match_parens(['(()', '()']));\nconsole.log(10, match_parens(['(()',\
    \ '()']));\nconsole.log(11, match_parens(['(()', '()']));\nconsole.log(12, match_parens(['(()',\
    \ '()']));\nconsole.log(13, match_parens(['(()', '()']));\nconsole.log(14, match_parens(['(()',\
    \ '()']));\nconsole.log(15, match_parens(['(()', '()']));\nconsole.log(16, match_parens(['(()',\
    \ '()']));\nconsole.log(17, match_parens(['(()', '()']));\nconsole.log(18, match_parens(['(()',\
    \ '()']));\nconsole.log(19,", "  let s = lst.join('');\n  let cnt = 0;\n  for\
    \ (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      cnt++;\n  \
    \  } else {\n      cnt--;\n    }\n    if (cnt < 0) {\n      return 'No';\n   \
    \ }\n  }\n  return cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '())'])); // Yes\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ ')'])); // No\nconsole.log(match_parens(['(()', '('])); // No\nconsole.log(match_parens(['(()',\
    \ ''])); // Yes\nconsole.log(match_parens(['(()', '('])); // No\nconsole.log(match_parens(['',\
    \ '('])); // No\nconsole.log(match_parens(['', ''])); // Yes\nconsole.log(match_parens(['',\
    \ ')'])); // No\nconsole.log(match_parens(['', '()'])); // Yes\nconsole.log(match_parens(['',\
    \ '()'])); // Yes\nconsole.log(match_parens(['', '()))'])); // No\nconsole.log(match_parens(['',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['', '(())'])); // Yes\nconsole.log(match_parens(['',\
    \ '((()'])); // No\nconsole.log(match_parens(['', '))'])); // No\nconsole.log",
  "  let str = lst.join('');\n  let stack = [];\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else {\n\
    \      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '()()('])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()'])); // Yes\n\
    console.log(match_parens(['(()))', '()()()()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(()))', '()()()()()()()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(()))', '()()()()()()()()()()()'])); // Yes\n\
    console.log(match_parens(['(()))', '()()()()()()()()()()()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str = str1\
    \ + str2;\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if\
    \ (str[i] === \"(\") {\n      count++;\n    } else {\n      count--;\n    }\n\
    \    if (count < 0) {\n      return \"No\";\n    }\n  }\n  if (count === 0) {\n\
    \    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()\", \"()(\"])); //\
    \ No\nconsole.log(match_parens([\"()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()\", \"()))\"])); // No\nconsole.log(match_parens([\"()\", \"()()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"()\", \"()()()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()\", \"()()()()()\"])); // Yes\nconsole.log(match_parens([\"()\", \"()()()()()()\"\
    ])); // Yes\nconsole.log(match_parens([\"()\", \"()()()()()()()\"])); // Yes\n\
    console.log(match_parens([\"()\", \"()()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()\", \"()()()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"()\", \"\
    ()()()()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"()\", \"()()()()()()()()()()()\"\
    ])); // Yes\nconsole.log(match_parens([\"()\", \"()()()()()()()()()()()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"()\", \"()()()()()()()()()()()()()\"]));\
    \ // Yes\nconsole.log(", "  let [s1, s2] = lst;\n  let open = 0;\n  let close\
    \ = 0;\n  for (let i = 0; i < s1.length; i++) {\n    if (s1[i] === \"(\") {\n\
    \      open++;\n    } else {\n      close++;\n    }\n  }\n  for (let i = 0; i\
    \ < s2.length; i++) {\n    if (s2[i] === \"(\") {\n      open++;\n    } else {\n\
    \      close++;\n    }\n  }\n  if (open === close) {\n    return \"Yes\";\n  }\
    \ else {\n    return \"No\";\n  }\n}\n\nconsole.log(1, match_parens([\"(())\"\
    , \"()()\"]));\nconsole.log(2, match_parens([\"(()\", \"()(\"]));\nconsole.log(3,\
    \ match_parens([\"(()\", \"())\"]));\nconsole.log(4, match_parens([\"()\", \"\
    ()()\"]));\nconsole.log(5, match_parens([\"()()\", \"()()\"]));\nconsole.log(6,\
    \ match_parens([\"()()\", \"()\"]));\nconsole.log(7, match_parens([\"()()\", \"\
    ()()()\"]));\nconsole.log(8, match_parens([\"()()\", \"()()()()\"]));\nconsole.log(9,\
    \ match_parens([\"()()\", \"()()()()()\"]));\nconsole.log(10, match_parens([\"\
    ()()\", \"()()()()()()\"]));\nconsole.log(11, match_parens([\"()()\", \"()()()()()()()\"\
    ]));\nconsole.log(12, match_parens([\"()()\", \"()()()()()()()()\"]));\nconsole.log(13,\
    \ match_parens([\"()()\", \"()()()()()()()()()\"]));\nconsole.log(14, match_parens([\"\
    ()()\", \"()()()()()()()()()()\"]));\nconsole.log(15, match_parens([\"()()\",\
    \ \"()()()()()()", "  let str = lst.join('');\n  let count = 0;\n  for (let i\
    \ = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n   \
    \ } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',",
  "  let s1 = lst[0];\n  let s2 = lst[1];\n  let s3 = s1 + s2;\n  let s4 = s2 + s1;\n\
    \  let s5 = s3.split(\"\");\n  let s6 = s4.split(\"\");\n  let count = 0;\n  let\
    \ count2 = 0;\n  for (let i = 0; i < s5.length; i++) {\n    if (s5[i] === \"(\"\
    ) {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return \"No\";\n    }\n  }\n  for (let i = 0; i < s6.length; i++) {\n \
    \   if (s6[i] === \"(\") {\n      count2++;\n    } else {\n      count2--;\n \
    \   }\n    if (count2 < 0) {\n      return \"No\";\n    }\n  }\n  if (count ===\
    \ 0 && count2 === 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n\
    \  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    (())\", \"()))\"])); //'No'\nconsole.log(match_parens([\"(()\", \"()()\"])); //'No'\n\
    console.log(match_parens([\"(()\", \"())\"])); //'Yes'\nconsole.log(match_parens([\"\
    ()\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"()\", \"()))\"])); //'No'\n\
    console.log(match_parens([\"()\", \"())\"])); //'Yes'\nconsole.log(match_parens([\"\
    \", \"()\"])); //'Yes'\nconsole.log(match_parens([\"\", \"()))\"])); //'No'\n\
    console.log(match_parens([\"\", \"())\"])); //'Yes'\nconsole.log(match_parens([\"\
    (\", \"()\"])); //'Yes'\nconsole.log(match_parens", "  let [s1, s2] = lst;\n \
    \ let s = s1 + s2;\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === \"(\") {\n      stack.push(s[i]);\n    } else {\n      if (stack.length\
    \ === 0) {\n        return \"No\";\n      }\n      stack.pop();\n    }\n  }\n\
    \  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(())\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]), \"\
    Yes\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()()\", \"()()()\"]), \"Yes\");\nconsole.log(match_parens([\"()()()\", \"()))()\"\
    ]), \"No\");\nconsole.log(match_parens([\"()()()\", \"()))()\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()()\", \"()))()\"]), \"No\");\nconsole.log(match_parens([\"()()()\", \"()))()\"\
    ]), \"No\");\nconsole.log(match_parens([\"()()()\", \"()))()\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()()\", \"()))()\"]), \"No\");\nconsole.log(match_parens([\"()()()\", \"()))()\"\
    ]), \"No\");\nconsole.log(match_parens([\"()()()\", \"()))()\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()()\", \"()))()\"]), \"No\");\nconsole.log(match_parens([\"()()()\",", "  let\
    \ [s1, s2] = lst;\n  let s = s1 + s2;\n  let stack = [];\n  for (let i = 0; i\
    \ < s.length; i++) {\n    if (s[i] === \"(\") {\n      stack.push(s[i]);\n   \
    \ } else {\n      if (stack.length === 0) {\n        return \"No\";\n      }\n\
    \      stack.pop();\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\"\
    ;\n}\n\nconsole.log(1, match_parens([\"(())\", \"()()\"]));\nconsole.log(2, match_parens([\"\
    (()\", \"()(\"]));\nconsole.log(3, match_parens([\"(()\", \"))(\"]));\nconsole.log(4,\
    \ match_parens([\"(()\", \"()))\"]));\nconsole.log(5, match_parens([\"(()\", \"\
    )()\"]));\nconsole.log(6, match_parens([\"(()\", \"()\"]));\nconsole.log(7, match_parens([\"\
    (()\", \")\"]));\nconsole.log(8, match_parens([\"(()\", \"\"]));\nconsole.log(9,\
    \ match_parens([\"(()\", \")(\"]));\nconsole.log(10, match_parens([\"(()\", \"\
    ()(\"]));\nconsole.log(11, match_parens([\"(()\", \"()()\"]));\nconsole.log(12,\
    \ match_parens([\"(()\", \"()()(\"]));\nconsole.log(13, match_parens([\"(()\"\
    , \"()()()\"]));\nconsole.log(14, match_parens([\"(()\", \"()()()(\"]));\nconsole.log(15,\
    \ match_parens([\"(()\", \"()()()()\"]));\nconsole.log(16, match_parens([\"(()\"\
    , \"()()()()(\"]));\nconsole.log(17, match_parens([\"(()\", \"()()()()()\"]));\n\
    console.log(18, match_parens([\"(()\", \"()()()()", "  let str1 = lst[0];\n  let\
    \ str2 = lst[1];\n  let str3 = str1 + str2;\n  let str4 = str2 + str1;\n  let\
    \ count1 = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let count4 = 0;\n  for\
    \ (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n      count1++;\n\
    \    } else {\n      count1--;\n    }\n  }\n  for (let i = 0; i < str2.length;\
    \ i++) {\n    if (str2[i] === \"(\") {\n      count2++;\n    } else {\n      count2--;\n\
    \    }\n  }\n  for (let i = 0; i < str3.length; i++) {\n    if (str3[i] === \"\
    (\") {\n      count3++;\n    } else {\n      count3--;\n    }\n  }\n  for (let\
    \ i = 0; i < str4.length; i++) {\n    if (str4[i] === \"(\") {\n      count4++;\n\
    \    } else {\n      count4--;\n    }\n  }\n  if (count1 === 0 && count2 === 0)\
    \ {\n    return \"Yes\";\n  } else if (count3 === 0 && count4 === 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\n\
    console.log(match_parens([\"(()))\", \"()()\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"()()()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()()()()\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()", "  let str = lst.join('');\n  let stack = [];\n  for (let\
    \ i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n\
    \    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n\
    \      stack.pop();\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()))', '()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()))', '((()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()))'])); // Yes\nconsole.log(match_parens(['(()))', '((()))()'])); // Yes\n\
    console.log(match_parens(['(()))', '((()))()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '((()))()))()'])); // No\nconsole.log(match_parens(['(()))', '((()))()))()))']));\
    \ // No\nconsole.log(match_parens(['(()))', '((()))()))()))()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '((()))()))()))()))'])); // No\nconsole.log(match_parens(['(()))', '((()))()))()))()))()']));\
    \ // No\nconsole.log(match_parens(['(()))', '((()))()))()))()))()))'])); // No\n\
    console.log(match_parens(['(()))', '((()))()))()))()))()))()'])); //", "  let\
    \ str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length; i++)\
    \ {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())', '()()']));", " \
    \ let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n\
    \    if (lst[0][i] === \"(\") {\n      open++;\n    } else {\n      close++;\n\
    \    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] ===\
    \ \"(\") {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open\
    \ === close) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\n\
    console.log(match_parens([\"(())\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    (())\", \"()))\"])); //'No'\nconsole.log(match_parens([\"()()\", \"()()\"]));\
    \ //'Yes'\nconsole.log(match_parens([\"()()\", \"())(\"])); //'No'\nconsole.log(match_parens([\"\
    ()()\", \")()(\"])); //'No'\nconsole.log(match_parens([\"()()\", \"()\"])); //'Yes'\n\
    console.log(match_parens([\"()()\", \")()\"])); //'No'\nconsole.log(match_parens([\"\
    ()()\", \")\"])); //'No'\nconsole.log(match_parens([\"()()\", \"()()()\"])); //'Yes'\n\
    console.log(match_parens([\"()()\", \"()())(\"])); //'No'\nconsole.log(match_parens([\"\
    ()()\", \"()()()()\"])); //'Yes'\nconsole.log(match_parens([\"()()\", \"()()()())(\"\
    ])); //'No'\nconsole.log(match_parens([\"()()\", \"()()()()()\"])); //'Yes'\n\
    console.log(match_parens([\"()()\", \"()()()()())(\"])); //'No'\nconsole.log(match_parens([\"\
    ()()\", \"()()()()()()", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str3\
    \ = str1 + str2;\n  let str4 = str2 + str1;\n  let str5 = str3.split(\"\");\n\
    \  let str6 = str4.split(\"\");\n  let count1 = 0;\n  let count2 = 0;\n  let count3\
    \ = 0;\n  let count4 = 0;\n  for (let i = 0; i < str5.length; i++) {\n    if (str5[i]\
    \ === \"(\") {\n      count1++;\n    } else {\n      count1--;\n    }\n    if\
    \ (count1 < 0) {\n      return \"No\";\n    }\n  }\n  for (let i = 0; i < str6.length;\
    \ i++) {\n    if (str6[i] === \"(\") {\n      count2++;\n    } else {\n      count2--;\n\
    \    }\n    if (count2 < 0) {\n      return \"No\";\n    }\n  }\n  if (count1\
    \ === 0 && count2 === 0) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\nconsole.log(match_parens([\"(())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    (())\", \"()))\"])); //No\nconsole.log(match_parens([\"()()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"()()\", \"()((\"])); //No\nconsole.log(match_parens([\"\
    ()()\", \"())(\"])); //No\nconsole.log(match_parens([\"()()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"()()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()()", "    let s1 = lst[0];\n    let s2 = lst[1];\n    let s = s1 +\
    \ s2;\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (s[i] === '(') {\n            count++;\n        } else {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return 'No';\n        }\n  \
    \  }\n    if (count === 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(()', '()()']));\nconsole.log(match_parens(['(()',\
    \ '())']));\nconsole.log(match_parens(['(()', '()))']));\nconsole.log(match_parens(['(()',\
    \ '())(']));\nconsole.log(match_parens(['(()', '()()']));\nconsole.log(match_parens(['(()',\
    \ '()))']));\nconsole.log(match_parens(['(()', '())(']));\nconsole.log(match_parens(['(()',\
    \ '()))']));\nconsole.log(match_parens(['(()', '())(']));\nconsole.log(match_parens(['(()',\
    \ '()))']));\nconsole.log(match_parens(['(()', '())(']));\nconsole.log(match_parens(['(()',\
    \ '()))']));\nconsole.log(match_parens(['(()', '())(']));\nconsole.log(match_parens(['(()',\
    \ '()))']));\nconsole.log(match_parens(['(()', '())(']));\nconsole.log(match_parens(['(()',\
    \ '()))']));\nconsole.log(match_parens(['(", "  let str = lst.join('');\n  let\
    \ open = 0;\n  let close = 0;\n  for (let i = 0; i < str.length; i++) {\n    if\
    \ (str[i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n   \
    \ if (close > open) {\n      return 'No';\n    }\n  }\n  return open === close\
    \ ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '())']));\nconsole.log(match_parens(['(())',\
    \ '()()']));\nconsole.log(match_parens(['(())', '())(']));\nconsole.log(match_parens(['(())',\
    \ '())(()']));\n", "  let str = lst.join('');\n  let stack = [];\n  for (let i\
    \ = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n\
    \    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n\
    \      stack.pop();\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()()'])); //Yes\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()))', '()()'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()))'])); //No\nconsole.log(match_parens(['(()))', '()()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); //No\nconsole.log(match_parens(['(()))', '()()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); //No\nconsole.log(match_parens(['(()))', '()()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); //No\nconsole.log(match_parens(['(()))', '()()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); //No\nconsole.log(match_parens(['(()))', '()()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); //No\nconsole.log(match_parens(['(()))', '()()))'])); //No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); //No\nconsole.log(match_parens(['(()))', '()()))", "  let [s1,\
    \ s2] = lst;\n  let s = s1 + s2;\n  let stack = [];\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === \"(\") {\n      stack.push(s[i]);\n    } else {\n \
    \     if (stack.length === 0) {\n        return \"No\";\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(1,\
    \ match_parens([\"(())\", \"()()\"]));\nconsole.log(2, match_parens([\"(())\"\
    , \"()))\"]));\nconsole.log(3, match_parens([\"(()\", \"()))\"]));\nconsole.log(4,\
    \ match_parens([\"(()\", \"())\"]));\nconsole.log(5, match_parens([\"(()\", \"\
    ()(\"]));\nconsole.log(6, match_parens([\"(()\", \")(\"]));\nconsole.log(7, match_parens([\"\
    (()\", \")\"]));\nconsole.log(8, match_parens([\"(()\", \"\"]));\nconsole.log(9,\
    \ match_parens([\"\", \"()\"]));\nconsole.log(10, match_parens([\"\", \")\"]));\n\
    console.log(11, match_parens([\"\", \"\"]));\n", "  let str = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ===\
    \ '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count <\
    \ 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '))'])); // No\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ ')()'])); // No\nconsole.log(match_parens(['(())', ')('])); // No\nconsole.log(match_parens(['(())',\
    \ ')()('])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()()()()'])); // Yes\nconsole.log(match_parens(['(())', '()()()()()'])); //\
    \ Yes\nconsole.log(match_parens(['(())', '()()()()()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()()()()()()()'])); // Yes\nconsole.log(match_parens(['(())', '()()()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '()()()()()()()()()'])); // Yes\n\
    console.log(match_parens(['(())', '()()()()()()()()()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()()()()()()()()", "  let s = lst.join('');\n  let count = 0;\n  for (let i\
    \ = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      count++;\n    } else\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n\
    \  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())',\
    \ '()()']));\nconsole.log(2, match_parens(['(())', '()))']));\nconsole.log(3,\
    \ match_parens(['(())', '())(']));\nconsole.log(4, match_parens(['(())', '())(()']));\n\
    console.log(5, match_parens(['(())', '())(()(']));\nconsole.log(6, match_parens(['(())',\
    \ '())(())']));\nconsole.log(7, match_parens(['(())', '())(())(']));\nconsole.log(8,\
    \ match_parens(['(())', '())(())((']));\nconsole.log(9, match_parens(['(())',\
    \ '())(())(()']));\nconsole.log(10, match_parens(['(())', '())(())(())']));\n\
    console.log(11, match_parens(['(())', '())(())(())(']));\nconsole.log(12, match_parens(['(())',\
    \ '())(())(())((']));\nconsole.log(13, match_parens(['(())', '())(())(())(()']));\n\
    console.log(14, match_parens(['(())', '())(())(())(())']));\nconsole.log(15, match_parens(['(())',\
    \ '())(())(())(())(']));\nconsole.log(16, match_parens(['(())', '())(())(())(())((']));\n\
    console.log(17, match_parens(", "  let [s1, s2] = lst;\n  let s = s1 + s2;\n \
    \ let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"\
    (\") {\n      stack.push(s[i]);\n    } else {\n      if (stack.length === 0) {\n\
    \        return \"No\";\n      }\n      stack.pop();\n    }\n  }\n  return stack.length\
    \ === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"\
    ]), \"Yes\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"No\");\nconsole.log(match_parens([\"\
    ()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"()\", \"())\"]), \"No\"\
    );\nconsole.log(match_parens([\"(()\", \"())\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()))\", \"())\"]), \"No\");\nconsole.log(match_parens([\"(()))\", \"())(\"]),\
    \ \"No\");\nconsole.log(match_parens([\"(()))\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()))\", \"()()()\"]), \"Yes\");\nconsole.log(match_parens([\"(()))\", \"()()()()\"\
    ]), \"Yes\");\nconsole.log(match_parens([\"(()))\", \"()()()()()\"]), \"Yes\"\
    );\nconsole.log(match_parens([\"(()))\", \"()()()()()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()()()\"]), \"Yes\");\nconsole.log(match_parens([\"(()))\"\
    , \"()()()()()()()()\"]), \"Yes\");\nconsole.log(match_parens([\"(()))\", \"()()()()()()()()()\"\
    ]), \"Yes\");\nconsole.log(match_parens([\"(()))\", \"()()()()()()", "  let str1\
    \ = lst[0];\n  let str2 = lst[1];\n  let str1_parens = 0;\n  let str2_parens =\
    \ 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n\
    \      str1_parens++;\n    } else {\n      str1_parens--;\n    }\n  }\n  for (let\
    \ i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      str2_parens++;\n\
    \    } else {\n      str2_parens--;\n    }\n  }\n  if (str1_parens === 0 && str2_parens\
    \ === 0) {\n    return \"Yes\";\n  } else if (str1_parens > 0 && str2_parens <\
    \ 0) {\n    if (str1_parens === -str2_parens) {\n      return \"Yes\";\n    }\n\
    \  } else if (str1_parens < 0 && str2_parens > 0) {\n    if (str1_parens === -str2_parens)\
    \ {\n      return \"Yes\";\n    }\n  }\n  return \"No\";\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"()()\", \"()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ()))\", \"()()\"])); // No\nconsole.log(match_parens([\"()))\", \"((()\"])); //\
    \ No\nconsole.log(match_parens([\"((()\", \"()))\"])); // Yes\nconsole.log(match_parens([\"\
    ((()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"()()\", \"((()\"]));\
    \ // Yes\nconsole.log(match_parens([\"((()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()()\", \"()))\"])); //", "  let s1 = lst[0];\n  let s2 = lst[1];\n  let s1_open\
    \ = 0;\n  let s2_open = 0;\n  let s1_close = 0;\n  let s2_close = 0;\n  for (let\
    \ i = 0; i < s1.length; i++) {\n    if (s1[i] === \"(\") {\n      s1_open++;\n\
    \    } else {\n      s1_close++;\n    }\n  }\n  for (let i = 0; i < s2.length;\
    \ i++) {\n    if (s2[i] === \"(\") {\n      s2_open++;\n    } else {\n      s2_close++;\n\
    \    }\n  }\n  if (s1_open === s1_close && s2_open === s2_close) {\n    return\
    \ \"Yes\";\n  } else if (s1_open === s1_close && s2_open > s2_close) {\n    return\
    \ \"Yes\";\n  } else if (s1_open > s1_close && s2_open === s2_close) {\n    return\
    \ \"Yes\";\n  } else if (s1_open > s1_close && s2_open > s2_close) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(match_parens([\"\
    (())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(())\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \")()(\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()()\", \")()(\"]), \"No\");\nconsole.log(match_parens([\"()()\", \")()(\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\",", "  let s1 = lst[0];\n  let s2\
    \ = lst[1];\n  let s = s1 + s2;\n  let stack = [];\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === \"(\") {\n      stack.push(s[i]);\n    } else {\n \
    \     if (stack.length === 0) {\n        return \"No\";\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(())\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]),\
    \ \"No\");\nconsole.", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let count1\
    \ = 0;\n  let count2 = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i]\
    \ === \"(\") {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n \
    \ for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n    \
    \  count2++;\n    } else {\n      count2--;\n    }\n  }\n  if (count1 === 0 &&\
    \ count2 === 0) {\n    return \"Yes\";\n  } else if (count1 === 1 && count2 ===\
    \ -1) {\n    return \"Yes\";\n  } else if (count1 === -1 && count2 === 1) {\n\
    \    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"(()\", \"())\"])); // No\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); // No\nconsole.log(match_parens([\"(()))\", \"()()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"(()))\", \"()()()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()\"])); // No\nconsole.log(match_parens([\"(()))\", \"()()()()()()\"\
    ])); // No\nconsole.log(match_parens([\"(()))\", \"()()()()()()()\"])); // Yes\n\
    console.log(match_parens([\"(()))\", \"()()()()()()()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()()()()()\"])); // No\nconsole.log(match_parens([\"(()))",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); // Yes\n\
    console.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['",
  "  let s = lst.join('');\n  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      cnt++;\n    } else {\n      cnt--;\n    }\n  \
    \  if (cnt < 0) {\n      return 'No';\n    }\n  }\n  return cnt === 0 ? 'Yes'\
    \ : 'No';\n}\n\nconsole.log(1, match_parens(['(())', '()()']));\nconsole.log(2,\
    \ match_parens(['(())', '()(']));\nconsole.log(3, match_parens(['(())', '())(']));\n\
    console.log(4, match_parens(['(())', '())((']));\nconsole.log(5, match_parens(['(())',\
    \ '())(()']));\nconsole.log(6, match_parens(['(())', '())(()(']));\nconsole.log(7,\
    \ match_parens(['(())', '())(()()']));\nconsole.log(8, match_parens(['(())', '())(()())']));\n\
    console.log(9, match_parens(['(())', '())(()())(']));\nconsole.log(10, match_parens(['(())',\
    \ '())(()())((']));\nconsole.log(11, match_parens(['(())', '())(()())(()']));\n\
    console.log(12, match_parens(['(())', '())(()())(())']));\nconsole.log(13, match_parens(['(())',\
    \ '())(()())(())(']));\nconsole.log(14, match_parens(['(())', '())(()())(())((']));\n\
    console.log(15, match_parens(['(())', '())(()())(())(()']));\nconsole.log(16,\
    \ match_parens(['(())', '())(()())(())(())']));\nconsole.log(17, match_", "  let\
    \ s = lst.join('');\n  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      cnt++;\n    } else {\n      cnt--;\n    }\n  \
    \  if (cnt < 0) {\n      return 'No';\n    }\n  }\n  return cnt === 0 ? 'Yes'\
    \ : 'No';\n}\n\nconsole.log(match_parens(['(())', '())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '))()'])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_", "  let str = lst.join('');\n  let count\
    \ = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n\
    \      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n \
    \     return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '())))'])); // No\nconsole.log(match_parens(['(())', '()))))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))))))'])); // No\nconsole.log(match_parens(['(())', '())))))))'])); // No\n\
    console.log(match_parens(['(())', '()))))))))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))))))))))'])); // No\nconsole.log(match_parens(['(())', '())))))))))))']));\
    \ // No\nconsole.log(match_parens(['(())', '()))))))))))))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))))))))))))))'])); // No\nconsole.log(match_parens(['(())', '())))))))))))))))']));\
    \ // No\nconsole.log(match_parens(['(())', '()))))))))))))))))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))))))))", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str = str1\
    \ + str2;\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if\
    \ (str[i] === \"(\") {\n      count++;\n    } else {\n      count--;\n    }\n\
    \    if (count < 0) {\n      return \"No\";\n    }\n  }\n  if (count === 0) {\n\
    \    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\n\
    console.log(match_parens([\"(()))\", \"()()\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"()))\"])); //No\nconsole.log(match_parens([\"(()))\", \"((()\"]));\
    \ //No\nconsole.log(match_parens([\"(()))\", \"((()))\"])); //Yes\nconsole.log(match_parens([\"\
    (()))\", \"((()))()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"((()))()))\"\
    ])); //No\nconsole.log(match_parens([\"(()))\", \"((()))()))()\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"((()))()))()()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"\
    ((()))()))()()()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"((()))()))()()()()\"\
    ])); //No\nconsole.log(match_parens([\"(()))\", \"((()))()))()()()()()\"])); //No\n\
    console.log(match_parens([\"(()))\", \"((()))()))()()()()()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()))\", \"((()))()))", "  let str = lst.join('');\n  let count = 0;\n  for (let\
    \ i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n \
    \   } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(())', '))'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['(())', '()()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())('])); // 'No'\nconsole.log(match_parens(['(())', '((()))'])); // 'Yes'\n\
    console.log(match_parens(['(())', '((()))()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '((()))()()'])); // 'Yes'\nconsole.log(match_parens(['(())', '((()))()()(']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '((()))()())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '((()))()()()'])); // 'Yes'\nconsole.log(match_parens(['(())', '((()))()()())']));\
    \ // 'Yes'\nconsole.log(match_parens(['(())', '((()))()()()('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '((()))()()())('])); // 'No'\nconsole.log(match_parens(['(())', '((()))()()()()']));\
    \ // 'Yes'\nconsole.log(match_parens(['(())', '", "  let str1 = lst[0];\n  let\
    \ str2 = lst[1];\n  let str1_open = 0;\n  let str2_open = 0;\n  for (let i = 0;\
    \ i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n      str1_open++;\n\
    \    } else {\n      str1_open--;\n    }\n  }\n  for (let i = 0; i < str2.length;\
    \ i++) {\n    if (str2[i] === \"(\") {\n      str2_open++;\n    } else {\n   \
    \   str2_open--;\n    }\n  }\n  if (str1_open === 0 && str2_open === 0) {\n  \
    \  return \"Yes\";\n  } else if (str1_open > 0 && str2_open < 0) {\n    return\
    \ \"Yes\";\n  } else if (str1_open < 0 && str2_open > 0) {\n    return \"Yes\"\
    ;\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\"\
    , \"()()\"])); // Yes\nconsole.log(match_parens([\"(())\", \"))()\"])); // No\n\
    console.log(match_parens([\"()()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()()\", \"()))\"])); // No\nconsole.log(match_parens([\"()()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"()()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ()()\", \"()))\"])); // No\nconsole.log(match_parens([\"()()\", \"()))\"])); //\
    \ No\nconsole.log(match_parens([\"()()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ()()\", \"()))\"])); // No\nconsole.log(match_parens([\"()()\", \"()))\"])); //\
    \ No\nconsole.log(match_parens([\"()()\", \"()))\"])); // No\nconsole.log(match",
  "  let str = lst.join('');\n  let stack = [];\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else {\n\
    \      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', ')('])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())('])); // No\n\
    console.log(match_parens(['(())', '())(())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())('])); // No\n\
    console.log(match_parens(['(())', '())(())(())(())(())(())'])); //", "  let str\
    \ = lst.join('');\n  let stack = [];\n  for (let i = 0; i < str.length; i++) {\n\
    \    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else {\n      if\
    \ (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '())('])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()('])); // No\nconsole.log(match_parens(['(()))', '()()()'])); // Yes\n\
    console.log(match_parens(['(()))', '()()()('])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()('])); //\
    \ No\nconsole.log(match_parens(['(()))', '()()()()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()()()()('])); // No\nconsole.log(match_parens(['(()))', '()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(()))', '()()()()()()('])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()()()()(']));\
    \ // No\nconsole.log(match_parens(['(()))', '()()()()()()()()", "  let str = lst.join('');\n\
    \  let open = 0;\n  let close = 0;\n  for (let i = 0; i < str.length; i++) {\n\
    \    if (str[i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n\
    \    if (close > open) {\n      return 'No';\n    }\n  }\n  return open === close\
    \ ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // 'Yes'\n\
    console.log(match_parens(['(())', '))'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['(())', '()()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())('])); // 'No'\nconsole.log(match_parens(['(())', ')))((('])); // 'No'\n\
    console.log(match_parens
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let count1 = 0;\n  let count2 = 0;\n\
    \  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n   \
    \   count1++;\n    } else {\n      count1--;\n    }\n  }\n  for (let i = 0; i\
    \ < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      count2++;\n    }\
    \ else {\n      count2--;\n    }\n  }\n  if (count1 === 0 && count2 === 0) {\n\
    \    return \"Yes\";\n  } else if (count1 > 0 && count2 < 0) {\n    if (count1\
    \ === -count2) {\n      return \"Yes\";\n    } else {\n      return \"No\";\n\
    \    }\n  } else if (count1 < 0 && count2 > 0) {\n    if (count2 === -count1)\
    \ {\n      return \"Yes\";\n    } else {\n      return \"No\";\n    }\n  } else\
    \ {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"())\"])); //No\n\
    console.log(match_parens([\"()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()\", \"()))\"])); //No\nconsole.log(match_parens([\"()\", \"())\"])); //Yes\n\
    console.log(match_parens([\"()\", \"()()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()\", \"()()()()\"])); //Yes\nconsole.log(match_parens([\"()\", \"()()()()()\"\
    ])); //Yes\nconsole.log(match_parens([\"()\", \"()()()()()()\"]));", "  let str1\
    \ = lst[0];\n  let str2 = lst[1];\n  let count = 0;\n  for (let i = 0; i < str1.length;\
    \ i++) {\n    if (str1[i] === \"(\") {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return \"No\";\n    }\n  }\n  for (let i =\
    \ 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      count++;\n \
    \   } else {\n      count--;\n    }\n    if (count < 0) {\n      return \"No\"\
    ;\n    }\n  }\n  if (count === 0) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"(())\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    ()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"()()\", \"()))\"])); //No\n\
    console.log(match_parens([\"()()\", \"))()\"])); //No\nconsole.log(match_parens([\"\
    ()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"()()\", \")()(\"])); //No\n\
    console.log(match_parens([\"()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \")(()\"])); //No\nconsole.log(match_parens([\"()()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"()()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_count =\
    \ 0;\n  let str2_count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if\
    \ (str1[i] === \"(\") {\n      str1_count++;\n    } else {\n      str1_count--;\n\
    \    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"\
    (\") {\n      str2_count++;\n    } else {\n      str2_count--;\n    }\n  }\n \
    \ if (str1_count === 0 && str2_count === 0) {\n    return \"Yes\";\n  } else if\
    \ (str1_count === 0 && str2_count !== 0) {\n    if (str2_count > 0) {\n      if\
    \ (str2.length % 2 === 0) {\n        return \"Yes\";\n      } else {\n       \
    \ return \"No\";\n      }\n    } else {\n      if (str2.length % 2 !== 0) {\n\
    \        return \"Yes\";\n      } else {\n        return \"No\";\n      }\n  \
    \  }\n  } else if (str1_count !== 0 && str2_count === 0) {\n    if (str1_count\
    \ > 0) {\n      if (str1.length % 2 === 0) {\n        return \"Yes\";\n      }\
    \ else {\n        return \"No\";\n      }\n    } else {\n      if (str1.length\
    \ % 2 !== 0) {\n        return \"Yes\";\n      } else {\n        return \"No\"\
    ;\n      }\n    }\n  } else {\n    if (str1_count > 0 && str2_count > 0) {\n \
    \     if (str1.length % 2 === 0 && str2.length % 2 === 0) {\n        return \"\
    Yes\";\n      } else {\n        return \"No\";\n      }\n    } else if (str1_count\
    \ < 0 && str2_count < 0) {\n      if (str1.length % 2 !== 0 && str2.length %",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(()'])); //\
    \ Yes\nconsole.log(match_parens(['(())', '())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(())(()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())(())(())(())('])); // No\nconsole.log(match_",
  "  let str = lst.join('');\n  let stack = [];\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else {\n\
    \      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))'])); // No\nconsole.log(match_parens(['(()))', '()()))'])); // No\n\
    console.log(match_parens(['(()))', '()()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()))", "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i\
    \ < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n\
    \  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(())', '))'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['(())', '()()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())('])); // 'No'\nconsole.log(match_parens(['(())', '())(()'])); // 'No'\n\
    console.log(match_parens(['(())', '())(())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(('])); // 'No'\nconsole.log(match_parens(['(())', '())(())(()']));\
    \ // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())(())(())('])); // 'No'\nconsole.log(match_parens(['(())', '())(())(())((']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '())(())(())(()'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '", "  let lst1 = lst[0];\n  let\
    \ lst2 = lst[1];\n  let lst3 = lst1 + lst2;\n  let lst4 = lst2 + lst1;\n  let\
    \ count1 = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let count4 = 0;\n  for\
    \ (let i = 0; i < lst3.length; i++) {\n    if (lst3[i] === \"(\") {\n      count1++;\n\
    \    } else {\n      count1--;\n    }\n    if (count1 < 0) {\n      return \"\
    No\";\n    }\n  }\n  for (let i = 0; i < lst4.length; i++) {\n    if (lst4[i]\
    \ === \"(\") {\n      count2++;\n    } else {\n      count2--;\n    }\n    if\
    \ (count2 < 0) {\n      return \"No\";\n    }\n  }\n  if (count1 === 0) {\n  \
    \  return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(match_parens([\"\
    (())\", \"()()\"]));\nconsole.log(match_parens([\"()()\", \"()()\"]));\nconsole.log(match_parens([\"\
    (()\", \"()()\"]));\nconsole.log(match_parens([\"(())\", \"()))\"]));\nconsole.log(match_parens([\"\
    (()))\", \"()()\"]));\nconsole.log(match_parens([\"(()))\", \"()()\"]));\nconsole.log(match_parens([\"\
    (()))\", \"()()\"]));\nconsole.log(match_parens([\"(()))\", \"()()\"]));\nconsole.log(match_parens([\"\
    (()))\", \"()()\"]));\nconsole.log(match_parens([\"(()))\", \"()()\"]));\nconsole.log(match_parens([\"\
    (()))\", \"()()\"]));\nconsole.log(match_parens([\"(()))\", \"()()\"]));\nconsole.log(match_paren",
  "  let s = lst.join('');\n  let count = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      count++;\n    } else {\n      count--;\n \
    \   }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',",
  "  let s = lst.join('');\n  let count = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      count++;\n    } else {\n      count--;\n \
    \   }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '()))('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))()'])); // No\nconsole.log(match_parens(['(())', '()))(('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))()('])); // No\nconsole.log(match_parens(['(())', '()))()))'])); // No\n\
    console.log(match_parens(['(())', '()))()))('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))()))()'])); // No\nconsole.log(match_parens(['(())', '()))()))()(']));\
    \ // No\nconsole.log(match_parens(['(())', '()))()))()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))()))()))('])); // No\nconsole.log(match_parens(['(())', '()))()))()))()']));\
    \ // No\nconsole.log(match_parens(['(())', '()))()))()))()('])); // No\nconsole.log(",
  "  let s = lst.join('');\n  let c = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      c++;\n    } else {\n      c--;\n    }\n    if\
    \ (c < 0) {\n      return 'No';\n    }\n  }\n  return c === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '())'])); //Yes\nconsole.log(match_parens(['(())',\
    \ '()('])); //No\nconsole.log(match_parens(['(())', '()()'])); //Yes\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(())',\
    \ '()))'])); //No\nconsole.log(match_parens(['(())", "  let s1 = lst[0];\n  let\
    \ s2 = lst[1];\n  let s1_count = 0;\n  let s2_count = 0;\n  for (let i = 0; i\
    \ < s1.length; i++) {\n    if (s1[i] === \"(\") {\n      s1_count++;\n    } else\
    \ {\n      s1_count--;\n    }\n  }\n  for (let i = 0; i < s2.length; i++) {\n\
    \    if (s2[i] === \"(\") {\n      s2_count++;\n    } else {\n      s2_count--;\n\
    \    }\n  }\n  if (s1_count === 0 && s2_count === 0) {\n    return \"Yes\";\n\
    \  } else if (s1_count === -1 && s2_count === 1) {\n    return \"Yes\";\n  } else\
    \ if (s1_count === 1 && s2_count === -1) {\n    return \"Yes\";\n  } else {\n\
    \    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"]));\
    \ // Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"()\", \"()))\"])); // No\n\
    console.log(match_parens([\"(()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \"()))\"])); // No\nconsole.log(match_parens([\"((()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"((()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ((()\", \"()))\"])); // No\nconsole.log(match_parens([\"((()\", \"()))\"])); //\
    \ No\nconsole.log(match_parens([\"((()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    ((()\", \"()))\"])); // No\nconsole.log(match", "  let s1 = lst[0];\n  let s2\
    \ = lst[1];\n  let s1_open = 0;\n  let s2_open = 0;\n  for (let i = 0; i < s1.length;\
    \ i++) {\n    if (s1[i] === \"(\") {\n      s1_open++;\n    } else {\n      s1_open--;\n\
    \    }\n  }\n  for (let i = 0; i < s2.length; i++) {\n    if (s2[i] === \"(\"\
    ) {\n      s2_open++;\n    } else {\n      s2_open--;\n    }\n  }\n  if (s1_open\
    \ === 0 && s2_open === 0) {\n    return \"Yes\";\n  } else if (s1_open === -1\
    \ && s2_open === 1) {\n    return \"Yes\";\n  } else if (s1_open === 1 && s2_open\
    \ === -1) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(())\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"())\"]), \"No\");\nconsole.log(match_parens([\"()\", \"()()\"]), \"Yes\"\
    );\nconsole.log(match_parens([\"()\", \"())\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"()()\", \"()\"]), \"\
    Yes\");\nconsole.log(match_parens([\"()()\", \"())(\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()(\"]), \"No\");\nconsole.log(match_parens([\"()()\", \")(\"]), \"\
    No\");\nconsole.log(match_parens([\"()()\", \")()\"]), \"No", "  let s1 = lst[0];\n\
    \  let s2 = lst[1];\n  let s1_open = 0;\n  let s2_open = 0;\n  let s1_close =\
    \ 0;\n  let s2_close = 0;\n  for (let i = 0; i < s1.length; i++) {\n    if (s1[i]\
    \ === \"(\") {\n      s1_open++;\n    } else {\n      s1_close++;\n    }\n  }\n\
    \  for (let i = 0; i < s2.length; i++) {\n    if (s2[i] === \"(\") {\n      s2_open++;\n\
    \    } else {\n      s2_close++;\n    }\n  }\n  if (s1_open === s1_close && s2_open\
    \ === s2_close) {\n    return \"Yes\";\n  } else if (s1_open === s1_close && s2_open\
    \ !== s2_close) {\n    if (s2_open > s2_close) {\n      return \"Yes\";\n    }\
    \ else {\n      return \"No\";\n    }\n  } else if (s1_open !== s1_close && s2_open\
    \ === s2_close) {\n    if (s1_open > s1_close) {\n      return \"Yes\";\n    }\
    \ else {\n      return \"No\";\n    }\n  } else {\n    if (s1_open > s1_close\
    \ && s2_open > s2_close) {\n      return \"Yes\";\n    } else {\n      return\
    \ \"No\";\n    }\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"]), \"\
    Yes\");\nconsole.log(match_parens([\"(())\", \"))((\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(((\", \")))\"]), \"\
    No\");\nconsole.log(match_parens([\"(((\", \"))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()\", \"()", "  let [s1, s2] = lst;\n  let s = s1 + s2;\n  let stack = [];\n \
    \ for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"(\") {\n      stack.push(s[i]);\n\
    \    } else {\n      if (stack.length === 0) {\n        return \"No\";\n     \
    \ }\n      stack.pop();\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"\
    No\";\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (())\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()\", \"()()\"]), \"\
    Yes\");\nconsole.log(match_parens([\"()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"()()\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()()\", \"()()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()()()\", \"()()))\"]), \"No\");\nconsole.log(match_parens([\"()()()()\", \"()()()()\"\
    ]), \"Yes\");\nconsole.log(match_parens([\"()()()()\", \"()()()))\"]), \"No\"\
    );\nconsole.log(match_parens([\"()()()()()\", \"()()()()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()()()()()\", \"()()()()))\"]), \"No\");\nconsole.log(match_parens([\"()()()()()()\"\
    , \"()()()()()()\"]), \"Yes\");\nconsole.log(match_parens([\"()()()()()()\", \"\
    ()()()()()))\"]), \"No\");\nconsole.log(match_parens([\"()()()()()()()\", \"()()()()()()()\"\
    ]), \"Yes\");\nconsole.log(match_", "  let [s1, s2] = lst;\n  let s = s1 + s2;\n\
    \  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"\
    (\") {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0)\
    \ {\n      return \"No\";\n    }\n  }\n  return count === 0 ? \"Yes\" : \"No\"\
    ;\n}\n\nconsole.log(1, match_parens([\"(())\", \"()()\"]));\nconsole.log(2, match_parens([\"\
    (())\", \"()))\"]));\nconsole.log(3, match_parens([\"(()\", \"()))\"]));\n", " \
    \ let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(()',\
    \ '))'])); // No\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(()', '())('])); // No\nconsole.log(match_parens(['(()',\
    \ '())(()'])); // No\nconsole.log(match_parens(['(()', '())(())'])); // Yes\n\
    console.log(match_parens(['(()', '())(())('])); // No\nconsole.log(match_parens(['(()',\
    \ '())(())(()'])); // Yes\nconsole.log(match_parens(['(()', '())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(()', '())(())(())('])); // No\nconsole.log(match_parens(['(()',\
    \ '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(()', '())(())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(()', '())(())(())(())(())'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '())(())(())(())(())('])); // No\nconsole.log(match_parens(['(()', '())(())(",
  "  let str = lst.join('');\n  let open = 0;\n  let close = 0;\n  for (let i = 0;\
    \ i < str.length; i++) {\n    if (str[i] === '(') {\n      open++;\n    } else\
    \ {\n      close++;\n    }\n    if (close > open) {\n      return 'No';\n    }\n\
    \  }\n  return open === close ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()']));\nconsole.log(match_parens(['(())', '))()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '()))']));\nconsole.log(match_parens(['(())', '()()']));\n", "  let s1 = lst[0];\n\
    \  let s2 = lst[1];\n  let s1_open = 0;\n  let s2_open = 0;\n  for (let i = 0;\
    \ i < s1.length; i++) {\n    if (s1[i] === \"(\") {\n      s1_open++;\n    } else\
    \ {\n      s1_open--;\n    }\n  }\n  for (let i = 0; i < s2.length; i++) {\n \
    \   if (s2[i] === \"(\") {\n      s2_open++;\n    } else {\n      s2_open--;\n\
    \    }\n  }\n  if (s1_open === 0 && s2_open === 0) {\n    return \"Yes\";\n  }\
    \ else if (s1_open === 0 && s2_open < 0) {\n    return \"Yes\";\n  } else if (s1_open\
    \ < 0 && s2_open === 0) {\n    return \"Yes\";\n  } else if (s1_open < 0 && s2_open\
    \ < 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(())\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"(()))\", \"()()\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"(()))\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    (()))\", \"()()()\"]), \"Yes\");\nconsole.log(match_parens([\"(()))\", \"()()))\"\
    ]), \"No\");\nconsole.log(match_parens([\"(()))\", \"()()()()\"]), \"Yes\");\n\
    console.log(match_parens([\"(()))\", \"()()()))\"]), \"No", "  let s = lst.join('');\n\
    \  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      stack.push(s[i]);\n    } else {\n      if (stack.length === 0) {\n\
    \        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length\
    \ === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); //\
    \ Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '())'])); // Yes\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ ''])); // Yes\nconsole.log(match_parens(['', '()'])); // Yes\nconsole.log(match_parens(['',\
    \ '('])); // No\nconsole.log(match_parens(['', ')'])); // No\nconsole.log(match_parens(['',\
    \ ''])); // Yes", "  let s = lst.join('');\n  let cnt = 0;\n  for (let i = 0;\
    \ i < s.length; i++) {\n    if (s[i] === '(') {\n      cnt++;\n    } else {\n\
    \      cnt--;\n    }\n    if (cnt < 0) {\n      return 'No';\n    }\n  }\n  return\
    \ cnt === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); //\
    \ Yes\nconsole.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '))(('])); // No\nconsole.log(match_parens(['(())', ')))('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))(('])); // No\nconsole.log(match_parens(['(())', ')))((('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))(((('])); // No\nconsole.log(match_parens(['(())', ')))((((('])); // No\n\
    console.log(match_parens(['(())', ')))(((((('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))((((((('])); // No\nconsole.log(match_parens(['(())', ')))((((((((']));\
    \ // No\nconsole.log(match_parens(['(())', ')))((((((((('])); // No\nconsole.log(match_parens(['(())',\
    \ ')))(((((((((('])); // No\nconsole.log(match_parens(['(())', ')))(((((((((((']));\
    \ // No\nconsole.log(match_parens(['(())', ')))(((((((((((('])); // No\n", " \
    \ let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_open = 0;\n  let str2_open\
    \ = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\")\
    \ {\n      str1_open++;\n    } else {\n      str1_open--;\n    }\n  }\n  for (let\
    \ i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      str2_open++;\n\
    \    } else {\n      str2_open--;\n    }\n  }\n  if (str1_open === 0 && str2_open\
    \ === 0) {\n    return \"Yes\";\n  } else if (str1_open > 0 && str2_open < 0)\
    \ {\n    if (str1_open === -str2_open) {\n      return \"Yes\";\n    }\n  } else\
    \ if (str1_open < 0 && str2_open > 0) {\n    if (str2_open === -str1_open) {\n\
    \      return \"Yes\";\n    }\n  }\n  return \"No\";\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(())\", \"()))\"]));\
    \ // No\nconsole.log(match_parens([\"()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    ()\", \"()))\"])); // No\nconsole.log(match_parens([\"()()\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"()()\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    (())\", \"(())\"])); // Yes\nconsole.log(match_parens([\"(())\", \"((()\"]));\
    \ // No\nconsole.log(match_parens([\"((()\", \"(())\"])); // Yes\nconsole.log(match_parens([\"\
    ((()\", \"((()\"])); // No\nconsole.log(match_parens([\"((()\", \"()()\"]));",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_open = 0;\n  let str2_open\
    \ = 0;\n  let str1_close = 0;\n  let str2_close = 0;\n  for (let i = 0; i < str1.length;\
    \ i++) {\n    if (str1[i] === \"(\") {\n      str1_open++;\n    } else {\n   \
    \   str1_close++;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n   \
    \ if (str2[i] === \"(\") {\n      str2_open++;\n    } else {\n      str2_close++;\n\
    \    }\n  }\n  if (str1_open === str1_close && str2_open === str2_close) {\n \
    \   return \"Yes\";\n  } else if (str1_open === str1_close && str2_open !== str2_close)\
    \ {\n    return \"No\";\n  } else if (str1_open !== str1_close && str2_open ===\
    \ str2_close) {\n    return \"No\";\n  } else if (str1_open > str1_close && str2_open\
    \ < str2_close) {\n    return \"No\";\n  } else if (str1_open < str1_close &&\
    \ str2_open > str2_close) {\n    return \"No\";\n  } else {\n    return \"Yes\"\
    ;\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"\
    (())\", \"()))\"])); //'No'\nconsole.log(match_parens([\"(()\", \"()()\"])); //'Yes'\n\
    console.log(match_parens([\"(()\", \"()))\"])); //'No'\nconsole.log(match_parens([\"\
    ()\", \"()()\"])); //'Yes'\nconsole.log(match_parens([\"()\", \"()))\"])); //'No'\n\
    console.log(match_parens([\"()()\", \"()()\"]", "  let str1 = lst[0];\n  let str2\
    \ = lst[1];\n  let parens = 0;\n  for (let i = 0; i < str1.length; i++) {\n  \
    \  if (str1[i] === \"(\") {\n      parens++;\n    } else {\n      parens--;\n\
    \    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"\
    (\") {\n      parens++;\n    } else {\n      parens--;\n    }\n  }\n  return parens\
    \ === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"\
    ]), \"Yes\");\nconsole.log(match_parens([\"(())\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    (()\", \")()\"]), \"No\");\nconsole.log(match_parens([\"()\", \"()()\"]), \"Yes\"\
    );\nconsole.log(match_parens([\"()\", \")(\"]), \"No\");\nconsole.log(match_parens([\"\
    ()\", \"()\"]), \"Yes\");\nconsole.log(match_parens([\"(()\", \")()\"]), \"No\"\
    );\nconsole.log(match_parens([\"(()\", \"()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \")\"]), \"No\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"Yes\"\
    );\nconsole.log(match_parens([\"(()\", \"())(\"]), \"No\");\nconsole.log(match_parens([\"\
    (()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(()\", \"()()()\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"(()\", \"()()()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"()()()()()\"]), \"Yes\");\nconsole.log(match_parens([\"(()\", \"()()()()()()",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str3 = str1 + str2;\n  let str4\
    \ = str2 + str1;\n  let count1 = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let\
    \ count4 = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] ===\
    \ \"(\") {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for\
    \ (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      count2++;\n\
    \    } else {\n      count2--;\n    }\n  }\n  for (let i = 0; i < str3.length;\
    \ i++) {\n    if (str3[i] === \"(\") {\n      count3++;\n    } else {\n      count3--;\n\
    \    }\n  }\n  for (let i = 0; i < str4.length; i++) {\n    if (str4[i] === \"\
    (\") {\n      count4++;\n    } else {\n      count4--;\n    }\n  }\n  if (count1\
    \ === 0 && count2 === 0) {\n    return \"Yes\";\n  } else if (count3 === 0 &&\
    \ count4 === 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n\
    }\n\nconsole.log(match_parens([\"()\", \"()\"]));\nconsole.log(match_parens([\"\
    (())\", \"()()\"]));\nconsole.log(match_parens([\"(()\", \"())\"]));\nconsole.log(match_parens([\"\
    ()\", \"()()\"]));\nconsole.log(match_parens([\"()\", \"()))\"]));\nconsole.log(match_parens([\"\
    ()\", \"()))\"]));\nconsole.log(match_parens([\"()\", \"()))\"]));\nconsole.log(match_parens([\"\
    ()\", \"()))\"]));\nconsole.log(match_parens([\"()\",", "  let s1 = lst[0];\n\
    \  let s2 = lst[1];\n  let s1_open = 0;\n  let s2_open = 0;\n  for (let i = 0;\
    \ i < s1.length; i++) {\n    if (s1[i] === \"(\") {\n      s1_open++;\n    } else\
    \ {\n      s1_open--;\n    }\n  }\n  for (let i = 0; i < s2.length; i++) {\n \
    \   if (s2[i] === \"(\") {\n      s2_open++;\n    } else {\n      s2_open--;\n\
    \    }\n  }\n  if (s1_open === 0 && s2_open === 0) {\n    return \"Yes\";\n  }\
    \ else if (s1_open > 0 && s2_open < 0) {\n    return \"Yes\";\n  } else if (s1_open\
    \ < 0 && s2_open > 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n\
    \  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (())\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"()()\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()", "  let\
    \ s = lst.join('');\n  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      cnt++;\n    } else {\n      cnt--;\n    }\n  \
    \  if (cnt < 0) {\n      return 'No';\n    }\n  }\n  return cnt === 0 ? 'Yes'\
    \ : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '))'])); // No\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '())'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(", "  let s = lst.join('');\n  let\
    \ count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n\
    \      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n \
    \     return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', ')('])); // No\nconsole.log(match_parens(['(()',\
    \ ')'])); // No\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', ')('])); // No\nconsole.log(match_parens(['(()',\
    \ ')'])); // No\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['()', '()()'])); // Yes\nconsole.log(match_parens(['()',\
    \ ')('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['()', '()()'])); // Yes\nconsole.log(match_parens(['()',\
    \ ')('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(()', '()", "  let left = 0;\n \
    \ let right = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i]\
    \ === \"(\") {\n      left++;\n    } else {\n      right++;\n    }\n  }\n  for\
    \ (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === \"(\") {\n    \
    \  left++;\n    } else {\n      right++;\n    }\n  }\n  if (left === right) {\n\
    \    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // 'Yes'\nconsole.log(match_parens([\"(()\", \"()()\"]));\
    \ // 'No'\nconsole.log(match_parens([\"(())\", \"()))\"])); // 'No'\nconsole.log(match_parens([\"\
    ()\", \"()()\"])); // 'Yes'\nconsole.log(match_parens([\"()()\", \"()()\"]));\
    \ // 'Yes'\nconsole.log(match_parens([\"()()\", \"()\"])); // 'Yes'\nconsole.log(match_parens([\"\
    ()()\", \"()()()\"])); // 'Yes'\nconsole.log(match_parens([\"()()\", \"()()()()\"\
    ])); // 'Yes'\nconsole.log(match_parens([\"()()\", \"()()()()()\"])); // 'Yes'\n\
    console.log(match_parens([\"()()\", \"()()()()()()\"])); // 'Yes'\nconsole.log(match_parens([\"\
    ()()\", \"()()()()()()()\"])); // 'Yes'\nconsole.log(match_parens([\"()()\", \"\
    ()()()()()()()()\"])); // 'Yes'\nconsole.log(match_parens([\"()()\", \"()()()()()()()()()\"\
    ])); // 'Yes'\nconsole.log(match_parens([\"()()\", \"()()()()()()()()()()\"]));\
    \ // 'Yes'", "  let s1 = lst[0];\n  let s2 = lst[1];\n  let s3 = s1 + s2;\n  let\
    \ s4 = s2 + s1;\n  let s5 = s3.replace(/\\(\\)/g, \"\");\n  let s6 = s4.replace(/\\\
    (\\)/g, \"\");\n  if (s5.length === 0) {\n    return \"Yes\";\n  } else if (s6.length\
    \ === 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"(())\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"))()\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"))()\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \")()(\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"()()\", \"()))\"]),\
    \ \"No\");\nconsole.log(match_parens([\"()()\", \"))()\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \")()(\"]), \"No\");\nconsole.log(match_parens([\"()()\", \"()()\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"()()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()()\", \"))()\"]), \"No\");\nconsole.log(match_parens([\"()()\", \")()(\"]),\
    \ \"No", "  let s = lst.join('');\n  let cnt = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === '(') {\n      cnt++;\n    } else {\n      cnt--;\n\
    \    }\n    if (cnt < 0) {\n      return 'No';\n    }\n  }\n  return cnt === 0\
    \ ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())', '()()']));\nconsole.log(2,\
    \ match_parens(['(())', '))()']));\nconsole.log(3, match_parens(['(())', ')()(']));\n\
    console.log(4, match_parens(['(())', '())(']));\nconsole.log(5, match_parens(['(())',\
    \ ')()(']));\nconsole.log(6, match_parens(['(())', '()()']));\n", "  let [s1,\
    \ s2] = lst;\n  let s = s1 + s2;\n  let stack = [];\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === \"(\") {\n      stack.push(s[i]);\n    } else {\n \
    \     if (stack.length === 0) {\n        return \"No\";\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n\nconsole.log(1,\
    \ match_parens([\"(())\", \"()()\"]));\nconsole.log(2, match_parens([\"(())\"\
    , \"()))\"]));\nconsole.log(3, match_parens([\"(()))\", \"()()\"]));\nconsole.log(4,\
    \ match_parens([\"(()))\", \"()))\"]));\nconsole.log(5, match_parens([\"(()))\"\
    , \"()()\"]));\nconsole.log(6, match_parens([\"(()))\", \"()))\"]));\nconsole.log(7,\
    \ match_parens([\"(()))\", \"()))\"]));\nconsole.log(8, match_parens([\"(()))\"\
    , \"()))\"]));\nconsole.log(9, match_parens([\"(()))\", \"()))\"]));\nconsole.log(10,\
    \ match_parens([\"(()))\", \"()))\"]));\nconsole.log(11, match_parens([\"(()))\"\
    , \"()))\"]));\nconsole.log(12, match_parens([\"(()))\", \"()))\"]));\nconsole.log(13,\
    \ match_parens([\"(()))\", \"()))\"]));\nconsole.log(14, match_parens([\"(()))\"\
    , \"()))\"]));\nconsole.log(15, match_parens([\"(()))\", \"()))\"]));\nconsole.log(16,\
    \ match_parens([\"(()))\", \"()))\"]));\nconsole.log(17, match_parens([\"(()))\"\
    , \"()))\"]));\nconsole.log(18, match_parens([\"", "  let [s1, s2] = lst;\n  let\
    \ s = s1 + s2;\n  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n    if\
    \ (s[i] === \"(\") {\n      cnt++;\n    } else {\n      cnt--;\n    }\n    if\
    \ (cnt < 0) {\n      return \"No\";\n    }\n  }\n  return cnt === 0 ? \"Yes\"\
    \ : \"No\";\n}\n\nconsole.log(1, match_parens([\"(())\", \"()()\"]));\nconsole.log(2,\
    \ match_parens([\"(())\", \"))()\"]));\nconsole.log(3, match_parens([\"(()\",\
    \ \"))()\"]));\nconsole.log(4, match_parens([\"(()\", \"()()\"]));\n", "  let\
    \ s1 = lst[0];\n  let s2 = lst[1];\n  let s1_open = 0;\n  let s2_open = 0;\n \
    \ for (let i = 0; i < s1.length; i++) {\n    if (s1[i] === \"(\") {\n      s1_open++;\n\
    \    } else {\n      s1_open--;\n    }\n  }\n  for (let i = 0; i < s2.length;\
    \ i++) {\n    if (s2[i] === \"(\") {\n      s2_open++;\n    } else {\n      s2_open--;\n\
    \    }\n  }\n  if (s1_open === 0 && s2_open === 0) {\n    return \"Yes\";\n  }\
    \ else if (s1_open === s2_open) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"]), \"Yes\");\n\
    console.log(match_parens([\"(())\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"\
    ()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"()\", \"()()()\"]), \"\
    No\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"()()()\"]), \"No\");\nconsole.log(match_parens([\"()\", \"((()))\"]),\
    \ \"Yes\");\nconsole.log(match_parens([\"()\", \"((()))()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    ()\", \"((()))()()\"]), \"No\");\nconsole.log(match_parens([\"(()())\", \"()()()\"\
    ]), \"Yes\");\nconsole.log(match_parens([\"(()())\", \"()()()()\"]), \"No\");\n\
    console.log(match_parens([\"(()())\", \"()()()()()\"]), \"No\");\nconsole.log(match_parens([\"\
    (()", "  let s1 = lst[0];\n  let s2 = lst[1];\n  let s1_open = s1.split(\"\").filter(x\
    \ => x === \"(\").length;\n  let s1_close = s1.split(\"\").filter(x => x === \"\
    )\").length;\n  let s2_open = s2.split(\"\").filter(x => x === \"(\").length;\n\
    \  let s2_close = s2.split(\"\").filter(x => x === \")\").length;\n  if (s1_open\
    \ === s1_close && s2_open === s2_close) {\n    return \"Yes\";\n  } else if (s1_open\
    \ === s2_close && s2_open === s1_close) {\n    return \"Yes\";\n  } else {\n \
    \   return \"No\";\n  }\n}\nconsole.log(match_parens([\"(())\", \"()()\"]), \"\
    Yes\");\nconsole.log(match_parens([\"(())\", \"))()\"]), \"No\");\nconsole.log(match_parens([\"\
    (()\", \"))()\"]), \"No\");\nconsole.log(match_parens([\"(()\", \")()\"]), \"\
    Yes\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"(()\", \")()(\"]), \"\
    No\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"(()\", \")()(\"]), \"\
    No\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"Yes\");\nconsole.log(match_parens([\"\
    (()\", \"()))\"]), \"No\");\nconsole.log(match_parens([\"(()\", \")()(\"]), \"\
    No\");\nconsole.log(match_parens([\"(()\", \"()()\"]), \"Yes\");\nconsole", " \
    \   let l1 = lst[0];\n    let l2 = lst[1];\n    let l1_count = 0;\n    let l2_count\
    \ = 0;\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] === '(')\
    \ {\n            l1_count++;\n        } else {\n            l1_count--;\n    \
    \    }\n    }\n    for (let i = 0; i < l2.length; i++) {\n        if (l2[i] ===\
    \ '(') {\n            l2_count++;\n        } else {\n            l2_count--;\n\
    \        }\n    }\n    if (l1_count === 0 && l2_count === 0) {\n        return\
    \ 'Yes';\n    } else if (l1_count === l2_count) {\n        return 'Yes';\n   \
    \ } else {\n        return 'No';\n    }\n}\n\nconsole.log(match_parens(['()',\
    \ '()']));\nconsole.log(match_parens(['(())', '()()']));\nconsole.log(match_parens(['(())',\
    \ '())(']));\nconsole.log(match_parens(['(()', '()']));\nconsole.log(match_parens(['()',\
    \ ')(']));\nconsole.log(match_parens(['(()', ')(']));\nconsole.log(match_parens(['(()',\
    \ ')()']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(['(()',\
    \ '())(']));\nconsole.log(match_parens(['(()', ')(()']));\nconsole.log(match_parens(['(()',\
    \ '()))']));\nconsole.log(match_parens(['(()', '()()']));\nconsole.log(match_parens(['(()',\
    \ '())(']));\nconsole.log(match_parens(['(()', '()()']));\nconsole.log(match_parens(['(()',",
  "  let s = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n      if\
    \ (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1,\
    \ match_parens(['(())', '()()']));\nconsole.log(2, match_parens(['(())', ')()(']));\n\
    console.log(3, match_parens(['(())', '()))']));\nconsole.log(4, match_parens(['(())',\
    \ '()))']));\nconsole.log(5, match_parens(['(())', '()))']));\nconsole.log(6,\
    \ match_parens(['(())', '()))']));\nconsole.log(7, match_parens(['(())', '()))']));\n\
    console.log(8, match_parens(['(())', '()))']));\nconsole.log(9, match_parens(['(())',\
    \ '()))']));\nconsole.log(10, match_parens(['(())', '()))']));\nconsole.log(11,\
    \ match_parens(['(())', '()))']));\nconsole.log(12, match_parens(['(())', '()))']));\n\
    console.log(13, match_parens(['(())', '()))']));\nconsole.log(14, match_parens(['(())',\
    \ '()))']));\nconsole.log(15, match_parens(['(())', '()))']));\nconsole.log(16,\
    \ match_parens(['(())', '()))']));\nconsole.log(17, match_parens(['(())', '()))']));\n\
    console.log(18, match_parens(['(())', '()))']));\n", "  let str1 = lst[0];\n \
    \ let str2 = lst[1];\n  let str1_open = 0;\n  let str2_open = 0;\n  for (let i\
    \ = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n      str1_open++;\n\
    \    } else {\n      str1_open--;\n    }\n  }\n  for (let i = 0; i < str2.length;\
    \ i++) {\n    if (str2[i] === \"(\") {\n      str2_open++;\n    } else {\n   \
    \   str2_open--;\n    }\n  }\n  if (str1_open === 0 && str2_open === 0) {\n  \
    \  return \"Yes\";\n  } else if (str1_open === str2_open) {\n    return \"Yes\"\
    ;\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(match_parens([\"(())\"\
    , \"()()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"()(\"])); //No\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()\"])); //No\n\
    console.log(match_parens([\"(()))\", \"()()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()()()\"])); //No\nconsole.log(match_parens([\"(()))\", \"()()()()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()()()()()\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()()()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"\
    ()()()()()()()()\"])); //No\nconsole.log(match_parens([\"(()))\", \"()()()()()()()()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()()()()()()", "  let str\
    \ = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n\
    \    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n   \
    \ }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); //Yes\n\
    console.log(match_parens(['(())', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ '()()'])); //Yes\nconsole.log(match_parens(['(()', '()))'])); //No\nconsole.log(match_parens(['(()',\
    \ ')()'])); //No\nconsole.log(match_parens(['(()', '()'])); //Yes\nconsole.log(match_parens(['(()',\
    \ ')'])); //No\nconsole.log(match_parens(['(()', ''])); //Yes\nconsole.log(match_parens(['(()',\
    \ '('])); //No\nconsole.log(match_parens(['(()', ')'])); //No\nconsole.log(match_parens(['()',\
    \ '()'])); //Yes\nconsole.log(match_parens(['()', ')'])); //No\nconsole.log(match_parens(['()',\
    \ ''])); //Yes\nconsole.log(match_parens(['()', '('])); //No\nconsole.log(match_parens(['()',\
    \ ')'])); //No\nconsole.log(match_parens(['', '()'])); //Yes\nconsole.log(match_parens(['',\
    \ ')'])); //No\nconsole.log(match_parens(['', ''])); //Yes\nconsole.log(match_parens(['',\
    \ '('])); //No\nconsole.log(match_parens(['', ')'])); //No\nconsole.log(match_parens(['(",
  "  let s = lst.join('');\n  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      cnt++;\n    } else {\n      cnt--;\n    }\n  \
    \  if (cnt < 0) {\n      return 'No';\n    }\n  }\n  return cnt === 0 ? 'Yes'\
    \ : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()()'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '())'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()('])); // No\nconsole.log(match_parens(['(()', '()()'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '())'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()('])); // No\nconsole.log(match_parens(['(()', '()()'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '())'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()('])); // No\nconsole.log(match_parens(['(()', '()()'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '())'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()('])); // No\nconsole.log(match_parens(['(()',", "  let str = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ===\
    \ '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count <\
    \ 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n\
    }\n\nconsole.log(match_parens(['(())', '()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['()', '()'])); // Yes\nconsole.log(match_parens(['()',\
    \ ')('])); // No\nconsole.log(match_parens(['(()', ')'])); // No\nconsole.log(match_parens(['(()',\
    \ ')('])); // No\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()('])); // No\nconsole.log(match_parens(['(()', '()(()'])); // No\nconsole.log(match_parens(['(()',\
    \ '()(()('])); // No\nconsole.log(match_parens(['(()', '()(()()'])); // Yes\n\
    console.log(match_parens(['(()', '()(()()('])); // No\nconsole.log(match_parens(['(()',\
    \ '()(()()()'])); // Yes\nconsole.log(match_parens(['(()', '()(()()()('])); //\
    \ No\nconsole.log(match_parens(['(()', '()(()()()()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '()(()()()()('])); // No\nconsole.log(match_parens(['(()', '()(()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(()', '()(()()", "  let str = lst.join('');\n\
    \  let stack = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ===\
    \ '(') {\n      stack.push(str[i]);\n    } else {\n      if (stack.length ===\
    \ 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return\
    \ stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '))()'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.",
  "    let open = 0;\n    let close = 0;\n    for (let i = 0; i < lst[0].length; i++)\
    \ {\n        if (lst[0][i] === '(') {\n            open++;\n        } else {\n\
    \            close++;\n        }\n    }\n    for (let i = 0; i < lst[1].length;\
    \ i++) {\n        if (lst[1][i] === '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    if (open === close) {\n     \
    \   return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(['(()',\
    \ '))(']));\nconsole.log(match_parens(['(()', ')()']));\nconsole.log(match_parens(['(()',\
    \ '()(']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(['(()',\
    \ '()(']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(['(()',\
    \ '()(']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(['(()',\
    \ '()(']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(['(()',\
    \ '()(']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(['(()',\
    \ '()(']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(['(()',\
    \ '()(']));\nconsole.log(match_parens(['(()', '()(']));\nconsole.log(match_parens(",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_open = 0;\n  let str2_open\
    \ = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\")\
    \ {\n      str1_open++;\n    } else {\n      str1_open--;\n    }\n  }\n  for (let\
    \ i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      str2_open++;\n\
    \    } else {\n      str2_open--;\n    }\n  }\n  if (str1_open === 0 && str2_open\
    \ === 0) {\n    return \"Yes\";\n  } else if (str1_open > 0 && str2_open < 0)\
    \ {\n    if (str1_open === Math.abs(str2_open)) {\n      return \"Yes\";\n   \
    \ }\n  } else if (str1_open < 0 && str2_open > 0) {\n    if (str2_open === Math.abs(str1_open))\
    \ {\n      return \"Yes\";\n    }\n  }\n  return \"No\";\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\n\
    console.log(match_parens([\"()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()))\"])); //No\nconsole.log(match_parens([\"(()\", \"))\"])); //No\n\
    console.log(match_parens([\"(()\", \"()))\"])); //Yes\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"())\"])); //Yes\n\
    console.log(match_parens([\"()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()\", \"()))\"])); //No\nconsole.log(match_parens([\"()\",", "  let s = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', ')('])); // No\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())('])); // No\n\
    console.log(match_parens(['(())', '())(())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())('])", "  let\
    \ s = lst.join('');\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n\
    \    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ?\
    \ 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '()()'])); // No\nconsole.log(match_parens(['(()))',\
    \ '())('])); // No\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '())(('])); // No\nconsole.log(match_parens(['(()))', '())((('])); // No\nconsole.log(match_parens(['(()))',\
    \ '())((('])); // No\nconsole.log(match_parens(['(()))', '())((('])); // No\n\
    console.log(match_parens(['(()))', '())((('])); // No\nconsole.log(match_parens(['(()))',\
    \ '())((('])); // No\nconsole.log(match_parens(['(()))', '())((('])); // No\n\
    console.log(match_parens(['(()))', '())((('])); // No\nconsole.log(match_parens(['(()))',\
    \ '())((('])); // No\nconsole.log(match_parens(['(()))', '())((('])); // No\n\
    console.log(match_parens(['", "  let s = lst.join('');\n  let count = 0;\n  for\
    \ (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      count++;\n\
    \    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // 'Yes'\nconsole.log(match_parens(['(())', '))'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '()('])); // 'No'\nconsole.log(match_parens(['(())', '())('])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // 'No'\nconsole.log(match_parens(['(())', '())(())('])); // 'No'\n\
    console.log(match_parens(['(())', '())(())(()'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '())(())(())(()'])); // 'No'\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // 'No'\nconsole.log(match_parens(['(())', '())(())(())(())(()'])); // 'No'\n\
    console.log(match_parens(['(())', '())(())(())(())(())'])); // 'Yes'\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())(())('])); // 'No", "  let s = lst.join('');\n  let count =\
    \ 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      count++;\n\
    \    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1, match_parens(['(())',\
    \ '()()']));\nconsole.log(2, match_parens(['(())', '()))']));\nconsole.log(3,\
    \ match_parens(['(())', '))()']));\nconsole.log(4, match_parens(['(())', ')))(']));\n",
  "  let lhs = lst[0];\n  let rhs = lst[1];\n  let lhs_parens = 0;\n  let rhs_parens\
    \ = 0;\n  for (let i = 0; i < lhs.length; i++) {\n    if (lhs[i] === \"(\") {\n\
    \      lhs_parens++;\n    } else {\n      lhs_parens--;\n    }\n  }\n  for (let\
    \ i = 0; i < rhs.length; i++) {\n    if (rhs[i] === \"(\") {\n      rhs_parens++;\n\
    \    } else {\n      rhs_parens--;\n    }\n  }\n  if (lhs_parens === 0 && rhs_parens\
    \ === 0) {\n    return \"Yes\";\n  } else if (lhs_parens === rhs_parens) {\n \
    \   return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(()\", \"()()\"])); //No\n\
    console.log(match_parens([\"(()\", \")(()\"])); //No\nconsole.log(match_parens([\"\
    (()\", \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let count1 = 0;\n  let count2 = 0;\n\
    \  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n   \
    \   count1++;\n    } else {\n      count1--;\n    }\n  }\n  for (let i = 0; i\
    \ < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      count2++;\n    }\
    \ else {\n      count2--;\n    }\n  }\n  if (count1 === 0 && count2 === 0) {\n\
    \    return \"Yes\";\n  } else if (count1 < 0 && count2 > 0) {\n    return \"\
    Yes\";\n  } else if (count1 > 0 && count2 < 0) {\n    return \"Yes\";\n  } else\
    \ {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(())\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    ()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"()\", \"()))\"])); //No\n\
    console.log(match_parens([\"()()\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    ()()\", \"()))\"])); //No\nconsole.log(match_parens([\"(()())\", \"()()\"]));\
    \ //Yes\nconsole.log(match_parens([\"(()())\", \"()))\"])); //No\nconsole.log(match_parens([\"\
    (()())\", \"()()()\"])); //Yes\nconsole.log(match_parens([\"(()())\", \"()()))\"\
    ])); //No\nconsole.log(match_parens([\"(()())\", \"((()))\"])); //Yes\nconsole.log(match_parens([\"\
    (()())\", \"((())))\"])); //No\nconsole.log(match_parens([\"(()())\", \"((()))()\"\
    ]));", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str3 = str1 + str2;\n\
    \  let str4 = str2 + str1;\n  let str5 = str1 + str1;\n  let str6 = str2 + str2;\n\
    \  let str7 = str5 + str2;\n  let str8 = str6 + str1;\n  let str9 = str2 + str5;\n\
    \  let str10 = str1 + str6;\n  let str11 = str5 + str5;\n  let str12 = str6 +\
    \ str6;\n  let str13 = str7 + str2;\n  let str14 = str8 + str1;\n  let str15 =\
    \ str9 + str5;\n  let str16 = str10 + str6;\n  let str17 = str11 + str2;\n  let\
    \ str18 = str12 + str1;\n  let str19 = str13 + str5;\n  let str20 = str14 + str6;\n\
    \  let str21 = str15 + str2;\n  let str22 = str16 + str1;\n  let str23 = str17\
    \ + str5;\n  let str24 = str18 + str6;\n  let str25 = str19 + str2;\n  let str26\
    \ = str20 + str1;\n  let str27 = str21 + str5;\n  let str28 = str22 + str6;\n\
    \  let str29 = str23 + str2;\n  let str30 = str24 + str1;\n  let str31 = str25\
    \ + str5;\n  let str32 = str26 + str6;\n  let str33 = str27 + str2;\n  let str34\
    \ = str28 + str1;\n  let str35 = str29 + str5;\n  let str36 = str30 + str6;\n\
    \  let str37 = str31 + str2;\n  let str38 = str32 + str1;\n  let str39 = str33\
    \ + str5;\n  let str40 = str34 + str6;\n  let str41 = str35 + str2;\n  let str42\
    \ = str36 + str1;\n  let str43 = str37 + str", "  let s = lst.join('');\n  let\
    \ count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n\
    \      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n \
    \     return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '())'])); // No\nconsole.log(match_parens(['(()',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['()',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['()', '()'])); // Yes\nconsole.log(match_parens(['()',\
    \ '('])); // No\nconsole.log(match_parens(['(', ')'])); // Yes\nconsole.log(match_parens(['(',\
    \ '('])); // No\nconsole.log(match_parens([')', ')'])); // Yes\nconsole.log(match_parens([')',\
    \ '('])); // No\nconsole.log(match_parens(['(', '('])); // No\nconsole.log(match_parens(['(',\
    \ ')'])); // Yes\nconsole.log(match_parens(['(', ')'])); // Yes\nconsole.log(match_parens(['(',\
    \ ')'])); // Yes\nconsole.log(match_parens(['(', ')'])); // Yes\nconsole.log(match_parens(['(',\
    \ ')'])); // Yes\nconsole.log(match_parens(['(', ')'])); // Yes\nconsole.log(match_parens(['(',\
    \ ')'])); // Yes\nconsole.log(match_parens(['(', ')'])); // Yes\nconsole.log(match_parens(['(',\
    \ '", "  let s = lst.join('');\n  let count = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '()()'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(()'])); //\
    \ Yes\nconsole.log(match_parens(['(())', '())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(())(()']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())(())(())(())('])); // No\nconsole.log(match_",
  "  let s = lst.join('');\n  let count = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      count++;\n    } else {\n      count--;\n \
    \   }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // No\nconsole.log(match_parens(['(())', '())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(()'])); // No\nconsole.log(match_parens(['(())', '())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(()'])); // No\nconsole.log(match_parens(['(())', '())(())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())(()'])); // No\nconsole.log(match_parens(['(())', '())(())(())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())('])); // No\n\
    console.log(match", "  let s = lst.join('');\n  let count = 0;\n  for (let i =\
    \ 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      count++;\n    } else\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n\
    \  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // No\nconsole.log(match_parens(['(())', '())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(())(())']));\
    \ // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())('])); // No\n\
    console.log(match_parens(['(())', '())(())(())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())(())(()",
  "  let s = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n      if\
    \ (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '))'])); // No\nconsole.log(match_parens(['(())',\
    \ '()('])); // No\nconsole.log(match_parens(['(())', '())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // No\nconsole.log(match_parens(['(())', '())(())('])); // No\n\
    console.log(match_parens(['(())', '())(())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(", "  let s = lst.join('');\n\
    \  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(')\
    \ {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1,\
    \ match_parens(['(())', '()()']));\nconsole.log(2, match_parens(['(())', '()))']));\n\
    console.log(3, match_parens(['(())', '())))']));\nconsole.log(4, match_parens(['(())',\
    \ '())))(']));\nconsole.log(5, match_parens(['(())', '())))(()']));\nconsole.log(6,\
    \ match_parens(['(())', '())))(()))']));\nconsole.log(7, match_parens(['(())',\
    \ '())))(())))(']));\nconsole.log(8, match_parens(['(())', '())))(())))(()']));\n\
    console.log(9, match_parens(['(())', '())))(())))(()))']));\nconsole.log(10, match_parens(['(())',\
    \ '())))(())))(())))(']));\nconsole.log(11, match_parens(['(())', '())))(())))(())))(()']));\n\
    console.log(12, match_parens(['(())', '())))(())))(())))(()))']));\nconsole.log(13,\
    \ match_parens(['(())', '())))(())))(())))(())))(']));\nconsole.log(14, match_parens(['(())',\
    \ '())))(())))(())))(())))(()']));\nconsole.log(15, match_parens(['(())', '())))(())))(())))(())))(()))'])",
  "  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count ===\
    \ 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())', '()'])); // Yes\n\
    console.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['(())',\
    \ '())('])); // No\nconsole.log(match_parens(['(())', '())(('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(()'])); // No\nconsole.log(match_parens(['(())', '())(())'])); // Yes\n\
    console.log(match_parens(['(())', '())(())('])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(('])); // No\nconsole.log(match_parens(['(())', '())(())(()'])); //\
    \ No\nconsole.log(match_parens(['(())', '())(())(())'])); // Yes\nconsole.log(match_parens(['(())',\
    \ '())(())(())('])); // No\nconsole.log(match_parens(['(())', '())(())(())((']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(()'])); // No\nconsole.log(match_parens(['(())',\
    \ '())(())(())(())'])); // Yes\nconsole.log(match_parens(['(())', '())(())(())(())(']));\
    \ // No\nconsole.log(match_parens(['(())', '())(())(())(())(('])); // No\nconsole.log(match_parens(['(())',\
    \ '", "  let str = lst.join('');\n  let open = 0;\n  let close = 0;\n  for (let\
    \ i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      open++;\n  \
    \  } else {\n      close++;\n    }\n    if (close > open) {\n      return 'No';\n\
    \    }\n  }\n  return open === close ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()('])); // No\nconsole.log(match_parens(['(()))', '()()()'])); // Yes\n\
    console.log(match_parens(['(()))', '()()()('])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()('])); //\
    \ No\nconsole.log(match_parens(['(()))', '()()()()()'])); // Yes\nconsole.log(match_parens(['(()))',\
    \ '()()()()()('])); // No\nconsole.log(match_parens(['(()))', '()()()()()()']));\
    \ // Yes\nconsole.log(match_parens(['(()))', '()()()()()()('])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()()()()()()'])); // Yes\nconsole.log(match_parens(['(()))', '()()()()()()()(']));\
    \ // No\nconsole.log(match_parens(['(()))', '()()()()()()()()'])); //", "  let\
    \ str = lst.join('');\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i\
    \ < str.length; i++) {\n    if (str[i] === '(') {\n      open++;\n    } else {\n\
    \      close++;\n    }\n    if (close > open) {\n      return 'No';\n    }\n \
    \ }\n  return open === close ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()()'])); // Yes\nconsole.log(match_parens(['(())', '()))'])); // No\nconsole.log(match_parens(['(()))',\
    \ '()()'])); // No\nconsole.log(match_parens(['(()))', '()))'])); // No\nconsole.log(match_parens(['(((()))',\
    \ '()))'])); // No\nconsole.log(match_parens(['(((()))', '((()))'])); // Yes\n\
    console.log(match_parens(['(((()))', '((())))'])); // No\nconsole.log(match_parens(['(((()))',\
    \ '((())))))'])); // No\nconsole.log(match_parens(['(((()))', '((())))))']));\
    \ // No\nconsole.log(match_parens(['(((()))', '((())))))'])); // No\nconsole.log(match_parens(['(((()))',\
    \ '((())))))'])); // No\nconsole.log(match_parens(['(((()))', '((())))))']));\
    \ // No\nconsole.log(match_parens(['(((()))', '((())))))'])); // No\nconsole.log(match_parens(['(((()))',\
    \ '((())))))'])); // No\nconsole.log(match_parens(['(((()))', '((())))))']));\
    \ // No\nconsole.log(match_parens(['(((()))', '((())))))'])); // No\nconsole.",
  "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_open = 0;\n  let str2_open\
    \ = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\")\
    \ {\n      str1_open++;\n    } else {\n      str1_open--;\n    }\n  }\n  for (let\
    \ i = 0; i < str2.length; i++) {\n    if (str2[i] === \"(\") {\n      str2_open++;\n\
    \    } else {\n      str2_open--;\n    }\n  }\n  if (str1_open === 0 && str2_open\
    \ === 0) {\n    return \"Yes\";\n  } else if (str1_open < 0 && str2_open > 0)\
    \ {\n    if (str1_open + str2_open === 0) {\n      return \"Yes\";\n    } else\
    \ {\n      return \"No\";\n    }\n  } else if (str1_open > 0 && str2_open < 0)\
    \ {\n    if (str1_open + str2_open === 0) {\n      return \"Yes\";\n    } else\
    \ {\n      return \"No\";\n    }\n  } else {\n    return \"No\";\n  }\n}\n\nconsole.log(match_parens([\"\
    (())\", \"()()\"])); // Yes\nconsole.log(match_parens([\"(())\", \"()))\"]));\
    \ // No\nconsole.log(match_parens([\"(()\", \"()()\"])); // Yes\nconsole.log(match_parens([\"\
    (()\", \"()))\"])); // No\nconsole.log(match_parens([\"(()))\", \"()()\"])); //\
    \ Yes\nconsole.log(match_parens([\"(()))\", \"()))\"])); // No\nconsole.log(match_parens([\"\
    (()))\", \"()))\"])); // No\nconsole.log(match_parens([\"(()))\", \"()))\"]));\
    \ // No\nconsole.log(match_parens([\"(()))\", \"()))\"])); // No\nconsole", " \
    \ let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n\
    \    if (lst[0][i] === \"(\") {\n      open++;\n    } else {\n      close++;\n\
    \    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] ===\
    \ \"(\") {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open\
    \ === close) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\
    console.log(match_parens([\"(())\", \"()()\"])); // 'Yes'\nconsole.log(match_parens([\"\
    (()\", \"()()\"])); // 'No'\nconsole.log(match_parens([\"(())\", \"()))\"]));\
    \ // 'No'\nconsole.log(match_parens([\"(()))\", \"()()\"])); // 'Yes'\nconsole.log(match_parens([\"\
    (()))\", \"()()()\"])); // 'Yes'\nconsole.log(match_parens([\"(()))\", \"()()()()\"\
    ])); // 'Yes'\nconsole.log(match_parens([\"(()))\", \"()()()()()\"])); // 'Yes'\n\
    console.log(match_parens([\"(()))\", \"()()()()()()\"])); // 'Yes'\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()()()\"])); // 'Yes'\nconsole.log(match_parens([\"(()))\"\
    , \"()()()()()()()()\"])); // 'Yes'\nconsole.log(match_parens([\"(()))\", \"()()()()()()()()()\"\
    ])); // 'Yes'\nconsole.log(match_parens([\"(()))\", \"()()()()()()()()()()\"]));\
    \ // 'Yes'\nconsole.log(match_parens([\"(()))\", \"()()()()()()()()()()()\"]));\
    \ // 'Yes'\nconsole.", "  let str1 = lst[0];\n  let str2 = lst[1];\n  let str1_count\
    \ = 0;\n  let str2_count = 0;\n  for (let i = 0; i < str1.length; i++) {\n   \
    \ if (str1[i] === \"(\") {\n      str1_count++;\n    } else {\n      str1_count--;\n\
    \    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === \"\
    (\") {\n      str2_count++;\n    } else {\n      str2_count--;\n    }\n  }\n \
    \ if (str1_count === 0 && str2_count === 0) {\n    return \"Yes\";\n  } else if\
    \ (str1_count === str2_count) {\n    return \"Yes\";\n  } else {\n    return \"\
    No\";\n  }\n}\n\nconsole.log(match_parens([\"(())\", \"()()\"])); //Yes\nconsole.log(match_parens([\"\
    (())\", \"()))\"])); //No\nconsole.log(match_parens([\"(()\", \"()()\"])); //Yes\n\
    console.log(match_parens([\"(()\", \"())\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"()()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()(\"]));\
    \ //No\nconsole.log(match_parens([\"(()))\", \"()()()\"])); //Yes\nconsole.log(match_parens([\"\
    (()))\", \"()()()(\"])); //No\nconsole.log(match_parens([\"(()))\", \"()()()()\"\
    ])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()()()(\"])); //No\nconsole.log(match_parens([\"\
    (()))\", \"()()()()()\"])); //Yes\nconsole.log(match_parens([\"(()))\", \"()()()()()(\"\
    ])); //No\nconsole.log(match_parens([\"(()))", "  let s = lst.join('');\n  let\
    \ count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n\
    \      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n \
    \     return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1,\
    \ match_parens(['(())', '()']));", "  let s = lst.join('');\n  let count = 0;\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      count++;\n\
    \    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n\
    \    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['(())',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(())', '()('])); // No\nconsole.log(match_parens(['()',\
    \ '()'])); // Yes\nconsole.log(match_parens(['(()', '()'])); // Yes\nconsole.log(match_parens(['(()',\
    \ '())'])); // No\nconsole.log(match_parens(['(()', '()('])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'])); // No\nconsole.log(match_parens(['(()', '()))'])); // No\nconsole.log(match_parens(['(()',\
    \ '()))'", "  let s = lst.join('');\n  let c = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === '(') {\n      c++;\n    } else {\n      c--;\n    }\n\
    \    if (c < 0) {\n      return 'No';\n    }\n  }\n  return c === 0 ? 'Yes' :\
    \ 'No';\n}\n\nconsole.log(1, match_parens(['(())', '()()']));\nconsole.log(2,\
    \ match_parens(['()()', '()()']));\nconsole.log(3, match_parens(['(())', '()))']));\n\
    console.log(4, match_parens(['(()', '()(']));\nconsole.log(5, match_parens(['(()',\
    \ '))(']));\nconsole.log(6, match_parens(['(()', '()))']));\nconsole.log(7, match_parens(['(()',\
    \ ')()(']));\nconsole.log(8, match_parens(['(()', ')()))']));\nconsole.log(9,\
    \ match_parens(['(()', ')()))']));\nconsole.log(10, match_parens(['(()', ')()))']));\n\
    console.log(11, match_parens(['(()', ')()))']));\nconsole.log(12, match_parens(['(()',\
    \ ')()))']));\nconsole.log(13, match_parens(['(()', ')()))']));\nconsole.log(14,\
    \ match_parens(['(()', ')()))']));\nconsole.log(15, match_parens(['(()', ')()))']));\n\
    console.log(16, match_parens(['(()', ')()))']));\nconsole.log(17, match_parens(['(()',\
    \ ')()))']));\nconsole.log(18, match_parens(['(()', ')()))']));\nconsole", " \
    \ let s = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n      if\
    \ (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(1,\
    \ match_parens(['(())', '()()']));\nconsole.log(2, match_parens(['(())', '()))']));\n\
    console.log(3, match_parens(['(())', '())(']));\nconsole.log(4, match_parens(['(())',\
    \ '())(']));\nconsole.log(5, match_parens(['(())', '())(']));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
