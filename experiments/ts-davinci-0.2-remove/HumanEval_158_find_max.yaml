name: HumanEval_158_find_max
language: ts
prompt: "//Write a function that accepts a list of strings.\n// The list contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\nfunction find_max(words: string[]):\
  \ string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
  , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
  enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
  , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
  );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
  ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
  rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\"\
  , \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"\
  a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"\
  play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"
completions: ["    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let char of word) {\n\
    \            if (word.indexOf(char) === word.lastIndexOf(char)) {\n          \
    \      count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"abcdef", "  let max = 0;\n  let maxWord = '';\n  for\
    \ (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const\
    \ unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max =\
    \ unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc',\
    \ 'bcd', 'cde', 'abcd', 'abcd', 'abcd']));\n", "    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word.split(''));\n        if (unique_chars.size > max_count) {\n \
    \           max_count = unique_chars.size;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'de',\
    \ 'fgh', 'de', 'ijkl', 'mnop', 'o']));\n", "  let max: number = 0;\n  let maxWord:\
    \ string = \"\";\n  for (let i: number = 0; i < words.length; i++) {\n    let\
    \ word: string = words[i];\n    let unique: string[] = [];\n    for (let j: number\
    \ = 0; j < word.length; j++) {\n      if (unique.indexOf(word[j]) === -1) {\n\
    \        unique.push(word[j]);\n      }\n    }\n    if (unique.length > max) {\n\
    \      max = unique.length;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"\
    abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"\
    bcd\", \"abcd\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let word\
    \ of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"\
    cdef\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"cdef\"\
    , \"efgh\"]));\n", "  let max: number = 0;\n  let maxWord: string = \"\";\n  for\
    \ (let word of words) {\n    let unique: string[] = [];\n    for (let char of\
    \ word) {\n      if (unique.indexOf(char) === -1) {\n        unique.push(char);\n\
    \      }\n    }\n    if (unique.length > max) {\n      max = unique.length;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));", "  let max = 0;\n  let maxWord =\
    \ \"\";\n  for (let word of words) {\n    let set = new Set(word);\n    if (set.size\
    \ > max) {\n      max = set.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\"\
    , \"mn\", \"o\"]));\n", "  let max: string = \"\";\n  let max_count: number =\
    \ 0;\n  for (let i = 0; i < words.length; i++) {\n    let word: string = words[i];\n\
    \    let count: number = 0;\n    for (let j = 0; j < word.length; j++) {\n   \
    \   if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n        count++;\n\
    \      }\n    }\n    if (count > max_count) {\n      max = word;\n      max_count\
    \ = count;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"abc\", \"\
    de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n", "    let max = 0;\n   \
    \ let max_word = \"\";\n    for (let i = 0; i < words.length; i++) {\n       \
    \ let word = words[i];\n        let unique_chars = 0;\n        for (let j = 0;\
    \ j < word.length; j++) {\n            let char = word[j];\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                unique_chars++;\n           \
    \ }\n        }\n        if (unique_chars > max) {\n            max = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"\
    aaa\", \"aaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaaa\"]));\n\
    console.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\",", "    let max: number = 0;\n    let max_word: string =\
    \ \"\";\n    for (let word of words) {\n        let unique_chars: string[] = [];\n\
    \        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ === -1) {\n                unique_chars.push(char);\n            }\n       \
    \ }\n        if (unique_chars.length > max) {\n            max = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \ let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"xyz\", \"aba\", \"1221\"]));\n", "  let max_word = words[0];\n  let max_count\
    \ = 0;\n  for (let word of words) {\n    let count = 0;\n    let chars = new Set();\n\
    \    for (let char of word) {\n      if (!chars.has(char)) {\n        chars.add(char);\n\
    \        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\n", "  let max = 0;\n\
    \  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const\
    \ word = words[i];\n    const unique = new Set(word.split(\"\"));\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n",
  "    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size\
    \ > max_count) {\n            max_count = unique_chars.size;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['a',\
    \ 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab',\
    \ 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd',\
    \ 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd',\
    \ 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\n\
    console.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a',\
    \ 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac',\
    \ 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd',\
    \ 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd',\
    \ 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\n\
    console.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log",
  "  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n\
    \    const word = words[i];\n    const unique = new Set(word);\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnop']));",
  "  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    aaa\", \"bbbb\", \"ccccc\", \"dddddd\"]));\nconsole.log(find_max([\"apple\", \"\
    banana\", \"orange\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaa\", \"aaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"\
    , \"aaaaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"\
    aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"a\", \"\
    aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"]));\n\
    console.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"\
    , \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"\
    aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"\
    aaaaaaaaa\", \"aaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"\
    aaaaaaaaaa\", \"aaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"\
    aaaaaaaaaa\", \"aaaaaaaaaaa\", \"aaaaaaaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa", "    let max = 0;\n    let maxWord = '';\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(''));\n        if (unique.size >\
    \ max) {\n            max = unique.size;\n            maxWord = word;\n      \
    \  }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'cde', 'efg',\
    \ 'abcd', 'cdef']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'cdef',\
    \ 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'cdef', 'abcde',\
    \ 'abcdef']));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i\
    \ < words.length; i++) {\n    const word = words[i];\n    const uniqueChars =\
    \ new Set(word.split(\"\"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));", "    let max = 0;\n\
    \    let max_word = \"\";\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max) {\n            max =\
    \ unique_chars.size;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    apple\", \"banana\", \"carrot\"]));\n", "  let max = 0;\n  let max_word = \"\"\
    ;\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\"\
    ));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n    \
    \  max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\n", "    let max = 0;\n    let maxWord = \"\";\n    for (let word of words)\
    \ {\n        let unique = new Set(word);\n        if (unique.size > max) {\n \
    \           max = unique.size;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"\
    de\", \"ijkl\", \"mn\", \"o\"]));\n", "    let max = 0;\n    let max_word = \"\
    \";\n    for (let word of words) {\n        let unique = 0;\n        for (let\
    \ i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i]))\
    \ {\n                unique++;\n            }\n        }\n        if (unique >\
    \ max) {\n            max = unique;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdef", "  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n\
    \    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n \
    \     max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n", " \
    \ let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n", "  let max = 0;\n\
    \  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\",\
    \ \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"\
    ]));\nconsole.log(find_max([\"apple\", \"banana\", \"pear\", \"strawberry\"]));\n",
  "  let max_word = words[0];\n  let max_unique = 0;\n  for (let word of words) {\n\
    \    let unique = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        unique++;\n      }\n    }\n    if (unique > max_unique) {\n\
    \      max_unique = unique;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg", "  let max = 0;\n  let maxWord\
    \ = '';\n  for (let word of words) {\n    let unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jklm']));\n\
    console.log(find_max(['python', 'perl', 'java', 'c', 'haskell', 'ruby']));", " \
    \ let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\n", "  let max = 0;\n  let max_word = '';\n  for (let\
    \ word of words) {\n    let unique = new Set(word);\n    if (unique.size > max)\
    \ {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx', 'yz']));", "    let max = 0;\n    let result = \"\";\n    for (let i\
    \ = 0; i < words.length; i++) {\n        let word = words[i];\n        let unique\
    \ = 0;\n        for (let j = 0; j < word.length; j++) {\n            let char\
    \ = word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n\
    \                unique++;\n            }\n        }\n        if (unique > max)\
    \ {\n            max = unique;\n            result = word;\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\",", "  let max = 0;\n  let\
    \ maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word =\
    \ words[i];\n    const unique = new Set(word);\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx', 'yz']));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0;\
    \ i < words.length; i++) {\n    const word = words[i];\n    const unique = new\
    \ Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"xyz\", \"aba\", \"1221\"]));\n", "    let max = 0;\n    let max_word\
    \ = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word.split(\"\
    \"));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \ let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique\
    \ = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\n", "  let max = 0;\n  let\
    \ maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi',\
    \ 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi',\
    \ 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr', 'stu', 'vwx', 'yz']));\n", "  let max = 0;\n  let maxWord = \"\
    \";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abcd\", \"abc\",\
    \ \"abd\", \"a\"]));\n", "  let max = 0;\n  let max_word = \"\";\n  for (let word\
    \ of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"\
    , \"abcdefghijkl\", \"abcdefghijkl", "  let max = 0;\n  let max_word = \"\";\n\
    \  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n  \
    \  if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\n", "    let max = words[0];\n   \
    \ for (let i = 1; i < words.length; i++) {\n        if (words[i].length > max.length)\
    \ {\n            max = words[i];\n        }\n    }\n    return max;\n}\n", " \
    \ let max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n\
    \    let count = 0;\n    let letters = word.split(\"\");\n    for (let letter\
    \ of letters) {\n      if (letters.indexOf(letter) === letters.lastIndexOf(letter))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"\
    aaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"\
    , \"aaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"\
    , \"aaaaaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"\
    aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"\
    , \"aaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"\
    aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa",
  "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n \
    \   if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"\
    efg\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abc\"]));\nconsole.log(find_max([\"\
    abc\", \"cde\", \"efg\", \"abc\", \"cde\"]));\n", "    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    abcde\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefgh\"\
    , \"abcdefghijklmnopqrstuvwxyz\"]));\nconsole.log(find_max([\"abc\", \"abcde\"\
    , \"abcdefgh\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"\
    ]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let uniqueChars = new Set(word.split(\"\"));\n    if (uniqueChars.size >\
    \ max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n \
    \ return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\"\
    , \"ijkl\", \"mn\", \"o\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for\
    \ (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique\
    \ = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"xyz\", \"aba\", \"1221\"]));\n", "    let max = 0;\n    let maxWord =\
    \ \"\";\n    for (let word of words) {\n        let unique = new Set(word.split(\"\
    \"));\n        if (unique.size > max) {\n            max = unique.size;\n    \
    \        maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abc", "    let max = 0;\n    let max_word = \"\";\n    for\
    \ (let word of words) {\n        let unique = new Set(word.split(\"\"));\n   \
    \     if (unique.size > max) {\n            max = unique.size;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdef",
  "  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n \
    \     max_word = word;\n    }\n  }\n  return max_word;\n}\n", "  let max_word\
    \ = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let count =\
    \ new Set(word).size;\n    if (count > max_count) {\n      max_count = count;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"xyz\", \"aba\", \"1221\"]));\n", "    let max = 0;\n    let maxWord =\
    \ \"\";\n    for (let word of words) {\n        let unique = new Set(word);\n\
    \        if (unique.size > max) {\n            max = unique.size;\n          \
    \  maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abd\", \"a\", \"xyz\"]));\nconsole.log(find_max([\"zyx\", \"xyz\", \"yx\"\
    , \"xzxy\", \"zxzyx\"]));\n", "    let max_word = \"\";\n    let max_count = 0;\n\
    \    for (let word of words) {\n        let unique_chars = new Set(word);\n  \
    \      if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\nconsole.log(find_max([\"aaa\",\
    \ \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\"]));\nconsole.log(find_max([\"aaa\"\
    , \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\", \"a\"]));\nconsole.log(find_max([\"\
    aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\", \"a\", \"ab\"]));\n", "  let\
    \ max_word = words[0];\n  let max_unique = unique_chars(words[0]);\n  for (let\
    \ i = 1; i < words.length; i++) {\n    const word = words[i];\n    const unique\
    \ = unique_chars(word);\n    if (unique > max_unique) {\n      max_unique = unique;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "  let max = 0;\n\
    \  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abcd\", \"\
    abc\", \"abd\", \"a\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let\
    \ word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"abcd\", \"\
    abcde\"]));\n", "    let max = 0;\n    let max_word = '';\n    for (let word of\
    \ words) {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size\
    \ > max) {\n            max = unique_chars.size;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'de',\
    \ 'fgh', 'de', 'ijkl', 'mnop']));\nconsole.log(find_max(['abc', 'abc', 'abc']));\n\
    console.log(find_max(['abc', 'abcd', 'ab', 'abcde']));\n", "  let max = 0;\n \
    \ let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word\
    \ = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++)\
    \ {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n      \
    \  unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n \
    \     maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abc", "  let max = 0;\n  let maxWord = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cde\", \"a\", \"ab\"]));\n", "  let max\
    \ = 0;\n  let max_word = '';\n  for (let word of words) {\n    let unique = new\
    \ Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max(['abc',\
    \ 'abcd', 'abcde', 'abcdef']));\nconsole.log(find_max(['a', 'aa', 'aaa', 'aaaa']));\n\
    console.log(find_max(['a', 'ab', 'abc', 'abcd']));\n", "    let max = 0;\n   \
    \ let max_word = \"\";\n    for (let word of words) {\n        let unique = new\
    \ Set(word);\n        if (unique.size > max) {\n            max = unique.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"cde\", \"abcd\", \"ab\", \"abcde\"]));\n", "    let max: number = 0;\n\
    \    let max_word: string = \"\";\n    for (let word of words) {\n        let\
    \ unique_chars: string[] = [];\n        for (let char of word) {\n           \
    \ if (unique_chars.indexOf(char) === -1) {\n                unique_chars.push(char);\n\
    \            }\n        }\n        if (unique_chars.length > max) {\n        \
    \    max = unique_chars.length;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find", "  let max = 0;\n  let\
    \ maxWord = \"\";\n  words.forEach(word => {\n    const unique = new Set(word);\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  });\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"\
    abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n", " \
    \   let max = 0;\n    let maxWord = '';\n    for (let word of words) {\n     \
    \   let unique = new Set(word);\n        if (unique.size > max) {\n          \
    \  max = unique.size;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'abcdefghijklmno']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'abcdefghijklmno', 'abcdefghijklmno']));",
  "  let max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n\
    \    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size\
    \ > max_count) {\n      max_count = unique_chars.size;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n", "    let max_word = \"\";\n    let max_unique\
    \ = 0;\n    for (let word of words) {\n        let unique = 0;\n        let chars\
    \ = new Set<string>();\n        for (let char of word) {\n            if (!chars.has(char))\
    \ {\n                chars.add(char);\n                unique++;\n           \
    \ }\n        }\n        if (unique > max_unique) {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \ let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n \
    \     maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcde\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcde\", \"\
    abcdefg\", \"abcdefghijklmnopqrstuvwxyz\"]));\n", "  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n", "  let\
    \ max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n \
    \     max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"ab\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"\
    ]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n", "  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n \
    \     maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghij\", \"klmno\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghij\", \"klmno\", \"abcdef\"]));\n", "  let max = 0;\n  let maxWord = \"\"\
    ;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let\
    \ unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n\
    \      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n\
    \      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"\
    abcde\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\"\
    , \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\"\
    , \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\",\
    \ \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"\
    , \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"\
    abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefgh", "    let max = 0;\n   \
    \ let maxWord = '';\n    for (let word of words) {\n        let uniqueChars =\
    \ new Set(word.split(''));\n        if (uniqueChars.size > max) {\n          \
    \  max = uniqueChars.size;\n            maxWord = word;\n        }\n    }\n  \
    \  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'cdf', 'efg']));\n",
  "  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars\
    \ = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"ab\", \"abcde\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"\
    , \"abcdef\"]));\n", "  let max = 0;\n  let maxWord = '';\n  words.forEach(word\
    \ => {\n    const uniqueChars = new Set(word.split(''));\n    if (uniqueChars.size\
    \ > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  });\n\
    \  return maxWord;\n}\n\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd',\
    \ 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\n\
    console.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a',\
    \ 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\n", "    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    cba\", \"bac\", \"cab\", \"bca\"]));\nconsole.log(find_max([\"abc\", \"cba\",\
    \ \"bac\", \"cab\", \"bca\", \"abcd\"]));\nconsole.log(find_max([\"abc\", \"cba\"\
    , \"bac\", \"cab\", \"bca\", \"abcd\", \"abcd\"]));\n", "    let max = 0;\n  \
    \  let max_word = \"\";\n    for (let word of words) {\n        let unique = new\
    \ Set(word.split(\"\"));\n        if (unique.size > max) {\n            max =\
    \ unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"\
    abcd\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n", " \
    \ let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars\
    \ = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\n", "  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"\
    xyz\", \"aba\", \"1221\"]));\n", "  let max: string = \"\";\n  let max_count:\
    \ number = 0;\n  for (let word of words) {\n    let count: number = 0;\n    for\
    \ (let i: number = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max = word;\n      max_count = count;\n    }\n  }\n  return max;\n}\n\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg", "    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\"\
    , \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"\
    abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"", "  let max = 0;\n  let max_word = \"\";\n  for (let\
    \ word of words) {\n    let unique = new Set(word);\n    if (unique.size > max)\
    \ {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"deff\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jklmnopqr\"]));\nconsole.log(find_max([\"abcdef\", \"def\", \"ghi\"\
    , \"jklmn\"]));\nconsole.log(find_max([\"abcdef\", \"adef\", \"aghidef\", \"jklmn\"\
    ]));\n", "  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n\
    \    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n \
    \     max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij", "  let max = 0;\n  let max_word = \"\";\n  for (let word of words)\
    \ {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n\
    \      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"\
    , \"abcdefghi\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let word\
    \ of words) {\n    const unique = new Set(word.split(\"\"));\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\"\
    , \"mn\", \"o\"]));\n", "    let max_word = words[0];\n    let max_count = 0;\n\
    \    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         let char = word[j];\n            if (word.indexOf(char) === j) {\n \
    \               count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cba\", \"\
    bac\", \"bca\", \"cab\"]));\n", "  let max = 0;\n  let maxWord = '';\n  words.forEach(word\
    \ => {\n    let unique = new Set(word.split(''));\n    if (unique.size > max)\
    \ {\n      max = unique.size;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnopq']));\nconsole.log(find_max(['abc',\
    \ 'abc', 'abc']));\nconsole.log(find_max(['abc', 'abcd', 'ab']));\n", "  let max\
    \ = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new\
    \ Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc',\
    \ 'de', 'fgh', 'de', 'ijkl', 'mnopq']));\nconsole.log(find_max(['abc', 'abc',\
    \ 'abc']));\n", "  let max = 0;\n  let maxWord = '';\n  for (let word of words)\
    \ {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max(['abcd', 'abc', 'abd', 'a']));\n", "  let max = 0;\n\
    \  let result = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word\
    \ = words[i];\n    let unique = new Set(word.split(\"\"));\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      result = word;\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n",
  "    let max = 0;\n    let result = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let unique = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (word.indexOf(word[j]) === word.lastIndexOf(word[j]))\
    \ {\n                unique++;\n            }\n        }\n        if (unique >\
    \ max) {\n            max = unique;\n            result = word;\n        }\n \
    \   }\n    return result;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\",", "    let max_word\
    \ = \"\";\n    let max_count = 0;\n    for (let word of words) {\n        let\
    \ unique_chars = new Set(word);\n        if (unique_chars.size > max_count) {\n\
    \            max_count = unique_chars.size;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"python\", \"java\", \"csharp\"\
    , \"javascript\"]));", "  let max = 0;\n  let maxWord = '';\n  for (let i = 0;\
    \ i < words.length; i++) {\n    const word = words[i];\n    const unique = new\
    \ Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord\
    \ = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'de',\
    \ 'fgh', 'de', 'ijkl', 'mnop']));\nconsole.log(find_max(['abc', 'abc', 'abc']));\n\
    console.log(find_max(['abc', 'abcd', 'ab']));\nconsole.log(find_max(['abc', 'abcd',\
    \ 'ab', 'abcde']));\nconsole.log(find_max(['abcd', 'abc', 'ab', 'abcde']));\n\
    console.log(find_max(['abcd', 'ab', 'abc', 'abcde']));\nconsole.log(find_max(['abcd',\
    \ 'ab', 'abc', 'abcde', 'abcdef']));\nconsole.log(find_max(['abcd', 'ab', 'abc',\
    \ 'abcde', 'abcdef', 'abcdefg']));\nconsole.log(find_max(['abcd', 'ab', 'abc',\
    \ 'abcde', 'abcdef', 'abcdefg', 'abcdefgh']));\nconsole.log(find_max(['abcd',\
    \ 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abcd',\
    \ 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']));\n\
    console.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk']));\nconsole.log(find_max(['abcd',\
    \ 'ab',", "  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word.split(''));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'cde', 'efg']));\n\
    console.log(find_max(['abc', 'cde', 'efg', 'abcd']));\nconsole.log(find_max(['abc',\
    \ 'cde', 'efg', 'abcd', 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg',\
    \ 'abcd', 'abcde', 'abcdef']));\n", "    let max_word = words[0];\n    let max_unique\
    \ = unique_chars(words[0]);\n    for (let i = 1; i < words.length; i++) {\n  \
    \      let unique = unique_chars(words[i]);\n        if (unique > max_unique)\
    \ {\n            max_unique = unique;\n            max_word = words[i];\n    \
    \    }\n    }\n    return max_word;\n}\n", "  let max = 0;\n  let maxWord = \"\
    \";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n  \
    \  let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"xyz\", \"aba\", \"1221\"]));\n", "  let max_word = \"\";\n  let max_count\
    \ = 0;\n  for (let word of words) {\n    let count = 0;\n    let chars = new Set();\n\
    \    for (let char of word) {\n      if (!chars.has(char)) {\n        chars.add(char);\n\
    \        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "  \
    \  let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n   \
    \     let unique = new Set(word);\n        if (unique.size > max) {\n        \
    \    max = unique.size;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"\
    apple\", \"banana\", \"pear\", \"strawberry\"]));\n", "  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\"\
    , \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n", "  let max = 0;\n \
    \ let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\"\
    , \"cde\", \"bcd\", \"def\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"bcd\"\
    , \"def\", \"abcdef\"]));\n", "  let max = 0;\n  let max_word = \"\";\n  for (let\
    \ i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique_chars\
    \ = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n\
    \      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique_chars++;\n\
    \      }\n    }\n    if (unique_chars > max) {\n      max = unique_chars;\n  \
    \    max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"cde\", \"efg\", \"abcd\", \"cdef\"]));\n", "  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let word of words) {\n    const unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"\
    de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n", "  let max = 0;\n  let\
    \ maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word =\
    \ words[i];\n    const uniqueChars = new Set(word.split(''));\n    if (uniqueChars.size\
    \ > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n\
    \  return maxWord;\n}\n\nconsole.log(find_max(['hello', 'world', 'before', 'all']));\n\
    console.log(find_max(['hello', 'world', 'after', 'all']));\nconsole.log(find_max(['hello',\
    \ 'world', 'after', 'all', 'zebra']));\nconsole.log(find_max(['hello', 'world',\
    \ 'after', 'all', 'before']));\nconsole.log(find_max(['ant', 'anna', 'sandra',\
    \ 'ben']));\nconsole.log(find_max(['ant', 'anna', 'sandra', 'ben', 'ben']));\n\
    console.log(find_max(['ant', 'anna', 'sandra', 'ben', 'aardvark']));\nconsole.log(find_max(['ant',\
    \ 'anna', 'sandra', 'ben', 'benjamin']));\nconsole.log(find_max(['ant', 'anna',\
    \ 'sandra', 'ben', 'benjamin', 'bob']));\nconsole.log(find_max(['ant', 'anna',\
    \ 'sandra', 'ben', 'benjamin', 'bob', 'ana']));\n", "  let max: string = \"\"\
    ;\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max = word;\n      max_count = count;\n    }\n  }\n  return max;\n}\n\n\
    console.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n", "  let max =\
    \ 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const\
    \ word = words[i];\n    const unique = new Set(word);\n    if (unique.size > max)\
    \ {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n", "  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n \
    \     maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\",", "  let max = 0;\n  let max_word = \"\";\n\
    \  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\", \"cdf\", \"\
    efg\"]));\n", "    let max_word = words[0];\n    let max_count = 0;\n    for (let\
    \ word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg", "    let max = 0;\n    let\
    \ max_word = '';\n    for (let word of words) {\n        let unique_chars = new\
    \ Set(word.split(''));\n        if (unique_chars.size > max) {\n            max\
    \ = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl',\
    \ 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx', 'yz']));\n", "    let max_word = words[0];\n    let max_count = 0;\n\
    \    for (let word of words) {\n        let count = 0;\n        let chars = new\
    \ Set<string>();\n        for (let char of word) {\n            if (!chars.has(char))\
    \ {\n                chars.add(char);\n                count++;\n            }\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \   let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n  \
    \      let unique = new Set(word.split(\"\"));\n        if (unique.size > max)\
    \ {\n            max = unique.size;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"\
    ]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j]))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\n", "  let max\
    \ = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new\
    \ Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\n\
    console.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc',\
    \ 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));", "    let max = 0;\n   \
    \ let max_word = \"\";\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word.split(\"\"));\n        if (unique_chars.size > max) {\n     \
    \       max = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aaa\",\
    \ \"aa\", \"bbb\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let word\
    \ of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\", \"def\", \"\
    efg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"cde\", \"def\", \"efg\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"cde\", \"def\", \"efg\", \"efgh\"\
    ]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique\
    \ > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"aa\", \"ab\", \"abc\"\
    , \"abcd\"]));\nconsole.log(find_max([\"abcde\", \"abcd\", \"abc\", \"ab\"]));\n\
    console.log(find_max([\"abcd\", \"abc\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"ab\", \"abcd\"]));\nconsole.log(find_max([\"abcd\", \"abcd\", \"abcd\", \"\
    abc\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcd\", \"abcd\"]));", " \
    \ let max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\"\
    , \"o\"]));\n", "    let max = 0;\n    let maxWord = '';\n    for (let i = 0;\
    \ i < words.length; i++) {\n        let word = words[i];\n        let unique =\
    \ 0;\n        for (let j = 0; j < word.length; j++) {\n            let char =\
    \ word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n\
    \                unique++;\n            }\n        }\n        if (unique > max)\
    \ {\n            max = unique;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let\
    \ word of words) {\n    let unique = new Set(word);\n    if (unique.size > max)\
    \ {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghia\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghiz\", \"jklmn\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  words.forEach(word\
    \ => {\n    let unique = 0;\n    word.split(\"\").forEach(letter => {\n      if\
    \ (word.indexOf(letter) === word.lastIndexOf(letter)) {\n        unique++;\n \
    \     }\n    });\n    if (unique > max) {\n      max = unique;\n      maxWord\
    \ = word;\n    }\n  });\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\"\
    , \"xyz\", \"aba\", \"1221\"]));\n", "    let max: string = \"\";\n    let max_count:\
    \ number = 0;\n    for (let word of words) {\n        let unique_chars: string[]\
    \ = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ === -1) {\n                unique_chars.push(char);\n            }\n       \
    \ }\n        if (unique_chars.length > max_count) {\n            max = word;\n\
    \            max_count = unique_chars.length;\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\"\
    ]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"\
    ]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\"\
    , \"mno\", \"abc\", \"def\", \"ghi\"]", "    let max = 0;\n    let max_word =\
    \ \"\";\n    for (let word of words) {\n        let unique = new Set(word);\n\
    \        if (unique.size > max) {\n            max = unique.size;\n          \
    \  max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abd\", \"a\"]));\nconsole.log(find_max([\"apple\", \"banana\", \"pear\", \"\
    grapefruit\"]));\n", "    let max_word = \"\";\n    let max_unique = 0;\n    for\
    \ (let word of words) {\n        let unique = 0;\n        for (let i = 0; i <\
    \ word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i]))\
    \ {\n                unique++;\n            }\n        }\n        if (unique >\
    \ max_unique) {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n", "  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\
    \"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n  \
    \    max_word = word;\n    }\n  }\n  return max_word;\n}\n", "  let max = 0;\n\
    \  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n", "  let max = 0;\n  let maxWord = '';\n \
    \ for (let word of words) {\n    let unique = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n \
    \       unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc',\
    \ 'xyz', 'aba', '1221']));\n", "    let max = 0;\n    let max_word = \"\";\n \
    \   for (let word of words) {\n        let unique = new Set(word.split(\"\"));\n\
    \        if (unique.size > max) {\n            max = unique.size;\n          \
    \  max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n", "  let max = 0;\n  let maxWord\
    \ = '';\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n\
    \    const unique = new Set(word);\n    if (unique.size > max) {\n      max =\
    \ unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abcd',\
    \ 'abc', 'abd', 'a']));\n", "    let max: number = 0;\n    let max_word: string\
    \ = \"\";\n    for (let word of words) {\n        let unique_chars: string[] =\
    \ [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ == -1) {\n                unique_chars.push(char);\n            }\n        }\n\
    \        if (unique_chars.length > max) {\n            max = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \   let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg", "  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\"\
    , \"xyz\", \"aba\", \"1221\"]));\n", "  let max = 0;\n  let maxWord = '';\n  for\
    \ (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'cdf', 'efg']));\n",
  "    let max: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max =\
    \ word;\n            max_count = count;\n        }\n    }\n    return max;\n}\n",
  "  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n \
    \     maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"bcd\", \"cde\", \"cdf\", \"efg\"]));\n", "  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"pqr\"]));\nconsole.log(find_max([\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"]));\nconsole.log(find_max([\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"]));\nconsole.log(find_max([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"]));\n",
  "    let max_word = words[0];\n    let max_length = new Set(words[0]).size;\n  \
    \  for (let i = 1; i < words.length; i++) {\n        const word = words[i];\n\
    \        const length = new Set(word).size;\n        if (length > max_length)\
    \ {\n            max_length = length;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aa\", \"\
    aaa\", \"aaaa\"]));\n", "    let max = 0;\n    let maxWord = '';\n    for (let\
    \ word of words) {\n        let unique = new Set(word);\n        if (unique.size\
    \ > max) {\n            max = unique.size;\n            maxWord = word;\n    \
    \    }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['a', 'ab', 'abc',\
    \ 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd',\
    \ 'bcd', 'abcd']) === 'abcd');\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd',\
    \ 'bcd', 'abcd']) === 'abc');\n", "  let max = 0;\n  let maxWord = \"\";\n  for\
    \ (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const\
    \ uniqueChars = new Set(word);\n    if (uniqueChars.size > max) {\n      max =\
    \ uniqueChars.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\
    \nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"\
    o\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let word of words)\
    \ {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n\
    \      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"ab\", \"cdef\"\
    ]));\n", "    let max = 0;\n    let maxWord = '';\n    for (let word of words)\
    \ {\n        let unique = new Set(word.split(''));\n        if (unique.size >\
    \ max) {\n            max = unique.size;\n            maxWord = word;\n      \
    \  }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde',\
    \ 'cdf', 'efg']));\n", "    let max = 0;\n    let max_word = \"\";\n    for (let\
    \ word of words) {\n        let unique_chars = new Set(word.split(\"\"));\n  \
    \      if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"aaa\", \"aa\", \"bbb\"]));\n", "  let max = 0;\n  let max_word = \"\";\n\
    \  for (let word of words) {\n    const unique_chars = new Set(word);\n    if\
    \ (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n", "    let max_word = words[0];\n\
    \    let max_unique_chars = find_unique_chars(max_word);\n    for (let i = 1;\
    \ i < words.length; i++) {\n        let word = words[i];\n        let unique_chars\
    \ = find_unique_chars(word);\n        if (unique_chars > max_unique_chars) {\n\
    \            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n", "  let max_word = words[0];\n \
    \ let max_count = count_unique(words[0]);\n  for (let i = 1; i < words.length;\
    \ i++) {\n    let count = count_unique(words[i]);\n    if (count > max_count)\
    \ {\n      max_count = count;\n      max_word = words[i];\n    }\n  }\n  return\
    \ max_word;\n}\n", "    let max: string = \"\";\n    let max_count: number = 0;\n\
    \    for (let word of words) {\n        let count: number = 0;\n        for (let\
    \ i: number = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max = word;\n            max_count = count;\n  \
    \      }\n    }\n    return max;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg", "    let max = 0;\n    let\
    \ maxWord = '';\n    for (let word of words) {\n        let unique = 0;\n    \
    \    for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === word.lastIndexOf(word[i])) {\n                unique++;\n            }\n\
    \        }\n        if (unique > max) {\n            max = unique;\n         \
    \   maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc',\
    \ 'abcc', 'abcdd', 'abcde']));\nconsole.log(find_max(['abc', 'abcc', 'abcdd',\
    \ 'abcde', 'abcd']));\nconsole.log(find_max(['abc', 'abcc', 'abcdd', 'abcde',\
    \ 'abcd', 'abc']));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let i =\
    \ 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqueChars =\
    \ new Set(word);\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"xyz\", \"aba\", \"1221\"]));\n", "    let max = 0;\n    let max_word\
    \ = '';\n    for (let word of words) {\n        let unique_chars = new Set(word);\n\
    \        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc',\
    \ 'bcd', 'cde', 'def']));\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef']));\n\
    console.log(find_max(['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg']));\nconsole.log(find_max(['abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh']));\nconsole.log(find_max(['abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']));\n\
    console.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij']));\nconsole.log(find_max(['a', 'ab',\
    \ 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij',\
    \ 'abcdefghijk']));\nconsole.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl']));\n\
    console.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg',",
  "    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n   \
    \     let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n     \
    \       if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n         \
    \       unique++;\n            }\n        }\n        if (unique > max) {\n   \
    \         max = unique;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdef", "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0;\
    \ i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n  \
    \  for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n      if\
    \ (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n     \
    \ }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\"\
    , \"abcdef\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\"\
    , \"abcdefgh\", \"abcdefghi\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n\
    \  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let\
    \ unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"xyz\", \"aba\", \"1221\"]));\n", "  let max = 0;\n  let result = '';\n\
    \  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let\
    \ unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max =\
    \ unique.size;\n      result = word;\n    }\n  }\n  return result;\n}\n\nconsole.log(find_max(['abc',\
    \ 'bcd', 'cde', 'cdf', 'efg']));\n", "  let max = 0;\n  let maxWord = \"\";\n\
    \  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let\
    \ unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n\
    \      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n\
    \      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abcd\", \"\
    abc\", \"abd\", \"a\"]));\n", "  let max = 0;\n  let max_word = \"\";\n  for (let\
    \ word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n \
    \ words.forEach(word => {\n    let unique = new Set(word.split(\"\"));\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  });\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"\
    ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abc", " \
    \   let max_word = \"\";\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        let unique_chars = new Set();\n        for\
    \ (let char of word) {\n            if (!unique_chars.has(char)) {\n         \
    \       unique_chars.add(char);\n                count++;\n            }\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde", "  let max = words[0];\n  for (let i = 1; i < words.length;\
    \ i++) {\n    if (unique_chars(words[i]) > unique_chars(max)) {\n      max = words[i];\n\
    \    }\n  }\n  return max;\n}\n", "    let max = 0;\n    let maxWord = \"\";\n\
    \    for (let word of words) {\n        let unique = 0;\n        for (let i =\
    \ 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i]))\
    \ {\n                unique++;\n            }\n        }\n        if (unique >\
    \ max) {\n            max = unique;\n            maxWord = word;\n        }\n\
    \    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"\
    abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"", "  let max_word = \"\
    \";\n  let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n \
    \   for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\",", "  let max\
    \ = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique =\
    \ new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcde\", \"abcdef\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n\
    \  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n  \
    \  if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"\
    fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n", "  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\
    \"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n  \
    \    max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"cde\", \"efg\", \"abcd\", \"cdef\"]));\nconsole.log(find_max([\"abc\"\
    , \"abc\", \"abc\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\"\
    , \"cdef\", \"abcde\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let\
    \ i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique =\
    \ new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n   \
    \   maxWord = word;\n    }\n  }\n  return maxWord;\n}\n", "  let max = 0;\n  let\
    \ maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"\
    xyz\", \"aba\", \"1221\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for\
    \ (let word of words) {\n    let unique = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n \
    \       unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"", "  let max = 0;\n  let\
    \ maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word =\
    \ words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n\
    \      if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n        unique++;\n\
    \      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n", "  let max = 0;\n  let maxWord =\
    \ \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"\
    ));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"a\", \"\
    ab\", \"cba\"]));\n", "  let max = 0;\n  let max_word = \"\";\n  for (let word\
    \ of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size\
    \ > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"aab\", \"def\", \"\
    ghi\"]));\nconsole.log(find_max([\"abc\", \"aab\", \"def\", \"ghi\", \"abcdefghijklmnopqrstuvwxyz\"\
    ]));\n", "    let max_word = words[0];\n    let max_count = 0;\n    for (let word\
    \ of words) {\n        let count = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg", "  let max: string = \"\"\
    ;\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max = word;\n      max_count = count;\n    }\n  }\n  return max;\n}\n\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"", "  let max = 0;\n  let\
    \ max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\
    \"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n  \
    \    max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcde\", \"abcdef\", \"abcdefgh\"]));\n", "    let max_word = \"\";\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"", "  let max_word = words[0];\n\
    \  let max_unique = 0;\n  for (let word of words) {\n    let unique = new Set(word.split(\"\
    \")).size;\n    if (unique > max_unique) {\n      max_unique = unique;\n     \
    \ max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"bcd\", \"cde\", \"cdf\", \"bbb\"]));\nconsole.log(find_max([\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaa\", \"aaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"\
    , \"aaaaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"\
    aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]));\n", "    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        let chars = new Set();\n        for (let char of word) {\n          \
    \  if (!chars.has(char)) {\n                chars.add(char);\n               \
    \ count++;\n            }\n        }\n        if (count > max_count) {\n     \
    \       max_count = count;\n            max_word = word;\n        }\n    }\n \
    \   return max_word;\n}\n", "    let max = 0;\n    let max_word = \"\";\n    for\
    \ (let word of words) {\n        let unique_chars = new Set(word);\n        if\
    \ (unique_chars.size > max) {\n            max = unique_chars.size;\n        \
    \    max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"bcd\", \"cde\", \"abcd\", \"abcde\"]));\n", "  let max = 0;\n  let maxWord\
    \ = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n\
    \    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['hello', 'world', 'before',\
    \ 'all']));\nconsole.log(find_max(['hello', 'world', 'after', 'all']));\nconsole.log(find_max(['hello',\
    \ 'world', 'before', 'all']));\nconsole.log(find_max(['hello', 'world', 'after',\
    \ 'all']));\nconsole.log(find_max(['ant', 'anna', 'bonobo', 'baby']));\n", " \
    \ let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars\
    \ = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"aaa\", \"aa\", \"bbb\"]));\n", "    let max = 0;\n    let max_word = \"\
    \";\n    for (let word of words) {\n        let unique_chars = new Set(word.split(\"\
    \"));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));", "  let max = 0;\n\
    \  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new\
    \ Set(word.split(\"\"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"a\", \"abcd\", \"ab\", \"abcde\"]));\n", "  let max_word = words[0];\n\
    \  let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n", "    let max:\
    \ number = 0;\n    let maxWord: string = \"\";\n    for (let i: number = 0; i\
    \ < words.length; i++) {\n        let word: string = words[i];\n        let uniqueChars:\
    \ string[] = [];\n        for (let j: number = 0; j < word.length; j++) {\n  \
    \          if (uniqueChars.indexOf(word[j]) === -1) {\n                uniqueChars.push(word[j]);\n\
    \            }\n        }\n        if (uniqueChars.length > max) {\n         \
    \   max = uniqueChars.length;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\"\
    , \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"\
    abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdef", "   \
    \ let max: number = 0;\n    let max_word: string = \"\";\n    for (let word of\
    \ words) {\n        let unique_chars: number = 0;\n        for (let i = 0; i <\
    \ word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i]))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max) {\n            max = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"\
    aaaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\"\
    , \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"\
    abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log", "  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n\
    \    let uniqueChars = word.split(\"\").filter((v, i, a) => a.indexOf(v) === i);\n\
    \    if (uniqueChars.length > max) {\n      max = uniqueChars.length;\n      maxWord\
    \ = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\",\
    \ \"cde\", \"efg\", \"cde\", \"ghi\"]));\nconsole.log(find_max([\"abc\", \"cde\"\
    , \"efg\", \"cde\", \"ghi\", \"abc\"]));\n", "  let max = 0;\n  let maxWord =\
    \ \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"\
    ));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"\
    aba\", \"1221\"]));\n", "    let max = 0;\n    let max_word = '';\n    for (let\
    \ word of words) {\n        let unique_chars = new Set(word.split(''));\n    \
    \    if (unique_chars.size > max) {\n            max = unique_chars.size;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \   let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i <\
    \ words.length; i++) {\n        let word = words[i];\n        let count = 0;\n\
    \        let unique_chars = {};\n        for (let j = 0; j < word.length; j++)\
    \ {\n            let char = word[j];\n            if (!unique_chars[char]) {\n\
    \                count++;\n                unique_chars[char] = true;\n      \
    \      }\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"\
    abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\"\
    , \"abcd\"]));\nconsole.log(find_max([\"a\", \"aaa\", \"aa\", \"bbb\"]));\n",
  "    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg", "  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\"\
    , \"cde\", \"efg\", \"abcd\", \"abd\"]));\n", "  let max = 0;\n  let maxWord =\
    \ \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\"\
    , \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"def\", \"ghi\", \"\
    jklm\"]));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcdef\", \"abcd\", \"abcde\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"a\"]));\n", "  let max = 0;\n  let maxWord = '';\n  for (let\
    \ word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size\
    \ > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconsole.log(find_max(['abc', 'cde', 'efg']));\nconsole.log(find_max(['abc',\
    \ 'cde', 'efg', 'abcd']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd',\
    \ 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef']));\n\
    console.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg']));\n\
    console.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abc',\
    \ 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk']));\n\
    console.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl']));", " \
    \   let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let ch of word) {\n            if (word.indexOf(ch)\
    \ === word.lastIndexOf(ch)) {\n                count++;\n            }\n     \
    \   }\n        if (count > max_count) {\n            max_count = count;\n    \
    \        max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\n", "  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\
    \"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"\
    xyz\", \"aba\", \"1221\"]));\n", "  let max: number = 0;\n  let max_word: string\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars: string[] = [];\n\
    \    for (let char of word) {\n      if (unique_chars.indexOf(char) === -1) {\n\
    \        unique_chars.push(char);\n      }\n    }\n    if (unique_chars.length\
    \ > max) {\n      max = unique_chars.length;\n      max_word = word;\n    }\n\
    \  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\n\
    console.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\",\
    \ \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\",", "  let max\
    \ = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new\
    \ Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['a',\
    \ 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab',\
    \ 'abc', 'd', 'cd', 'bcd', 'abcd']) === 'abcd');\nconsole.log(find_max(['a', 'ab',\
    \ 'abc', 'd', 'cd', 'bcd', 'abcd']) === 'abc');\n", "    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word.split(''));\n        if (unique_chars.size > max_count) {\n \
    \           max_count = unique_chars.size;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'de',\
    \ 'fghi', 'jklmno']));\n", "  let max = 0;\n  let maxWord = \"\";\n  for (let\
    \ i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique =\
    \ 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n\
    \      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n\
    \      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord =\
    \ word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max(",
  "  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n \
    \     maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"cde\", \"efg\", \"cdf\"]));\nconsole.log(find_max([\"abc\", \"cde\",\
    \ \"efg\", \"cdf\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"\
    efg\", \"cdf\", \"abcdefg\", \"abcdefgh\"]));\n", "  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n   \
    \ }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\"\
    , \"de\", \"ijkl\", \"mn\", \"o\"]));\n", "  let max = 0;\n  let max_word = \"\
    \";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\
    \"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n  \
    \    max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"\
    ]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\n\
    console.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    ]));\n", "    let max = 0;\n    let max_word = '';\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        const unique = new Set(word.split(''));\n\
    \        if (unique.size > max) {\n            max = unique.size;\n          \
    \  max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc',\
    \ 'defgh', 'a', 'abcd']));\nconsole.log(find_max(['abc', 'defgh', 'a', 'abcd',\
    \ 'abcd']));\nconsole.log(find_max(['abc', 'defgh', 'a', 'abcd', 'abcd', 'abcde']));\n\
    console.log(find_max(['abc', 'defgh', 'a', 'abcd', 'abcd', 'abcde', 'abcdef']));\n",
  "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++)\
    \ {\n    const word = words[i];\n    const uniqueChars = new Set(word.split(\"\
    \"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n    \
    \  maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"defg\", \"ghijkl\"]));\n", "    let max: number = 0;\n    let maxWord:\
    \ string = \"\";\n    for (let word of words) {\n        let unique: string[]\
    \ = [];\n        for (let char of word) {\n            if (unique.indexOf(char)\
    \ === -1) {\n                unique.push(char);\n            }\n        }\n  \
    \      if (unique.length > max) {\n            max = unique.length;\n        \
    \    maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\"\
    , \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"\
    ]));\nconsole.log(find_max([\"aabbcc\", \"aaabbbccc\", \"aaaabbbcccc\"]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
