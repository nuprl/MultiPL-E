name: HumanEval_69_search
language: ts
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\n//\
  \ Examples:\nfunction search(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5,\
  \ 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3,\
  \ 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2,\
  \ 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6,\
  \ 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2,\
  \ 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n\
  \  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6,\
  \ 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n\
  \  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10,\
  \ 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4,\
  \ 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10,\
  \ 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6,\
  \ 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6,\
  \ 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["    let max = Math.max(...lst);\n    let freq = {};\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]\
    \ += 1;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n \
    \   for (let i = max; i > 0; i--) {\n        if (freq[i] >= i) {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4,\
    \ 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\n\
    console.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6,\
    \ 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5,\
    \ 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3,\
    \ 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8,\
    \ 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5,\
    \ 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8,", "    let map\
    \ = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++) {\n \
    \       let key = lst[i];\n        if (map.has(key)) {\n            map.set(key,\
    \ map.get(key) + 1);\n        } else {\n            map.set(key, 1);\n       \
    \ }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      let key = lst[i];\n        if (map.get(key) >= key && key > max) {\n  \
    \          max = key;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170", "    let max = -1;\n    let freq =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n            freq = 1;\n        } else if (lst[i] ==\
    \ max) {\n            freq++;\n        }\n    }\n    return max > freq ? -1 :\
    \ max;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]));\n\
    console.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4, 4, 5, 5", "    let result = -1;\n    let freq = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let j =\
    \ 0; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n          \
    \      count++;\n            }\n        }\n        if (count >= lst[i] && lst[i]\
    \ > result) {\n            result = lst[i];\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]));", " \
    \   let freq = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]] += 1;\n        } else\
    \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 1, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6", "    let count = 0;\n\
    \    let num = 0;\n    let max = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst.length; j++) {\n            if (lst[i] ===\
    \ lst[j]) {\n                count++;\n            }\n        }\n        if (count\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n       \
    \ count = 0;\n    }\n    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4,\
    \ 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "    let max\
    \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j])\
    \ {\n                count++;\n            }\n        }\n        if (count >=\
    \ lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n   \
    \ return max;\n}\n\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\
    \ 4, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4,\
    \ 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4,\
    \ 4]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3,\
    \ 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7,\
    \ 7]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4,", "    let max =\
    \ -1;\n    let freq = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst.length; j++) {\n            if (lst[i]\
    \ === lst[j]) {\n                count++;\n            }\n        }\n        if\
    \ (lst[i] > max && count >= lst[i]) {\n            max = lst[i];\n           \
    \ freq = count;\n        }\n        count = 0;\n    }\n    return max;\n}\n\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\
    \ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\
    \ 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,\
    \ 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,\
    \ 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\
    \ 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,\
    \ 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,\
    \ 175, 176, 177, 178, 179, 180, 181,", "    let result = -1;\n    let frequency\
    \ = 0;\n    let frequencyMap = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (frequencyMap.has(lst[i])) {\n            frequencyMap.set(lst[i],\
    \ frequencyMap.get(lst[i]) + 1);\n        } else {\n            frequencyMap.set(lst[i],\
    \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (frequencyMap.get(lst[i]) >= lst[i] && lst[i] > frequency) {\n            frequency\
    \ = lst[i];\n            result = lst[i];\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158", "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "    let result = -1;\n    let frequency\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > frequency)\
    \ {\n            frequency = lst.filter(x => x === lst[i]).length;\n         \
    \   if (lst[i] <= frequency) {\n                result = lst[i];\n           \
    \ }\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\
    \ 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,\
    \ 198, 199, 200", "    let map = new Map<number, number>();\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166,", "    let result: number = -1;\n    let max: number = 0;\n \
    \   let map: Map<number, number> = new Map();\n    for (let i: number = 0; i <\
    \ lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    for (let [key, value] of map) {\n        if (key <= value\
    \ && key > max) {\n            max = key;\n            result = key;\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4,\
    \ 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]));\nconsole.log(search([1, 1, 2, 2,\
    \ 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14,\
    \ 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23,\
    \ 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33,\
    \ 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42,\
    \ 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52,\
    \ 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61,\
    \ 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71,\
    \ 71, 72, 72", "    let result = -1;\n    let count = 0;\n    let max = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        count = 0;\n        for (let\
    \ j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n      \
    \          count++;\n            }\n        }\n        if (count >= lst[i] &&\
    \ lst[i] > max) {\n            max = lst[i];\n            result = max;\n    \
    \    }\n    }\n    return result;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,", "    let freq: number[]\
    \ = [];\n    let max: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n        }\n        if\
    \ (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n          \
    \  freq[lst[i]] = 1;\n        }\n    }\n    for (let i = max; i > 0; i--) {\n\
    \        if (freq[i] >= i) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,\
    \ 9, 9, 10, 10]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7,\
    \ 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17,\
    \ 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27,\
    \ 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36,\
    \ 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46,\
    \ 46, 47, 47, 48, 48, 49, 49, 50, 50]));\nconsole.log(search([1, 1, 2, 2, 3, 3,\
    \ 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14,\
    \ 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22", "    let max\
    \ = -1;\n    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let key of map.keys()) {\n        if (key <= map.get(key) && key > max)\
    \ {\n            max = key;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177",
  "    let result = -1;\n    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > result) {\n            result = lst[i];\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6", "    let map = new Map<number, number>();\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166,", "    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
    \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4", "    let result = -1;\n    let count = 0;\n    let max\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        count = 0;\n     \
    \   for (let j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j])\
    \ {\n                count++;\n            }\n        }\n        if (count >=\
    \ lst[i] && lst[i] > max) {\n            max = lst[i];\n            result = max;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\
    \ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,\
    \ 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\
    \ 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,\
    \ 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,\
    \ 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,\
    \ 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182,",
  "    let result = -1;\n    let freq = 0;\n    let map = new Map();\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > result) {\n            result = lst[i];\n        }\n \
    \   }\n    return result;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\
    \ 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,", "    let\
    \ freq = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n\
    \            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176", "    let max\
    \ = 0;\n    let map = new Map();\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) +\
    \ 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
    \   for (let [key, value] of map) {\n        if (key <= value && key > max) {\n\
    \            max = key;\n        }\n    }\n    return max > 0 ? max : -1;\n}\n\
    \nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4", "    let map = new Map<number, number>();\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max = -1;\n    for (let [key, value] of map) {\n   \
    \     if (key <= value && key > max) {\n            max = key;\n        }\n  \
    \  }\n    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50]));\nconsole.log(search([1, 1, 1, 1, 1]));\nconsole.log(search([1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,", "    let count: number\
    \ = 0;\n    let max: number = 0;\n    let maxCount: number = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] === max) {\n            count++;\n        }\n    }\n    if (count\
    \ >= max) {\n        return max;\n    }\n    else {\n        return -1;\n    }\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n\
    \        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n  \
    \      } else {\n            map.set(num, 1);\n        }\n    }\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        if (map.get(num)\
    \ >= num && num > max) {\n            max = num;\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13,\
    \ 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13,\
    \ 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\
    \ 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12",
  "    let max = 0;\n    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let [key, value] of map) {\n        if (key <= value && key > max) {\n\
    \            max = key;\n        }\n    }\n    return max > 0 ? max : -1;\n}\n\
    \nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,\
    \ 10]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,\
    \ 9, 9, 10, 10, 11]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\
    \ 7, 7, 8, 8, 9, 9, 10, 10, 11, 11]));\nconsole.log(search([1, 1, 2, 2, 3, 3,\
    \ 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12]));\n\
    console.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,\
    \ 10, 11, 11, 12, 12, 13]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5,\
    \ 6, 6, 7, 7, 8, 8, 9, 9, 10", "    let map = new Map<number, number>();\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n   \
    \         map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n          \
    \  map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n    for (let [key,\
    \ value] of map) {\n        if (key <= value && key > max) {\n            max\
    \ = key;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(search([1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1,", "    let max = -1;\n    let freq = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let\
    \ j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n      \
    \          count++;\n            }\n        }\n        if (count >= lst[i] &&\
    \ lst[i] > max) {\n            max = lst[i];\n            freq = count;\n    \
    \    }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(search([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23", "    let result\
    \ = -1;\n    let map = new Map();\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) +\
    \ 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > result) {\n            result = lst[i];\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]));\n\
    console.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2,\
    \ 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2,\
    \ 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2,\
    \ 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2,\
    \ 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]));", "    let max\
    \ = -1;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n    \
    \    if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n         \
    \   count++;\n        }\n    }\n    if (count >= max) {\n        return max;\n\
    \    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 3, 3, 3, 3, 4, 4, 4,\
    \ 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6", "    let\
    \ max = Math.max(...lst);\n    let result = -1;\n    for (let i = 1; i <= max;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < lst.length; j++)\
    \ {\n            if (lst[j] === i) {\n                count++;\n            }\n\
    \        }\n        if (count >= i) {\n            result = i;\n        }\n  \
    \  }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 2]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3,", "    let result: number = -1;\n    let max: number = 0;\n    let\
    \ counter: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n \
    \       for (let j: number = 0; j < lst.length; j++) {\n            if (lst[i]\
    \ === lst[j]) {\n                counter++;\n            }\n        }\n      \
    \  if (lst[i] > max && counter >= lst[i]) {\n            max = lst[i];\n     \
    \       result = max;\n        }\n        counter = 0;\n    }\n    return result;\n\
    }\nconsole.log(search([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6", "    let result: number = -1;\n    let counter: number = 0;\n    let\
    \ max: number = 0;\n    lst.sort((a, b) => a - b);\n    for (let i: number = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] === lst[i + 1]) {\n            counter++;\n\
    \        } else {\n            counter = 0;\n        }\n        if (counter >=\
    \ lst[i]) {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\
    console.log(search([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6,", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11,\
    \ 12, 13]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11,\
    \ 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13,", "    let max = -1;\n    let count = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n    \
    \        max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n   \
    \ }\n    if (count >= max) {\n        return max;\n    } else {\n        return\
    \ -1;\n    }\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,\
    \ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\
    \ 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,\
    \ 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,\
    \ 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\
    \ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185,",
  "    let freq = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
    \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let key in freq)\
    \ {\n        if (freq[key] >= key && key > max) {\n            max = key;\n  \
    \      }\n    }\n    return max;\n}\nconsole.log(search([1, 2, 3, 4, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", " \
    \   let map = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,\
    \ 4, 4, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4,\
    \ 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4,\
    \ 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 2,\
    \ 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7,\
    \ 7, 7, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4,\
    \ 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 2, 3,", "  let result = -1;\n\
    \  let count = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    for (let j = 0; j < lst.length; j++) {\n      if (lst[i] === lst[j]) {\n\
    \        count++;\n      }\n    }\n    if (count >= lst[i] && lst[i] > max) {\n\
    \      max = lst[i];\n      result = max;\n    }\n    count = 0;\n  }\n  return\
    \ result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(search([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\
    \ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\
    \ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\
    \ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\
    \ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\
    \ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\
    \ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15", "    let max = 0;\n    let\
    \ maxFreq = 0;\n    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n\
    \            freq[lst[i]] = 1;\n        }\n    }\n    for (let key in freq) {\n\
    \        if (freq[key] >= key && key > max) {\n            max = key;\n      \
    \      maxFreq = freq[key];\n        }\n    }\n    return max;\n}\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178",
  "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,\
    \ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,\
    \ 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,\
    \ 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,\
    \ 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,", "    let\
    \ max = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n    \
    \        count++;\n        }\n    }\n    if (count >= max) {\n        return max;\n\
    \    } else {\n        return -1;\n    }\n}\n\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 10, 10, 11, 11]));\nconsole.log(search([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 10, 10, 11, 11, 11]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 10, 10, 11, 11, 11, 12]));\nconsole.log(search([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 10, 10, 11, 11, 11, 12, 12]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13]));\nconsole.log(search([1",
  "    let max = -1;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        let count = 0;\n        for (let j = 0; j < lst.length; j++) {\n\
    \            if (lst[i] === lst[j]) {\n                count++;\n            }\n\
    \        }\n        if (count >= lst[i] && lst[i] > max) {\n            max =\
    \ lst[i];\n            freq = count;\n        }\n    }\n    return max;\n}\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\
    \ 179, 180, 181, 182, 183, 184,", "    let count = 0;\n    let num = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst.length;\
    \ j++) {\n            if (lst[i] === lst[j]) {\n                count++;\n   \
    \         }\n        }\n        if (count >= lst[i] && lst[i] > num) {\n     \
    \       num = lst[i];\n        }\n        count = 0;\n    }\n    return num >\
    \ 0 ? num : -1;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,\
    \ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\
    \ 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,\
    \ 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,\
    \ 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\
    \ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186",
  "    let map: Map<number, number> = new Map<number, number>();\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max: number = -1;\n    for (let key of map.keys()) {\n\
    \        if (key <= map.get(key) && key > max) {\n            max = key;\n   \
    \     }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50]));\nconsole.log(search([1, 1, 1, 1, 1]));\nconsole.log(search([1,\
    \ 2, 2, 1, 2, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7,", "    let max = 0;\n    let freq = 0;\n    let map = new Map();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of map)\
    \ {\n        if (key >= value && key > max) {\n            max = key;\n      \
    \      freq = value;\n        }\n    }\n    return max;\n}\nconsole.log(search([1,\
    \ 1, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3]));\n\
    console.log(search([1, 1, 2, 2, 2, 3, 3, 3]));\nconsole.log(search([1, 1, 1, 2,\
    \ 2, 2, 3, 3, 3]));\nconsole.log(search([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]));\n\
    console.log(search([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1,\
    \ 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]));\nconsole.log(search([1,\
    \ 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6]));\nconsole.log(search([1,\
    \ 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7,\
    \ 7]));\nconsole.log(search([1, 1, 1, 1,", "    let result: number = -1;\n   \
    \ let frequency: number = 0;\n    for (let i: number = 0; i < lst.length; i++)\
    \ {\n        let count: number = 0;\n        for (let j: number = 0; j < lst.length;\
    \ j++) {\n            if (lst[i] === lst[j]) {\n                count++;\n   \
    \         }\n        }\n        if (count >= lst[i] && count > frequency) {\n\
    \            result = lst[i];\n            frequency = count;\n        }\n   \
    \ }\n    return result;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 11]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 11, 11]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 11, 11, 11]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12]));\nconsole.log(search([1,\
    \ 2, 3, 4,", "    let count = 0;\n    let max = 0;\n    let maxCount = 0;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst.length;\
    \ j++) {\n            if (lst[i] === lst[j]) {\n                count++;\n   \
    \         }\n        }\n        if (count >= lst[i] && count > maxCount) {\n \
    \           max = lst[i];\n            maxCount = count;\n        }\n        count\
    \ = 0;\n    }\n    return max;\n}\nconsole.log(search([1, 2, 3, 3, 3, 4, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", "    let max = -1;\n\
    \    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let num = lst[i];\n        if (map.has(num)) {\n           \
    \ map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num,\
    \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let\
    \ num = lst[i];\n        if (map.get(num) >= num && num > max) {\n           \
    \ max = num;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166, 167, 168, 169, 170", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        let key = lst[i];\n\
    \        if (map.has(key)) {\n            map.set(key, map.get(key) + 1);\n  \
    \      } else {\n            map.set(key, 1);\n        }\n    }\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let key = lst[i];\n        if (map.get(key)\
    \ >= key && key > max) {\n            max = key;\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170",
  "    let nums = lst.sort((a, b) => a - b);\n    let max = Math.max(...nums);\n \
    \   let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i]\
    \ === max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n\
    \        return max;\n    } else {\n        return -1;\n    }\n}\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\
    \ 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\
    \ 195, 196, 197", "    let result = -1;\n    let count = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        for (let j = 0; j < lst.length; j++) {\n\
    \            if (lst[i] === lst[j]) {\n                count++;\n            }\n\
    \        }\n        if (count >= lst[i] && lst[i] > result) {\n            result\
    \ = lst[i];\n        }\n        count = 0;\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6,", "    let nums = lst.sort((a, b) => a - b);\n    let freq =\
    \ {};\n    let max = 0;\n    for (let i = 0; i < nums.length; i++) {\n       \
    \ if (freq[nums[i]]) {\n            freq[nums[i]]++;\n        } else {\n     \
    \       freq[nums[i]] = 1;\n        }\n        if (freq[nums[i]] >= nums[i] &&\
    \ nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177,", "    let map = new Map<number, number>();\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 30, 30, 30]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13,", "    let max = -1;\n    let freq = 0;\n    let map = new Map();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 2,\
    \ 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,\
    \ 7, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4,\
    \ 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 2", "    let max\
    \ = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n        \
    \    count++;\n        }\n    }\n    if (count >= max) {\n        return max;\n\
    \    } else {\n        return -1;\n    }\n}\n\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\
    \ 182, 183, 184, 185, 186", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 2,\
    \ 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,\
    \ 7, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4,\
    \ 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 2, 3,", "    let\
    \ max = 0;\n    let count = 0;\n    let result = -1;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ === max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n\
    \        result = max;\n    }\n    return result;\n}\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,\
    \ 180, 181, 182, 183, 184, 185", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22,", "    let nums = lst.sort((a, b) => a - b);\n    let max\
    \ = nums[nums.length - 1];\n    let freq = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        if (nums[i] === nums[i + 1]) {\n            freq++;\n      \
    \  } else {\n            if (nums[i] > freq) {\n                freq = 0;\n  \
    \          } else {\n                return nums[i];\n            }\n        }\n\
    \    }\n    return -1;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\
    \ 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\
    \ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182,", "  \
    \  let map = new Map<number, number>();\n    let max = -1;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,\
    \ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,\
    \ 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,\
    \ 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,\
    \ 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,", "    let\
    \ result = -1;\n    let frequency: { [key: number]: number } = {};\n    lst.forEach(x\
    \ => {\n        if (frequency[x]) {\n            frequency[x]++;\n        } else\
    \ {\n            frequency[x] = 1;\n        }\n    });\n    for (let key in frequency)\
    \ {\n        if (frequency[key] >= Number(key) && Number(key) > result) {\n  \
    \          result = Number(key);\n        }\n    }\n    return result;\n}\n\n\
    console.log(search([1, 1, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1,\
    \ 2, 2, 3, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6]));\nconsole.log(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,\
    \ 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13,\
    \ 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16,\
    \ 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19,",
  "    let result: number = -1;\n    let count: number = 0;\n    let max: number =\
    \ 0;\n    let maxCount: number = 0;\n    let maxIndex: number = 0;\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n       \
    \     max = lst[i];\n        }\n    }\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === max) {\n            maxCount++;\n           \
    \ maxIndex = i;\n        }\n    }\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === lst[maxIndex]) {\n            count++;\n    \
    \    }\n    }\n    if (count >= max) {\n        result = max;\n    }\n    return\
    \ result;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142", "    let freq = {};\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
    \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    let result = -1;\n \
    \   for (let key in freq) {\n        if (freq[key] >= parseInt(key) && parseInt(key)\
    \ > result) {\n            result = parseInt(key);\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\
    \ 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,\
    \ 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,", "    let max = 0;\n    let\
    \ count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ max) {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] === max) {\n            count++;\n  \
    \      }\n    }\n    if (count >= max) {\n        return max;\n    } else {\n\
    \        return -1;\n    }\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186,", "    let result = -1;\n    let count = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        for (let j = 0; j < lst.length; j++) {\n\
    \            if (lst[i] === lst[j]) {\n                count++;\n            }\n\
    \        }\n        if (count >= lst[i] && lst[i] > result) {\n            result\
    \ = lst[i];\n        }\n        count = 0;\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\
    \ 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,", "    let freq: number[]\
    \ = [];\n    let max: number = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (freq[lst[i]] === undefined) {\n            freq[lst[i]] = 1;\n  \
    \      } else {\n            freq[lst[i]]++;\n        }\n    }\n    for (let i\
    \ = 0; i < freq.length; i++) {\n        if (freq[i] >= i && i > max) {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,", "   \
    \ let result: number = -1;\n    let freq: number = 0;\n    let freqMap: Map<number,\
    \ number> = new Map();\n    for (let i: number = 0; i < lst.length; i++) {\n \
    \       if (freqMap.has(lst[i])) {\n            freqMap.set(lst[i], freqMap.get(lst[i])\
    \ + 1);\n        } else {\n            freqMap.set(lst[i], 1);\n        }\n  \
    \  }\n    for (let i: number = 0; i < lst.length; i++) {\n        if (freqMap.get(lst[i])\
    \ >= lst[i] && lst[i] > result) {\n            result = lst[i];\n        }\n \
    \   }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 3, 3, 3, 4, 4, 4,\
    \ 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\
    \ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\
    \ 94, 95, 96, 97, 98, 99, 100]));", "    let result = -1;\n    let frequency =\
    \ 0;\n    let map = new Map();\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) +\
    \ 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > result) {\n            result = lst[i];\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 20, 20, 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,", "    let frequency = {};\n    let\
    \ max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (frequency[lst[i]])\
    \ {\n            frequency[lst[i]]++;\n        } else {\n            frequency[lst[i]]\
    \ = 1;\n        }\n    }\n    for (let key in frequency) {\n        if (frequency[key]\
    \ >= key && key > max) {\n            max = key;\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5,\
    \ 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,\
    \ 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1, 1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 8, 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]));\nconsole.log(search([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 8, 8, 8, 8, 8, 8,", "    let max = lst.reduce((a, b) => Math.max(a,\
    \ b));\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] === max) {\n            count++;\n        }\n    }\n    if (count\
    \ >= max) {\n        return max;\n    } else {\n        return -1;\n    }\n}\n\
    \nconsole.log(search([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5,\
    \ 5, 5]));\nconsole.log(search([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5,\
    \ 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6]));\nconsole.log(search([1, 1, 1, 2, 2, 2, 3,\
    \ 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6", "    let map = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20,\
    \ 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 30, 30, 30]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,", "    let max = Math.max(...lst);\n    let\
    \ count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] ===\
    \ max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n  \
    \      return max;\n    } else {\n        return -1;\n    }\n}\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 11]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11, 12]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11, 12, 12]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13]));\nconsole",
  "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
    \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5,\
    \ 5, 5]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]));\n\
    console.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5,\
    \ 6, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7]));\n\
    console.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5,\
    \ 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8]));\n\
    console.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5,", " \
    \   let result: number = -1;\n    let count: number = 0;\n    let max: number\
    \ = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        for (let j:\
    \ number = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n \
    \               count++;\n            }\n        }\n        if (lst[i] > max &&\
    \ count >= lst[i]) {\n            max = lst[i];\n            result = max;\n \
    \       }\n        count = 0;\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,",
  "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 1; i <= max;\
    \ i++) {\n        for (let j = 0; j < lst.length; j++) {\n            if (lst[j]\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ >= i) {\n            return i;\n        }\n        count = 0;\n    }\n    return\
    \ -1;\n}\n\nconsole.log(search([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]));\n\
    console.log(search([1, 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]));\nconsole.log(search([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100]));", "    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
    \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178, 179, 180, 181", "    let map = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\n\
    console.log(search([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,", "    let max = -1;\n    let\
    \ map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) +\
    \ 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4,\
    \ 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "   \
    \ let obj = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else {\n  \
    \          obj[lst[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n  \
    \      if (obj[key] >= key && key > max) {\n            max = key;\n        }\n\
    \    }\n    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\
    \ 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\
    \ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\
    \ 185, 186, 187, 188, 189, 190", "    let result = -1;\n    let map = new Map();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of map)\
    \ {\n        if (key <= value && key > result) {\n            result = key;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181",
  "    let freq: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n       \
    \ } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i =\
    \ max; i > 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n   \
    \     }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4]));\nconsole.log(search([1, 1, 1, 1, 1]));\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));", "    let result:\
    \ number = -1;\n    let frequency: number = 0;\n    let frequencyMap: Map<number,\
    \ number> = new Map();\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (frequencyMap.has(lst[i])) {\n            frequencyMap.set(lst[i], frequencyMap.get(lst[i])\
    \ + 1);\n        } else {\n            frequencyMap.set(lst[i], 1);\n        }\n\
    \    }\n    for (let [key, value] of frequencyMap) {\n        if (key <= value\
    \ && key > frequency) {\n            frequency = key;\n            result = key;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166", "    let obj = {};\n    let max = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (obj[lst[i]]) {\n            obj[lst[i]] += 1;\n        }\
    \ else {\n            obj[lst[i]] = 1;\n        }\n    }\n    for (let key in\
    \ obj) {\n        if (obj[key] >= Number(key) && Number(key) > max) {\n      \
    \      max = Number(key);\n        }\n    }\n    return max === 0 ? -1 : max;\n\
    }\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41,", "    let map = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n    map.forEach((value,\
    \ key) => {\n        if (key > value && key > max) {\n            max = key;\n\
    \        }\n    });\n    return max;\n}\n\nconsole.log(search([1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\n\
    console.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\
    \ 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5,\
    \ 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\
    \ 7, 7, 8", "    let max = Math.max(...lst);\n    let count = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            count++;\n\
    \        }\n    }\n    if (count >= max) {\n        return max;\n    } else {\n\
    \        return -1;\n    }\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206,", "    let result: number = -1;\n    let\
    \ frequency: number = 0;\n    let frequencyMap: Map<number, number> = new Map();\n\
    \    for (let i: number = 0; i < lst.length; i++) {\n        if (frequencyMap.has(lst[i]))\
    \ {\n            frequencyMap.set(lst[i], frequencyMap.get(lst[i]) + 1);\n   \
    \     } else {\n            frequencyMap.set(lst[i], 1);\n        }\n    }\n \
    \   for (let i: number = 0; i < lst.length; i++) {\n        if (frequencyMap.get(lst[i])\
    \ >= lst[i] && lst[i] > result) {\n            result = lst[i];\n        }\n \
    \   }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 3, 3, 3, 3, 4, 4,\
    \ 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]));\nconsole.log(search([1, 1, 2,\
    \ 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5,\
    \ 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8", " \
    \   let freq = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
    \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    return max;\n}\nconsole.log(search([1,\
    \ 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,", "    let map = new\
    \ Map();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));",
  "    let max = 0;\n    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max > 0 ? max : -1;\n}\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\n\
    console.log(search([1, 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6]));\n\
    console.log(search([1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 5, 6]));\nconsole.log(search([1,\
    \ 2, 3, 4, 4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6", "    let freq: number[] = [];\n    let\
    \ max: number = 0;\n    let result: number = -1;\n    for (let i: number = 0;\
    \ i < lst.length; i++) {\n        if (freq[lst[i]] == undefined) {\n         \
    \   freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n       \
    \ }\n        if (max < lst[i]) {\n            max = lst[i];\n        }\n    }\n\
    \    for (let i: number = 1; i <= max; i++) {\n        if (freq[i] >= i) {\n \
    \           result = i;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165", "    let map = new Map<number, number>();\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166,", "    let max = -1;\n    let map = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166,", "    let max = Math.max(...lst);\n    let count = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n \
    \           count++;\n        }\n    }\n    if (count >= max) {\n        return\
    \ max;\n    } else {\n        return -1;\n    }\n}\nconsole.log(search([1, 1,\
    \ 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3", "    let\
    \ map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) +\
    \ 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
    \   let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10,", "    let map = new Map<number, number>();\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(search([1, 1, 1, 1, 1]));\n\
    console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51]));\nconsole.log(search([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1,", "    let max = 0;\n    let map = new Map();\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4", "    let result = -1;\n    let map = new Map();\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    for (let [key, value] of map) {\n        if (key <= value\
    \ && key > result) {\n            result = key;\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,\
    \ 8, 8, 9, 9, 10, 10]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6,\
    \ 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16,\
    \ 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26,\
    \ 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35,\
    \ 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45,\
    \ 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50]));\nconsole.log(search([1, 1, 2,\
    \ 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,\
    \ 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23,\
    \ 23, 24, 24, 25, 25, 26, 26, 27", "    let freq = {};\n    let max = 0;\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n      \
    \      freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (let i = max; i > 0; i--) {\n        if (freq[i] >= i) {\n     \
    \       return i;\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1", "    let freq: number[]\
    \ = [];\n    let max: number = 0;\n    let maxFreq: number = 0;\n    let result:\
    \ number = -1;\n    for (let i: number = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let\
    \ i: number = 0; i <= max; i++) {\n        freq[i] = 0;\n    }\n    for (let i:\
    \ number = 0; i < lst.length; i++) {\n        freq[lst[i]]++;\n    }\n    for\
    \ (let i: number = 0; i <= max; i++) {\n        if (freq[i] >= i && freq[i] >=\
    \ maxFreq) {\n            maxFreq = freq[i];\n            result = i;\n      \
    \  }\n    }\n    return result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139,", "    let map: Map<number, number> = new Map();\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n       \
    \     map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i],\
    \ 1);\n        }\n    }\n    let result: number = -1;\n    map.forEach((value,\
    \ key) => {\n        if (key > value && key > result) {\n            result =\
    \ key;\n        }\n    });\n    return result;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 1, 1, 2, 2, 2, 3, 3, 3,\
    \ 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]));\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,\
    \ 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16,\
    \ 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22,\
    \ 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28,\
    \ 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35,\
    \ 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41,\
    \ 41, 42, 42, 42, 43, 43, 43", "    let max = Math.max(...lst);\n    let result\
    \ = -1;\n    for (let i = 1; i <= max; i++) {\n        let count = 0;\n      \
    \  for (let j = 0; j < lst.length; j++) {\n            if (lst[j] === i) {\n \
    \               count++;\n            }\n        }\n        if (count >= i) {\n\
    \            result = i;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,\
    \ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,\
    \ 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,\
    \ 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,\
    \ 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,", "    let max = -1;\n\
    \    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n      \
    \          count++;\n            }\n        }\n        if (count >= lst[i] &&\
    \ lst[i] > max) {\n            max = lst[i];\n        }\n        count = 0;\n\
    \    }\n    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\
    \ 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\
    \ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\
    \ 185, 186, 187, 188,", "    let dict: { [key: number]: number } = {};\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (dict[lst[i]]) {\n          \
    \  dict[lst[i]]++;\n        } else {\n            dict[lst[i]] = 1;\n        }\n\
    \    }\n    let max = -1;\n    for (let key in dict) {\n        if (dict[key]\
    \ >= parseInt(key) && parseInt(key) > max) {\n            max = parseInt(key);\n\
    \        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6", "    let map = new Map();\n\
    \    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5,\
    \ 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\
    \ 4]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3,\
    \ 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7,\
    \ 7]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5,", "    let map: { [key: number]: number } = {};\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (map[lst[i]]) {\n            map[lst[i]]++;\n\
    \        } else {\n            map[lst[i]] = 1;\n        }\n    }\n    let max\
    \ = -1;\n    for (let key in map) {\n        if (map[key] >= parseInt(key) &&\
    \ parseInt(key) > max) {\n            max = parseInt(key);\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,\
    \ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,\
    \ 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,\
    \ 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,\
    \ 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,\
    \ 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180", "    let max = -1;\n\
    \    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,", "    let max = -1;\n\
    \    let count = 0;\n    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166", "    let max = -1;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst.filter(x => x ===\
    \ lst[i]).length >= lst[i] && lst[i] > max) {\n            max = lst[i];\n   \
    \     }\n    }\n    return max;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211", "    let map: Map<number,\
    \ number> = new Map();\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) + 1);\n   \
    \     } else {\n            map.set(lst[i], 1);\n        }\n    }\n    let max:\
    \ number = -1;\n    for (let key of map.keys()) {\n        if (key <= map.get(key)\
    \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175", "    let max = Math.max(...lst);\n    let freq = {};\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
    \        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let\
    \ i = max; i > 0; i--) {\n        if (freq[i] >= i) {\n            return i;\n\
    \        }\n    }\n    return -1;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184", "    let max = 0;\n    let maxFreq = 0;\n    let freq = {};\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
    \        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let\
    \ key in freq) {\n        if (freq[key] >= key && key > max) {\n            max\
    \ = key;\n            maxFreq = freq[key];\n        }\n    }\n    return max;\n\
    }\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178", "  let result = -1;\n  let max = 0;\n  let map = new\
    \ Map();\n  for (let i = 0; i < lst.length; i++) {\n    if (map.has(lst[i])) {\n\
    \      map.set(lst[i], map.get(lst[i]) + 1);\n    } else {\n      map.set(lst[i],\
    \ 1);\n    }\n  }\n  for (let [key, value] of map) {\n    if (key <= value &&\
    \ key > max) {\n      max = key;\n      result = key;\n    }\n  }\n  return result;\n\
    }\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\
    \ 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5,\
    \ 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\
    \ 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9", "    let freq: number[] = [];\n    let\
    \ max: number = 0;\n    let result: number = -1;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    for (let i = 0; i < max; i++) {\n        freq[i] = 0;\n    }\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        freq[lst[i] - 1]++;\n    }\n\
    \    for (let i = 0; i < max; i++) {\n        if (freq[i] >= i + 1) {\n      \
    \      result = i + 1;\n        }\n    }\n    return result;\n}\n", "    let map\
    \ = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) +\
    \ 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
    \   let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
    \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 10, 10, 10, 11, 12, 13]));\nconsole.log(search([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 10, 10, 10, 11, 12, 13, 13, 13, 13]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13, 13, 13, 13, 14, 14, 14,\
    \ 14]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12,\
    \ 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15]));\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14,\
    \ 15, 15, 15, 15, 16, 16,", "    let max: number = -1;\n    let map: Map<number,\
    \ number> = new Map();\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) + 1);\n   \
    \     } else {\n            map.set(lst[i], 1);\n        }\n    }\n    for (let\
    \ [key, value] of map) {\n        if (key <= value && key > max) {\n         \
    \   max = key;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,", "    let\
    \ max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,\
    \ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,\
    \ 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,\
    \ 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,\
    \ 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,", "    let\
    \ max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        let val = lst[i];\n        if (map.has(val)) {\n\
    \            map.set(val, map.get(val) + 1);\n        } else {\n            map.set(val,\
    \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let\
    \ val = lst[i];\n        if (map.get(val) >= val && val > max) {\n           \
    \ max = val;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166, 167, 168, 169, 170", "    let frequency = {};\n    let max =\
    \ -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (frequency[lst[i]]\
    \ === undefined) {\n            frequency[lst[i]] = 1;\n        } else {\n   \
    \         frequency[lst[i]]++;\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (frequency[lst[i]] >= lst[i] && lst[i] > max) {\n       \
    \     max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4,\
    \ 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\
    \ 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 9, 9, 9, 9, 9,", "    let map: Map<number, number> = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n    for (let\
    \ [key, value] of map) {\n        if (key <= value && key > max) {\n         \
    \   max = key;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21", "    let count = 0;\n    let max = 0;\n    let result\
    \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n   \
    \ }\n    if (count >= max) {\n        result = max;\n    }\n    return result;\n\
    }\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4,\
    \ 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5]));\n\
    console.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6]));\nconsole.log(search([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6]));\nconsole.log(search([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5", "    let frequency: number[] = [];\n\
    \    let max: number = 0;\n    let result: number = -1;\n    lst.forEach(element\
    \ => {\n        if (element > max) {\n            max = element;\n        }\n\
    \    });\n    for (let i = 0; i <= max; i++) {\n        frequency.push(0);\n \
    \   }\n    lst.forEach(element => {\n        frequency[element]++;\n    });\n\
    \    for (let i = max; i >= 0; i--) {\n        if (frequency[i] >= i) {\n    \
    \        result = i;\n            break;\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,",
  "    let result = -1;\n    let counter = 0;\n    let max = 0;\n    let maxCounter\
    \ = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] > max) {\n            max = lst[i];\n            maxIndex =\
    \ i;\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] === lst[maxIndex]) {\n            counter++;\n        }\n    }\n   \
    \ if (counter >= max) {\n        result = max;\n    }\n    return result;\n}\n\
    console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7]));\n\
    console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6,\
    \ 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,", "    let max = -1;\n    let freq =\
    \ 0;\n    let map = new Map();\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) +\
    \ 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 13]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 13, 13, 13, 13]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 13, 13, 13, 13,\
    \ 1, 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10,\
    \ 10, 13, 13, 13, 13, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 13, 13, 13, 13, 1, 1, 1, 1,", "    let\
    \ max = Math.max(...lst);\n    let freq = lst.reduce((acc, curr) => {\n      \
    \  acc[curr] = acc[curr] + 1 || 1;\n        return acc;\n    }, {});\n    for\
    \ (let i = max; i > 0; i--) {\n        if (freq[i] >= i) return i;\n    }\n  \
    \  return -1;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,\
    \ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\
    \ 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,\
    \ 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,\
    \ 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\
    \ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,\
    \ 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201",
  "    let map = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    let max = -1;\n    for (let [key, value] of map) {\n        if (key <= value\
    \ && key > max) {\n            max = key;\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178,", "    let max = 0;\n    let maxFreq = 0;\n    let\
    \ freq = 0;\n    let num = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      num = lst[i];\n        freq = 0;\n        for (let j = 0; j < lst.length;\
    \ j++) {\n            if (lst[j] === num) {\n                freq++;\n       \
    \     }\n        }\n        if (freq >= num && freq > maxFreq) {\n           \
    \ max = num;\n            maxFreq = freq;\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175,", "    let result: number = -1;\n    let count: number = 0;\n    let\
    \ max: number = 0;\n    let maxCount: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        count = 0;\n        for (let j = 0; j < lst.length; j++) {\n\
    \            if (lst[i] === lst[j]) {\n                count++;\n            }\n\
    \        }\n        if (count >= lst[i] && lst[i] > max) {\n            max =\
    \ lst[i];\n            maxCount = count;\n        }\n    }\n    if (maxCount >\
    \ 0) {\n        result = max;\n    }\n    return result;\n}\nconsole.log(search([1,\
    \ 1, 2, 3, 3, 3, 4, 4, 4, 4])); // 4\nconsole.log(search([1, 1, 2, 2, 3, 3, 3]));\
    \ // -1\nconsole.log(search([1, 1, 1, 1, 1])); // 1\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6])); // -1\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5,\
    \ 6, 6, 6, 7, 7, 7, 7])); // 7\nconsole.log(search([1, 1, 1, 2, 2, 2, 3, 3, 3,\
    \ 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9])); // 9\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,\
    \ 9])); // -1", "    let max = -1;\n    let map = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        let val = lst[i];\n     \
    \   if (map.has(val)) {\n            map.set(val, map.get(val) + 1);\n       \
    \ } else {\n            map.set(val, 1);\n        }\n    }\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        let val = lst[i];\n        if (map.get(val)\
    \ >= val && val > max) {\n            max = val;\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170",
  "    let result = -1;\n    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > result) {\n            result = lst[i];\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\
    \ 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169", "   \
    \ let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 10, 10, 10, 13]));\nconsole.log(search([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 10, 10, 10, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", " \
    \   let map = new Map<number, number>();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20,\
    \ 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 30, 30, 30]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 30, 30, 30]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13,", "    let max = -1;\n    let map = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166,", "    let result = -1;\n    let frequency = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let\
    \ j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n      \
    \          count++;\n            }\n        }\n        if (count >= lst[i] &&\
    \ lst[i] > frequency) {\n            frequency = lst[i];\n            result =\
    \ lst[i];\n        }\n    }\n    return result;\n}\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6",
  "    let result = -1;\n    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let [key, value] of map) {\n        if (key <= value && key > result)\
    \ {\n            result = key;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\
    \ 179, 180, 181", "    let max = -1;\n    let map = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 13]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 13, 13, 13, 13]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 13, 13, 13, 13,\
    \ 1, 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10,\
    \ 10, 13, 13, 13, 13, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 13, 13, 13, 13, 1, 1, 1, 1,", "    let\
    \ result: number = -1;\n    let frequency: number = 0;\n    let frequencyMap:\
    \ Map<number, number> = new Map();\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (frequencyMap.has(lst[i])) {\n            frequencyMap.set(lst[i],\
    \ frequencyMap.get(lst[i]) + 1);\n        } else {\n            frequencyMap.set(lst[i],\
    \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (frequencyMap.get(lst[i]) >= lst[i] && lst[i] > result) {\n            result\
    \ = lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10,\
    \ 10, 10, 11]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11",
  "    let result: number = -1;\n    let map: Map<number, number> = new Map();\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n \
    \           map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n        \
    \    map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > result) {\n      \
    \      result = lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164,", "    let result: number = -1;\n    let frequency: number = 0;\n\
    \    let map: Map<number, number> = new Map();\n    lst.forEach(element => {\n\
    \        if (map.has(element)) {\n            map.set(element, map.get(element)\
    \ + 1);\n        } else {\n            map.set(element, 1);\n        }\n    });\n\
    \    map.forEach((value, key) => {\n        if (value >= key && value > frequency)\
    \ {\n            result = key;\n            frequency = value;\n        }\n  \
    \  });\n    return result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180", "    let max\
    \ = 0;\n    let freq = 0;\n    let map = new Map();\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i])\
    \ + 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n\
    \    for (let [key, value] of map) {\n        if (key >= value && key > max) {\n\
    \            max = key;\n            freq = value;\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4,\
    \ 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(search", "    let map\
    \ = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++) {\n \
    \       let key = lst[i];\n        if (map.has(key)) {\n            map.set(key,\
    \ map.get(key) + 1);\n        } else {\n            map.set(key, 1);\n       \
    \ }\n    }\n    let max = -1;\n    for (let [key, value] of map) {\n        if\
    \ (key <= value && key > max) {\n            max = key;\n        }\n    }\n  \
    \  return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11", "    let frequency = {};\n    let max = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (frequency[lst[i]]) {\n          \
    \  frequency[lst[i]]++;\n        } else {\n            frequency[lst[i]] = 1;\n\
    \        }\n        if (frequency[lst[i]] >= lst[i] && lst[i] > max) {\n     \
    \       max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(search([1, 1, 1, 1, 1]));\n\
    console.log(search([1, 2, 2, 1, 2, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7", "    let max = -1;\n    let map = new Map<number, number>();\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n   \
    \         map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n          \
    \  map.set(lst[i], 1);\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,", "    let frequency\
    \ = new Map<number, number>();\n    let max = -1;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (frequency.has(lst[i])) {\n            frequency.set(lst[i],\
    \ frequency.get(lst[i]) + 1);\n        } else {\n            frequency.set(lst[i],\
    \ 1);\n        }\n        if (frequency.get(lst[i]) >= lst[i] && lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,",
  "    let freq = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
    \ {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176", "   \
    \ let freq = {};\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n\
    \            freq[lst[i]] = 1;\n        }\n        if (freq[lst[i]] >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,\
    \ 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,",
  "    let max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        let num = lst[i];\n        if (map.has(num))\
    \ {\n            map.set(num, map.get(num) + 1);\n        } else {\n         \
    \   map.set(num, 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        let num = lst[i];\n        if (map.get(num) >= num && num > max)\
    \ {\n            max = num;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5", "    let map = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n    for (let [key,\
    \ value] of map) {\n        if (key <= value && key > max) {\n            max\
    \ = key;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 1, 2,\
    \ 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 2,\
    \ 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,\
    \ 7, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4,\
    \ 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4,\
    \ 4, 4, 4, 4, 5, 5, 5, 5,", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    lst.forEach(x => {\n        if (map.has(x)) {\n            map.set(x,\
    \ map.get(x) + 1);\n        } else {\n            map.set(x, 1);\n        }\n\
    \    });\n    map.forEach((value, key) => {\n        if (key >= value && key >\
    \ max) {\n            max = key;\n        }\n    });\n    return max;\n}\n\nconsole.log(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 1, 1, 2]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 2, 2]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 2, 2,\
    \ 2]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 2, 2, 2, 2]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 2, 2, 2, 2, 2]));\nconsole.log(search([1, 1, 1, 1, 2, 2, 2, 2, 2,\
    \ 2]));\nconsole.log(search([1, 1, 1, 2, 2, 2, 2, 2, 2, 2]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 2, 2, 2, 2, 2]));\nconsole.log(search([1, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2]));\nconsole.log(search([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "    let count\
    \ = 0;\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ for (let j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n\
    \                count++;\n            }\n        }\n        if (lst[i] > max\
    \ && count >= lst[i]) {\n            max = lst[i];\n        }\n        count =\
    \ 0;\n    }\n    return max;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1", "    let result = -1;\n    let count = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst.length; j++)\
    \ {\n            if (lst[i] === lst[j]) {\n                count++;\n        \
    \    }\n        }\n        if (count >= lst[i] && lst[i] > result) {\n       \
    \     result = lst[i];\n        }\n        count = 0;\n    }\n    return result;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,",
  "    let map = new Map();\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) + 1);\n   \
    \     } else {\n            map.set(lst[i], 1);\n        }\n    }\n    let max\
    \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 4, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5", "    let result: number = -1;\n    let frequency: number = 0;\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        if (lst[i] > frequency) {\n \
    \           let count: number = 0;\n            for (let j: number = 0; j < lst.length;\
    \ j++) {\n                if (lst[i] === lst[j]) {\n                    count++;\n\
    \                }\n            }\n            if (count >= lst[i]) {\n      \
    \          result = lst[i];\n                frequency = count;\n            }\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 2,\
    \ 3, 3, 3, 3, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3,\
    \ 4, 4, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,\
    \ 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 6]));\n\
    console.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 7]));\nconsole.log(search([1,\
    \ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 8]));\nconsole.log(search([1, 1, 2, 2,\
    \ 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 9]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3,\
    \ 3, 3, 4, 4, 4, 4, 4, 10]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3,\
    \ 4, 4, 4, 4, 4, 11]));\nconsole.log(search([1, 1, 2, 2, 2, 3,", "    let max\
    \ = -1;\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j])\
    \ {\n                count++;\n            }\n        }\n        if (count >=\
    \ lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n   \
    \ return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,\
    \ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\
    \ 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,\
    \ 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,\
    \ 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\
    \ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,\
    \ 187, 188, 189, 190, 191,", "    let freq = {};\n    let max = -1;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n\
    \        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (freq[lst[i]] >= lst[i] && lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\n\
    console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4,\
    \ 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4,\
    \ 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\
    \ 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7", "    let max = 0;\n\
    \    let maxCount = 0;\n    let count = 0;\n    let current = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        current = lst[i];\n        count = 0;\n\
    \        for (let j = 0; j < lst.length; j++) {\n            if (lst[j] === current)\
    \ {\n                count++;\n            }\n        }\n        if (count >=\
    \ current && count >= maxCount) {\n            max = current;\n            maxCount\
    \ = count;\n        }\n    }\n    return max > 0 ? max : -1;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6,", "    let result: number = -1;\n    let\
    \ freq: number = 0;\n    let map: Map<number, number> = new Map();\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        if (map.has(lst[i])) {\n    \
    \        map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n           \
    \ map.set(lst[i], 1);\n        }\n    }\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > result) {\n      \
    \      result = lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 3, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,",
  "    let max = Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n   \
    \ }\n    if (count >= max) {\n        return max;\n    } else {\n        return\
    \ -1;\n    }\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", "    let result = -1;\n    let map = new\
    \ Map();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of\
    \ map) {\n        if (key <= value && key > result) {\n            result = key;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(search([1, 1, 1, 2, 3, 3,\
    \ 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,", "    let result:\
    \ number = -1;\n    let frequency: number = 0;\n    let frequencyMap: Map<number,\
    \ number> = new Map();\n    for (let i: number = 0; i < lst.length; i++) {\n \
    \       if (frequencyMap.has(lst[i])) {\n            frequencyMap.set(lst[i],\
    \ frequencyMap.get(lst[i]) + 1);\n        } else {\n            frequencyMap.set(lst[i],\
    \ 1);\n        }\n    }\n    for (let i: number = 0; i < lst.length; i++) {\n\
    \        if (frequencyMap.get(lst[i]) >= lst[i] && lst[i] > result) {\n      \
    \      result = lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4", " \
    \   let max = Math.max(...lst);\n    let count = 0;\n    let result = -1;\n  \
    \  for (let i = 1; i <= max; i++) {\n        for (let j = 0; j < lst.length; j++)\
    \ {\n            if (lst[j] === i) {\n                count++;\n            }\n\
    \        }\n        if (count >= i) {\n            result = i;\n        }\n  \
    \      count = 0;\n    }\n    return result;\n}\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\
    \ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\
    \ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,\
    \ 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\
    \ 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,\
    \ 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\
    \ 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,\
    \ 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,\
    \ 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193", "    let result:\
    \ number = -1;\n    let frequency: number = 0;\n    let frequencyMap: Map<number,\
    \ number> = new Map();\n    for (let i: number = 0; i < lst.length; i++) {\n \
    \       if (frequencyMap.has(lst[i])) {\n            frequencyMap.set(lst[i],\
    \ frequencyMap.get(lst[i]) + 1);\n        } else {\n            frequencyMap.set(lst[i],\
    \ 1);\n        }\n    }\n    for (let i: number = 0; i < lst.length; i++) {\n\
    \        if (frequencyMap.get(lst[i]) >= lst[i] && lst[i] > result) {\n      \
    \      result = lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4,\
    \ 4, 4]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10", "    let max =\
    \ 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            count++;\n\
    \        }\n    }\n    if (count >= max) {\n        return max;\n    } else {\n\
    \        return -1;\n    }\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186,", "    let frequency: number[] = [];\n    let max: number = 0;\n\
    \    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n        if (frequency[lst[i]] === undefined)\
    \ {\n            frequency[lst[i]] = 1;\n        } else {\n            frequency[lst[i]]++;\n\
    \        }\n    }\n    for (let i: number = max; i > 0; i--) {\n        if (frequency[i]\
    \ >= i) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171,", "    let max = -1;\n    let map\
    \ = new Map<number, number>();\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) +\
    \ 1);\n        } else {\n            map.set(lst[i], 1);\n        }\n    }\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,", "    let result = -1;\n\
    \    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < lst.length; j++) {\n            if (lst[i]\
    \ === lst[j]) {\n                count++;\n            }\n        }\n        if\
    \ (count >= lst[i] && lst[i] > result) {\n            result = lst[i];\n     \
    \   }\n    }\n    return result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187,", "    let max = 0;\n    let count = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n    \
    \    if (lst[i] === max) {\n            count++;\n        }\n    }\n    if (count\
    \ >= max) {\n        return max;\n    } else {\n        return -1;\n    }\n}\n\
    \nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4,\
    \ 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\
    \ 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,\
    \ 8, 8, 8", "    let result: number = -1;\n    let frequency: number = 0;\n  \
    \  let frequencyMap: Map<number, number> = new Map();\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (frequencyMap.has(lst[i])) {\n            frequencyMap.set(lst[i],\
    \ frequencyMap.get(lst[i]) + 1);\n        } else {\n            frequencyMap.set(lst[i],\
    \ 1);\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (frequencyMap.get(lst[i]) >= lst[i] && lst[i] > frequency) {\n            frequency\
    \ = lst[i];\n            result = lst[i];\n        }\n    }\n    return result;\n\
    }\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3", "  let result = -1;\n  let freq = {};\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (freq[lst[i]]) {\n      freq[lst[i]] += 1;\n    } else {\n  \
    \    freq[lst[i]] = 1;\n    }\n  }\n  for (let key in freq) {\n    if (freq[key]\
    \ >= Number(key) && Number(key) > result) {\n      result = Number(key);\n   \
    \ }\n  }\n  return result;\n}\n\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3,\
    \ 4, 4, 4, 4, 4])); // 4\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4,\
    \ 4, 4])); // -1\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5,\
    \ 5, 5, 5, 5])); // 5\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,\
    \ 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6])); // 6\nconsole.log(search([1, 1, 2, 2,\
    \ 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7,\
    \ 7])); // 7\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8])); //\
    \ 8\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,", "    let max =\
    \ -1;\n    let count = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
    \        }\n    }\n    if (maxCount >= max) {\n        return max;\n    } else\
    \ {\n        return -1;\n    }\n}\n\nconsole.log(search([1, 2, 3, 3, 3, 3, 4,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
  "    let freq = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]])\
    \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] =\
    \ 1;\n        }\n    }\n    let keys = Object.keys(freq);\n    let max = -1;\n\
    \    for (let i = 0; i < keys.length; i++) {\n        if (freq[keys[i]] >= parseInt(keys[i])\
    \ && parseInt(keys[i]) > max) {\n            max = parseInt(keys[i]);\n      \
    \  }\n    }\n    return max;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4,\
    \ 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3,\
    \ 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5", "    let nums = new Map<number, number>();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (nums.has(lst[i])) {\n\
    \            nums.set(lst[i], nums.get(lst[i]) + 1);\n        } else {\n     \
    \       nums.set(lst[i], 1);\n        }\n    }\n    let max = -1;\n    for (let\
    \ [key, value] of nums) {\n        if (key <= value && key > max) {\n        \
    \    max = key;\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,", "    let max = Math.max(...lst);\n\
    \    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ === max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n\
    \        return max;\n    } else {\n        return -1;\n    }\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\
    \ 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\
    \ 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,", "    let max =\
    \ Math.max(...lst);\n    let count = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n \
    \   if (count >= max) {\n        return max;\n    } else {\n        return -1;\n\
    \    }\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4,", "    let frequency: number[] = [];\n    let max:\
    \ number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n        if (frequency[lst[i]])\
    \ {\n            frequency[lst[i]]++;\n        } else {\n            frequency[lst[i]]\
    \ = 1;\n        }\n    }\n    for (let i = 1; i <= max; i++) {\n        if (frequency[i]\
    \ >= i) {\n            return i;\n        }\n    }\n    return -1;\n}\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,", "    let\
    \ max = -1;\n    let map = new Map<number, number>();\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i])\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 1, 2, 3, 4, 4, 4, 4, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", " \
    \   let result: number = -1;\n    let frequency: number = 0;\n    for (let i:\
    \ number = 0; i < lst.length; i++) {\n        if (lst[i] > frequency) {\n    \
    \        frequency = lst.filter(x => x === lst[i]).length;\n            if (lst[i]\
    \ <= frequency) {\n                result = lst[i];\n            }\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(search([1, 2, 3, 3, 3, 3, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4", "    let max = 0;\n    let count = 0;\n    let result = -1;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n   \
    \ }\n    if (count >= max) {\n        result = max;\n    }\n    return result;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,", "    let result = -1;\n\
    \    let frequency = {};\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ if (frequency[lst[i]]) {\n            frequency[lst[i]]++;\n        } else {\n\
    \            frequency[lst[i]] = 1;\n        }\n    }\n    for (let key in frequency)\
    \ {\n        if (frequency[key] >= key && key > result) {\n            result\
    \ = key;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,\
    \ 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190", "    let nums: number[]\
    \ = lst.sort((a, b) => a - b);\n    let nums2: number[] = [];\n    let count:\
    \ number = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i]\
    \ === nums[i + 1]) {\n            count++;\n        } else {\n            nums2.push(count\
    \ + 1);\n            count = 0;\n        }\n    }\n    let max: number = Math.max(...nums2);\n\
    \    let index: number = nums2.indexOf(max);\n    let num: number = nums[index];\n\
    \    if (num >= max) {\n        return num;\n    } else {\n        return -1;\n\
    \    }\n}\nconsole.log(search([1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,", "    let max = -1;\n    let map = new\
    \ Map<number, number>();\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ if (map.has(lst[i])) {\n            map.set(lst[i], map.get(lst[i]) + 1);\n\
    \        } else {\n            map.set(lst[i], 1);\n        }\n    }\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i] &&\
    \ lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20,\
    \ 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 30, 30, 30]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,", "    let max = -1;\n    let map = new Map<number,\
    \ number>();\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n\
    \        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n  \
    \      } else {\n            map.set(num, 1);\n        }\n    }\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        if (map.get(num)\
    \ >= num && num > max) {\n            max = num;\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170",
  "    let max = Math.max(...lst);\n    let freq = new Array(max + 1).fill(0);\n \
    \   for (let i = 0; i < lst.length; i++) {\n        freq[lst[i]]++;\n    }\n \
    \   for (let i = max; i > 0; i--) {\n        if (freq[i] >= i) {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4,\
    \ 5, 5, 5, 5, 5]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26,", "    let result: number = -1;\n    let\
    \ frequency: number = 0;\n    let frequencyMap: Map<number, number> = new Map();\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (frequencyMap.has(lst[i]))\
    \ {\n            frequencyMap.set(lst[i], frequencyMap.get(lst[i]) + 1);\n   \
    \     } else {\n            frequencyMap.set(lst[i], 1);\n        }\n    }\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (frequencyMap.get(lst[i])\
    \ >= lst[i] && lst[i] > result) {\n            result = lst[i];\n        }\n \
    \   }\n    return result;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,", "    let result = -1;\n\
    \    let frequency = 0;\n    let frequencyMap = new Map();\n    lst.forEach(num\
    \ => {\n        if (frequencyMap.has(num)) {\n            frequencyMap.set(num,\
    \ frequencyMap.get(num) + 1);\n        } else {\n            frequencyMap.set(num,\
    \ 1);\n        }\n    });\n    lst.forEach(num => {\n        if (frequencyMap.get(num)\
    \ >= num && frequencyMap.get(num) > frequency) {\n            result = num;\n\
    \            frequency = frequencyMap.get(num);\n        }\n    });\n    return\
    \ result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20,", "    let map = new Map<number, number>();\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (map.has(lst[i])) {\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        } else {\n            map.set(lst[i], 1);\n \
    \       }\n    }\n    let max = -1;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (map.get(lst[i]) >= lst[i] && lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,\
    \ 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,\
    \ 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,\
    \ 164, 165, 166,", "    let max = -1;\n    let count = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ == max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n\
    \        return max;\n    }\n    return -1;\n}\nconsole.log(search([1, 2, 2, 3,\
    \ 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5,\
    \ 5, 5, 5]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5,\
    \ 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(search([1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7,\
    \ 8, 8, 8, 8, 8, 8, 8, 8]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4,\
    \ 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4,",
  "    let freq = {};\n    let max = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else\
    \ {\n            freq[lst[i]] = 1;\n        }\n        if (freq[lst[i]] >= lst[i]\
    \ && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5,\
    \ 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\
    \ 4]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3,\
    \ 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7,\
    \ 7]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8]));\nconsole.log(search([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,\
    \ 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,", "    let max = -1;\n    let nums = {};\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (nums[lst[i]]) {\n      \
    \      nums[lst[i]]++;\n        } else {\n            nums[lst[i]] = 1;\n    \
    \    }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (nums[lst[i]]\
    \ >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    return max;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20", "    let max = Math.max(...lst);\n    let count = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n        \
    \    count++;\n        }\n    }\n    if (count >= max) {\n        return max;\n\
    \    } else {\n        return -1;\n    }\n}\n\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\
    \ 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,\
    \ 198, 199, 200, 201, 202, 203, 204, 205, 206,", "    let max = 0;\n    let count\
    \ = 0;\n    let result = -1;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n         \
    \   count++;\n        }\n    }\n    if (count >= max) {\n        result = max;\n\
    \    }\n    return result;\n}\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185", "    let freq: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i: number = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n  \
    \          max = lst[i];\n        }\n        if (freq[lst[i]] === undefined) {\n\
    \            freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n\
    \        }\n    }\n    for (let i: number = max; i > 0; i--) {\n        if (freq[i]\
    \ >= i) {\n            return i;\n        }\n    }\n    return -1;\n}\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]));\n\
    console.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]));\nconsole.log(search([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3,\
    \ 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4, 4, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4,\
    \ 4, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4,\
    \ 5, 5, 5, 5, 5, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3,", "    let map =\
    \ new Map();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    let result = -1;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (map.get(lst[i]) >= lst[i] &&\
    \ lst[i] > result) {\n            result = lst[i];\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20,\
    \ 20]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 30, 30, 30]));\nconsole.log(search([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16", "    let max = 0;\n    let count\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n   \
    \ }\n    if (count >= max) {\n        return max;\n    } else {\n        return\
    \ -1;\n    }\n}\n\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,\
    \ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\
    \ 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,\
    \ 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,\
    \ 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\
    \ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186",
  "    let nums = new Map();\n    let max = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (nums.has(lst[i])) {\n            nums.set(lst[i], nums.get(lst[i])\
    \ + 1);\n        } else {\n            nums.set(lst[i], 1);\n        }\n     \
    \   if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for\
    \ (let i = max; i > 0; i--) {\n        if (nums.has(i) && nums.get(i) >= i) {\n\
    \            return i;\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,\
    \ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,\
    \ 122, 123, 124, 125, 126, 127, 128, 129", "    let result = -1;\n    let map\
    \ = new Map();\n    for (let i = 0; i < lst.length; i++) {\n        if (map.has(lst[i]))\
    \ {\n            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n   \
    \         map.set(lst[i], 1);\n        }\n    }\n    for (let [key, value] of\
    \ map) {\n        if (key <= value && key > result) {\n            result = key;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(search([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]));\nconsole.log(search([1, 1, 1, 1, 1]));\nconsole.log(search([4,\
    \ 4, 4, 4, 1, 1, 2, 2, 2, 2]));\nconsole.log(search([3, 3, 3, 3, 3, 1, 1, 1, 1,\
    \ 1]));\nconsole.log(search([2, 1, 2, 1, 1, 1, 3, 3, 3, 3, 3]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]));\nconsole.log(search([1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1", "    let freq = {};\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (freq[lst[i]] == undefined) {\n\
    \            freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n\
    \        }\n    }\n    let keys = Object.keys(freq);\n    let max = -1;\n    for\
    \ (let i = 0; i < keys.length; i++) {\n        if (parseInt(keys[i]) <= freq[keys[i]]\
    \ && parseInt(keys[i]) > max) {\n            max = parseInt(keys[i]);\n      \
    \  }\n    }\n    return max;\n}\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4,\
    \ 4, 4]));\nconsole.log(search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(search([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10", "    let result = -1;\n    let count = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        for (let j = 0; j < lst.length; j++) {\n       \
    \     if (lst[i] === lst[j]) {\n                count++;\n            }\n    \
    \    }\n        if (count >= lst[i] && lst[i] > result) {\n            result\
    \ = lst[i];\n        }\n        count = 0;\n    }\n    return result;\n}\nconsole.log(search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\
    \ 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
