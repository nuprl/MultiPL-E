language: ts
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false;\n            }\n        } else {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = true;\n    let dec = true;\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            inc = false;\n\
    \        }\n        if (l[i] > l[i - 1]) {\n            dec = false;\n       \
    \ }\n    }\n    return inc || dec;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) return true;\n\
    \    let inc = l[1] > l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (inc && l[i] < l[i - 1]) return false;\n        if (!inc && l[i] > l[i -\
    \ 1]) return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n\n    let inc = l[1] > l[0];\n    let dec = l[1] < l[0];\n\
    \n    for (let i = 2; i < l.length; i++) {\n        if (inc && l[i] < l[i - 1])\
    \ {\n            return false;\n        }\n        if (dec && l[i] > l[i - 1])\
    \ {\n            return false;\n        }\n    }\n\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        inc = inc && l[i] >=\
    \ l[i - 1];\n        dec = dec && l[i] <= l[i - 1];\n    }\n    return inc ||\
    \ dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false;\n            }\n        } else {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (increasing && l[i] > l[i + 1]) {\n            return\
    \ false;\n        }\n        if (!increasing && l[i] < l[i + 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let isIncreasing = true;\n   \
    \ let isDecreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n \
    \       if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015144
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let isIncreasing = true;\n   \
    \ let isDecreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n \
    \       if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc) {\n            if (l[i] < l[i - 1]) {\n           \
    \     return false;\n            }\n        } else {\n            if (l[i] > l[i\
    \ - 1]) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        inc = inc && l[i] >=\
    \ l[i - 1];\n        dec = dec && l[i] <= l[i - 1];\n    }\n    return inc ||\
    \ dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let isIncreasing = true;\n   \
    \ let isDecreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n \
    \       if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n  let increasing = true;\n  let decreasing\
    \ = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1])\
    \ decreasing = false;\n    if (l[i] > l[i + 1]) increasing = false;\n  }\n  return\
    \ increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing && l[i] > l[i + 1]) {\n   \
    \         return false;\n        }\n        if (!increasing && l[i] < l[i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false;\n            }\n        } else {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    const inc = l[0] < l[1];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (inc && l[i] > l[i + 1]) {\n            return false;\n\
    \        }\n        if (!inc && l[i] < l[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let isIncreasing = true;\n   \
    \ let isDecreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n \
    \       if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015144
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    let decreasing =\
    \ l[0] > l[1];\n    for (let i = 2; i < l.length; i++) {\n        if (increasing\
    \ && l[i] < l[i - 1]) {\n            return false;\n        }\n        if (decreasing\
    \ && l[i] > l[i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 2
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let direction = l[1] - l[0];\n    for (let i = 2; i\
    \ < l.length; i++) {\n        if (direction === 0) {\n            direction =\
    \ l[i] - l[i - 1];\n            continue;\n        }\n        if (breaksDirection(direction,\
    \ l[i - 1], l[i])) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfjgn5f_w.ts(12,13): error TS2304: Cannot find name
    ''breaksDirection''.

    '
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        inc = inc && l[i] >=\
    \ l[i - 1];\n        dec = dec && l[i] <= l[i - 1];\n    }\n    return inc ||\
    \ dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    var n = l.length;\n    var inc\
    \ = true;\n    var dec = true;\n    for (var i = 1; i < n; i++) {\n        if\
    \ (l[i] < l[i - 1]) {\n            inc = false;\n        }\n        if (l[i] >\
    \ l[i - 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015144
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n  if (l.length < 2) {\n    return\
    \ true;\n  }\n  let increasing = l[0] < l[1];\n  for (let i = 1; i < l.length\
    \ - 1; i++) {\n    if (increasing && l[i] > l[i + 1]) {\n      return false;\n\
    \    }\n    if (!increasing && l[i] < l[i + 1]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let isIncreasing = true;\n   \
    \ let isDecreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n \
    \       if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n  let increasing = true;\n  let decreasing\
    \ = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1])\
    \ {\n      decreasing = false;\n    }\n    if (l[i] > l[i + 1]) {\n      increasing\
    \ = false;\n    }\n  }\n  return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (inc && l[i + 1] < l[i]) {\n            return false;\n\
    \        }\n        if (!inc && l[i + 1] > l[i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (inc && l[i + 1] < l[i]) {\n            return false;\n\
    \        }\n        if (!inc && l[i + 1] > l[i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let i = 0;\n    let inc = l[i] < l[i + 1];\n    for (i = 1;\
    \ i < l.length - 1; i++) {\n        if (inc) {\n            if (l[i] > l[i + 1])\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (l[i] < l[i + 1]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        inc = inc && l[i] >=\
    \ l[i - 1];\n        dec = dec && l[i] <= l[i - 1];\n    }\n    return inc ||\
    \ dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (increasing) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (l[i] < l[i + 1]) {\n                return false;\n            }\n        }\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (increasing) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (l[i] < l[i + 1]) {\n                return false;\n            }\n        }\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc) {\n            if (l[i] < l[i - 1]) {\n           \
    \     return false;\n            }\n        } else {\n            if (l[i] > l[i\
    \ - 1]) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (inc) {\n            if (l[i + 1] < l[i]) {\n      \
    \          return false;\n            }\n        } else {\n            if (l[i\
    \ + 1] > l[i]) {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing && l[i] > l[i + 1]) {\n   \
    \         return false;\n        }\n        if (!increasing && l[i] < l[i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false;\n            }\n        } else {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 2;\
    \ i < l.length; i++) {\n        if (increasing) {\n            if (l[i - 1] >\
    \ l[i]) {\n                return false;\n            }\n        } else {\n  \
    \          if (l[i - 1] < l[i]) {\n                return false;\n           \
    \ }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (increasing && l[i] > l[i + 1]) {\n            return\
    \ false;\n        }\n        if (!increasing && l[i] < l[i + 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) return true;\n\
    \    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length; i++) {\n      \
    \  if (inc && l[i] < l[i - 1]) return false;\n        if (!inc && l[i] > l[i -\
    \ 1]) return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    var increasing = true;\n    var\
    \ decreasing = true;\n    for (var i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing && l[i] > l[i + 1]) {\n   \
    \         return false;\n        }\n        if (!increasing && l[i] < l[i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false;\n            }\n        } else {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false;\n            }\n        } else {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc) {\n            if (l[i] < l[i - 1]) {\n           \
    \     return false;\n            }\n        } else {\n            if (l[i] > l[i\
    \ - 1]) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1; i < l.length\
    \ - 1; i++) {\n        if (increasing) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (l[i] < l[i + 1]) {\n                return false;\n            }\n        }\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1])\
    \ {\n            dec = false;\n        }\n        if (l[i] < l[i - 1]) {\n   \
    \         inc = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc) {\n            if (l[i] < l[i - 1]) {\n           \
    \     return false;\n            }\n        } else {\n            if (l[i] > l[i\
    \ - 1]) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let isIncreasing = true;\n   \
    \ let isDecreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n \
    \       if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length < 2) {\n        return\
    \ true;\n    }\n    let inc = l[1] > l[0];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (inc && l[i] < l[i - 1]) {\n            return false;\n \
    \       }\n        if (!inc && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1])\
    \ {\n            dec = false;\n        }\n        if (l[i] < l[i - 1]) {\n   \
    \         inc = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let m = 0;\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            if (m == -1)\
    \ {\n                return false;\n            }\n            m = 1;\n      \
    \  } else if (l[i] < l[i - 1]) {\n            if (m == 1) {\n                return\
    \ false;\n            }\n            m = -1;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        inc = inc && l[i] >=\
    \ l[i - 1];\n        dec = dec && l[i] <= l[i - 1];\n    }\n    return inc ||\
    \ dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let isIncreasing = true;\n   \
    \ let isDecreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n \
    \       if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015144
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) decreasing = false;\n        if (l[i] > l[i + 1]) increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    if (l.length <= 2) {\n       \
    \ return true;\n    }\n    let increasing = l[0] < l[1];\n    for (let i = 1;\
    \ i < l.length - 1; i++) {\n        if (increasing) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false;\n            }\n        } else {\n\
    \            if (l[i] < l[i + 1]) {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let i = 0;\n    let j = 1;\n \
    \   let inc = true;\n    let dec = true;\n    while (i < l.length - 1) {\n   \
    \     if (l[i] > l[j]) {\n            inc = false;\n        }\n        if (l[i]\
    \ < l[j]) {\n            dec = false;\n        }\n        i++;\n        j++;\n\
    \    }\n    return inc || dec;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n  if (l.length <= 2) {\n    return\
    \ true;\n  }\n  let decreasing = l[0] > l[1];\n  for (let i = 2; i < l.length;\
    \ i++) {\n    if (decreasing && l[i] > l[i - 1]) {\n      return false;\n    }\n\
    \    if (!decreasing && l[i] < l[i - 1]) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015145
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let inc = true;\n    let dec =\
    \ true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            inc = false;\n        }\n        if (l[i] > l[i - 1]) {\n   \
    \         dec = false;\n        }\n    }\n    return inc || dec;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
- exit_code: 0
  program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    function monotonic(l: number[]): boolean {\n    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015143
