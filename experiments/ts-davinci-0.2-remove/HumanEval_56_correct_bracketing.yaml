name: HumanEval_56_correct_bracketing
language: ts
prompt: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
  ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
  <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
  <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>>><>\"),false);\n}\n\ntest();"
completions: ["    let stack: string[] = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \">\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            count++;\n        } else if (brackets[i] === \">\"\
    ) {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === '>') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let bracket of brackets) {\n        if (bracket === '<') {\n\
    \            stack.push(bracket);\n        } else if (bracket === '>') {\n   \
    \         if (stack.length === 0) {\n                return false;\n         \
    \   }\n            stack.pop();\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \">\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "  let\
    \ stack: string[] = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if\
    \ (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i]\
    \ === \">\") {\n      if (stack.length === 0) {\n        return false;\n     \
    \ } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === '<') {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === '>') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            count++;\n        } else if (brackets[i] === \">\"\
    ) {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        let bracket\
    \ = brackets[i];\n        if (bracket === \"<\") {\n            stack.push(bracket);\n\
    \        } else if (bracket === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "  let stack: string[]\
    \ = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \"\
    >\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n\
    \        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
  "    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n        } else\
    \ if (brackets[i] === \">\") {\n            if (stack.length === 0) {\n      \
    \          return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ open_brackets = 0;\n    for (let i = 0; i < brackets.length; i++) {\n      \
    \  if (brackets[i] === \"<\") {\n            open_brackets += 1;\n        } else\
    \ if (brackets[i] === \">\") {\n            open_brackets -= 1;\n        }\n \
    \       if (open_brackets < 0) {\n            return false;\n        }\n    }\n\
    \    return open_brackets === 0;\n}\n", "  let stack: string[] = [];\n  for (let\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n     \
    \ stack.push(brackets[i]);\n    } else if (brackets[i] === \">\") {\n      if\
    \ (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n\
    \      }\n    }\n  }\n  return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === '>') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === '>') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === '>') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "  let stack: string[]\
    \ = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \"\
    >\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n\
    \        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
  "    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n        } else\
    \ if (brackets[i] === \">\") {\n            if (stack.length === 0) {\n      \
    \          return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            count++;\n        } else if (brackets[i] === \">\"\
    ) {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "  let open_brackets\
    \ = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      open_brackets++;\n    } else if (brackets[i] === \">\") {\n\
    \      open_brackets--;\n    }\n    if (open_brackets < 0) {\n      return false;\n\
    \    }\n  }\n  return open_brackets === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === '>') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            count++;\n        } else if (brackets[i] === '>') {\n  \
    \          count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count === 0;\n}\n", "    let count = 0;\n    for\
    \ (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\")\
    \ {\n            count++;\n        } else if (brackets[i] === \">\") {\n     \
    \       count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === '>') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "  let stack: string[]\
    \ = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \"\
    >\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n\
    \        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \">\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            count++;\n        } else if (brackets[i] === \">\"\
    ) {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    var stack: string[]\
    \ = [];\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == \"<\") {\n            stack.push(\"<\");\n        } else if (brackets[i]\
    \ == \">\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length == 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === '>') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        let bracket\
    \ = brackets[i];\n        if (bracket === \"<\") {\n            stack.push(bracket);\n\
    \        } else if (bracket === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let open_brackets:\
    \ number = 0;\n    for (let i: number = 0; i < brackets.length; i++) {\n     \
    \   if (brackets[i] === '<') {\n            open_brackets++;\n        } else if\
    \ (brackets[i] === '>') {\n            open_brackets--;\n        }\n        if\
    \ (open_brackets < 0) {\n            return false;\n        }\n    }\n    return\
    \ open_brackets === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '<') {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === '>') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let open_brackets:\
    \ number = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == \"<\") {\n            open_brackets++;\n        } else if (brackets[i] ==\
    \ \">\") {\n            open_brackets--;\n        }\n        if (open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \">\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] === \">\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            count++;\n        } else if (brackets[i] === \">\"\
    ) {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else if (brackets[i] === \">\") {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            count++;\n        } else if (brackets[i] === '>') {\n  \
    \          count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    let open_brackets: string[] = [\"<\"];\n    let close_brackets: string[]\
    \ = [\">\"];\n    for (let i = 0; i < brackets.length; i++) {\n        if (open_brackets.includes(brackets[i]))\
    \ {\n            stack.push(brackets[i]);\n        } else if (close_brackets.includes(brackets[i]))\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                let top = stack.pop();\n                if\
    \ (top !== open_brackets[close_brackets.indexOf(brackets[i])]) {\n           \
    \         return false;\n                }\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for\
    \ (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\")\
    \ {\n            stack.push(brackets[i]);\n        } else if (brackets[i] ===\
    \ \">\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \">\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
