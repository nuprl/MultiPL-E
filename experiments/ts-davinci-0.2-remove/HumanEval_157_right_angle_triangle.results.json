{
  "language": "ts",
  "name": "HumanEval_157_right_angle_triangle",
  "results": [
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuwe51jlu.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(5, 6, 7));\nconsole.log(right_angle_triangle(6, 7, 5));\nconsole.log(right_angle_triangle(7, 5, 6));\nconsole.log(right_angle_triangle(5, 7, 6));\nconsole.log(right_angle_triangle(7, 6, 5));\nconsole.log(right_angle_triangle(6, 5, 7));\nconsole.log(right_angle_triangle(6, 7, 8));\nconsole.log(right_angle_triangle(7, 8, 6));\nconsole.log(right_angle_triangle(8, 6, 7));\nconsole.log(right_angle_triangle(6, 8, 7));\nconsole.log(right_angle_triangle(8, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpizor3k_e.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpizor3k_e.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole.log(right_angle_triangle(3, 4, 30));\nconsole.log(right_angle_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg7v9eo06.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpg7v9eo06.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 6, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(12, 5, 13));\nconsole.log(right_angle_triangle(13, 5, 12));\nconsole.log(right_angle_triangle(5, 13, 12));\nconsole.log(right_angle_triangle(12, 13, 5));\nconsole.log(right_angle_triangle(13, 12, 5));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5, 12, 14));\nconsole.log(right_angle_triangle(14, 5, 12));\nconsole.log(right_angle_triangle(5, 14, 12));\nconsole.log(right_angle_triangle(12, 14, 5));\nconsole.log(right_angle_triangle(14, 12, 5));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzjpdwy86.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(5, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 5));\nconsole.log(right_angle_triangle(1, 1, 1));\nconsole.log(right_angle_triangle(1, 2, 3));\nconsole.log(right_angle_triangle(1, 3, 2));\nconsole.log(right_angle_triangle(2, 1, 3));\nconsole.log(right_angle_triangle(2, 3, 1));\nconsole.log(right_angle_triangle(3, 1, 2));\nconsole.log(right_angle_triangle(3, 2, 1));\nconsole.log(right_angle_triangle(1, 1, 2));\nconsole.log(right_angle_triangle(1, 2, 1));\nconsole.log(right_angle_triangle(2, 1, 1));\nconsole.log(right_angle_triangle(1, 1, 3));\nconsole.log(right_angle_triangle(1, 3, 1));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6mtrtjk3.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmp6mtrtjk3.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5, 12, 14));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10, 24, 26));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(24, 26, 10));\nconsole.log(right_angle_triangle(24, 10, 26));\nconsole.log(right_angle_triangle(10, 26, 24));\nconsole.log(right_angle_triangle(26, 24, 10));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10, 24, 26));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(24, 26, 10));\nconsole.log(right_angle_triangle(24, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7ryc2vfj.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a ** 2 + b ** 2 === c ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmplb82_oer.js:22:12)\n    at Object.<anonymous> (/tmp/tmplb82_oer.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(1, 2, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(12, 5, 13));\nconsole.log(right_angle_triangle(13, 5, 12));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(5, 12, 14));\nconsole.log(right_angle_triangle(12, 5, 14));\nconsole.log(right_angle_triangle(14, 5, 12));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 5));\nconsole.log(right_angle_triangle(5, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0ufo4mwh.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp0ufo4mwh.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334046
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 7));\nconsole.log(right_angle_triangle(5, 3, 7));\nconsole.log(right_angle_triangle(5, 7, 3));\nconsole.log(right_angle_triangle(3, 7, 5));\nconsole.log(right_angle_triangle(7, 3, 5));\nconsole.log(right_angle_triangle(7, 5, 3));\nconsole.log(right_angle_triangle(3, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_sex7ub8.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp_sex7ub8.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334046
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 2));\nconsole.log(right_angle_triangle(3, 4, 1));\nconsole.log(right_angle_triangle(3, 4, 0));\nconsole.log(right_angle_triangle(3, 4, -1));\nconsole.log(right_angle_triangle(3, 4, -2));\nconsole.log(right_angle_triangle(3, 4, -3));\nconsole.log(right_angle_triangle(3, 4, -4));\nconsole.log(right_angle_triangle(3, 4, -5));\nconsole.log(right_angle_triangle(3, 4, -6));\nconsole.log(right_angle_triangle(3, 4, -7));\nconsole.log(right_angle_triangle(3, 4, -8));\nconsole.log(right_angle_triangle(3, 4, -9));\nconsole.log(right_angle_triangle(3, 4, -10));\nconsole.log(right_angle_triangle(3, 4, -11));\nconsole.log(right_angle_triangle(3, 4, -12));\nconsole.log(right_angle_triangle(3, 4, -13));\nconsole.log(right_angle_triangle(3, 4, -14));\nconsole.log(right_angle_triangle(3, 4, -15));\nconsole.log(right_angle_triangle(3, 4, -16));\nconsole.log(right_angle_triangle(3, 4, -17\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfirr4p8x.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpfirr4p8x.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334046
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 2));\nconsole.log(right_angle_triangle(3, 4, 1));\nconsole.log(right_angle_triangle(3, 4, 0));\nconsole.log(right_angle_triangle(3, 4, -1));\nconsole.log(right_angle_triangle(3, 4, -2));\nconsole.log(right_angle_triangle(3, 4, -3));\nconsole.log(right_angle_triangle(3, 4, -4));\nconsole.log(right_angle_triangle(3, 4, -5));\nconsole.log(right_angle_triangle(3, 4, -6));\nconsole.log(right_angle_triangle(3, 4, -7));\nconsole.log(right_angle_triangle(3, 4, -8));\nconsole.log(right_angle_triangle(3, 4, -9));\nconsole.log(right_angle_triangle(3, 4, -10));\nconsole.log(right_angle_triangle(3, 4, -11));\nconsole.log(right_angle_triangle(3, 4, -12));\nconsole.log(right_angle_triangle(3, 4, -13));\nconsole.log(right_angle_triangle(3, 4, -14));\nconsole.log(right_angle_triangle(3, 4, -15));\nconsole.log(right_angle_triangle(3, 4, -16));\nconsole.log(right_angle_triangle(3, 4, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmgsq1uya.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(0, 0, 0));\nconsole.log(right_angle_triangle(3, 4, -5));\nconsole.log(right_angle_triangle(-3, -4, -5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) || Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) || Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole.log(right_angle_triangle(3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr1ycjjc1.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpr1ycjjc1.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5, 15, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] * arr[0] + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2 === a**2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3, 6, 3));\nconsole.log(right_angle_triangle(3, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp372k0cxo.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp372k0cxo.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n    let sum = a + b + c;\n    return sum - max === max * 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsogin3s9.js:16:12)\n    at Object.<anonymous> (/tmp/tmpsogin3s9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n        Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n        Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgfn5r5bx.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(0, 0, 0));\nconsole.log(right_angle_triangle(3, 4, -5));\nconsole.log(right_angle_triangle(-3, -4, -5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334049
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi635_pwk.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334049
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdxo4bupe.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334050
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n        Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n        Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334050
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv00f_p2p.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334050
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2zbk0v1w.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(3, 5, 7));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpojn7_bhh.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpojn7_bhh.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334050
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a ** 2 + b ** 2 === c ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe25ml3b1.js:16:12)\n    at Object.<anonymous> (/tmp/tmpe25ml3b1.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0tfdslja.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0tfdslja.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n        Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n        Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp13um3aot.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp13um3aot.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 5, 7));\nconsole.log(right_angle_triangle(4, 7, 5));\nconsole.log(right_angle_triangle(7, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 7));\nconsole.log(right_angle_triangle(5, 7, 4));\nconsole.log(right_angle_triangle(7, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 8));\nconsole.log(right_angle_triangle(4, 8, 5));\nconsole.log(right_angle_triangle(8, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 8));\nconsole.log(right_angle_triangle(5, 8, 4));\nconsole.log(right_angle_triangle(8, 5, 4));\nconsole.log(right_angle_triangle(4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy9voujtf.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpy9voujtf.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334053
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3, 6, 3));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn9jswodz.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpn9jswodz.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334053
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(6, 8, 10));\nconsole.log(right_angle_triangle(8, 6, 10));\nconsole.log(right_angle_triangle(10, 6, 8));\nconsole.log(right_angle_triangle(6, 10, 8));\nconsole.log(right_angle_triangle(8, 10, 6));\nconsole.log(right_angle_triangle(10, 8, 6));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa912zxcv.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334053
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole.log(right_angle_triangle(3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzkrxdp9f.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpzkrxdp9f.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334053
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a === 0 || b === 0 || c === 0) {\n        return false;\n    }\n    const arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(0, 0, 0));\nconsole.log(right_angle_triangle(0, 0, 1));\nconsole.log(right_angle_triangle(0, 1, 0));\nconsole.log(right_angle_triangle(1, 0, 0));\nconsole.log(right_angle_triangle(0, 1, 1));\nconsole.log(right_angle_triangle(1, 0, 1));\nconsole.log(right_angle_triangle(1, 1, 0));\nconsole.log(right_angle_triangle(1, 1, 1));\nconsole.log(right_angle_triangle(1, 1, 2));\nconsole.log(right_angle_triangle(1, 2, 1));\nconsole.log(right_angle_triangle(2, 1, 1));\nconsole.log(right_angle_triangle(2, 2, 2));\nconsole.log(right_angle_triangle(2, 2, 3));\nconsole.log(right_angle_triangle(2, 3, 2));\nconsole.log(right_angle_triangle(3, 2, 2));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv5kabx8b.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334053
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(6, 5, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334054
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(3, 6, 7));\nconsole.log(right_angle_triangle(6, 3, 7));\nconsole.log(right_angle_triangle(6, 7, 3));\nconsole.log(right_angle_triangle(3, 7, 6));\nconsole.log(right_angle_triangle(7, 3, 6));\nconsole.log(right_angle_triangle(7, 6, 3));\nconsole.log(right_angle_triangle(3, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp42npy0qd.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp42npy0qd.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334054
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334054
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334054
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5k2dvxue.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334054
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334054
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(8, 3, 4));\nconsole.log(right_angle_triangle(4, 8, 3));\nconsole.log(right_angle_triangle(8, 4, 3));\nconsole.log(right_angle_triangle(3, 8, 4));\nconsole.log(right_angle_triangle(4, 3, 8));\nconsole.log(right_angle_triangle(3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpglzlo8d1.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334054
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuunqqk5s.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334054
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(1, 1, 1));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5, 15, 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let result: boolean = false;\n    let sides: number[] = [a, b, c];\n    sides.sort((a, b) => a - b);\n    if (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5, 15, 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] * arr[0] + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5, 5, 6));\nconsole.log(right_angle_triangle(5, 6, 5));\nconsole.log(right_angle_triangle(6, 5, 5));\nconsole.log(right_angle_triangle(5, 6, 7));\nconsole.log(right_angle_triangle(6, 7, 5));\nconsole.log(right_angle_triangle(7, 5, 6));\nconsole.log(right_angle_triangle(7, 6, 5));\nconsole.log(right_angle_triangle(6, 5, 7));\nconsole.log(right_angle_triangle(5, 7, 6));\nconsole.log(right_angle_triangle(6, 7, 8));\nconsole.log(right_angle_triangle(7, 8, 6));\nconsole.log(right_angle_triangle(8, 6, 7));\nconsole.log(right_angle_triangle(8, 7, 6));\nconsole.log(right_angle_triangle(7, 6, 8));\nconsole.log(right_angle_triangle(6, 8, 7));\nconsole.log(right_angle_triangle(7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9uubowl1.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334055
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk66o_soc.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpk66o_soc.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334056
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334056
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334056
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334057
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334053
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n    let sum = a + b + c;\n    let diff = sum - max;\n    if (max * max === diff * diff) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpscmqhm_h.js:31:12)\n    at Object.<anonymous> (/tmp/tmpscmqhm_h.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334057
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334057
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(5, 6, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2 === a**2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(8, 4, 3));\nconsole.log(right_angle_triangle(8, 3, 4));\nconsole.log(right_angle_triangle(4, 8, 3));\nconsole.log(right_angle_triangle(3, 8, 4));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(9, 4, 3));\nconsole.log(right_angle_triangle(9, 3, 4));\nconsole.log(right_angle_triangle(4, 9, 3));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7ahiygm0.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmp7ahiygm0.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(4, 5, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a ** 2 + b ** 2 === c ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(5, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 5));\nconsole.log(right_angle_triangle(5, 5, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1d101lmn.js:28:12)\n    at Object.<anonymous> (/tmp/tmp1d101lmn.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2 === a**2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole.log(right_angle_triangle(3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_gadq57m.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp_gadq57m.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] * arr[0] + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp04siof2.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpp04siof2.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334058
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(4, 6, 7));\nconsole.log(right_angle_triangle(6, 4, 7));\nconsole.log(right_angle_triangle(7, 6, 4));\nconsole.log(right_angle_triangle(4, 7, 6));\nconsole.log(right_angle_triangle(7, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeflyny33.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpeflyny33.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334059
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3, 6, 3));\nconsole.log(right_angle_triangle(3, 3, 7));\nconsole.log(right_angle_triangle(7, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5ru5cyj2.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp5ru5cyj2.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 8));\nconsole.log(right_angle_triangle(3, 8, 6));\nconsole.log(right_angle_triangle(8, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 8));\nconsole.log(right_angle_triangle(6, 8, 3));\nconsole.log(right_angle_triangle(8, 6, 3));\nconsole.log(right_angle_triangle(6, 8, 10));\nconsole.log(right_angle_triangle(6, 10, 8));\nconsole.log(right_angle_triangle(10, 6, 8));\nconsole.log(right_angle_triangle(8, 6, 10));\nconsole.log(right_angle_triangle(8, 10, 6));\nconsole.log(right_angle_triangle(10, 8, 6));\nconsole.log(right_angle_triangle(8, 10, 12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334058
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334059
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 5));\nconsole.log(right_angle_triangle(5, 5, 3));\nconsole.log(right_angle_triangle(10, 24, 26));\nconsole.log(right_angle_triangle(24, 26, 10));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(10, 26, 24));\nconsole.log(right_angle_triangle(24, 10, 26));\nconsole.log(right_angle_triangle(26, 24, 10));\nconsole.log(right_angle_triangle(30, 36, 42));\nconsole.log(right_angle_triangle(36, 42, 30));\nconsole.log(right_angle_triangle(42, 30, 36));\nconsole.log(right_angle_triangle(30, 42, 36));\nconsole.log(right_angle_triangle(36,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf7o7aly5.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334060
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 == c ** 2) || (a ** 2 + c ** 2 == b ** 2) || (b ** 2 + c ** 2 == a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(4, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 4));\nconsole.log(right_angle_triangle(4, 6, 4));\nconsole.log(right_angle_triangle(4, 4, 7));\nconsole.log(right_angle_triangle(7, 4, 4));\nconsole.log(right_angle_triangle(4, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp62xw9azh.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp62xw9azh.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334060
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334060
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk66o_soc.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpk66o_soc.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334056
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334060
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2 || a ** 2 + c ** 2 === b ** 2 || b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3, 6, 3));\nconsole.log(right_angle_triangle(3, 3, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334061
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 5, 5));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(5, 5, 3));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5, 6, 7));\nconsole.log(right_angle_triangle(7, 5, 6));\nconsole.log(right_angle_triangle(6, 7, 5));\nconsole.log(right_angle_triangle(5, 7, 6));\nconsole.log(right_angle_triangle(7, 6, 5));\nconsole.log(right_angle_triangle(6, 5, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334061
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(4, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 4));\nconsole.log(right_angle_triangle(4, 6, 4));\nconsole.log(right_angle_triangle(4, 4, 7));\nconsole.log(right_angle_triangle(7, 4, 4));\nconsole.log(right_angle_triangle(4, 7, 4));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmwwadriz.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpmwwadriz.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334061
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 5, 5));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(5, 5, 3));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5, 5, 7));\nconsole.log(right_angle_triangle(7, 5, 5));\nconsole.log(right_angle_triangle(5, 7, 5));\nconsole.log(right_angle_triangle(5, 5, 8));\nconsole.log(right_angle_triangle(8, 5, 5));\nconsole.log(right_angle_triangle(5, 8, 5));\nconsole.log(right_angle_triangle(5, 5, 12));\nconsole.log(right_angle_triangle(12, 5, 5));\nconsole.log(right_angle_triangle(5, 12\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphxrleyjk.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmphxrleyjk.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334061
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] * arr[0] + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2ckrvrry.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(4, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 4));\nconsole.log(right_angle_triangle(4, 6, 4));\nconsole.log(right_angle_triangle(4, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6plmbx62.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp6plmbx62.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a**2 + b**2 === c**2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnr80pfoo.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnr80pfoo.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10, 24, 26));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(24, 26, 10));\nconsole.log(right_angle_triangle(24, 10, 26));\nconsole.log(right_angle_triangle(10, 26, 24));\nconsole.log(right_angle_triangle(26, 24, 10));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10, 24, 26));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(24, 26, 10));\nconsole.log(right_angle_triangle(24, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7ryc2vfj.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334044
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(13, 12, 5));\nconsole.log(right_angle_triangle(12, 13, 5));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(13, 5, 12));\nconsole.log(right_angle_triangle(12, 5, 13));\nconsole.log(right_angle_triangle(5, 13, 12));\nconsole.log(right_angle_triangle(12, 5, 13));\nconsole.log(right_angle_triangle(13, 12, 5));\nconsole.log(right_angle_triangle(5, 13, 12));\nconsole.log(right_angle_triangle(12, 13, 5));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(13, 5, 12));\nconsole.log(right_angle_triangle(12, 5, 13));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(13, 12, 5));\nconsole.log(right_angle_triangle(5, 13, 12));\nconsole.log(right_angle_triangle(12, 13, 5));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuulvn_7r.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n    let sum = a + b + c;\n    let rest = sum - max;\n    return max * max === rest * rest;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpetbxk1vw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpetbxk1vw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a ** 2 + b ** 2 === c ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(5, 4, 7));\nconsole.log(right_angle_triangle(7, 5, 4));\nconsole.log(right_angle_triangle(4, 7, 5));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyghe6l7f.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpyghe6l7f.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a ** 2 + b ** 2 === c ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5, 15, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqtplaqln.js:19:12)\n    at Object.<anonymous> (/tmp/tmpqtplaqln.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334063
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2zbk0v1w.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(3, 5, 5));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(5, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334062
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334063
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334063
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(2, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpom6g1082.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334063
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(4, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 4));\nconsole.log(right_angle_triangle(4, 6, 4));\nconsole.log(right_angle_triangle(4, 4, 7));\nconsole.log(right_angle_triangle(7, 4, 4));\nconsole.log(right_angle_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxgzt_zw7.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpxgzt_zw7.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334064
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5, 15, 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334064
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334065
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334064
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334065
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334059
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a * a + b * b == c * c) {\n        return true;\n    } else if (a * a + c * c == b * b) {\n        return true;\n    } else if (b * b + c * c == a * a) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334065
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(3, 7, 8));\nconsole.log(right_angle_triangle(7, 3, 8));\nconsole.log(right_angle_triangle(7, 8, 3));\nconsole.log(right_angle_triangle(3, 8, 7));\nconsole.log(right_angle_triangle(8, 3, 7));\nconsole.log(right_angle_triangle(8, 7, 3));\nconsole.log(right_angle_triangle(4, 5, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 6, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(7, 7, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(8, 4, 3));\nconsole.log(right_angle_triangle(3, 8, 4));\nconsole.log(right_angle_triangle(4, 3, 8));\nconsole.log(right_angle_triangle(4, 8,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeo5y77t7.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334065
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5, 5, 6));\nconsole.log(right_angle_triangle(5, 6, 5));\nconsole.log(right_angle_triangle(6, 5, 5));\nconsole.log(right_angle_triangle(6, 6, 6));\nconsole.log(right_angle_triangle(6, 6, 7));\nconsole.log(right_angle_triangle(6, 7, 6));\nconsole.log(right_angle_triangle(7, 6, 6));\nconsole.log(right_angle_triangle(7, 7, 7));\nconsole.log(right_angle_triangle(7, 7, 8));\nconsole.log(right_angle_triangle(7, 8, 7));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9s05uo3p.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334065
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3, 6, 3));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw6rf8c6f.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334065
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10, 24, 26));\nconsole.log(right_angle_triangle(24, 10, 26));\nconsole.log(right_angle_triangle(26, 24, 10));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(10, 26, 24));\nconsole.log(right_angle_triangle(24, 26, 10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n        Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n        Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdikt5d1k.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpdikt5d1k.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334043
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(1, 1, 1));\nconsole.log(right_angle_triangle(1, 1, 2));\nconsole.log(right_angle_triangle(1, 2, 1));\nconsole.log(right_angle_triangle(2, 1, 1));\nconsole.log(right_angle_triangle(1, 2, 2));\nconsole.log(right_angle_triangle(2, 1, 2));\nconsole.log(right_angle_triangle(2, 2, 1));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6qsq2097.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(6, 3, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(9, 40, 41));\nconsole.log(right_angle_triangle(8, 15, 17));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(120, 209, 241));\nconsole.log(right_angle_triangle(3, 5, 7));\nconsole.log(right_angle_triangle(5, 3, 7));\nconsole.log(right_angle_triangle(7, 5, 3));\nconsole.log(right_angle_triangle(7, 3, 5));\nconsole.log(right_angle_triangle(3, 7, 5));\nconsole.log(right_angle_triangle(5, 7, 3));\nconsole.log(right_angle_triangle(7, 5, 12));\nconsole.log(right_angle_triangle(7, 12, 5));\nconsole.log(right_angle_triangle(12, 7, 5));\nconsole.log(right_angle_triangle(12, 5, 7));\nconsole.log(right_angle_triangle(5, 12, 7));\nconsole.log(right_angle_triangle(5, 7, 12));\nconsole.log(right_angle_triangle(7, 5, 12));\nconsole.log(right_angle_triangle(7, 12, 5));\nconsole.log(right_angle_triangle(12, 7, 5));\nconsole.log(right_angle_triangle(12, 5, 7));\nconsole.log(right_angle_triangle(5, 12, 7));\nconsole.log(right_angle_triangle(5, 7, 12));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334067
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdeari73u.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpdeari73u.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a === 0 || b === 0 || c === 0) {\n        return false;\n    }\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(0, 4, 6));\nconsole.log(right_angle_triangle(3, 0, 6));\nconsole.log(right_angle_triangle(3, 4, 0));\nconsole.log(right_angle_triangle(0, 0, 0));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(0, 4, 6));\nconsole.log(right_angle_triangle(3, 0, 6));\nconsole.log(right_angle_triangle(3, 4, 0));\nconsole.log(right_angle_triangle(0, 0, 0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334067
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334051
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334066
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 8, 4));\nconsole.log(right_angle_triangle(4, 3, 8));\nconsole.log(right_angle_triangle(4, 8, 3));\nconsole.log(right_angle_triangle(8, 3, 4));\nconsole.log(right_angle_triangle(8, 4, 3));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0xwu0n6d.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334067
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334067
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(5, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(3, 5, 5));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5, 5, 6));\nconsole.log(right_angle_triangle(5, 6, 5));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf2ve0pqw.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334067
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334047
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334067
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5, 15, 20));\nconsole.log(right_angle_triangle(5, 15, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334067
    },
    {
      "exit_code": 0,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] * arr[0] + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334068
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(8, 4, 3));\nconsole.log(right_angle_triangle(3, 8, 4));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(9, 4, 3));\nconsole.log(right_angle_triangle(3, 9, 4));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(10, 4, 3));\nconsole.log(right_angle_triangle(3, 10, 4));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(11, 4, 3));\nconsole.log(right_angle_triangle(3, 11, 4));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(12, 4, 3));\nconsole.log(right_angle_triangle(3, 12, 4));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(13, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwqdj6d8d.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpwqdj6d8d.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334067
    },
    {
      "exit_code": 1,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let result: boolean = false;\n    if (a * a + b * b == c * c) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7gi801hu.js:20:12)\n    at Object.<anonymous> (/tmp/tmp7gi801hu.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334068
    },
    {
      "exit_code": 2,
      "program": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    let [a, b, c] = sides;\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkqfx3x5t.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334068
    }
  ]
}