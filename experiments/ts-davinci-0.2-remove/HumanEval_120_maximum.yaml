name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
  \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
  \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
  \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));", "    const result:\
    \ number[] = [];\n    const maxHeap = new MaxHeap();\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for (let i =\
    \ 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let\
    \ i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k\
    \ - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); //\
    \ [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -1)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -3)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -5)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -6)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -8)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));", "    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n   \
    \ for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max\
    \ = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n  \
    \  arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5,\
    \ 4, 3]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\
    \ // [5, 4, 3, 2, 1]", "    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(", "    let result: number[] = [];\n    let\
    \ i: number = 0;\n    let j: number = 0;\n    let n: number = arr.length;\n  \
    \  while (i < k) {\n        result[i] = arr[i];\n        i++;\n    }\n    result.sort((a,\
    \ b) => a - b);\n    while (i < n) {\n        if (arr[i] > result[0]) {\n    \
    \        result[0] = arr[i];\n            j = 0;\n            while (j < k - 1\
    \ && result[j] > result[j + 1]) {\n                let temp: number = result[j];\n\
    \                result[j] = result[j + 1];\n                result[j + 1] = temp;\n\
    \                j++;\n            }\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n", "    let result: number[] = [];\n    let i: number = 0;\n   \
    \ let j: number = 0;\n    for (i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.sort((a, b) => a - b);\n    for (i = k; i < arr.length; i++)\
    \ {\n        for (j = 0; j < k; j++) {\n            if (arr[i] > result[j]) {\n\
    \                result.splice(j, 0, arr[i]);\n                result.pop();\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));", "    const result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex:\
    \ number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j <\
    \ arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n", "    const result: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0\
    \ && result[result.length - 1] < arr[i] && result.length + arr.length - i > k)\
    \ {\n            result.pop();\n        }\n        if (result.length < k) {\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n\
    console.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n\
    \      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i\
    \ = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k\
    \ - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));", "    const result: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0\
    \ && result[result.length - 1] < arr[i] && result.length + arr.length - i > k)\
    \ {\n            result.pop();\n        }\n        if (result.length < k) {\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n\
    console.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5], 2));\nconsole.log(maximum([-1, -2, -3, -4, -5], 3));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5], 4));\nconsole.log(maximum([-1, -2, -3, -4, -5], 5));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5], 1));\nconsole.log(maximum([-1, -2, -3, -4, -5], 0));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5], 6));\nconsole.log(maximum([-1, -2, -3, -4, -5], -1));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10],", "    let result: number[] = [];\n  \
    \  let max: number = 0;\n    let index: number = 0;\n    for (let i = 0; i < k;\
    \ i++) {\n        max = arr[i];\n        index = i;\n        for (let j = i +\
    \ 1; j < arr.length; j++) {\n            if (arr[j] > max) {\n               \
    \ max = arr[j];\n                index = j;\n            }\n        }\n      \
    \  result.push(max);\n        arr[index] = arr[i];\n        arr[i] = max;\n  \
    \  }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    let result: number[] =\
    \ [];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < k) {\n \
    \       result[i] = arr[i];\n        i++;\n    }\n    result.sort((a, b) => a\
    \ - b);\n    while (i < arr.length) {\n        if (arr[i] > result[0]) {\n   \
    \         result[0] = arr[i];\n            j = 0;\n            while (j < k -\
    \ 1 && result[j] > result[j + 1]) {\n                let temp: number = result[j];\n\
    \                result[j] = result[j + 1];\n                result[j + 1] = temp;\n\
    \                j++;\n            }\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n\nconsole.log(maximum([3, 2, 1, 5, 6, 4], 2));\nconsole.log(maximum([3,\
    \ 2, 3, 1, 2, 4, 5, 5, 6], 4));", "    let result: number[] = [];\n    let max:\
    \ number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i <\
    \ k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j]\
    \ > max) {\n                max = arr[j];\n                maxIndex = j;\n   \
    \         }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));", "    let result: number[] = [];\n \
    \   let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let\
    \ i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n     \
    \       if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex]\
    \ = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    let result: number[] =\
    \ [];\n    let length = arr.length;\n    for (let i = 0; i < length; i++) {\n\
    \        let num = arr[i];\n        if (result.length < k) {\n            result.push(num);\n\
    \        } else {\n            let min = Math.min(...result);\n            if\
    \ (num > min) {\n                let index = result.indexOf(min);\n          \
    \      result[index] = num;\n            }\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([],\
    \ 1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], -1));\nconsole.log(maximum([1],\
    \ 1));\nconsole.log(maximum([1], 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1,\
    \ 2], 1));\nconsole.log(maximum([1, 2], 0));\nconsole.log(maximum([1, 2], -1));\n\
    console.log(maximum([1, 2], 2));\nconsole.log(maximum([1, 2], 3));\nconsole.log(maximum([1,\
    \ 2], -3));\nconsole.log(maximum([1, 2, 3], 1));\nconsole.log(maximum([1, 2, 3],\
    \ 0));\nconsole.log(maximum([1, 2, 3], -1));\nconsole.log(maximum([1, 2, 3], 2));\n\
    console.log(maximum([1, 2, 3], 3));\nconsole.log(maximum([1,", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "    let result: number[] = [];\n    let max: number = -Infinity;\n\
    \    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for\
    \ (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n      \
    \          max = arr[j];\n                maxIndex = j;\n            }\n     \
    \   }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n       \
    \ max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    const max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4,\
    \ 5]", "    const result: number[] = [];\n    const len = arr.length;\n    if\
    \ (k === 0) {\n        return result;\n    }\n    for (let i = 0; i < len; i++)\
    \ {\n        const num = arr[i];\n        if (result.length < k) {\n         \
    \   result.push(num);\n            continue;\n        }\n        if (num > result[0])\
    \ {\n            result.shift();\n            result.push(num);\n        }\n \
    \   }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex =\
    \ -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([",
  "  let result: number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number\
    \ = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n\
    \    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n   \
    \ arr[i] = max;\n  }\n  return result;\n}\n", "  const result: number[] = [];\n\
    \  const len = arr.length;\n  if (k >= len) {\n    return arr.sort((a, b) => b\
    \ - a);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n\
    \  result.sort((a, b) => b - a);\n  for (let i = k; i < len; i++) {\n    if (arr[i]\
    \ > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b)\
    \ => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2],\
    \ 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n  \
    \  result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n\
    \    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n\
    \nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); //\
    \ [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\n\
    console.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2, 1]", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n\
    \    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if\
    \ (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n  \
    \  }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));", "  let max: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    max.push(arr[i]);\n  }\n  for (let i = k; i < arr.length;\
    \ i++) {\n    let min = Math.min(...max);\n    if (arr[i] > min) {\n      max.splice(max.indexOf(min),\
    \ 1, arr[i]);\n    }\n  }\n  return max;\n}\n\nconsole.log(maximum([1, 2, 3, 4,\
    \ 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22", "    let result: number[] = [];\n    let length = arr.length;\n\
    \    if (k === 0) {\n        return result;\n    }\n    if (k === length) {\n\
    \        return arr;\n    }\n    let left = 0;\n    let right = length - 1;\n\
    \    let index = partition(arr, left, right);\n    while (index !== k - 1) {\n\
    \        if (index > k - 1) {\n            right = index - 1;\n            index\
    \ = partition(arr, left, right);\n        } else {\n            left = index +\
    \ 1;\n            index = partition(arr, left, right);\n        }\n    }\n   \
    \ for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let\
    \ i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k\
    \ - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], 1));\n\
    console.log(maximum([], -1));\nconsole.log(maximum([1], 1));\nconsole.log(maximum([1],\
    \ 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1], 2));\nconsole.log(maximum([1,\
    \ 2], 1));\nconsole.log(maximum([1, 2], 0));\nconsole.log(maximum([1, 2], -1));\n\
    console.log(maximum([1, 2], 2));\nconsole.log(maximum([1, 2], 3));\nconsole.log(maximum([1,\
    \ 2, 3], 1));\nconsole.log(maximum([1, 2, 3], 0));\nconsole.log(maximum([1, 2,\
    \ 3], -1));\nconsole.log(maximum([1, 2, 3], 2));\nconsole.log(maximum([1, 2, 3],\
    \ 3));\nconsole.log(maximum([1, 2, 3", "  const result: number[] = [];\n  for\
    \ (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2", "  const result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex\
    \ = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([3, 2, 1], 2)); // [3, 2]\n\
    console.log(maximum([1, 2], 2)); // [2, 1]", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2", "  const result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex\
    \ = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max)\
    \ {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    [arr[i], arr[maxIndex]] = [arr[maxIndex], arr[i]];\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));", "    const result: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0\
    \ && result[result.length - 1] < arr[i] && result.length + arr.length - i > k)\
    \ {\n            result.pop();\n        }\n        if (result.length < k) {\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n\
    console.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex:\
    \ number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j <\
    \ arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));",
  "  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i\
    \ = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n\
    \      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n", "  \
    \  const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n\
    \        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "    let result: number[] = [];\n    if (arr.length === 0) {\n        return result;\n\
    \    }\n    if (arr.length <= k) {\n        return arr.sort((a, b) => b - a);\n\
    \    }\n    for (let i = 0; i < k; i++) {\n        let max = arr[i];\n       \
    \ let index = i;\n        for (let j = i + 1; j < arr.length; j++) {\n       \
    \     if (arr[j] > max) {\n                max = arr[j];\n                index\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr[index]\
    \ = arr[i];\n        arr[i] = max;\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  // return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a,\
    \ b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2,\
    \ 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]", "    let result: number[] = [];\n   \
    \ if (arr.length === 0) {\n        return result;\n    }\n    if (arr.length ===\
    \ 1) {\n        return arr;\n    }\n    for (let i = 0; i < k; i++) {\n      \
    \  result.push(arr[i]);\n    }\n    result.sort((a, b) => a - b);\n    for (let\
    \ i = k; i < arr.length; i++) {\n        if (arr[i] > result[0]) {\n         \
    \   result.shift();\n            result.push(arr[i]);\n            result.sort((a,\
    \ b) => a - b);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([],\
    \ 1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], -1));\nconsole.log(maximum([1],\
    \ 1));\nconsole.log(maximum([1], 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1,\
    \ 2], 1));\nconsole.log(maximum([1, 2], 0));\nconsole.log(maximum([1, 2], -1));\n\
    console.log(maximum([1, 2", "    if (k === 0) {\n        return [];\n    }\n \
    \   if (k === arr.length) {\n        return arr;\n    }\n    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));", "  let result: number[] = [];\n  let\
    \ max: number = 0;\n  let index: number = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[index] = -Infinity;\n    max = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "    let result: number[] = [];\n    let index: number = 0;\n   \
    \ while (index < k) {\n        let max: number = arr[0];\n        let maxIndex:\
    \ number = 0;\n        for (let i: number = 1; i < arr.length; i++) {\n      \
    \      if (arr[i] > max) {\n                max = arr[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n        index++;\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    let result: number[] =\
    \ [];\n    let length = arr.length;\n    if (length === 0) {\n        return result;\n\
    \    }\n    if (k === 0) {\n        return result;\n    }\n    if (k >= length)\
    \ {\n        return arr.sort((a, b) => b - a);\n    }\n    let maxHeap = new MaxHeap();\n\
    \    for (let i = 0; i < k; i++) {\n        maxHeap.insert(arr[i]);\n    }\n \
    \   for (let i = k; i < length; i++) {\n        if (arr[i] > maxHeap.peek()) {\n\
    \            maxHeap.pop();\n            maxHeap.insert(arr[i]);\n        }\n\
    \    }\n    while (!maxHeap.isEmpty()) {\n        result.push(maxHeap.pop());\n\
    \    }\n    return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length)\
    \ return arr;\n  let result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length > 0 &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n\
    \    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n \
    \       max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n\
    \      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  const result: number[] = [];\n  if (arr.length === 0) {\n    return\
    \ result;\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n\
    \  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n \
    \   if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        } else {\n            result.sort((a,\
    \ b) => b - a);\n            if (arr[i] > result[k - 1]) {\n                result[k\
    \ - 1] = arr[i];\n            }\n        }\n    }\n    return result.sort((a,\
    \ b) => b - a);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2, 3, 4", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i\
    \ = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k\
    \ - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.", "  const result: number[] = [];\n  let i = 0;\n\
    \  while (i < k) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let\
    \ j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max =\
    \ arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i\
    \ = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k\
    \ - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n\
    }\n", "  let result: number[] = [];\n  let i = 0;\n  while (i < k) {\n    let\
    \ max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  \
    \  i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\
    \ // [5, 4]\nconsole.log(maximum([3, 2, 1], 2)); // [3, 2]\nconsole.log(maximum([1,\
    \ 2], 2)); // [2, 1]", "  let res: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (res.length < k) {\n      res.push(arr[i]);\n    } else {\n \
    \     res.sort((a, b) => a - b);\n      if (arr[i] > res[0]) {\n        res[0]\
    \ = arr[i];\n      }\n    }\n  }\n  return res.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,4,5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 4)); // [2,3,4,5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5)); // [1,2,3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\
    \ // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6)); // [1,2,3,4,5]", "    let result: number[] = [];\n    let\
    \ i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n \
    \       if (arr[i] > arr[j]) {\n            result.push(arr[i]);\n           \
    \ i++;\n        } else {\n            result.push(arr[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));", "    const result: number[] = [];\n    const maxHeap = new\
    \ MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n\
    \    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    let len\
    \ = arr.length;\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n\
    \        let maxIndex = -1;\n        for (let j = 0; j < len; j++) {\n       \
    \     if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex]\
    \ = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2],\
    \ 2));", "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let\
    \ max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n  \
    \    }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    if (k === 0) {\n      \
    \  return [];\n    }\n    if (k === arr.length) {\n        return arr;\n    }\n\
    \    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.sort((a, b) => a - b);\n    for (let i = k; i < arr.length;\
    \ i++) {\n        let j = k - 1;\n        while (j >= 0 && arr[i] > result[j])\
    \ {\n            j--;\n        }\n        if (j < k - 1) {\n            result.splice(j\
    \ + 1, 0, arr[i]);\n            result.pop();\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1,", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\
    \ // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4,\
    \ 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -1)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -6)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -9));", "    let result:\
    \ number[] = [];\n    let i = 0;\n    while (i < k) {\n        let max = arr[i];\n\
    \        let maxIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n\
    \            if (arr[j] > max) {\n                max = arr[j];\n            \
    \    maxIndex = j;\n            }\n        }\n        result.push(max);\n    \
    \    arr[maxIndex] = arr[i];\n        arr[i] = max;\n        i++;\n    }\n   \
    \ return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));", "  const result: number[] = [];\n  for (let i = 0; i < k;\
    \ i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let\
    \ max = arr[i];\n        let maxIndex = i;\n        for (let j = i + 1; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5", "    const result: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i]\
    \ && result.length + arr.length - i > k) {\n            result.pop();\n      \
    \  }\n        if (result.length < k) {\n            result.push(arr[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2,\
    \ 1]", "  let result: number[] = [];\n  let max: number = 0;\n  let maxIndex:\
    \ number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n    maxIndex\
    \ = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max)\
    \ {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\n\
    console.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\n\
    console.log(maximum([1, 2], 2));", "  // return arr.sort((a, b) => b - a).slice(0,\
    \ k);\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -13));\nconsole.log(maximum([1, 2, 3, 4, 5], -14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -15));\nconsole.log(maximum([1, 2, 3, 4, 5], -16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -17));\nconsole.log(maximum([1, 2", "  const result: number[] =\
    \ [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for\
    \ (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max =\
    \ arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2", "  const result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex\
    \ = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([",
  "    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex:\
    \ number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j <\
    \ arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));",
  "  // return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) =>\
    \ b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2, 3, 4, 5], -13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -14));\nconsole.log(maximum([1, 2, 3, 4, 5], -15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -16));\nconsole.log(maximum([1, 2, 3, 4, 5], -17));\nconsole.log(maximum([1,\
    \ 2", "    const result: number[] = [];\n    let i = 0;\n    while (i < k) {\n\
    \        result.push(arr[i]);\n        i++;\n    }\n    result.sort((a, b) =>\
    \ b - a);\n    while (i < arr.length) {\n        if (arr[i] > result[k - 1]) {\n\
    \            result[k - 1] = arr[i];\n            result.sort((a, b) => b - a);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole", " \
    \ const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max =\
    \ -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "  const result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    let\
    \ result: number[] = [];\n    if (arr.length === 0) {\n        return result;\n\
    \    }\n    let max: number = arr[0];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    let count: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n    \
    \    if (arr[i] === max) {\n            count++;\n        }\n    }\n    if (count\
    \ >= k) {\n        for (let i = 0; i < k; i++) {\n            result.push(max);\n\
    \        }\n        return result;\n    }\n    let index: number = 0;\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] === max) {\n        \
    \    result[index] = max;\n            index++;\n        }\n    }\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] !== max) {\n            result[index]\
    \ = arr[i];\n            index++;\n        }\n    }\n    return result;\n}\n",
  "  const result: number[] = [];\n  const len = arr.length;\n  if (k === 0) {\n \
    \   return result;\n  }\n  if (k === len) {\n    return arr;\n  }\n  for (let\
    \ i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < len;\
    \ i++) {\n    let j = k - 1;\n    while (j >= 0 && arr[i] > result[j]) {\n   \
    \   j--;\n    }\n    if (j !== k - 1) {\n      result.splice(j + 1, 0, arr[i]);\n\
    \      result.pop();\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -", "    let result: number[] = [];\n    for (let i = 0; i < k;\
    \ i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for\
    \ (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n      \
    \          max = arr[j];\n                maxIndex = j;\n            }\n     \
    \   }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n  \
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));", "  // return\
    \ arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) => a - b).slice(arr.length\
    \ - k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([3,\
    \ 2, 1], 2)); // [2, 3]\nconsole.log(maximum([1, 2], 2)); // [1, 2]", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        } else {\n            result.sort((a,\
    \ b) => a - b);\n            if (arr[i] > result[0]) {\n                result[0]\
    \ = arr[i];\n            }\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2,", "    let result: number[] =\
    \ [];\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n     \
    \   let maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n     \
    \       if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex\
    \ = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\ndescribe(\"maximum\"\
    , () => {\n  test(\"#1\", () => {\n    expect(maximum([1, 2, 3, 4, 5], 2)).toEqual([5,\
    \ 4]);\n  });\n  test(\"#2\", () => {\n    expect(maximum([3, 2, 1], 2)).toEqual([3,\
    \ 2]);\n  });\n  test(\"#3\", () => {\n    expect(maximum([1, 2], 2)).toEqual([2,\
    \ 1]);\n  });\n});", "    const result: number[] = [];\n    for (let i = 0; i\
    \ < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(", "    let result: number[] = [];\n    let\
    \ temp: number[] = [];\n    let len: number = arr.length;\n    for (let i: number\
    \ = 0; i < len; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        } else {\n            temp = result.slice();\n            for (let j:\
    \ number = 0; j < k; j++) {\n                if (arr[i] > temp[j]) {\n       \
    \             temp.splice(j, 0, arr[i]);\n                    break;\n       \
    \         }\n            }\n            result = temp.slice(0, k);\n        }\n\
    \    }\n    return result;\n}\n", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(maximum([", "    const result: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0\
    \ && result[result.length - 1] < arr[i] && result.length + arr.length - i > k)\
    \ {\n            result.pop();\n        }\n        if (result.length < k) {\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n\
    console.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex:\
    \ number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j <\
    \ arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));",
  "    const result: number[] = [];\n    const maxHeap = new MaxHeap();\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for\
    \ (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n\
    \    return result;\n}\n", "    const result: number[] = [];\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(", "    let result: number[] = [];\n    let\
    \ max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0;\
    \ i < k; i++) {\n        max = -Infinity;\n        maxIndex = -1;\n        for\
    \ (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n      \
    \          max = arr[j];\n                maxIndex = j;\n            }\n     \
    \   }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n    }\n\
    \    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.", " \
    \ let result: number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = arr[i];\n\
    \    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n     \
    \ if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n\
    \    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n\
    \    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n\
    \    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if\
    \ (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n  \
    \  }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n\
    }\n", "    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        while (result.length > 0 && result[result.length - 1] < arr[i] &&\
    \ result.length + arr.length - i > k) {\n            result.pop();\n        }\n\
    \        if (result.length < k) {\n            result.push(arr[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let\
    \ max = Number.MIN_SAFE_INTEGER;\n        let maxIndex = -1;\n        for (let\
    \ j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n           \
    \     max = arr[j];\n                maxIndex = j;\n            }\n        }\n\
    \        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n    return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "  const result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\
    \ // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2,\
    \ 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6)); // []", "    const result: number[] = [];\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(", "    const result: number[] = [];\n    if\
    \ (arr.length === 0) {\n        return result;\n    }\n    if (arr.length <= k)\
    \ {\n        return arr.sort((a, b) => b - a);\n    }\n    for (let i = 0; i <\
    \ k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b\
    \ - a);\n    for (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[k\
    \ - 1]) {\n            let j = k - 1;\n            while (j >= 0 && arr[i] > result[j])\
    \ {\n                j--;\n            }\n            result.splice(j + 1, 0,\
    \ arr[i]);\n            result.pop();\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));", "    let result: number[] = [];\n \
    \   let max: number = 0;\n    let maxIndex: number = 0;\n    for (let i = 0; i\
    \ < k; i++) {\n        max = -Infinity;\n        for (let j = 0; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  let result: number[] = [];\n  let max: number = -Infinity;\n \
    \ let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));", "  // return arr.sort((a, b) => b -\
    \ a).slice(0, k);\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(maximum([1, 2, 3, 4, 5], 23));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 24));\nconsole.log(maximum([1, 2, 3, 4, 5], 25));\nconsole.log(maximum([1",
  "    const maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n\
    \        maxHeap.insert(arr[i]);\n    }\n    const result = [];\n    for (let\
    \ i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n  \
    \  return result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result[0] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2, 3, 4", "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n \
    \   result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n  for (let i =\
    \ k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result.shift();\n\
    \      result.push(arr[i]);\n      result.sort((a, b) => a - b);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4,5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3)); // [3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 5)); // [1,2,3,4,5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1,2,3,4,5]\n\
    console.log(maximum([1, 2, 3, 4, 5], -1)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -3)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -5)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -6)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -8)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -10)); // []\n\
    console.log", "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max =\
    \ -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0])\
    \ {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a,\
    \ b) => a - b);\n    }\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex\
    \ = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n   \
    \ arr[i] = max;\n  }\n  return result;\n}\n", "    const result: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n\
    \    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n \
    \       max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const sortedArr = arr.sort((a, b) => b - a);\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));", "  const result: number[] = [];\n  const heap = new Heap(arr,\
    \ (a, b) => a > b);\n  for (let i = 0; i < k; i++) {\n    result.push(heap.pop());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let\
    \ j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max =\
    \ arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n", "    let result:\
    \ number[] = [];\n    let len = arr.length;\n    if (len <= k) {\n        return\
    \ arr.sort((a, b) => b - a);\n    }\n    for (let i = 0; i < k; i++) {\n     \
    \   result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    for (let\
    \ i = k; i < len; i++) {\n        if (arr[i] > result[k - 1]) {\n            let\
    \ j = k - 1;\n            while (j >= 0 && arr[i] > result[j]) {\n           \
    \     j--;\n            }\n            result.splice(j + 1, 0, arr[i]);\n    \
    \        result.pop();\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(",
  "  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i\
    \ = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n\
    }\n", "  let result: number[] = [];\n  let max: number = arr[0];\n  let maxIndex:\
    \ number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n    maxIndex\
    \ = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max)\
    \ {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\n\
    console.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\n\
    console.log(maximum([1, 2], 2));", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) =>\
    \ b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2", "    const result: number[]\
    \ = [];\n    if (arr.length === 0) {\n        return result;\n    }\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        const num = arr[i];\n        if (result.length\
    \ < k) {\n            result.push(num);\n            result.sort((a, b) => b -\
    \ a);\n        } else {\n            if (num > result[k - 1]) {\n            \
    \    result.pop();\n                result.push(num);\n                result.sort((a,\
    \ b) => b - a);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([],\
    \ 1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], -1));", "  const\
    \ result: number[] = [];\n  if (k === 0) {\n    return result;\n  }\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    while (\n      result.length > 0 &&\n   \
    \   result[result.length - 1] < arr[i] &&\n      result.length + arr.length -\
    \ i > k\n    ) {\n      result.pop();\n    }\n    if (result.length < k) {\n \
    \     result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n   \
    \ for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max\
    \ = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n  \
    \  arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  let result: number[] = [];\n  if (arr.length === 0) {\n    return\
    \ result;\n  }\n  let max: number = arr[0];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let\
    \ i = 0; i < k; i++) {\n    result.push(max);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    const max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max),\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));", "    let result: number[]\
    \ = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n  \
    \  for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++)\
    \ {\n            if (arr[j] > max) {\n                max = arr[j];\n        \
    \        maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));",
  "    // return arr.sort((a, b) => b - a).slice(0, k);\n    return arr.sort((a, b)\
    \ => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5,\
    \ 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2,\
    \ 1]", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "    let result: number[] = [];\n    let max: number = 0;\n    let\
    \ maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n        for (let j\
    \ = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n             \
    \   max = arr[j];\n                maxIndex = j;\n            }\n        }\n \
    \       result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = 0;\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "  let result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));", "  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n\
    \  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n\
    \  return result;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n   \
    \     index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) =>\
    \ a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0])\
    \ {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a,\
    \ b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole", " \
    \   if (k === 0) {\n        return [];\n    }\n    const result: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0\
    \ && result[result.length - 1] < arr[i] && result.length + arr.length - i > k)\
    \ {\n            result.pop();\n        }\n        if (result.length < k) {\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n\
    console.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\n\
    console.log(maximum([1, 2], 2));", "  if (k === 0) return [];\n  if (k === arr.length)\
    \ return arr;\n  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length > 0 &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));", "    // return\
    \ arr.sort((a, b) => b - a).slice(0, k);\n    return arr.sort((a, b) => b - a).slice(0,\
    \ k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 23));\nconsole.log(maximum([1, 2, 3, 4, 5], 24));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 25));\nconsole.log(maximum([1", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\
    \ // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 2)); // [5, 4]\n\
    console.log(maximum([5, 4, 3, 2, 1], 3)); // [5, 4, 3]\nconsole.log(maximum([5,\
    \ 4, 3, 2, 1], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 5)); // [5, 4,\
    \ 3, 2, 1]\nconsole.log(maximum([5, 4, 3, 2, 1], 0)); // []\nconsole.log(maximum([],\
    \ 0)); // []", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let\
    \ i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k\
    \ - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.", " \
    \   const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n\
    \        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4,\
    \ 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([5,\
    \ 4, 3, 2, 1], 2)); // [5, 4]\nconsole.log(maximum([5, 4, 3, 2, 1], 3)); // [5,\
    \ 4, 3]\nconsole.log(maximum([5, 4, 3, 2, 1], 1)); // [5]\nconsole.log(maximum([5,\
    \ 4, 3, 2, 1], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([5, 4, 3, 2, 1], 0));\
    \ // []\nconsole.log(maximum([], 0)); // []", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.", " \
    \ const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2", "    let result: number[] =\
    \ [];\n    let len = arr.length;\n    if (len === 0) {\n        return result;\n\
    \    }\n    if (len <= k) {\n        return arr;\n    }\n    for (let i = 0; i\
    \ < k; i++) {\n        result.push(arr[i]);\n    }\n    for (let i = k; i < len;\
    \ i++) {\n        let min = Math.min(...result);\n        if (arr[i] > min) {\n\
    \            let index = result.indexOf(min);\n            result[index] = arr[i];\n\
    \        }\n    }\n    return result;\n}\n", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k\
    \ - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "  //\
    \ return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) => b\
    \ - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ && arr[i] > result[result.length - 1] && result.length + arr.length - i > k)\
    \ {\n            result.pop();\n        }\n        if (result.length < k) {\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n\
    console.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([",
  "    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n\
    \        while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n\
    \      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole", " \
    \   const result: number[] = [];\n    if (arr.length === 0) {\n        return\
    \ result;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.sort((a, b) => b - a);\n    for (let i = k; i < arr.length;\
    \ i++) {\n        if (arr[i] > result[k - 1]) {\n            result[k - 1] = arr[i];\n\
    \            result.sort((a, b) => b - a);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([],\
    \ 0));\nconsole.log(maximum([], 1));\nconsole.log(maximum([], -1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(",
  "    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n\
    \        while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([",
  "  let result: number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number\
    \ = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n\
    \    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,\
    \ 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\
    \ // [1, 2, 3, 4, 5]", "    if (k === 0) {\n        return [];\n    }\n    if\
    \ (k === arr.length) {\n        return arr;\n    }\n    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n\
    \    result.push(max);\n    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex\
    \ = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let max = -Infinity;\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1", "  let result: number[] = [];\n\
    \  let len = arr.length;\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n\
    \    let maxIndex = -1;\n    for (let j = 0; j < len; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr[maxIndex] = -Infinity;\n  }\n  return result;\n}\n\
    \nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4,\
    \ 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));", "  let result:\
    \ number[] = [];\n  let max: number = arr[0];\n  let maxIndex: number = 0;\n \
    \ for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n   \
    \   }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n    max = arr[0];\n\
    \    maxIndex = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2],\
    \ 2));", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n  \
    \  let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\n\
    console.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2,\
    \ 1]", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n", "    let result: number[]\
    \ = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n  \
    \  for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++)\
    \ {\n            if (arr[j] > max) {\n                max = arr[j];\n        \
    \        maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));", "  const result: number[] = [];\n  for (let i = 0; i < k;\
    \ i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n   \
    \ for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max\
    \ = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n  \
    \  arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  // return arr.sort((a,\
    \ b) => b - a).slice(0, k);\n  const result: number[] = [];\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    const num = arr[i];\n    if (result.length < k)\
    \ {\n      result.push(num);\n      continue;\n    }\n    for (let j = 0; j <\
    \ result.length; j++) {\n      if (num > result[j]) {\n        result.splice(j,\
    \ 0, num);\n        result.pop();\n        break;\n      }\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5", "    const result:\
    \ number[] = [];\n    const maxHeap = new MaxHeap();\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for (let i =\
    \ 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return\
    \ result;\n}\n", "  let result: number[] = [];\n  let max: number = 0;\n  let\
    \ maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));", "  return arr.sort((a,\
    \ b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "    let\
    \ result: number[] = [];\n    let max: number = 0;\n    let maxIndex: number =\
    \ 0;\n    for (let i = 0; i < k; i++) {\n        max = -Infinity;\n        for\
    \ (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n      \
    \          max = arr[j];\n                maxIndex = j;\n            }\n     \
    \   }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n    }\n\
    \    return result;\n}\n", "    let result: number[] = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) =>\
    \ b - a);\n    for (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[k\
    \ - 1]) {\n            result[k - 1] = arr[i];\n            result.sort((a, b)\
    \ => b - a);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2", "  const result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] < result[k\
    \ - 1]) {\n      continue;\n    }\n    for (let j = 0; j < k; j++) {\n      if\
    \ (arr[i] > result[j]) {\n        result.splice(j, 0, arr[i]);\n        result.pop();\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "    let result:\
    \ number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number =\
    \ -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max =\
    \ -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([", "  let result: number[] = [];\n\
    \  let i = 0;\n  while (i < k) {\n    result.push(arr[i]);\n    i++;\n  }\n  result.sort((a,\
    \ b) => b - a);\n  while (i < arr.length) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result.pop();\n      result.push(arr[i]);\n      result.sort((a, b) =>\
    \ b - a);\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "    let result: number[] = [];\n    let max: number = -Infinity;\n\
    \    let index: number = 0;\n    for (let i = 0; i < k; i++) {\n        for (let\
    \ j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n           \
    \     max = arr[j];\n                index = j;\n            }\n        }\n  \
    \      result.push(max);\n        arr[index] = -Infinity;\n        max = -Infinity;\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));", "  let result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex =\
    \ -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      for\
    \ (let j = k - 1; j > 0; j--) {\n        if (result[j] > result[j - 1]) {\n  \
    \        const temp = result[j];\n          result[j] = result[j - 1];\n     \
    \     result[j - 1] = temp;\n        }\n      }\n    }\n  }\n  return result;\n\
    }\n", "    let heap = new Heap<number>(arr, (a, b) => a - b);\n    let result\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        result.push(heap.pop());\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    for (let\
    \ i = 0; i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n\
    \        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max)\
    \ {\n                max = arr[j];\n                maxIndex = j;\n          \
    \  }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n\
    \    }\n    return result;\n}\n", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (result.length < k) {\n          \
    \  result.push(arr[i]);\n        } else {\n            result.sort((a, b) => a\
    \ - b);\n            if (arr[i] > result[0]) {\n                result[0] = arr[i];\n\
    \            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\
    \nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4,\
    \ 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j <\
    \ arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n     \
    \   maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] =\
    \ arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));", "    const result: number[] = [];\n    const len = arr.length;\n\
    \    if (k === 0) {\n        return result;\n    }\n    if (k === len) {\n   \
    \     return arr;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.sort((a, b) => a - b);\n    for (let i = k; i < len; i++) {\n\
    \        if (arr[i] > result[0]) {\n            result.shift();\n            result.push(arr[i]);\n\
    \            result.sort((a, b) => a - b);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));", "  // return arr.sort((a, b) => b -\
    \ a).slice(0, k);\n  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,\
    \ 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\
    \ // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -2)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -4)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -7)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -9)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -10)); //"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
