{
  "name": "HumanEval_25_factorize",
  "language": "ts",
  "prompt": "//Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\nfunction factorize(n: number): number[] {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
  "completions": [
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(17));\nconsole.log(factorize(20));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(30));\nconsole.log(factorize(35));\nconsole.log(factorize(36));\nconsole.log(factorize(40));\nconsole.log(factorize(45));\nconsole.log(factorize(48));\nconsole.log(factorize(50));\nconsole.log(factorize(60));\nconsole.log(factorize(70));\nconsole.log(factorize(75));\nconsole.log(factorize(80));\nconsole.log(factorize(90));\nconsole.log(factorize(100));\nconsole.log(factorize(105));\nconsole.log(factorize(120));\nconsole.log(factorize(125));\nconsole.log(factorize(126));\nconsole.log(factorize(128));\nconsole.log(factorize(130));\nconsole.log(factorize(135));\nconsole.log(factorize(140));\nconsole.log(factorize(144));\nconsole.log(factorize(150));\nconsole.log(factorize(160));\nconsole.log(factorize(165));\nconsole.log(factorize(168));\nconsole.log(factorize(175));\nconsole.log(factorize(180));\nconsole.log(factorize(189));\nconsole.log(factorize(192));\nconsole.log(factorize(195));\nconsole.log(factorize(200));\nconsole.log(factorize(210));\nconsole.log(factorize(216));\nconsole.log(factorize(220));\nconsole.log(factorize(224));\nconsole.log(factorize(225));\nconsole.log(factor",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let factor: number = 2;\n    while (n > 1) {\n        while (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "  const factors = [];\n  if (n === 1) {\n    return [1];\n  }\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(49)); // [7, 7]\nconsole.log(factorize(77)); // [7, 11]\nconsole.log(factorize(1)); // [1]",
    "    let factors: number[] = [];\n    let factor: number = 2;\n    while (n > 1) {\n        while (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(24));\nconsole.log(factorize(17));\nconsole.log(factorize(1));\nconsole.log(factorize(0));\nconsole.log(factorize(7));\nconsole.log(factorize(77));\nconsole.log(factorize(100));\nconsole.log(factorize(101));\nconsole.log(factorize(102));\nconsole.log(factorize(103));\nconsole.log(factorize(104));\nconsole.log(factorize(105));\nconsole.log(factorize(106));\nconsole.log(factorize(107));\nconsole.log(factorize(108));\nconsole.log(factorize(109));\nconsole.log(factorize(110));\nconsole.log(factorize(111));\nconsole.log(factorize(112));\nconsole.log(factorize(113));\nconsole.log(factorize(114));\nconsole.log(factorize(115));\nconsole.log(factorize(116));\nconsole.log(factorize(117));\nconsole.log(factorize(118));\nconsole.log(factorize(119));\nconsole.log(factorize(120));\nconsole.log(factorize(121));\nconsole.log(factorize(122));\nconsole.log(factorize(123));\nconsole.log(factorize(124));\nconsole.log(factorize(125));\nconsole.log(factorize(126));\nconsole.log(factorize(127));\nconsole.log(factorize(128));\nconsole.log(factorize(129));\nconsole.log(factorize(130));\nconsole.log(factorize(131));\nconsole.log(factorize(132));\nconsole.log(factorize(133));\nconsole.log(factorize(134));\nconsole.log(factorize(135));\nconsole.log(factorize(136));\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(10));\nconsole.log(factorize(100));\nconsole.log(factorize(1));\nconsole.log(factorize(0));\nconsole.log(factorize(2));\nconsole.log(factorize(3));\nconsole.log(factorize(4));\nconsole.log(factorize(5));\nconsole.log(factorize(6));\nconsole.log(factorize(7));\nconsole.log(factorize(8));\nconsole.log(factorize(9));\nconsole.log(factorize(11));\nconsole.log(factorize(13));\nconsole.log(factorize(14));\nconsole.log(factorize(15));\nconsole.log(factorize(16));\nconsole.log(factorize(17));\nconsole.log(factorize(18));\nconsole.log(factorize(19));\nconsole.log(factorize(20));\nconsole.log(factorize(21));\nconsole.log(factorize(22));\nconsole.log(factorize(23));\nconsole.log(factorize(24));\nconsole.log(factorize(25));\nconsole.log(factorize(26));\nconsole.log(factorize(27));\nconsole.log(factorize(28));\nconsole.log(factorize(29));\nconsole.log(factorize(30));\nconsole.log(factorize(31));\nconsole.log(factorize(32));\nconsole.log(factorize(33));\nconsole.log(factorize(34));\nconsole.log(factorize(35));\nconsole.log(factorize(36));\nconsole.log(factorize(37));\nconsole.log(factorize(38));\nconsole.log(factorize(39));\nconsole.log(factorize(40));\nconsole.log(factorize(41));\nconsole.log(factorize(42));\n",
    "    const factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(60)); // [2, 2, 3, 5]\nconsole.log(factorize(100)); // [2, 2, 5, 5]\nconsole.log(factorize(1)); // []",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(17));\nconsole.log(factorize(40));\nconsole.log(factorize(42));\nconsole.log(factorize(89));\nconsole.log(factorize(144));\nconsole.log(factorize(169));\nconsole.log(factorize(9));\nconsole.log(factorize(3));\nconsole.log(factorize(2));\nconsole.log(factorize(1));\nconsole.log(factorize(0));",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(37));\nconsole.log(factorize(42));\nconsole.log(factorize(89));\nconsole.log(factorize(144));\nconsole.log(factorize(360));\nconsole.log(factorize(1000));\nconsole.log(factorize(1001));\nconsole.log(factorize(1002));\nconsole.log(factorize(1003));\nconsole.log(factorize(1004));\nconsole.log(factorize(1005));\nconsole.log(factorize(1006));\nconsole.log(factorize(1007));\nconsole.log(factorize(1008));\nconsole.log(factorize(1009));\nconsole.log(factorize(1010));\nconsole.log(factorize(1011));\nconsole.log(factorize(1012));\nconsole.log(factorize(1013));\nconsole.log(factorize(1014));\nconsole.log(factorize(1015));\nconsole.log(factorize(1016));\nconsole.log(factorize(1017));\nconsole.log(factorize(1018));\nconsole.log(factorize(1019));\nconsole.log(factorize(1020));\nconsole.log(factorize(1021));\nconsole.log(factorize(1022));\nconsole.log(factorize(1023));\nconsole.log(factorize(1024));\nconsole.log(factorize(1025));\nconsole.log(factorize(1026));\nconsole.log(factorize(1027));\nconsole.log(factorize(1028));\nconsole.log(factorize(1029));\nconsole.log(factorize(1030));\n",
    "  const factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(60)); // [2, 2, 3, 5]\nconsole.log(factorize(100)); // [2, 2, 5, 5]",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let prime: number = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n            factors.push(prime);\n            n /= prime;\n        }\n        prime++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "  const factors = [];\n  let divisor = 2;\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n    divisor++;\n  }\n  return factors;\n}\n",
    "    let result: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            result.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return result;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(18));\nconsole.log(factorize(24));\nconsole.log(factorize(17));\nconsole.log(factorize
    "    let result: number[] = [];\n    let divider: number = 2;\n    while (n > 1) {\n        while (n % divider === 0) {\n            result.push(divider);\n            n /= divider;\n        }\n        divider++;\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(11));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(17));\nconsole.log(factorize(45));\nconsole.log(factorize(144));\nconsole.log(factorize(360));",
    "    let result = [];\n    let prime = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n            result.push(prime);\n            n /= prime;\n        }\n        prime++;\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "  let factors: number[] = [];\n  let i: number = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(37));\nconsole.log(factorize(40));\nconsole.log(factorize(42));\nconsole.log(factorize(45));\nconsole.log(factorize(48));\nconsole.log(factorize(49));\nconsole.log(factorize(50));\nconsole.log(factorize(51));\nconsole.log(factorize(52));\nconsole.log(factorize(54));\nconsole.log(factorize(56));\nconsole.log(factorize(57));\nconsole.log(factorize(58));\nconsole.log(factorize(60));\nconsole.log(factorize(63));\nconsole.log(factorize(64));\nconsole.log(factorize(65));\nconsole.log(factorize(66));\nconsole.log(factorize(67));\nconsole.log(factorize(68));\nconsole.log(factorize(69));\nconsole.log(factorize(70));\nconsole.log(factorize(72));\nconsole.log(factorize(75));\nconsole.log(factorize(76));\nconsole.log(factorize(77));\nconsole.log(factorize(78));\nconsole.log(factorize(80));\nconsole.log(factorize(81));\nconsole.log(factorize(84));\nconsole.log(factorize(85));\nconsole.log(factorize(87));\nconsole.log(factorize(88));\nconsole.log(factorize(90));\nconsole.log(factorize(91));\nconsole.log(factorize(92));\nconsole.log(factorize(93));\nconsole.log(factorize(94));\nconsole.log(factorize(95));\nconsole.log(factor",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(10));\nconsole.log(factorize(14));\nconsole.log(factorize(356));\nconsole.log(factorize(89));\nconsole.log(factorize(1000));",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    const factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(49)); // [7, 7]\nconsole.log(factorize(77)); // [7, 11]\nconsole.log(factorize(100)); // [2, 2, 5, 5]\nconsole.log(factorize(121)); // [11, 11]\nconsole.log(factorize(144)); // [2, 2, 2, 2, 3, 3]\nconsole.log(factorize(169)); // [13, 13]\nconsole.log(factorize(196)); // [2, 2, 7, 7]\nconsole.log(factorize(289)); // [17, 17]\nconsole.log(factorize(361)); // [19, 19]\nconsole.log(factorize(529)); // [23, 23]\nconsole.log(factorize(841)); // [29, 29]\nconsole.log(factorize(961)); // [31, 31]\nconsole.log(factorize(1369)); // [37, 37]\nconsole.log(factorize(1681)); // [41, 41]\nconsole.log(factorize(1849)); // [43, 43]\nconsole.log(factorize(2209)); // [47, 47]\nconsole.log(factorize(2809)); // [53, 53]\nconsole.log(factorize(3481)); // [59, 59]\nconsole.log(factorize(3721)); // [61, 61]\nconsole.log(factorize(4489)); // [67, 67]\nconsole.log(factorize(5041)); // [71, 71]\nconsole.log(factorize(5329)); // [",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(37));\nconsole.log(factorize(40));\nconsole.log(factorize(42));\nconsole.log(factorize(60));\nconsole.log(factorize(63));\nconsole.log(factorize(64));\nconsole.log(factorize(77));\nconsole.log(factorize(79));\nconsole.log(factorize(100));\nconsole.log(factorize(121));\nconsole.log(factorize(125));\nconsole.log(factorize(126));\nconsole.log(factorize(128));\nconsole.log(factorize(144));\nconsole.log(factorize(147));\nconsole.log(factorize(150));\nconsole.log(factorize(169));\nconsole.log(factorize(171));\nconsole.log(factorize(175));\nconsole.log(factorize(180));\nconsole.log(factorize(190));\nconsole.log(factorize(192));\nconsole.log(factorize(196));\nconsole.log(factorize(200));\nconsole.log(factorize(216));\nconsole.log(factorize(225));\nconsole.log(factorize(231));\nconsole.log(factorize(240));\nconsole.log(factorize(243));\nconsole.log(factorize(245));\nconsole.log(factorize(250));\nconsole.log(factorize(252));\nconsole.log(factorize(256));\nconsole.log(factorize(260));\nconsole.log(factorize(264));\nconsole.log(factorize(270));\nconsole.log(factorize(275));\nconsole.log(factorize(280));\nconsole.log(factorize(288));\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(37));\nconsole.log(factorize(40));\nconsole.log(factorize(81));\nconsole.log(factorize(100));\nconsole.log(factorize(1024));\nconsole.log(factorize(1234));\nconsole.log(factorize(12345));\nconsole.log(factorize(123456));\nconsole.log(factorize(1234567));\nconsole.log(factorize(12345678));\nconsole.log(factorize(123456789));\nconsole.log(factorize(1234567890));\nconsole.log(factorize(12345678901));\nconsole.log(factorize(123456789012));\nconsole.log(factorize(1234567890123));\nconsole.log(factorize(12345678901234));\nconsole.log(factorize(123456789012345));\nconsole.log(factorize(1234567890123456));\nconsole.log(factorize(12345678901234567));\nconsole.log(factorize(123456789012345678));\nconsole.log(factorize(1234567890123456789));\nconsole.log(factorize(12345678901234567890));\nconsole.log(factorize(123456789012345678901));\nconsole.log(factorize(1234567890123456789012));\nconsole.log(factorize(12345678901234567890123));\nconsole.log(factorize(123456789012345678901234));\nconsole.log(factorize(1234567890123456789012345));\nconsole.log(factorize(123",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(100));\nconsole.log(factorize(1));\nconsole.log(factorize(0));\nconsole.log(factorize(3));\nconsole.log(factorize(5));\nconsole.log(factorize(7));\nconsole.log(factorize(9));\nconsole.log(factorize(11));\nconsole.log(factorize(13));\nconsole.log(factorize(15));\nconsole.log(factorize(17));\nconsole.log(factorize(19));\nconsole.log(factorize(21));\nconsole.log(factorize(23));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(29));\nconsole.log(factorize(31));\nconsole.log(factorize(33));\nconsole.log(factorize(35));\nconsole.log(factorize(37));\nconsole.log(factorize(39));\nconsole.log(factorize(41));\nconsole.log(factorize(43));\nconsole.log(factorize(45));\nconsole.log(factorize(47));\nconsole.log(factorize(49));\nconsole.log(factorize(51));\nconsole.log(factorize(53));\nconsole.log(factorize(55));\nconsole.log(factorize(57));\nconsole.log(factorize(59));\nconsole.log(factorize(61));\nconsole.log(factorize(63));\nconsole.log(factorize(65));\nconsole.log(factorize(67));\nconsole.log(factorize(69));\nconsole.log(factorize(71));\nconsole.log(factorize(73));\nconsole.log(factorize(75));\nconsole.log(factorize(77));\nconsole.log(factorize(79));\nconsole.log(factor",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "  let factors: number[] = [];\n  let i: number = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(49)); // [7, 7]\nconsole.log(factorize(77)); // [7, 11]\nconsole.log(factorize(121)); // [11, 11]\nconsole.log(factorize(169)); // [13, 13]\nconsole.log(factorize(625)); // [5, 5, 5, 5]\nconsole.log(factorize(1024)); // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nconsole.log(factorize(1290)); // [2, 5, 7, 7]\nconsole.log(factorize(7919)); // [7919]\nconsole.log(factorize(7920)); // [2, 2, 2, 2, 3, 5, 7, 7]\nconsole.log(factorize(7921)); // [7921]\nconsole.log(factorize(7922)); // [2, 3, 11, 11, 13]\nconsole.log(factorize(7923)); // [7923]\nconsole.log(factorize(7924)); // [2, 2, 3, 3, 3, 3, 7, 7]\nconsole.log(factorize(7925)); // [5, 5, 11, 11, 13]\nconsole.log(factorize(7926)); // [2, 7926]\nconsole.log(factorize(7927)); // [7927]\nconsole.log(factorize(7928)); // [2, 2, 2, 2, 3, 3, 3, 3, 7, 7]\nconsole.log(factorize(7929)); // [7929",
    "    let result: number[] = [];\n    let divider: number = 2;\n    while (n > 1) {\n        while (n % divider === 0) {\n            result.push(divider);\n            n /= divider;\n        }\n        divider++;\n    }\n    return result;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(17));\nconsole.log(factorize(18));\nconsole.log(factorize(19));\nconsole.log(factorize(20));\nconsole.log(factorize(21));\nconsole.log(factorize(22));\nconsole.log(factorize(23));\nconsole.log(factorize(24));\nconsole.log(factorize(25));\nconsole.log(factorize(26));\nconsole.log(factorize(27));\nconsole.log(factorize(28));\nconsole.log(factorize(29));\nconsole.log(factorize(30));\nconsole.log(factorize(31));\nconsole.log(factorize(32));\nconsole.log(factorize(33));\nconsole.log(factorize(34));\nconsole.log(factorize(35));\nconsole.log(factorize(36));\nconsole.log(factorize(37));\nconsole.log(factorize(38));\nconsole.log(factorize(39));\nconsole.log(factorize(40));\nconsole.log(factorize(41));\nconsole.log(factorize(42));\nconsole.log(factorize(43));\nconsole.log(factorize(44));\nconsole.log(factorize(45));\nconsole.log(factorize(46));\nconsole.log(factorize(47));\nconsole.log(factorize(48));\nconsole.log(factorize(49));\nconsole.log(factorize(50));\nconsole.log(factorize(51));\nconsole.log(factorize(52));\nconsole.log(factorize(53));\nconsole.log(factorize(54));\nconsole.log(factorize(55));\nconsole.log(factorize(56));\nconsole.log(factorize(57));\nconsole.log(factor",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(10)); // [2, 5]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(15)); // [3, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(60)); // [2, 2, 3, 5]\nconsole.log(factorize(77)); // [7, 11]\nconsole.log(factorize(100)); // [2, 2, 5, 5]",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let result = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let prime: number = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n            result.push(prime);\n            n /= prime;\n        }\n        prime++;\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(37));\nconsole.log(factorize(81));\nconsole.log(factorize(1001));",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(15)); // [3, 5]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(30)); // [2, 3, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(100)); // [2, 2, 5, 5]",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(1)); // []\nconsole.log(factorize(0)); // []\nconsole.log(factorize(24)); // [2, 2, 2, 3]\nconsole.log(factorize(100)); // [2, 2, 5, 5]\nconsole.log(factorize(101)); // [101]\nconsole.log(factorize(102)); // [2, 3, 17]\nconsole.log(factorize(103)); // [103]\nconsole.log(factorize(104)); // [2, 2, 2, 13]\nconsole.log(factorize(105)); // [3, 5, 7]\nconsole.log(factorize(106)); // [2, 53]\nconsole.log(factorize(107)); // [107]\nconsole.log(factorize(108)); // [2, 2, 3, 3, 3]\nconsole.log(factorize(109)); // [109]\nconsole.log(factorize(110)); // [2, 5, 11]\nconsole.log(factorize(111)); // [3, 37]\nconsole.log(factorize(112)); // [2, 2, 2, 2, 7]\nconsole.log(factorize(113)); // [113]\nconsole.log(factorize(114)); // [2, 3, 19]\nconsole.log(factorize(115)); // [5, 23]\nconsole.log(factorize(116)); // [2, 2, 29]\nconsole.log(factorize(117)); // [3, 39]\nconsole.log(factorize(118)); // [2, 59]\nconsole.log(factorize(119)); // [7, 17]\nconsole.log(factorize(120)); // [2, 2, 2, 3, 5]\nconsole.log(factorize(",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(37));\nconsole.log(factorize(81));\nconsole.log(factorize(1001));\nconsole.log(factorize(9699690));",
    "    let result = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let primeFactors: number[] = getPrimeFactors(n);\n    let primeFactor: number = primeFactors[0];\n    let primeFactorCount: number = 0;\n    for (let i: number = 0; i < primeFactors.length; i++) {\n        if (primeFactor === primeFactors[i]) {\n            primeFactorCount++;\n        } else {\n            for (let j: number = 0; j < primeFactorCount; j++) {\n                result.push(primeFactor);\n            }\n            primeFactor = primeFactors[i];\n            primeFactorCount = 1;\n        }\n    }\n    for (let j: number = 0; j < primeFactorCount; j++) {\n        result.push(primeFactor);\n    }\n    return result;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(10));\nconsole.log(factorize(14));\nconsole.log(factorize(356));\nconsole.log(factorize(89));\nconsole.log(factorize(1000));",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(17));\nconsole.log(factorize(40));\nconsole.log(factorize(42));\nconsole.log(factorize(18));\nconsole.log(factorize(32));\nconsole.log(factorize(30));",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "  let result: number[] = [];\n  let i: number = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      result.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(49)); // [7, 7]\nconsole.log(factorize(77)); // [7, 11]\nconsole.log(factorize(121)); // [11, 11]\nconsole.log(factorize(169)); // [13, 13]\nconsole.log(factorize(361)); // [19, 19]\nconsole.log(factorize(961)); // [31, 31]\nconsole.log(factorize(1369)); // [37, 37]\nconsole.log(factorize(1849)); // [43, 43]\nconsole.log(factorize(2209)); // [47, 47]\nconsole.log(factorize(22801)); // [139, 139]\nconsole.log(factorize(32491)); // [181, 181]\nconsole.log(factorize(40961)); // [229, 229]\nconsole.log(factorize(50751)); // [271, 271]\nconsole.log(factorize(65281)); // [281, 281]\nconsole.log(factorize(83521)); // [331, 331]\nconsole.log(factorize(103823)); // [383, 383]\nconsole.log(factorize(130561)); // [421, 421]\nconsole.log(factorize(166375)); // [475, 475]\nconsole.log(factorize(206651)); // [527, 527]\nconsole.log(factorize(262657)); // [599, 599]\nconsole.log(factorize(332929)); // [677, 677]\nconsole.",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(17));\nconsole.log(factorize(18));\nconsole.log(factorize(11));\nconsole.log(factorize(121));\nconsole.log(factorize(125));\nconsole.log(factorize(128));\nconsole.log(factorize(144));\nconsole.log(factorize(1000));\nconsole.log(factorize(1001));\nconsole.log(factorize(1002));\nconsole.log(factorize(1003));\nconsole.log(factorize(1004));\nconsole.log(factorize(1005));\nconsole.log(factorize(1006));\nconsole.log(factorize(1007));\nconsole.log(factorize(1008));\nconsole.log(factorize(1009));\nconsole.log(factorize(1010));\nconsole.log(factorize(1011));\nconsole.log(factorize(1012));\nconsole.log(factorize(1013));\nconsole.log(factorize(1014));\nconsole.log(factorize(1015));\nconsole.log(factorize(1016));\nconsole.log(factorize(1017));\nconsole.log(factorize(1018));\nconsole.log(factorize(1019));\nconsole.log(factorize(1020));\nconsole.log(factorize(1021));\nconsole.log(factorize(1022));\nconsole.log(factorize(1023));\nconsole.log(factorize(1024));\nconsole.log(factorize(1025));\nconsole.log(factorize(1026));\nconsole.log(factorize(1027));\nconsole.log(factorize(1028));\nconsole.",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(37));\nconsole.log(factorize(81));\nconsole.log(factorize(1001));",
    "    const factors = [];\n    let factor = 2;\n    while (n > 1) {\n        while (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let result = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            result.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let prime: number = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n            result.push(prime);\n            n /= prime;\n        }\n        prime++;\n    }\n    return result;\n}\n",
    "  let factors: number[] = [];\n  let divisor: number = 2;\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n    divisor++;\n  }\n  return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(15)); // [3, 5]\nconsole.log(factorize(28)); // [2, 2, 7]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(1)); // []\nconsole.log(factorize(0)); // []\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(15)); // [3, 5]\nconsole.log(factorize(28)); // [2, 2, 7]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(1)); // []\nconsole.log(factorize(0)); // []",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(49)); // [7, 7]\nconsole.log(factorize(77)); // [7, 11]\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let currentPrime = 2;\n    while (n > 1) {\n        if (n % currentPrime === 0) {\n            factors.push(currentPrime);\n            n /= currentPrime;\n        } else {\n            currentPrime++;\n        }\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let prime = 2;\n    while (n > 1) {\n        while (n % prime === 0) {\n            result.push(prime);\n            n /= prime;\n        }\n        prime++;\n    }\n    return result;\n}\n",
    "    const factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(17));\nconsole.log(factorize(40));\nconsole.log(factorize(27));\nconsole.log(factorize(16));\nconsole.log(factorize(81));\nconsole.log(factorize(100));\nconsole.log(factorize(625));\nconsole.log(factorize(1024));\nconsole.log(factorize(3125));\nconsole.log(factorize(7775));\nconsole.log(factorize(8192));\nconsole.log(factorize(16384));\nconsole.log(factorize(32768));\nconsole.log(factorize(65536));\nconsole.log(factorize(131072));\nconsole.log(factorize(262144));\nconsole.log(factorize(524288));\nconsole.log(factorize(1048576));\nconsole.log(factorize(2097152));\nconsole.log(factorize(4194304));\nconsole.log(factorize(8388608));\nconsole.log(factorize(16777216));\nconsole.log(factorize(33554432));\nconsole.log(factorize(67108864));\nconsole.log(factorize(134217728));\nconsole.log(factorize(268435456));\nconsole.log(factorize(536870912));\nconsole.log(factorize(1073741824));\nconsole.log(factorize(2147483648));\nconsole.log(factorize(4294967296));\nconsole.log(factorize(8589934592));\nconsole.log(factorize(17179869184));\nconsole.log(factorize(34359738368));\nconsole.log(factorize(68719476736",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(37));\nconsole.log(factorize(81));\nconsole.log(factorize(1001));\nconsole.log(factorize(9699690));",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(10)); // [2, 5]\nconsole.log(factorize(60)); // [2, 2, 3, 5]\nconsole.log(factorize(100)); // [2, 2, 5, 5]\nconsole.log(factorize(1)); // []\nconsole.log(factorize(0)); // []\nconsole.log(factorize(2)); // [2]\nconsole.log(factorize(3)); // [3]\nconsole.log(factorize(4)); // [2, 2]\nconsole.log(factorize(5)); // [5]\nconsole.log(factorize(6)); // [2, 3]\nconsole.log(factorize(7)); // [7]\nconsole.log(factorize(8)); // [2, 2, 2]\nconsole.log(factorize(9)); // [3, 3]\nconsole.log(factorize(10)); // [2, 5]\nconsole.log(factorize(11)); // [11]\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(13)); // [13]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(15)); // [3, 5]\nconsole.log(factorize(16)); // [2, 2, 2, 2]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(18)); // [2, 3, 3]\nconsole.log(factorize(19)); // [19]\nconsole.log(factorize(20)); // [2, 2, 5]\nconsole.log(factorize(21)); // [3, 7]\nconsole.log(factorize(22)); // [2, 11]\nconsole.log(factor",
    "    let factors: number[] = [];\n    let factor: number = 2;\n    while (n > 1) {\n        while (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(17));\nconsole.log(factorize(20));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(30));\nconsole.log(factorize(32));\nconsole.log(factorize(35));\nconsole.log(factorize(36));\nconsole.log(factorize(40));\nconsole.log(factorize(42));\nconsole.log(factorize(45));\nconsole.log(factorize(48));\nconsole.log(factorize(49));\nconsole.log(factorize(50));\nconsole.log(factorize(54));\nconsole.log(factorize(55));\nconsole.log(factorize(56));\nconsole.log(factorize(60));\nconsole.log(factorize(63));\nconsole.log(factorize(64));\nconsole.log(factorize(70));\nconsole.log(factorize(72));\nconsole.log(factorize(75));\nconsole.log(factorize(77));\nconsole.log(factorize(80));\nconsole.log(factorize(81));\nconsole.log(factorize(84));\nconsole.log(factorize(85));\nconsole.log(factorize(90));\nconsole.log(factorize(96));\nconsole.log(factorize(98));\nconsole.log(factorize(99));\nconsole.log(factorize(100));\nconsole.log(factorize(105));\nconsole.log(factorize(108));\nconsole.log(factorize(110));\nconsole.log(factorize(112));\nconsole.log(factorize(117));\nconsole.log(factorize(120));\nconsole.log(factorize(121));\nconsole.log(factorize(125));\nconsole.log(factor",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(13));\nconsole.log(factorize(14));\nconsole.log(factorize(15));\nconsole.log(factorize(16));\nconsole.log(factorize(17));\nconsole.log(factorize(18));\nconsole.log(factorize(19));\nconsole.log(factorize(20));\nconsole.log(factorize(21));\nconsole.log(factorize(22));\nconsole.log(factorize(23));\nconsole.log(factorize(24));\nconsole.log(factorize(25));\nconsole.log(factorize(26));\nconsole.log(factorize(27));\nconsole.log(factorize(28));\nconsole.log(factorize(29));\nconsole.log(factorize(30));\nconsole.log(factorize(31));\nconsole.log(factorize(32));\nconsole.log(factorize(33));\nconsole.log(factorize(34));\nconsole.log(factorize(35));\nconsole.log(factorize(36));\nconsole.log(factorize(37));\nconsole.log(factorize(38));\nconsole.log(factorize(39));\nconsole.log(factorize(40));\nconsole.log(factorize(41));\nconsole.log(factorize(42));\nconsole.log(factorize(43));\nconsole.log(factorize(44));\nconsole.log(factorize(45));\nconsole.log(factorize(46));\nconsole.log(factorize(47));\nconsole.log(factorize(48));\nconsole.log(factorize(49));\nconsole.log(factorize(50));\nconsole.log(factorize(51));\nconsole.log(factorize(52));\nconsole.log(factorize(53));\nconsole.log(factorize(54));\nconsole.log(factorize(55));\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "  let factors: number[] = [];\n  let divisor: number = 2;\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n    divisor++;\n  }\n  return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(49)); // [7, 7]\nconsole.log(factorize(77)); // [7, 11]\nconsole.log(factorize(121)); // [11, 11]\nconsole.log(factorize(169)); // [13, 13]\nconsole.log(factorize(361)); // [19, 19]\nconsole.log(factorize(961)); // [31, 31]\nconsole.log(factorize(1369)); // [37, 37]\nconsole.log(factorize(1849)); // [43, 43]\nconsole.log(factorize(1951)); // [43, 43]\nconsole.log(factorize(2251)); // [47, 47]\nconsole.log(factorize(2351)); // [47, 47]\nconsole.log(factorize(2401)); // [49, 49]\nconsole.log(factorize(2521)); // [51, 51]\nconsole.log(factorize(2701)); // [53, 53]\nconsole.log(factorize(2801)); // [59, 59]\nconsole.log(factorize(3001)); // [61, 61]\nconsole.log(factorize(3121)); // [61, 61]\nconsole.log(factorize(3221)); // [67, 67]\nconsole.log(factorize(3361)); // [71, 71]\nconsole.log(factorize(3461)); // [71, 71]\nconsole.log(factorize(3541)); // [73, 73]\nconsole.log(factorize(36",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(17));\nconsole.log(factorize(37));\nconsole.log(factorize(18));\nconsole.log(factorize(22));\nconsole.log(factorize(23));",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(10));\nconsole.log(factorize(14));\nconsole.log(factorize(356));\nconsole.log(factorize(89));\nconsole.log(factorize(1000));",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(17));\nconsole.log(factorize(40));\nconsole.log(factorize(42));\nconsole.log(factorize(89));\nconsole.log(factorize(144));\nconsole.log(factorize(360));\nconsole.log(factorize(1000));\nconsole.log(factorize(1001));\nconsole.log(factorize(1002));\nconsole.log(factorize(1003));\nconsole.log(factorize(1004));\nconsole.log(factorize(1005));\nconsole.log(factorize(1006));\nconsole.log(factorize(1007));\nconsole.log(factorize(1008));\nconsole.log(factorize(1009));\nconsole.log(factorize(1010));\nconsole.log(factorize(1011));\nconsole.log(factorize(1012));\nconsole.log(factorize(1013));\nconsole.log(factorize(1014));\nconsole.log(factorize(1015));\nconsole.log(factorize(1016));\nconsole.log(factorize(1017));\nconsole.log(factorize(1018));\nconsole.log(factorize(1019));\nconsole.log(factorize(1020));\nconsole.log(factorize(1021));\nconsole.log(factorize(1022));\nconsole.log(factorize(1023));\nconsole.log(factorize(1024));\nconsole.log(factorize(1025));\nconsole.log(factorize(1026));\nconsole.log(factorize(1027));\nconsole.log(factorize(1028));\nconsole.log(factorize(1029));\nconsole.log(factorize(1030));\nconsole.log(factor",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(17));\nconsole.log(factorize(24));\nconsole.log(factorize(25));",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(11)); // [11]\nconsole.log(factorize(13)); // [13]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(100)); // [2, 2, 5, 5]\nconsole.log(factorize(1)); // []\nconsole.log(factorize(0)); // []",
    "  let factors: number[] = [];\n  let divisor: number = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      n = n / divisor;\n    } else {\n      divisor++;\n    }\n  }\n  return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(7)); // [7]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(100)); // [2, 2, 5, 5]\nconsole.log(factorize(1)); // []\nconsole.log(factorize(0)); // []\nconsole.log(factorize(1234)); // [2, 617]\nconsole.log(factorize(123456789)); // [3, 3, 3607, 3803]\nconsole.log(factorize(1234567890)); // [2, 3, 3, 5, 3607, 3803]",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(14));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(37));\nconsole.log(factorize(40));\nconsole.log(factorize(42));\nconsole.log(factorize(81));\nconsole.log(factorize(100));\nconsole.log(factorize(1000));\nconsole.log(factorize(10000));\nconsole.log(factorize(100000));\nconsole.log(factorize(1000000));\nconsole.log(factorize(10000000));\nconsole.log(factorize(100000000));\nconsole.log(factorize(1000000000));\nconsole.log(factorize(10000000000));\nconsole.log(factorize(100000000000));\nconsole.log(factorize(1000000000000));\nconsole.log(factorize(10000000000000));\nconsole.log(factorize(100000000000000));\nconsole.log(factorize(1000000000000000));\nconsole.log(factorize(10000000000000000));\nconsole.log(factorize(100000000000000000));\nconsole.log(factorize(1000000000000000000));\nconsole.log(factorize(10000000000000000000));\nconsole.log(factorize(100000000000000000000));\nconsole.log(factorize(1000000000000000000000));\nconsole.log(factorize(10000000000000000000000));\nconsole.log(factorize(100000000000000000000000));\nconsole.log(factorize(1000000000000000000000000));\nconsole.log(factorize(10000000000000000000000000));\nconsole.log(factorize(100000000000000000000000000));\nconsole.log(factorize(1000000000000000000000000000));\nconsole.log(factorize(10000000000000000000000000000));\nconsole.log(factorize(100000000000000000000000000000));\nconsole.log(factorize(1000000000000000000000000000000));\nconsole.log(factorize",
    "    let result: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        if (n % divisor === 0) {\n            result.push(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(18)); // [2, 3, 3]\nconsole.log(factorize(24)); // [2, 2, 2, 3]\nconsole.log(factorize(17280)); // [2, 2, 2, 2, 2, 3, 3, 5, 7]",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(25));\nconsole.log(factorize(27));\nconsole.log(factorize(37));\nconsole.log(factorize(40));\nconsole.log(factorize(81));\nconsole.log(factorize(100));",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let currentFactor = 2;\n    while (n > 1) {\n        if (n % currentFactor === 0) {\n            factors.push(currentFactor);\n            n /= currentFactor;\n        } else {\n            currentFactor++;\n        }\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(1)); // []\nconsole.log(factorize(0)); // []\nconsole.log(factorize(24)); // [2, 2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(27)); // [3, 3, 3]\nconsole.log(factorize(121)); // [11, 11]\nconsole.log(factorize(625)); // [5, 5, 5, 5]\nconsole.log(factorize(7775460)); // [2, 2, 3, 3, 5, 7, 11, 13, 17, 19]\nconsole.log(factorize(7919)); // [7919]\nconsole.log(factorize(18195729)); // [17, 107, 157]\nconsole.log(factorize(11)); // [11]\nconsole.log(factorize(13)); // [13]\nconsole.log(factorize(15)); // [3, 5]\nconsole.log(factorize(16)); // [2, 2, 2, 2]\nconsole.log(factorize(17)); // [17]\nconsole.log(factorize(18)); // [2, 3, 3]\nconsole.log(factorize(19)); // [19]\nconsole.log(factorize(20)); // [2, 2, 5]\nconsole.log(factorize(21)); // [3, 7]\nconsole.log(factorize(22)); // [2, 11]\nconsole.log(factorize(23)); // [23]\nconsole.log(factorize(24)); // [2, 2, 2, 3]\nconsole.log(factorize(25",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(25));\nconsole.log(factorize(36));\nconsole.log(factorize(49));\nconsole.log(factorize(77));\nconsole.log(factorize(121));\nconsole.log(factorize(169));\nconsole.log(factorize(289));\nconsole.log(factorize(361));\nconsole.log(factorize(529));\nconsole.log(factorize(841));\nconsole.log(factorize(961));\nconsole.log(factorize(1369));\nconsole.log(factorize(1681));\nconsole.log(factorize(1849));\nconsole.log(factorize(2209));\nconsole.log(factorize(2809));\nconsole.log(factorize(3481));\nconsole.log(factorize(3721));\nconsole.log(factorize(4489));\nconsole.log(factorize(5041));\nconsole.log(factorize(5329));\nconsole.log(factorize(6241));\nconsole.log(factorize(6889));\nconsole.log(factorize(7921));\nconsole.log(factorize(9409));\nconsole.log(factorize(10201));\nconsole.log(factorize(10609));\nconsole.log(factorize(11449));\nconsole.log(factorize(11881));\nconsole.log(factorize(12769));\nconsole.log(factorize(16129));\nconsole.log(factorize(17161));\nconsole.log(factorize(18769));\nconsole.log(factorize(19321));\nconsole.log(factorize(22201));\nconsole.log(factorize(22801));\nconsole.log(factorize(24649));\nconsole.log(factorize(26569));\nconsole.log(factorize(27889));\nconsole.log(factorize(29929",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "  let result: number[] = [];\n  let i: number = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      result.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(14)); // [2, 7]\nconsole.log(factorize(25)); // [5, 5]\nconsole.log(factorize(36)); // [2, 2, 3, 3]\nconsole.log(factorize(49)); // [7, 7]\nconsole.log(factorize(77)); // [7, 11]\nconsole.log(factorize(121)); // [11, 11]\nconsole.log(factorize(169)); // [13, 13]\nconsole.log(factorize(625)); // [5, 5, 5, 5]\nconsole.log(factorize(1024)); // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nconsole.log(factorize(1290)); // [2, 5, 7, 7]\nconsole.log(factorize(7919)); // [7919]\nconsole.log(factorize(7920)); // [2, 2, 2, 2, 3, 5, 7, 7]\nconsole.log(factorize(7921)); // [7921]\nconsole.log(factorize(7922)); // [2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "  let factors: number[] = [];\n  let divisor: number = 2;\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n    divisor++;\n  }\n  return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    const factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\nconsole.log(factorize(12)); // [2, 2, 3]\nconsole.log(factorize(4)); // [2, 2]\nconsole.log(factorize(5)); // [5]\nconsole.log(factorize(1)); // []\nconsole.log(factorize(0)); // []\nconsole.log(factorize(24)); // [2, 2, 2, 3]\nconsole.log(factorize(100)); // [2, 2, 5, 5]\nconsole.log(factorize(101)); // [101]\nconsole.log(factorize(102)); // [2, 3, 17]\nconsole.log(factorize(103)); // [103]\nconsole.log(factorize(104)); // [2, 2, 2, 13]\nconsole.log(factorize(105)); // [3, 5, 7]\nconsole.log(factorize(106)); // [2, 53]\nconsole.log(factorize(107)); // [107]\nconsole.log(factorize(108)); // [2, 2, 3, 3, 3]\nconsole.log(factorize(109)); // [109]\nconsole.log(factorize(110)); // [2, 5, 11]\nconsole.log(factorize(111)); // [3, 37]\nconsole.log(factorize(112)); // [2, 2, 2, 2, 7]\nconsole.log(factorize(113)); // [113]\nconsole.log(factorize(114)); // [2, 3, 19]\nconsole.log(factorize(115)); // [5, 23]\nconsole.log(factorize(116)); // [2, 2, 29]\nconsole.log(factorize(117)); // [3, 39]\nconsole.log(factorize(118)); // [2, 59]\nconsole.log(factorize(119)); // [7, 17]\nconsole.log",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n",
    "    let factors: number[] = [];\n    let currentFactor = 2;\n    while (n > 1) {\n        if (n % currentFactor === 0) {\n            factors.push(currentFactor);\n            n /= currentFactor;\n        } else {\n            currentFactor++;\n        }\n    }\n    return factors;\n}\n\nconsole.log(factorize(12));\nconsole.log(factorize(15));\nconsole.log(factorize(24));\nconsole.log(factorize(25));\nconsole.log(factorize(60));\nconsole.log(factorize(77));\nconsole.log(factorize(100));\nconsole.log(factorize(121));\nconsole.log(factorize(125));\nconsole.log(factorize(144));\nconsole.log(factorize(169));\nconsole.log(factorize(196));\nconsole.log(factorize(225));\nconsole.log(factorize(256));\nconsole.log(factorize(289));\nconsole.log(factorize(324));\nconsole.log(factorize(361));\nconsole.log(factorize(400));\nconsole.log(factorize(441));\nconsole.log(factorize(484));\nconsole.log(factorize(529));\nconsole.log(factorize(576));\nconsole.log(factorize(625));\nconsole.log(factorize(676));\nconsole.log(factorize(729));\nconsole.log(factorize(784));\nconsole.log(factorize(841));\nconsole.log(factorize(900));\nconsole.log(factorize(961));\nconsole.log(factorize(1024));\nconsole.log(factorize(1089));\nconsole.log(factorize(1156));\nconsole.log(factorize(1225));\nconsole.log(factorize(1296));\nconsole.log(factorize(1369));\nconsole.log(factorize(1444));\nconsole.log(factorize(1521));\nconsole.log(factorize(1600));\nconsole.log(factorize(1681));\nconsole.log(factorize(1764));\nconsole.log(factorize(1849));\nconsole.log(factorize(1936));",
    "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n"
  ],
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ]
}