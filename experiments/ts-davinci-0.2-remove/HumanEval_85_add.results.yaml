language: ts
name: HumanEval_85_add
results:
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 3, 5, 7, 9]));\nconsole.log(add([2,\
    \ 4, 6, 8, 10]));\nconsole.log(add([]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    0

    12

    0

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 3, 5, 7, 9]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 3, 5, 7, 9, 11, 13, 15, 17, 19]));\nconsole.log(add([]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    0

    110

    0

    0

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4esryjfd.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n     \
    \   if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    240

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    240

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4esryjfd.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4esryjfd.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 3, 5, 7, 9]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    0

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n     \
    \   if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\n\
    console.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    240

    420

    650

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4esryjfd.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    240

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 3, 5, 7, 9]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx8s1dhsn.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4esryjfd.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9bdqfte.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n     \
    \   if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    240

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 3, 5, 7, 9]));\nconsole.log(add([2,\
    \ 4, 6, 8, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    0

    12

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 30\nconsole.log(add([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11])); // 30\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12])); // 42\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\
    \ // 42\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ 56\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); //\
    \ 56\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\
    \ // 72\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])); // 72\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18])); // 90\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19])); // 90\nconsole.log(add([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // 110\nconsole\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    30

    42

    42

    56

    56

    72

    72

    90

    90

    110

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 != 0\
    \ && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg_s6v5ts.ts(19,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpg_s6v5ts.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 30\nconsole.log(add([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11])); // 30\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12])); // 42\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\
    \ // 42\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ 56\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); //\
    \ 56\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\
    \ // 72\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])); // 72\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18])); // 90\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19])); // 90\nconsole.log(add([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // 110\nconsole\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    30

    42

    42

    56

    56

    72

    72

    90

    90

    110

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\
    \ // 12\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // 12\n\
    console.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // 18\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // 18\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // 24\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // 24\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // 30\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // 30\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // 36\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    30

    42

    42

    56

    56

    72

    72

    90

    90

    110

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 != 0\
    \ && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '20

    30

    30

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    240

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    240

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\
    \ // 18\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // 18\n\
    console.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // 30\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // 30\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // 42\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // 42\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // 54\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // 54\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // 66\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    30

    42

    42

    56

    56

    72

    72

    90

    90

    110

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 != 0\
    \ && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    240

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5qjt67wg.ts(19,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5qjt67wg.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi8tkrg7y.ts(18,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpi8tkrg7y.ts(18,9): error TS1005: '','' expected.

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  return\
    \ lst.reduce((acc, curr, i) => {\n    if (i % 2 !== 0 && curr % 2 === 0) {\n \
    \     return acc + curr;\n    }\n    return acc;\n  }, 0);\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 6\n\
    console.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 6\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // 18\nconsole.log(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13])); // 18\nconsole.log(add([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14])); // 30\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15])); // 30\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16])); // 42\nconsole.log(add([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // 42\nconsole.log(add([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // 54\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // 54\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // 66\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    30

    42

    42

    56

    56

    72

    72

    90

    90

    110

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n     \
    \   if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20])); // 70\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30])); // 210\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40])); // 400\nconsole.log(add([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50])); // 650\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgo5518lj.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015330
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 1\
    \ && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9459beuo.ts(19,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9459beuo.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015330
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9bdqfte.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 3, 5, 7, 9]));\nconsole.log(add([2,\
    \ 4, 6, 8, 10]));\nconsole.log(add([]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    0

    12

    0

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 30\nconsole.log(add([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11])); // 30\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12])); // 42\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\
    \ // 42\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); //\
    \ 56\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); //\
    \ 56\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\
    \ // 72\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])); // 72\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18])); // 90\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19])); // 90\nconsole.log(add([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // 110\nconsole\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    30

    42

    42

    56

    56

    72

    72

    90

    90

    110

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 2
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(add([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4esryjfd.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  return\
    \ lst.reduce((acc, curr, index) => {\n    if (index % 2 === 1 && curr % 2 ===\
    \ 0) {\n      return acc + curr;\n    }\n    return acc;\n  }, 0);\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    30

    110

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 3, 5, 7, 9]));\nconsole.log(add([2, 4, 6, 8, 10]));\nconsole.log(add([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    0

    12

    0

    '
  timestamp: 1660015330
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015327
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015329
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\nfunction add(lst: number[]): number {\n    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    110

    '
  timestamp: 1660015330
