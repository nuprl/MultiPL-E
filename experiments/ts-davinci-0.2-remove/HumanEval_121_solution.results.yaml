language: ts
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([0,\
    \ 2, 4, 6, 8, 10, 12, 14, 16]));\nconsole.log(solution([1, 3, 5, 7, 9, 11, 13,\
    \ 15, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    45

    100

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(solution([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9])); // 25\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10])); // 30\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); //\
    \ 30\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // 35\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // 35\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // 40\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // 40\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // 45\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // 45\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // 50\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // 50\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp73t7j6g3.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    25

    100

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpyyu189ru.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyyu189ru.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '20

    30

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(solution([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(solution([1, 3, 5, 7, 9, 11,\
    \ 13, 15, 17, 19]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    45

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 !== 0).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp7bofcsbs.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7bofcsbs.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '30

    30

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpy76brtvt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy76brtvt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18]));\nconsole.log(solution([1, 3, 5, 7, 9, 11, 13,\
    \ 15, 17]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    45

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 !== 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(solution([1,\
    \ 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp40_1q79d.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp9upe2iuv.js:10:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9upe2iuv.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '30

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    100

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([5, 2, 3, 4, 6, 7, 8, 9, 10]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '8

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 9, 2, 4, 7]));\nconsole.log(solution([3,\
    \ 2, 1, 4, 5]));\nconsole.log(solution([3, 2, 1, 4, 5, 6, 7, 8, 9, 10]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    25

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpyyu189ru.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyyu189ru.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '20

    30

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([2,\
    \ 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    16

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n      result += lst[i];\n    }\n  }\n \
    \ return result;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpxqqnf3mt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqqnf3mt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((x, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpz2pf9c8p.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz2pf9c8p.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '30

    30

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1, 3, 5, 7, 9]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    15

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7hjbaday.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 3, 5, 7, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    15

    100

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(solution([1, 3, 5, 7, 9, 11,\
    \ 13, 15, 17, 19]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpgpa4c8hx.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgpa4c8hx.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    55

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]));\nconsole.log(solution([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    36

    0

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(solution([1, 3, 5, 7, 9, 11,\
    \ 13, 15, 17, 19]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    45

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 === 1) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6]));\nconsole.log(solution([1, 2, 3, 4,\
    \ 5, 6, 7]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2nkyc0mo.ts(27,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp2nkyc0mo.ts(27,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(solution([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(solution([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpma_e7ac8.ts(25,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpma_e7ac8.ts(25,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    36

    '
  timestamp: 1660014228
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((x, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpz2pf9c8p.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz2pf9c8p.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '30

    30

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpxqqnf3mt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqqnf3mt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n      result += lst[i];\n    }\n  }\n \
    \ return result;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(solution([1,\
    \ 3, 5, 7, 9, 11, 13, 15, 17, 19]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    45

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]));\n\
    console.log(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    45

    '
  timestamp: 1660014228
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((v, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9])); // 25\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5])); // 9\nconsole.log(solution([1, 3, 5, 7, 9])); // 25\nconsole.log(solution([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5, 5])); // 9\nconsole.log(solution([2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2])); // 0\nconsole.log(solution([1, 2, 1, 2, 1, 2, 1, 2, 1, 2]));\
    \ // 5\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 36\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // 36\nconsole.log(solution([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // 49\nconsole.log(solution([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // 49\nconsole.log(solution([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // 64\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // 64\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // 81\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpblo8regf.ts(21,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpblo8regf.ts(21,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(solution([1,\
    \ 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpftevsek4.ts(20,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpftevsek4.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([5, 2, 3, 2, 4, 6]));\
    \ // 5\nconsole.log(solution([1, 2, 3, 4, 5, 6])); // 9\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 25\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // 110\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '8

    9

    25

    100

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpgikg_drp.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgikg_drp.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '30

    25

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpaqfyra4s.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqfyra4s.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '30

    30

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpxqqnf3mt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqqnf3mt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpxqqnf3mt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqqnf3mt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 !== 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(solution([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 3, 5, 7, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp5fo8pjmz.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5fo8pjmz.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    25

    10

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5, 4, 2, 7, 8, 9,\
    \ 3, 1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '8

    '
  timestamp: 1660014228
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(solution([1,\
    \ 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzv3ad8ey.ts(20,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzv3ad8ey.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpxqqnf3mt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqqnf3mt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 3, 5, 7, 9]));\n\
    console.log(solution([2, 4, 6, 8, 10]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    15

    0

    100

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    return lst.filter((num, index) => index % 2 !== 0).reduce((a,\
    \ b) => a + b);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\
    \ // 25\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 36\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // 49\nconsole.log(solution([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // 61\nconsole.log(solution([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // 74\nconsole.log(solution([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // 88\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // 103\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // 119\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // 136\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // 154\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20])); // 173\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq7e4kd5s.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(solution([1, 3, 5, 7, 9, 11,\
    \ 13, 15, 17, 19]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    45

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 25\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 36\nconsole.log(solution([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12])); // 49\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13])); // 61\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14])); // 74\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15])); // 88\nconsole.log(solution([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // 103\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // 119\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // 136\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // 154\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20])); // 173\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppjlritwk.ts(19,1): error TS1005: '','' expected.

    ../../../../../tmp/tmppjlritwk.ts(19,9): error TS1005: '','' expected.

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 !== 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmprykeyp9w.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprykeyp9w.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014230
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(solution([1, 3, 5, 7, 9, 11,\
    \ 13, 15, 17, 19]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpgpa4c8hx.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgpa4c8hx.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    55

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((x, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpddh1udnp.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpddh1udnp.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '20

    30

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n      oddSum += lst[i];\n    }\n  }\n \
    \ return oddSum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014230
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv5typkza.ts(25,9): error TS1005: '','' expected.

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([5, 2, 3, 4, 5]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5]));\nconsole.log(solution([1, 2, 3, 4, 5, 6]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '13

    9

    9

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([5, 2, 3, 4, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '8

    25

    36

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '21

    9

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    0

    '
  timestamp: 1660014231
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    '
  timestamp: 1660014231
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    '
  timestamp: 1660014231
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(solution([1,\
    \ 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpftevsek4.ts(20,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpftevsek4.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 !== 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpc5lulw0n.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc5lulw0n.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014231
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) => a + b,\
    \ 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpaqfyra4s.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqfyra4s.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '30

    30

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpxqqnf3mt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqqnf3mt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 3, 5, 7, 9]));\n\
    console.log(solution([2, 4, 6, 8, 10]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    0

    15

    0

    100

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(solution([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(solution([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpma_e7ac8.ts(25,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpma_e7ac8.ts(25,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    0

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014230
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpxqqnf3mt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqqnf3mt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 !== 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp7bd84ynu.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7bd84ynu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014231
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(solution([1,\
    \ 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpftevsek4.ts(20,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpftevsek4.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp65vt8sls.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp65vt8sls.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    25

    0

    0

    0

    0

    0

    0

    0

    0

    0

    0

    '
  timestamp: 1660014231
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    0

    '
  timestamp: 1660014230
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(solution([1,\
    \ 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzv3ad8ey.ts(20,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzv3ad8ey.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 !== 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp7bd84ynu.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7bd84ynu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014231
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18]));\nconsole.log(solution([1, 3, 5, 7, 9, 11, 13,\
    \ 15, 17]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmprp7mru8e.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprp7mru8e.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    36

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 4, 2, 7, 8, 9, 3]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '8

    25

    100

    '
  timestamp: 1660014230
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(solution([1,\
    \ 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpftevsek4.ts(20,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpftevsek4.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsye4wtzw.ts(26,9): error TS1005: '','' expected.

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(solution([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]));\nconsole.log(solution([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    0

    '
  timestamp: 1660014231
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpxqqnf3mt.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqqnf3mt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    0

    '
  timestamp: 1660014228
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(solution([1,\
    \ 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzv3ad8ey.ts(20,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzv3ad8ey.ts(20,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    25

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '25

    36

    36

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\nfunction solution(lst: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(solution([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(solution([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(solution([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpma_e7ac8.ts(25,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpma_e7ac8.ts(25,9): error TS1005: '','' expected.

    '
  timestamp: 1660014228
