language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let group of paren_groups) {\n        let level = 0;\n     \
    \   let max_level = 0;\n        for (let char of group) {\n            if (char\
    \ === '(') {\n                level++;\n            } else if (char === ')') {\n\
    \                level--;\n            }\n            if (level > max_level) {\n\
    \                max_level = level;\n            }\n        }\n        max_levels.push(max_level);\n\
    \    }\n    return max_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp91l14xur.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_depth:\
    \ number = 0;\n        let depth: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                depth++;\n\
    \            } else if (paren_group[j] === \")\") {\n                depth--;\n\
    \            }\n            if (depth > max_depth) {\n                max_depth\
    \ = depth;\n            }\n        }\n        result.push(max_depth);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const paren_counts\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let paren_count = 0;\n    let max_paren_count = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      const paren = paren_group[j];\n\
    \      if (paren === \"(\") {\n        paren_count++;\n      } else if (paren\
    \ === \")\") {\n        paren_count--;\n      }\n      if (paren_count > max_paren_count)\
    \ {\n        max_paren_count = paren_count;\n      }\n    }\n    paren_counts.push(max_paren_count);\n\
    \  }\n  return paren_counts;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(\" \");\n    const result:\
    \ number[] = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const char of paren_group)\
    \ {\n            if (char === \"(\") {\n                current_nesting++;\n \
    \           } else if (char === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph4ec_j8h.ts(10,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const result:\
    \ number[] = [];\n    for (const group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const char of group) {\n\
    \            if (char === '(') {\n                current_depth++;\n         \
    \       max_depth = Math.max(max_depth, current_depth);\n            } else if\
    \ (char === ')') {\n                current_depth--;\n            }\n        }\n\
    \        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc_ehfijo.ts(10,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014224
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let nesting = 0;\n        let max_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting++;\n            } else if\
    \ (paren_group[j] === ')') {\n                nesting--;\n            }\n    \
    \        if (nesting > max_nesting_level) {\n                max_nesting_level\
    \ = nesting;\n            }\n        }\n        max_nesting.push(max_nesting_level);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_level:\
    \ number = 0;\n        let level: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                level++;\n\
    \                if (level > max_level) {\n                    max_level = level;\n\
    \                }\n            } else if (paren_group[j] === \")\") {\n     \
    \           level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_stack: number[] = [];\n    let paren_levels: number[]\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            paren_stack.push(i);\n        } else if (paren_string[i]\
    \ === ')') {\n            let paren_index = paren_stack.pop();\n            if\
    \ (paren_stack.length === 0) {\n                paren_levels.push(i - paren_index\
    \ + 1);\n            }\n        }\n    }\n    return paren_levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  6,\n\
    \  2,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n \
    \   at test (/tmp/tmp7yn03irn.js:23:12)\n    at Object.<anonymous> (/tmp/tmp7yn03irn.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 6, 2,\
    \ 10 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_depth = 0;\n  \
    \  let depth = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if\
    \ (paren_group[i] === \"(\") {\n        depth++;\n      } else if (paren_group[i]\
    \ === \")\") {\n        depth--;\n      }\n      max_depth = Math.max(max_depth,\
    \ depth);\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_level = 0;\n    let current_level = 0;\n   \
    \ for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] ===\
    \ \"(\") {\n        current_level++;\n        if (current_level > max_level) {\n\
    \          max_level = current_level;\n        }\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let paren_stack: string[] = [];\n        let max_depth: number = 0;\n \
    \       for (let paren of paren_group) {\n            if (paren === \"(\") {\n\
    \                paren_stack.push(paren);\n                max_depth = Math.max(max_depth,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpisz2sb6d.ts(10,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_depth:\
    \ number = 0;\n        let current_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (paren_group[j] === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            let paren: string = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let nesting_level\
    \ = 0;\n        let max_nesting_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                nesting_level++;\n\
    \            } else if (paren_group[i] === ')') {\n                nesting_level--;\n\
    \            }\n            if (nesting_level > max_nesting_level) {\n       \
    \         max_nesting_level = nesting_level;\n            }\n        }\n     \
    \   max_nesting_levels.push(max_nesting_level);\n    }\n    return max_nesting_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let parens_arr = paren_string.split(\" \");\n  let max_levels\
    \ = [];\n  for (let i = 0; i < parens_arr.length; i++) {\n    let parens = parens_arr[i];\n\
    \    let level = 0;\n    let max_level = 0;\n    for (let j = 0; j < parens.length;\
    \ j++) {\n      if (parens[j] === \"(\") {\n        level++;\n        if (level\
    \ > max_level) {\n          max_level = level;\n        }\n      } else if (parens[j]\
    \ === \")\") {\n        level--;\n      }\n    }\n    max_levels.push(max_level);\n\
    \  }\n  return max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren_group[i] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const paren_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let level = 0;\n    let max_level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      const paren = paren_group[j];\n\
    \      if (paren === \"(\") {\n        level++;\n      } else if (paren === \"\
    )\") {\n        level--;\n      }\n      if (level > max_level) {\n        max_level\
    \ = level;\n      }\n    }\n    paren_levels.push(max_level);\n  }\n  return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let parens_array = paren_string.split(' ');\n    let result:\
    \ number[] = [];\n    for (let parens of parens_array) {\n        result.push(parse_parens(parens));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpevnc3d3u.ts(8,21): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_level:\
    \ number = 0;\n        let current_level: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\") {\n\
    \                current_level++;\n                if (current_level > max_level)\
    \ {\n                    max_level = current_level;\n                }\n     \
    \       } else if (paren_group[j] === \")\") {\n                current_level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_depth = 0;\n        let depth = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                depth++;\n            } else if (paren_group[j]\
    \ === ')') {\n                depth--;\n            }\n            if (depth >\
    \ max_depth) {\n                max_depth = depth;\n            }\n        }\n\
    \        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting_level = 0;\n    let current_nesting_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting_level++;\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let current_depth: number = 0;\n  \
    \      for (let char of paren_group) {\n            if (char === \"(\") {\n  \
    \              current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (char === \")\") {\n                current_depth--;\n     \
    \       }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsx4q_769.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const result:\
    \ number[] = [];\n    for (const paren_group of paren_groups) {\n        result.push(parse_nested_parens_helper(paren_group));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptg8q8f7k.ts(8,21): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const\
    \ paren_group = paren_groups[i];\n    let max_nesting = 0;\n    let current_nesting\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren_group[j] === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels:\
    \ number[] = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n      \
    \  let paren_group = paren_groups[i];\n        let max_level = 0;\n        let\
    \ level = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n       \
    \     if (paren_group[j] === '(') {\n                level++;\n            } else\
    \ if (paren_group[j] === ')') {\n                level--;\n            }\n   \
    \         if (level > max_level) {\n                max_level = level;\n     \
    \       }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n            if (paren_groups[i][j] === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren_groups[i][j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_depth = 0;\n    let depth = 0;\n    let max_depth_list:\
    \ number[] = [];\n    for (let i = 0; i < paren_string.length; i++) {\n      \
    \  if (paren_string[i] === '(') {\n            depth++;\n            if (depth\
    \ > max_depth) {\n                max_depth = depth;\n            }\n        }\
    \ else if (paren_string[i] === ')') {\n            depth--;\n        } else if\
    \ (paren_string[i] === ' ') {\n            max_depth_list.push(max_depth);\n \
    \           max_depth = 0;\n            depth = 0;\n        }\n    }\n    max_depth_list.push(max_depth);\n\
    \    return max_depth_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let max_nesting = 0;\n  let nesting = 0;\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === \"(\") {\n      nesting++;\n      max_nesting = Math.max(max_nesting, nesting);\n\
    \    } else if (paren_string[i] === \")\") {\n      nesting--;\n    } else if\
    \ (paren_string[i] === \" \") {\n      result.push(max_nesting);\n      max_nesting\
    \ = 0;\n      nesting = 0;\n    }\n  }\n  result.push(max_nesting);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            let paren: string = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let current_depth: number = 0;\n  \
    \      for (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i]\
    \ === \"(\") {\n                current_depth++;\n            } else if (paren_group[i]\
    \ === \")\") {\n                current_depth--;\n            }\n            if\
    \ (current_depth > max_depth) {\n                max_depth = current_depth;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n            if (paren_groups[i][j] === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren_groups[i][j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let paren_stack: string[] = [];\n    let max_depth =\
    \ 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      let paren = paren_group[j];\n\
    \      if (paren === \"(\") {\n        paren_stack.push(paren);\n        max_depth\
    \ = Math.max(max_depth, paren_stack.length);\n      } else if (paren === \")\"\
    ) {\n        paren_stack.pop();\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \           if (current_nesting_level > max_nesting_level) {\n               \
    \     max_nesting_level = current_nesting_level;\n                }\n        \
    \    } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let current_depth: number = 0;\n  \
    \      for (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i]\
    \ === \"(\") {\n                current_depth++;\n            } else if (paren_group[i]\
    \ === \")\") {\n                current_depth--;\n            }\n            if\
    \ (current_depth > max_depth) {\n                max_depth = current_depth;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting_level = 0;\n    let current_nesting_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting_level++;\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[j] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let current_depth: number = 0;\n  \
    \      for (let char of paren_group) {\n            if (char === \"(\") {\n  \
    \              current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (char === \")\") {\n                current_depth--;\n     \
    \       }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsx4q_769.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_depth_arr\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let max_depth\
    \ = 0;\n        let depth = 0;\n        for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n            if (paren_groups[i][j] === '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (paren_groups[i][j] === ')') {\n   \
    \             depth--;\n            }\n        }\n        max_depth_arr.push(max_depth);\n\
    \    }\n    return max_depth_arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let current_paren_group\
    \ = paren_groups[i];\n        let current_nesting_level = 0;\n        let max_nesting_level\
    \ = 0;\n        for (let j = 0; j < current_paren_group.length; j++) {\n     \
    \       if (current_paren_group[j] === '(') {\n                current_nesting_level++;\n\
    \            } else if (current_paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const results\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let max_nesting = 0;\n    let current_nesting = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      const paren = paren_group[j];\n\
    \      if (paren === \"(\") {\n        current_nesting++;\n      } else if (paren\
    \ === \")\") {\n        current_nesting--;\n      }\n      if (current_nesting\
    \ > max_nesting) {\n        max_nesting = current_nesting;\n      }\n    }\n \
    \   results.push(max_nesting);\n  }\n  return results;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[j] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (let char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_nesting++;\n      } else if (char === \")\") {\n\
    \        current_nesting--;\n      }\n      if (current_nesting > max_nesting)\
    \ {\n        max_nesting = current_nesting;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0w4_0jbg.ts(10,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let current_depth: number = 0;\n  \
    \      for (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i]\
    \ === \"(\") {\n                current_depth++;\n            } else if (paren_group[i]\
    \ === \")\") {\n                current_depth--;\n            }\n            if\
    \ (current_depth > max_depth) {\n                max_depth = current_depth;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let nesting_level = 0;\n    let max_nesting_level =\
    \ 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        nesting_level++;\n      } else if (paren_group[j] ===\
    \ \")\") {\n        nesting_level--;\n      }\n      if (nesting_level > max_nesting_level)\
    \ {\n        max_nesting_level = nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_level = 0;\n        let current_level =\
    \ 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                current_level++;\n            } else if (paren_group[j]\
    \ === ')') {\n                current_level--;\n            }\n            if\
    \ (current_level > max_level) {\n                max_level = current_level;\n\
    \            }\n        }\n        max_levels.push(max_level);\n    }\n    return\
    \ max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let max_nesting = 0;\n  let current_nesting = 0;\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === \"(\") {\n      current_nesting++;\n      max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n    } else if (paren_string[i] === \")\") {\n      current_nesting--;\n\
    \    } else if (paren_string[i] === \" \") {\n      result.push(max_nesting);\n\
    \      max_nesting = 0;\n      current_nesting = 0;\n    }\n  }\n  result.push(max_nesting);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                paren_level++;\n            } else\
    \ if (paren_group[j] === ')') {\n                paren_level--;\n            }\n\
    \            if (paren_level > max_paren_level) {\n                max_paren_level\
    \ = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = new Array<number>();\n    for (let i = 0; i < paren_groups.length; i++) {\n\
    \        let paren_group = paren_groups[i];\n        let max_nesting_level = 0;\n\
    \        let nesting_level = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === '(') {\n                nesting_level++;\n\
    \            } else if (paren_group[j] === ')') {\n                nesting_level--;\n\
    \            }\n            if (nesting_level > max_nesting_level) {\n       \
    \         max_nesting_level = nesting_level;\n            }\n        }\n     \
    \   max_nesting_levels.push(max_nesting_level);\n    }\n    return max_nesting_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let depth: number = 0;\n        for\
    \ (let char of paren_group) {\n            if (char === \"(\") {\n           \
    \     depth++;\n                if (depth > max_depth) {\n                   \
    \ max_depth = depth;\n                }\n            } else if (char === \")\"\
    ) {\n                depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpksj4815o.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                paren_level++;\n            } else\
    \ if (paren_group[j] === ')') {\n                paren_level--;\n            }\n\
    \            if (paren_level > max_paren_level) {\n                max_paren_level\
    \ = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const max_nesting_levels\
    \ = paren_groups.map(paren_group => {\n    let max_nesting_level = 0;\n    let\
    \ nesting_level = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n   \
    \   if (paren_group[i] === '(') {\n        nesting_level++;\n      } else if (paren_group[i]\
    \ === ')') {\n        nesting_level--;\n      }\n      if (nesting_level > max_nesting_level)\
    \ {\n        max_nesting_level = nesting_level;\n      }\n    }\n    return max_nesting_level;\n\
    \  });\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                paren_count++;\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_count--;\n            }\n            if (paren_count\
    \ > max_paren_count) {\n                max_paren_count = paren_count;\n     \
    \       }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const result:\
    \ number[] = [];\n  for (const paren_group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const paren of paren_group) {\n \
    \     if (paren === '(') {\n        current_depth++;\n      } else if (paren ===\
    \ ')') {\n        current_depth--;\n      }\n      max_depth = Math.max(max_depth,\
    \ current_depth);\n    }\n    result.push(max_depth);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpojcu9df2.ts(10,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let group of paren_groups) {\n        let\
    \ stack: string[] = [];\n        let max_depth: number = 0;\n        for (let\
    \ i: number = 0; i < group.length; i++) {\n            if (group[i] === \"(\"\
    ) {\n                stack.push(\"(\");\n                max_depth = Math.max(max_depth,\
    \ stack.length);\n            } else if (group[i] === \")\") {\n             \
    \   stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014229
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ char = paren_group[j];\n            if (char === '(') {\n                nesting_count++;\n\
    \            } else if (char === ')') {\n                nesting_count--;\n  \
    \          }\n            if (nesting_count > max_nesting_count) {\n         \
    \       max_nesting_count = nesting_count;\n            }\n        }\n       \
    \ max_nesting.push(max_nesting_count);\n    }\n    return max_nesting;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let nesting_level\
    \ = 0;\n        let max_nesting_level = 0;\n        for (let char of paren_group)\
    \ {\n            if (char === '(') {\n                nesting_level++;\n     \
    \       } else if (char === ')') {\n                nesting_level--;\n       \
    \     }\n            if (nesting_level > max_nesting_level) {\n              \
    \  max_nesting_level = nesting_level;\n            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplnuni0rm.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const result: number[] = [];\n    const paren_groups = paren_string.split('\
    \ ');\n    for (const paren_group of paren_groups) {\n        let max_level =\
    \ 0;\n        let current_level = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_level++;\n    \
    \            max_level = Math.max(max_level, current_level);\n            } else\
    \ if (paren === ')') {\n                current_level--;\n            }\n    \
    \    }\n        result.push(max_level);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7c17_gxe.ts(10,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let group of paren_groups) {\n        let max_level = 0;\n \
    \       let current_level = 0;\n        for (let char of group) {\n          \
    \  if (char === '(') {\n                current_level++;\n            } else if\
    \ (char === ')') {\n                current_level--;\n            }\n        \
    \    if (current_level > max_level) {\n                max_level = current_level;\n\
    \            }\n        }\n        max_nesting_levels.push(max_level);\n    }\n\
    \    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6h_l8wgx.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014229
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_level =\
    \ 0;\n        let current_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                current_level++;\n\
    \            } else if (paren_group[i] === ')') {\n                current_level--;\n\
    \            }\n            if (current_level > max_level) {\n               \
    \ max_level = current_level;\n            }\n        }\n        max_levels.push(max_level);\n\
    \    }\n    return max_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let nesting_level\
    \ = 0;\n        let max_nesting_level = 0;\n        for (let char of paren_group)\
    \ {\n            if (char === '(') {\n                nesting_level++;\n     \
    \       } else if (char === ')') {\n                nesting_level--;\n       \
    \     }\n            if (nesting_level > max_nesting_level) {\n              \
    \  max_nesting_level = nesting_level;\n            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplnuni0rm.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_levels\
    \ = [];\n  for (let group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (let char of group) {\n      if (char === \"(\") {\n        level++;\n\
    \      } else if (char === \")\") {\n        level--;\n      }\n      if (level\
    \ > max_level) {\n        max_level = level;\n      }\n    }\n    max_levels.push(max_level);\n\
    \  }\n  return max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1a835fso.ts(10,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let paren_level = 0;\n    let max_paren_level = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === '(') {\n        paren_level++;\n      } else if (paren_group[j] === ')')\
    \ {\n        paren_level--;\n      }\n      if (paren_level > max_paren_level)\
    \ {\n        max_paren_level = paren_level;\n      }\n    }\n    paren_levels.push(max_paren_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let paren_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_level = 0;\n\
    \        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                paren_level++;\n            } else if (paren_group[j]\
    \ === ')') {\n                paren_level--;\n            }\n            if (paren_level\
    \ > max_level) {\n                max_level = paren_level;\n            }\n  \
    \      }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        result.push(parse_parens(paren_groups[i]));\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy4h3e_k8.ts(8,21): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let output: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_depth = 0;\n  \
    \  let current_depth = 0;\n    for (let paren of paren_group) {\n      if (paren\
    \ === \"(\") {\n        current_depth++;\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n      if (current_depth > max_depth) {\n \
    \       max_depth = current_depth;\n      }\n    }\n    output.push(max_depth);\n\
    \  }\n  return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8gujwxtr.ts(10,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_level: number = 0;\n        let level: number = 0;\n        for\
    \ (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i] ===\
    \ \"(\") {\n                level++;\n            } else if (paren_group[i] ===\
    \ \")\") {\n                level--;\n            }\n            if (level > max_level)\
    \ {\n                max_level = level;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_count++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_count--;\n     \
    \       }\n            if (nesting_count > max_nesting_count) {\n            \
    \    max_nesting_count = nesting_count;\n            }\n        }\n        max_nesting.push(max_nesting_count);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_level = 0;\n  \
    \  let level = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if\
    \ (paren_group[i] === \"(\") {\n        level++;\n      } else if (paren_group[i]\
    \ === \")\") {\n        level--;\n      }\n      if (level > max_level) {\n  \
    \      max_level = level;\n      }\n    }\n    result.push(max_level);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const result: number[] = [];\n  const groups = paren_string.split(\"\
    \ \");\n  for (const group of groups) {\n    let max_depth = 0;\n    let current_depth\
    \ = 0;\n    for (const char of group) {\n      if (char === \"(\") {\n       \
    \ current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (char === \")\") {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6r809bzs.ts(10,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels:\
    \ number[] = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n      \
    \  let paren_group = paren_groups[i];\n        let max_level = 0;\n        let\
    \ current_level = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n\
    \            if (paren_group[j] === '(') {\n                current_level++;\n\
    \            } else if (paren_group[j] === ')') {\n                current_level--;\n\
    \            }\n            if (current_level > max_level) {\n               \
    \ max_level = current_level;\n            }\n        }\n        max_levels.push(max_level);\n\
    \    }\n    return max_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_level = 0;\n    let level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === \"(\") {\n\
    \        level++;\n        if (level > max_level) {\n          max_level = level;\n\
    \        }\n      } else if (paren_group[j] === \")\") {\n        level--;\n \
    \     }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren_group[i] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_depth = 0;\n    let depth = 0;\n    let max_depth_arr\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            depth++;\n            if (depth > max_depth) {\n   \
    \             max_depth = depth;\n            }\n        } else if (paren_string[i]\
    \ === ')') {\n            depth--;\n        } else if (paren_string[i] === ' ')\
    \ {\n            max_depth_arr.push(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    max_depth_arr.push(max_depth);\n\
    \    return max_depth_arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_depth = 0;\n    let current_depth = 0;\n   \
    \ for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] ===\
    \ \"(\") {\n        current_depth++;\n        if (current_depth > max_depth) {\n\
    \          max_depth = current_depth;\n        }\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const result\
    \ = [];\n  for (let paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (let i = 0; i < paren_group.length; i++)\
    \ {\n      if (paren_group[i] === \"(\") {\n        current_nesting++;\n     \
    \ } else if (paren_group[i] === \")\") {\n        current_nesting--;\n      }\n\
    \      max_nesting = Math.max(max_nesting, current_nesting);\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_depth = 0;\n    let curr_depth = 0;\n    for\
    \ (let j = 0; j < paren_group.length; j++) {\n      let char = paren_group[j];\n\
    \      if (char === \"(\") {\n        curr_depth++;\n        max_depth = Math.max(max_depth,\
    \ curr_depth);\n      } else if (char === \")\") {\n        curr_depth--;\n  \
    \    }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let parens_array = paren_string.split(\" \");\n  let result =\
    \ [];\n  for (let i = 0; i < parens_array.length; i++) {\n    let parens = parens_array[i];\n\
    \    let max_depth = 0;\n    let current_depth = 0;\n    for (let j = 0; j < parens.length;\
    \ j++) {\n      if (parens[j] === \"(\") {\n        current_depth++;\n       \
    \ max_depth = Math.max(max_depth, current_depth);\n      } else {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const result:\
    \ number[] = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let depth = 0;\n        for (const char of paren_group) {\n  \
    \          if (char === '(') {\n                depth++;\n            } else if\
    \ (char === ')') {\n                depth--;\n            }\n            if (depth\
    \ > max_depth) {\n                max_depth = depth;\n            }\n        }\n\
    \        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3rp7k7vp.ts(10,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        max_nesting_levels.push(parse_parens(paren_group));\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgye4fbdw.ts(8,33): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const result:\
    \ number[] = [];\n  for (const paren_group of paren_groups) {\n    const stack:\
    \ string[] = [];\n    let max_depth = 0;\n    let depth = 0;\n    for (const char\
    \ of paren_group) {\n      if (char === '(') {\n        stack.push(char);\n  \
    \      depth++;\n        max_depth = Math.max(max_depth, depth);\n      } else\
    \ if (char === ')') {\n        stack.pop();\n        depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwictvky6.ts(11,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let parens_array = paren_string.split(' ');\n    let max_nesting_array\
    \ = [];\n    for (let i = 0; i < parens_array.length; i++) {\n        let parens\
    \ = parens_array[i];\n        let max_nesting = 0;\n        let current_nesting\
    \ = 0;\n        for (let j = 0; j < parens.length; j++) {\n            if (parens[j]\
    \ === '(') {\n                current_nesting++;\n            } else if (parens[j]\
    \ === ')') {\n                current_nesting--;\n            }\n            if\
    \ (current_nesting > max_nesting) {\n                max_nesting = current_nesting;\n\
    \            }\n        }\n        max_nesting_array.push(max_nesting);\n    }\n\
    \    return max_nesting_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_level = 0;\n        let current_level =\
    \ 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                current_level++;\n            } else if (paren_group[j]\
    \ === ')') {\n                current_level--;\n            }\n            if\
    \ (current_level > max_level) {\n                max_level = current_level;\n\
    \            }\n        }\n        max_levels.push(max_level);\n    }\n    return\
    \ max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_depth = 0;\n  \
    \  let current_depth = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n\
    \      if (paren_group[i] === \"(\") {\n        current_depth++;\n      } else\
    \ if (paren_group[i] === \")\") {\n        current_depth--;\n      }\n      if\
    \ (current_depth > max_depth) {\n        max_depth = current_depth;\n      }\n\
    \    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_array = paren_string.split(' ');\n  let result = [];\n\
    \  for (let i = 0; i < paren_array.length; i++) {\n    let paren_count = 0;\n\
    \    let max_paren_count = 0;\n    for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n      if (paren_array[i][j] === '(') {\n        paren_count++;\n   \
    \   } else if (paren_array[i][j] === ')') {\n        paren_count--;\n      }\n\
    \      if (paren_count > max_paren_count) {\n        max_paren_count = paren_count;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_depth:\
    \ number = 0;\n        let depth: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                depth++;\n\
    \            } else if (paren_group[j] === \")\") {\n                depth--;\n\
    \            }\n            if (depth > max_depth) {\n                max_depth\
    \ = depth;\n            }\n        }\n        result.push(max_depth);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                paren_count++;\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_count--;\n            }\n            if (paren_count\
    \ > max_paren_count) {\n                max_paren_count = paren_count;\n     \
    \       }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let max_depth = 0;\n  let depth = 0;\n  let max_depths = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      depth++;\n      if (depth > max_depth) {\n        max_depth\
    \ = depth;\n      }\n    } else if (paren_string[i] === \")\") {\n      depth--;\n\
    \    } else if (paren_string[i] === \" \") {\n      max_depths.push(max_depth);\n\
    \      max_depth = 0;\n      depth = 0;\n    }\n  }\n  max_depths.push(max_depth);\n\
    \  return max_depths;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_depth:\
    \ number = 0;\n        let depth: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                depth++;\n\
    \            } else if (paren_group[j] === \")\") {\n                depth--;\n\
    \            }\n            if (depth > max_depth) {\n                max_depth\
    \ = depth;\n            }\n        }\n        result.push(max_depth);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting_level = 0;\n    let current_nesting_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting_level++;\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_array = paren_string.split(\" \");\n    let max_depth_array\
    \ = [];\n    for (let i = 0; i < paren_array.length; i++) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                current_depth++;\n\
    \                if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                current_depth--;\n            }\n        }\n \
    \       max_depth_array.push(max_depth);\n    }\n    return max_depth_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let current_depth: number = 0;\n  \
    \      for (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i]\
    \ === \"(\") {\n                current_depth++;\n            } else if (paren_group[i]\
    \ === \")\") {\n                current_depth--;\n            }\n            if\
    \ (current_depth > max_depth) {\n                max_depth = current_depth;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        max_levels.push(paren_levels(paren_groups[i]));\n\
    \    }\n    return max_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0653w6yp.ts(8,25): error TS2304: Cannot find name
    ''paren_levels''.

    '
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels:\
    \ number[] = [];\n    for (let paren_group of paren_groups) {\n        let max_level\
    \ = 0;\n        let current_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                current_level++;\n\
    \            } else if (paren_group[i] === ')') {\n                current_level--;\n\
    \            }\n            if (current_level > max_level) {\n               \
    \ max_level = current_level;\n            }\n        }\n        max_levels.push(max_level);\n\
    \    }\n    return max_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_depth:\
    \ number = 0;\n        let depth: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                depth++;\n\
    \            } else if (paren_group[j] === \")\") {\n                depth--;\n\
    \            }\n            if (depth > max_depth) {\n                max_depth\
    \ = depth;\n            }\n        }\n        result.push(max_depth);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let nesting_level = 0;\n        let max_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_level++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_level--;\n     \
    \       }\n            if (nesting_level > max_nesting_level) {\n            \
    \    max_nesting_level = nesting_level;\n            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let depth: number = 0;\n        for\
    \ (let i: number = 0; i < paren_group.length; i++) {\n            if (paren_group[i]\
    \ === \"(\") {\n                depth++;\n            } else if (paren_group[i]\
    \ === \")\") {\n                depth--;\n            }\n            if (depth\
    \ > max_depth) {\n                max_depth = depth;\n            }\n        }\n\
    \        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_depth = 0;\n    let depth = 0;\n    let max_depths:\
    \ number[] = [];\n    for (let i = 0; i < paren_string.length; i++) {\n      \
    \  if (paren_string[i] === '(') {\n            depth++;\n            if (depth\
    \ > max_depth) {\n                max_depth = depth;\n            }\n        }\
    \ else if (paren_string[i] === ')') {\n            depth--;\n        } else if\
    \ (paren_string[i] === ' ') {\n            max_depths.push(max_depth);\n     \
    \       max_depth = 0;\n            depth = 0;\n        }\n    }\n    max_depths.push(max_depth);\n\
    \    return max_depths;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let max_levels: number[] = [];\n  let paren_groups: string[] =\
    \ paren_string.split(\" \");\n  for (let paren_group of paren_groups) {\n    let\
    \ level: number = 0;\n    let max_level: number = 0;\n    for (let paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        level++;\n      } else if (paren ===\
    \ \")\") {\n        level--;\n      }\n      if (level > max_level) {\n      \
    \  max_level = level;\n      }\n    }\n    max_levels.push(max_level);\n  }\n\
    \  return max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpez14qode.ts(10,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014232
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const result:\
    \ number[] = [];\n  for (const paren_group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const paren of paren_group) {\n \
    \     if (paren === '(') {\n        current_depth++;\n      } else if (paren ===\
    \ ')') {\n        current_depth--;\n      }\n      max_depth = Math.max(max_depth,\
    \ current_depth);\n    }\n    result.push(max_depth);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpojcu9df2.ts(10,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_level++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_level--;\n     \
    \       }\n            if (nesting_level > max_nesting_level) {\n            \
    \    max_nesting_level = nesting_level;\n            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let max_nesting = 0;\n    let current_nesting = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren_group[j] === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let paren_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                paren_level++;\n            } else\
    \ if (paren_group[j] === ')') {\n                paren_level--;\n            }\n\
    \            if (paren_level > max_paren_level) {\n                max_paren_level\
    \ = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let result\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_level = 0;\n        let level = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            let paren =\
    \ paren_group[j];\n            if (paren === '(') {\n                level++;\n\
    \            } else if (paren === ')') {\n                level--;\n         \
    \   }\n            if (level > max_level) {\n                max_level = level;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_depth = 0;\n    let depth = 0;\n    let max_depth_arr\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === \"(\") {\n            depth += 1;\n            if (depth > max_depth) {\n\
    \                max_depth = depth;\n            }\n        } else if (paren_string[i]\
    \ === \")\") {\n            max_depth_arr.push(max_depth);\n            depth\
    \ -= 1;\n            max_depth = 0;\n        }\n    }\n    return max_depth_arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  0,\n  3,\n  0,\n  0,\n  1,\n  3,\n  0,\n  2,\n  2,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7z1fh9ny.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7z1fh9ny.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 0, 3, 0,\n    0, 1, 3, 0, 2,\n    2, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let paren_stack = [];\n    let max_nesting_so_far =\
    \ 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      let paren = paren_group[j];\n\
    \      if (paren === \"(\") {\n        paren_stack.push(paren);\n        max_nesting_so_far\
    \ = Math.max(max_nesting_so_far, paren_stack.length);\n      } else if (paren\
    \ === \")\") {\n        paren_stack.pop();\n      }\n    }\n    max_nesting.push(max_nesting_so_far);\n\
    \  }\n  return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === '(') {\n                nesting_level++;\n\
    \            } else if (paren === ')') {\n                nesting_level--;\n \
    \           }\n            if (nesting_level > max_nesting_level) {\n        \
    \        max_nesting_level = nesting_level;\n            }\n        }\n      \
    \  max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let paren_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let paren_level = 0;\n    let max_paren_level = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        paren_level++;\n      } else if (paren_group[j] === \"\
    )\") {\n        paren_level--;\n      }\n      if (paren_level > max_paren_level)\
    \ {\n        max_paren_level = paren_level;\n      }\n    }\n    paren_levels.push(max_paren_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let current_nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_count++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_count--;\n\
    \            }\n            if (current_nesting_count > max_nesting_count) {\n\
    \                max_nesting_count = current_nesting_count;\n            }\n \
    \       }\n        max_nesting.push(max_nesting_count);\n    }\n    return max_nesting;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_nested_parens: number[] = [];\n    let paren_groups:\
    \ string[] = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length;\
    \ i++) {\n        let paren_group: string = paren_groups[i];\n        let max_nested_parens_in_group:\
    \ number = 0;\n        let current_nested_parens: number = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                current_nested_parens++;\n            } else if (paren_group[j]\
    \ === \")\") {\n                current_nested_parens--;\n            }\n    \
    \        if (current_nested_parens > max_nested_parens_in_group) {\n         \
    \       max_nested_parens_in_group = current_nested_parens;\n            }\n \
    \       }\n        max_nested_parens.push(max_nested_parens_in_group);\n    }\n\
    \    return max_nested_parens;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let parens_array = paren_string.split(\" \");\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < parens_array.length; i++) {\n      \
    \  let paren_count = 0;\n        let max_paren_count = 0;\n        for (let j\
    \ = 0; j < parens_array[i].length; j++) {\n            if (parens_array[i][j]\
    \ === \"(\") {\n                paren_count++;\n            } else if (parens_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let paren of paren_group)\
    \ {\n            if (paren === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprt4mv5un.ts(10,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014234
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const result\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        const paren_group\
    \ = paren_groups[i];\n        let max_depth = 0;\n        let depth = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                depth++;\n                max_depth = Math.max(max_depth,\
    \ depth);\n            } else if (paren_group[j] === ')') {\n                depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let paren_level = 0;\n    let max_level = 0;\n    for\
    \ (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === '(')\
    \ {\n        paren_level++;\n      } else if (paren_group[j] === ')') {\n    \
    \    paren_level--;\n      }\n      if (paren_level > max_level) {\n        max_level\
    \ = paren_level;\n      }\n    }\n    paren_levels.push(max_level);\n  }\n  return\
    \ paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting_level = 0;\n    let current_nesting_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      let paren =\
    \ paren_group[j];\n      if (paren === \"(\") {\n        current_nesting_level++;\n\
    \      } else if (paren === \")\") {\n        current_nesting_level--;\n     \
    \ }\n      if (current_nesting_level > max_nesting_level) {\n        max_nesting_level\
    \ = current_nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_level = 0;\n    let current_level = 0;\n   \
    \ for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] ===\
    \ \"(\") {\n        current_level++;\n      } else if (paren_group[j] === \")\"\
    ) {\n        current_level--;\n      }\n      if (current_level > max_level) {\n\
    \        max_level = current_level;\n      }\n    }\n    max_levels.push(max_level);\n\
    \  }\n  return max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_level =\
    \ 0;\n        let level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                level++;\n\
    \            } else if (paren_group[i] === ')') {\n                level--;\n\
    \            }\n            if (level > max_level) {\n                max_level\
    \ = level;\n            }\n        }\n        max_levels.push(max_level);\n  \
    \  }\n    return max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_depth = 0;\n  \
    \  let current_depth = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n\
    \      if (paren_group[i] === \"(\") {\n        current_depth++;\n      } else\
    \ if (paren_group[i] === \")\") {\n        current_depth--;\n      }\n      if\
    \ (current_depth > max_depth) {\n        max_depth = current_depth;\n      }\n\
    \    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_depth: number[] = [];\n    let depth: number = 0;\n\
    \    let max_depth_so_far: number = 0;\n    for (let i: number = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === '(') {\n            depth++;\n     \
    \       if (depth > max_depth_so_far) {\n                max_depth_so_far = depth;\n\
    \            }\n        } else if (paren_string[i] === ')') {\n            max_depth.push(max_depth_so_far);\n\
    \            depth--;\n        }\n    }\n    return max_depth;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfsbkkful.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfsbkkful.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 2, 3, 3,\n    3, 3, 3, 3, 3,\n    3, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_count++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_count--;\n     \
    \       }\n            if (nesting_count > max_nesting_count) {\n            \
    \    max_nesting_count = nesting_count;\n            }\n        }\n        max_nesting.push(max_nesting_count);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const result\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let max_level = 0;\n    let current_level = 0;\n   \
    \ for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] ===\
    \ '(') {\n        current_level++;\n        max_level = Math.max(max_level, current_level);\n\
    \      } else if (paren_group[j] === ')') {\n        current_level--;\n      }\n\
    \    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let level = 0;\n        let max_level = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren_group[j] === ')') {\n                level--;\n            }\n\
    \        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            let paren: string = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_depth = 0;\n    let depth = 0;\n    let result = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            depth++;\n            max_depth = Math.max(max_depth,\
    \ depth);\n        } else if (paren_string[i] === ')') {\n            depth--;\n\
    \        } else if (paren_string[i] === ' ') {\n            result.push(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push(max_depth);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const result\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let max_level = 0;\n    let level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === '(') {\n\
    \        level++;\n      } else if (paren_group[j] === ')') {\n        level--;\n\
    \      }\n      max_level = Math.max(max_level, level);\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const result\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        result.push(get_max_nesting(paren_groups[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptfxjedzi.ts(8,21): error TS2304: Cannot find name
    ''get_max_nesting''.

    '
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[j] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    const max_nesting_level = get_max_nesting_level(paren_group);\n\
    \    max_nesting_levels.push(max_nesting_level);\n  }\n  return max_nesting_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy499l14m.ts(9,31): error TS2304: Cannot find name
    ''get_max_nesting_level''.

    '
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let paren_count =\
    \ 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                paren_count++;\n                if (paren_count\
    \ > paren_level) {\n                    paren_level = paren_count;\n         \
    \       }\n            } else if (paren_group[j] === ')') {\n                paren_count--;\n\
    \            }\n        }\n        paren_levels.push(paren_level);\n    }\n  \
    \  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let max_depth =\
    \ 0;\n    let current_depth = 0;\n    for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n      if (paren_groups[i][j] === \"(\") {\n        current_depth++;\n\
    \        max_depth = Math.max(max_depth, current_depth);\n      } else if (paren_groups[i][j]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            let paren: string = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    const paren_groups = paren_string.split(' ');\n    const paren_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        paren_levels.push(get_paren_level(paren_groups[i]));\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4rosl8kh.ts(8,27): error TS2304: Cannot find name
    ''get_paren_level''.

    '
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            let paren: string = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let paren_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_level = 0;\n\
    \        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                paren_level++;\n            } else if (paren_group[j]\
    \ === ')') {\n                paren_level--;\n            }\n            if (paren_level\
    \ > max_level) {\n                max_level = paren_level;\n            }\n  \
    \      }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const max_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_level = 0;\n    let level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === \"(\") {\n\
    \        level++;\n      } else if (paren_group[j] === \")\") {\n        level--;\n\
    \      }\n      if (level > max_level) {\n        max_level = level;\n      }\n\
    \    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_nesting_levels: number[] = [];\n    let paren_groups:\
    \ string[] = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length;\
    \ i++) {\n        let paren_group: string = paren_groups[i];\n        let nesting_level:\
    \ number = 0;\n        let max_nesting_level: number = 0;\n        for (let j\
    \ = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                nesting_level++;\n            } else if (paren_group[j] ===\
    \ \")\") {\n                nesting_level--;\n            }\n            if (nesting_level\
    \ > max_nesting_level) {\n                max_nesting_level = nesting_level;\n\
    \            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let max_level\
    \ = 0;\n        let current_level = 0;\n        for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n            if (paren_groups[i][j] === '(') {\n                current_level++;\n\
    \            } else if (paren_groups[i][j] === ')') {\n                current_level--;\n\
    \            }\n            if (current_level > max_level) {\n               \
    \ max_level = current_level;\n            }\n        }\n        max_levels.push(max_level);\n\
    \    }\n    return max_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting_level = 0;\n    let current_nesting_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting_level++;\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const result:\
    \ number[] = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n\
    \    let depth = 0;\n    for (const char of group) {\n      if (char === '(')\
    \ {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n     \
    \ } else if (char === ')') {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbaiv4dex.ts(10,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const paren_levels\
    \ = paren_groups.map(group => {\n    let level = 0;\n    let max_level = 0;\n\
    \    for (let i = 0; i < group.length; i++) {\n      if (group[i] === '(') {\n\
    \        level++;\n      } else if (group[i] === ')') {\n        level--;\n  \
    \    }\n      max_level = Math.max(max_level, level);\n    }\n    return max_level;\n\
    \  });\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014236
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let max_depth = 0;\n  let curr_depth = 0;\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === \"(\") {\n      curr_depth++;\n      max_depth = Math.max(max_depth, curr_depth);\n\
    \    } else if (paren_string[i] === \")\") {\n      curr_depth--;\n    } else\
    \ if (paren_string[i] === \" \") {\n      result.push(max_depth);\n      max_depth\
    \ = 0;\n      curr_depth = 0;\n    }\n  }\n  result.push(max_depth);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n            if (paren_groups[i][j] === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren_groups[i][j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014227
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_count++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_count--;\n     \
    \       }\n            if (nesting_count > max_nesting_count) {\n            \
    \    max_nesting_count = nesting_count;\n            }\n        }\n        max_nesting.push(max_nesting_count);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_stack = [];\n        let max_depth = 0;\n\
    \        for (let j = 0; j < paren_group.length; j++) {\n            let paren\
    \ = paren_group[j];\n            if (paren === '(') {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === ')') {\n                paren_stack.pop();\n     \
    \       }\n        }\n        max_nesting.push(max_depth);\n    }\n    return\
    \ max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let level = 0;\n        let max_level = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren_group[j] === ')') {\n                level--;\n            }\n\
    \        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting_level = 0;\n    let current_nesting_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      let paren =\
    \ paren_group[j];\n      if (paren === \"(\") {\n        current_nesting_level++;\n\
    \      } else if (paren === \")\") {\n        current_nesting_level--;\n     \
    \ }\n      if (current_nesting_level > max_nesting_level) {\n        max_nesting_level\
    \ = current_nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014235
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(' ');\n  const result:\
    \ number[] = [];\n  for (const paren_group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const paren of paren_group) {\n \
    \     if (paren === '(') {\n        current_depth++;\n      } else if (paren ===\
    \ ')') {\n        current_depth--;\n      }\n      if (current_depth > max_depth)\
    \ {\n        max_depth = current_depth;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz0bei5xi.ts(10,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014237
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let max_nesting = 0;\n  let current_nesting = 0;\n  let result\
    \ = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === \"(\") {\n      current_nesting++;\n      max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n    } else if (paren_string[i] === \")\") {\n      result.push(max_nesting);\n\
    \      current_nesting--;\n      max_nesting = Math.max(max_nesting, current_nesting);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpk1_c5d9y.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk1_c5d9y.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 2, 3, 3,\n    3, 3, 3, 3, 3,\n    3, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let nesting_level = 0;\n        let max_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_level++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_level--;\n     \
    \       }\n            if (nesting_level > max_nesting_level) {\n            \
    \    max_nesting_level = nesting_level;\n            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let res: number[] = [];\n    let paren_groups = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let max_depth = 0;\n\
    \        let curr_depth = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === \"(\") {\n                curr_depth++;\n\
    \            } else if (paren_group[i] === \")\") {\n                curr_depth--;\n\
    \            }\n            max_depth = Math.max(max_depth, curr_depth);\n   \
    \     }\n        res.push(max_depth);\n    }\n    return res;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const\
    \ paren_group = paren_groups[i];\n    let max_nesting = 0;\n    let current_nesting\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      const paren\
    \ = paren_group[j];\n      if (paren === \"(\") {\n        current_nesting++;\n\
    \      } else if (paren === \")\") {\n        current_nesting--;\n      }\n  \
    \    max_nesting = Math.max(max_nesting, current_nesting);\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_depth = 0;\n    let depth = 0;\n    let max_depths:\
    \ number[] = [];\n    for (let i = 0; i < paren_string.length; i++) {\n      \
    \  if (paren_string[i] === '(') {\n            depth++;\n            if (depth\
    \ > max_depth) {\n                max_depth = depth;\n            }\n        }\
    \ else if (paren_string[i] === ')') {\n            depth--;\n        } else if\
    \ (paren_string[i] === ' ') {\n            max_depths.push(max_depth);\n     \
    \       max_depth = 0;\n            depth = 0;\n        }\n    }\n    max_depths.push(max_depth);\n\
    \    return max_depths;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let parens_array = paren_string.split(\" \");\n    let max_nesting_array\
    \ = [];\n    for (let i = 0; i < parens_array.length; i++) {\n        let paren_group\
    \ = parens_array[i];\n        let max_nesting = 0;\n        let current_nesting\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                current_nesting++;\n         \
    \   } else if (paren_group[j] === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        max_nesting_array.push(max_nesting);\n\
    \    }\n    return max_nesting_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_nesting_level = 0;\n    let nesting_level = 0;\n   \
    \ let max_nesting_levels: number[] = [];\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === \"(\") {\n            nesting_level++;\n\
    \            if (nesting_level > max_nesting_level) {\n                max_nesting_level\
    \ = nesting_level;\n            }\n        } else if (paren_string[i] === \")\"\
    ) {\n            nesting_level--;\n            if (nesting_level === 0) {\n  \
    \              max_nesting_levels.push(max_nesting_level);\n                max_nesting_level\
    \ = 0;\n            }\n        }\n    }\n    return max_nesting_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            let paren: string = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_count++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_count--;\n     \
    \       }\n            if (nesting_count > max_nesting_count) {\n            \
    \    max_nesting_count = nesting_count;\n            }\n        }\n        max_nesting.push(max_nesting_count);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting_level = 0;\n    let nesting_level =\
    \ 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      let paren = paren_group[j];\n\
    \      if (paren === \"(\") {\n        nesting_level++;\n      } else if (paren\
    \ === \")\") {\n        nesting_level--;\n      }\n      if (nesting_level > max_nesting_level)\
    \ {\n        max_nesting_level = nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren_group[i] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels:\
    \ number[] = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n      \
    \  let max_level = 0;\n        let curr_level = 0;\n        for (let j = 0; j\
    \ < paren_groups[i].length; j++) {\n            if (paren_groups[i][j] === '(')\
    \ {\n                curr_level++;\n            } else if (paren_groups[i][j]\
    \ === ')') {\n                curr_level--;\n            }\n            if (curr_level\
    \ > max_level) {\n                max_level = curr_level;\n            }\n   \
    \     }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let current_depth: number = 0;\n  \
    \      for (let i: number = 0; i < paren_group.length; i++) {\n            if\
    \ (paren_group[i] === \"(\") {\n                current_depth++;\n           \
    \ } else if (paren_group[i] === \")\") {\n                current_depth--;\n \
    \           }\n            if (current_depth > max_depth) {\n                max_depth\
    \ = current_depth;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let current_nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_count++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_count--;\n\
    \            }\n            if (current_nesting_count > max_nesting_count) {\n\
    \                max_nesting_count = current_nesting_count;\n            }\n \
    \       }\n        max_nesting.push(max_nesting_count);\n    }\n    return max_nesting;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let max_nesting_level: number[] = [];\n  let current_nesting_level:\
    \ number = 0;\n  let max_nesting_level_so_far: number = 0;\n  for (let i = 0;\
    \ i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n    \
    \  current_nesting_level++;\n      if (current_nesting_level > max_nesting_level_so_far)\
    \ {\n        max_nesting_level_so_far = current_nesting_level;\n      }\n    }\
    \ else if (paren_string[i] === \")\") {\n      max_nesting_level.push(max_nesting_level_so_far);\n\
    \      current_nesting_level--;\n    }\n  }\n  return max_nesting_level;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yejffg1.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_yejffg1.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 2, 3, 3,\n    3, 3, 3, 3, 3,\n    3, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_levels:\
    \ number[] = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n      \
    \  let paren_group = paren_groups[i];\n        let max_level = 0;\n        let\
    \ current_level = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n\
    \            if (paren_group[j] === '(') {\n                current_level++;\n\
    \            } else if (paren_group[j] === ')') {\n                current_level--;\n\
    \            }\n            if (current_level > max_level) {\n               \
    \ max_level = current_level;\n            }\n        }\n        max_levels.push(max_level);\n\
    \    }\n    return max_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const max_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let max_level\
    \ = 0;\n    let current_level = 0;\n    for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n      if (paren_groups[i][j] === \"(\") {\n        current_level++;\n\
    \      } else if (paren_groups[i][j] === \")\") {\n        current_level--;\n\
    \      }\n      if (current_level > max_level) {\n        max_level = current_level;\n\
    \      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting = 0;\n    let current_nesting = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting++;\n        if (current_nesting > max_nesting)\
    \ {\n          max_nesting = current_nesting;\n        }\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            let paren: string = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting_level = 0;\n    let current_nesting_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      let paren =\
    \ paren_group[j];\n      if (paren === \"(\") {\n        current_nesting_level++;\n\
    \      } else if (paren === \")\") {\n        current_nesting_level--;\n     \
    \ }\n      if (current_nesting_level > max_nesting_level) {\n        max_nesting_level\
    \ = current_nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\nconsole.log(parse_nested_parens(\"(()())\
    \ (()())\"));\nconsole.log(parse_nested_parens(\"((())) ((()))\"));\nconsole.log(parse_nested_parens(\"\
    ((())) ((())) (()())\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 2 ]

    [ 3, 3 ]

    [ 3, 3, 2 ]

    '
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let max_depth: number[] = [];\n    let depth: number = 0;\n\
    \    let max_depth_so_far: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === '(') {\n            depth++;\n     \
    \       if (depth > max_depth_so_far) {\n                max_depth_so_far = depth;\n\
    \            }\n        } else if (paren_string[i] === ')') {\n            depth--;\n\
    \            if (depth === 0) {\n                max_depth.push(max_depth_so_far);\n\
    \                max_depth_so_far = 0;\n            }\n        }\n    }\n    return\
    \ max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014238
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let result\
    \ = [];\n    for (let group of paren_groups) {\n        let max_depth = 0;\n \
    \       let depth = 0;\n        for (let char of group) {\n            if (char\
    \ === '(') {\n                depth++;\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\
    \ else if (char === ')') {\n                depth--;\n            }\n        }\n\
    \        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqm57e6ls.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_depth = 0;\n    let current_depth = 0;\n   \
    \ for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] ===\
    \ \"(\") {\n        current_depth++;\n        if (current_depth > max_depth) {\n\
    \          max_depth = current_depth;\n        }\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const result\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting = 0;\n    let current_nesting = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren_group[j] === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let paren_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                paren_level++;\n            } else\
    \ if (paren_group[j] === ')') {\n                paren_level--;\n            }\n\
    \            if (paren_level > max_paren_level) {\n                max_paren_level\
    \ = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const result\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    result.push(parse_parens(paren_groups[i]));\n\
    \  }\n  return result;\n}\n\nconsole.log(parse_nested_parens(\"(()())\"));\nconsole.log(parse_nested_parens(\"\
    ((()))\"));\nconsole.log(parse_nested_parens(\"(()()) (()())\"));\nconsole.log(parse_nested_parens(\"\
    (()()) ((()))\"));\nconsole.log(parse_nested_parens(\"(()()) ((())) (()())\"));\n\
    console.log(parse_nested_parens(\"(()()) ((())) (()()) ((()))\"));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkvhabeph.ts(8,17): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1660014237
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let paren_levels\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let paren_level\
    \ = 0;\n        let max_paren_level = 0;\n        for (let char of paren_group)\
    \ {\n            if (char === '(') {\n                paren_level++;\n       \
    \     } else if (char === ')') {\n                paren_level--;\n           \
    \ }\n            if (paren_level > max_paren_level) {\n                max_paren_level\
    \ = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyz9kpnvl.ts(10,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth: number = 0;\n        let depth: number = 0;\n        for\
    \ (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i] ===\
    \ \"(\") {\n                depth++;\n            } else if (paren_group[i] ===\
    \ \")\") {\n                depth--;\n            }\n            if (depth > max_depth)\
    \ {\n                max_depth = depth;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_count++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_count--;\n     \
    \       }\n            if (nesting_count > max_nesting_count) {\n            \
    \    max_nesting_count = nesting_count;\n            }\n        }\n        max_nesting.push(max_nesting_count);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let max_depth = 0;\n    let current_depth = 0;\n   \
    \ for (let j = 0; j < paren_group.length; j++) {\n      const paren = paren_group[j];\n\
    \      if (paren === \"(\") {\n        current_depth++;\n      } else if (paren\
    \ === \")\") {\n        current_depth--;\n      }\n      if (current_depth > max_depth)\
    \ {\n        max_depth = current_depth;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let parens_array = paren_string.split(' ');\n    let max_depth_array\
    \ = [];\n    for (let i = 0; i < parens_array.length; i++) {\n        let paren_depth\
    \ = 0;\n        let max_depth = 0;\n        for (let j = 0; j < parens_array[i].length;\
    \ j++) {\n            if (parens_array[i][j] === '(') {\n                paren_depth++;\n\
    \                if (paren_depth > max_depth) {\n                    max_depth\
    \ = paren_depth;\n                }\n            } else if (parens_array[i][j]\
    \ === ')') {\n                paren_depth--;\n            }\n        }\n     \
    \   max_depth_array.push(max_depth);\n    }\n    return max_depth_array;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_level = 0;\n    let level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === \"(\") {\n\
    \        level++;\n        if (level > max_level) {\n          max_level = level;\n\
    \        }\n      } else if (paren_group[j] === \")\") {\n        level--;\n \
    \     }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const result\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    result.push(parse_parens(paren_groups[i]));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmple5kc9xu.ts(8,17): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1660014238
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let nesting_level = 0;\n        let max_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                nesting_level++;\n            }\
    \ else if (paren_group[j] === ')') {\n                nesting_level--;\n     \
    \       }\n            if (nesting_level > max_nesting_level) {\n            \
    \    max_nesting_level = nesting_level;\n            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  let result: number[] = [];\n  let paren_groups = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let stack: string[] = [];\n    let max_depth = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      let char = paren_group[j];\n\
    \      if (char === \"(\") {\n        stack.push(char);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else if (char === \")\") {\n        stack.pop();\n \
    \     }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === '(') {\n                current_nesting_level++;\n     \
    \       } else if (paren_group[j] === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let paren_groups = paren_string.split(' ');\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === '(') {\n                current_nesting_level++;\n\
    \            } else if (paren === ')') {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014230
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n    let result: number[] = [];\n    let paren_groups: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_depth:\
    \ number = 0;\n        let current_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (paren_group[j] === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014225
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\nfunction parse_nested_parens(paren_string: string):\
    \ number[] {\n  const paren_groups = paren_string.split(\" \");\n  const max_nesting_levels\
    \ = paren_groups.map(paren_group => {\n    let max_nesting_level = 0;\n    let\
    \ current_nesting_level = 0;\n    for (let i = 0; i < paren_group.length; i++)\
    \ {\n      if (paren_group[i] === \"(\") {\n        current_nesting_level++;\n\
    \      } else if (paren_group[i] === \")\") {\n        current_nesting_level--;\n\
    \      }\n      if (current_nesting_level > max_nesting_level) {\n        max_nesting_level\
    \ = current_nesting_level;\n      }\n    }\n    return max_nesting_level;\n  });\n\
    \  return max_nesting_levels;\n}\n\nconsole.log(parse_nested_parens(\"(()())\"\
    ));\nconsole.log(parse_nested_parens(\"((()))\"));\nconsole.log(parse_nested_parens(\"\
    (()()) (())\"));\nconsole.log(parse_nested_parens(\"(()()) (()())\"));\nconsole.log(parse_nested_parens(\"\
    (()()) (()()) (()())\"));\nconsole.log(parse_nested_parens(\"(()()) (()()) (()())\
    \ (()())\"));\nconsole.log(parse_nested_parens(\"(()()) (()()) (()()) (()()) (()())\"\
    ));\nconsole.log(parse_nested_parens(\"(()()) (()()) (()()) (()()) (()()) (()())\"\
    ));\nconsole.log(parse_nested_parens(\"(()()) (()()) (()()) (()()) (()()) (()())\
    \ (()())\"));\nconsole.log(parse_nested_parens(\"(()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()())\"));\nconsole.log(parse_nested_parens(\"(()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()())\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 2 ]\n[ 3 ]\n[ 2, 2 ]\n[ 2, 2 ]\n[ 2, 2, 2 ]\n[ 2, 2, 2, 2 ]\n[ 2, 2,\
    \ 2, 2, 2 ]\n[ 2, 2, 2, 2, 2, 2 ]\n[\n  2, 2, 2, 2,\n  2, 2, 2\n]\n[\n  2, 2,\
    \ 2, 2,\n  2, 2, 2, 2\n]\n[\n  2, 2, 2, 2, 2,\n  2, 2, 2, 2\n]\n"
  timestamp: 1660014238
