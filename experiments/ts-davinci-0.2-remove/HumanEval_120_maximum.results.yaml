language: ts
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    return arr.sort((a, b) => b - a).slice(0, k);\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpvsmu8bav.js:20:12)\n    at Object.<anonymous> (/tmp/tmpvsmu8bav.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    const maxHeap\
    \ = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n\
    \    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpts9sdy7f.ts(12,25): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4,\
    \ 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -1)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -6)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp8nd1ole0.js:43:12)\n    at Object.<anonymous> (/tmp/tmp8nd1ole0.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, undefined ]

    [ 5 ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2,\
    \ 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpp2vb2ln8.js:34:12)\n    at Object.<anonymous> (/tmp/tmpp2vb2ln8.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let i: number =\
    \ 0;\n    let j: number = 0;\n    let n: number = arr.length;\n    while (i <\
    \ k) {\n        result[i] = arr[i];\n        i++;\n    }\n    result.sort((a,\
    \ b) => a - b);\n    while (i < n) {\n        if (arr[i] > result[0]) {\n    \
    \        result[0] = arr[i];\n            j = 0;\n            while (j < k - 1\
    \ && result[j] > result[j + 1]) {\n                let temp: number = result[j];\n\
    \                result[j] = result[j + 1];\n                result[j + 1] = temp;\n\
    \                j++;\n            }\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let i: number =\
    \ 0;\n    let j: number = 0;\n    for (i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.sort((a, b) => a - b);\n    for (i = k; i < arr.length; i++)\
    \ {\n        for (j = 0; j < k; j++) {\n            if (arr[i] > result[j]) {\n\
    \                result.splice(j, 0, arr[i]);\n                result.pop();\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  -4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmply_94dcm.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmply_94dcm.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, -4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    return arr.sort((a, b) => b - a).slice(0, k);\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpvsmu8bav.js:20:12)\n    at Object.<anonymous> (/tmp/tmpvsmu8bav.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpxa4d60ia.js:31:12)\n    at Object.<anonymous> (/tmp/tmpxa4d60ia.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a\
    \ - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 4, 5 ]

    [ 2, 3 ]

    [ 1, 2 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp3awwxrfw.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3awwxrfw.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([-1, -2, -3, -4, -5], 2));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5], 3));\nconsole.log(maximum([-1, -2, -3, -4, -5], 4));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5], 5));\nconsole.log(maximum([-1, -2, -3, -4, -5], 1));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5], 0));\nconsole.log(maximum([-1, -2, -3, -4, -5], 6));\nconsole.log(maximum([-1,\
    \ -2, -3, -4, -5], -1));\nconsole.log(maximum([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10],\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr161gg_0.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = 0;\n    let index: number = 0;\n    for (let i = 0; i < k; i++) {\n      \
    \  max = arr[i];\n        index = i;\n        for (let j = i + 1; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             index = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[index] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp032_2yli.js:35:12)\n    at Object.<anonymous> (/tmp/tmp032_2yli.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let i: number =\
    \ 0;\n    let j: number = 0;\n    while (i < k) {\n        result[i] = arr[i];\n\
    \        i++;\n    }\n    result.sort((a, b) => a - b);\n    while (i < arr.length)\
    \ {\n        if (arr[i] > result[0]) {\n            result[0] = arr[i];\n    \
    \        j = 0;\n            while (j < k - 1 && result[j] > result[j + 1]) {\n\
    \                let temp: number = result[j];\n                result[j] = result[j\
    \ + 1];\n                result[j + 1] = temp;\n                j++;\n       \
    \     }\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(maximum([3,\
    \ 2, 1, 5, 6, 4], 2));\nconsole.log(maximum([3, 2, 3, 1, 2, 4, 5, 5, 6], 4));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5, 6 ]

    [ 4, 5, 5, 6 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphnf9hpag.js:34:12)\n    at Object.<anonymous> (/tmp/tmphnf9hpag.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphnf9hpag.js:34:12)\n    at Object.<anonymous> (/tmp/tmphnf9hpag.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let length = arr.length;\n\
    \    for (let i = 0; i < length; i++) {\n        let num = arr[i];\n        if\
    \ (result.length < k) {\n            result.push(num);\n        } else {\n   \
    \         let min = Math.min(...result);\n            if (num > min) {\n     \
    \           let index = result.indexOf(min);\n                result[index] =\
    \ num;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo3dl4tae.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpo3dl4tae.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([], 1));\nconsole.log(maximum([], 0));\n\
    console.log(maximum([], -1));\nconsole.log(maximum([1], 1));\nconsole.log(maximum([1],\
    \ 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1, 2], 1));\nconsole.log(maximum([1,\
    \ 2], 0));\nconsole.log(maximum([1, 2], -1));\nconsole.log(maximum([1, 2], 2));\n\
    console.log(maximum([1, 2], 3));\nconsole.log(maximum([1, 2], -3));\nconsole.log(maximum([1,\
    \ 2, 3], 1));\nconsole.log(maximum([1, 2, 3], 0));\nconsole.log(maximum([1, 2,\
    \ 3], -1));\nconsole.log(maximum([1, 2, 3], 2));\nconsole.log(maximum([1, 2, 3],\
    \ 3));\nconsole.log(maximum([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdjqoazmr.ts(51,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp3awwxrfw.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3awwxrfw.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphnf9hpag.js:34:12)\n    at Object.<anonymous> (/tmp/tmphnf9hpag.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4,\
    \ 5]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpcyi98jci.js:27:12)\n    at Object.<anonymous> (/tmp/tmpcyi98jci.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    const len = arr.length;\n\
    \    if (k === 0) {\n        return result;\n    }\n    for (let i = 0; i < len;\
    \ i++) {\n        const num = arr[i];\n        if (result.length < k) {\n    \
    \        result.push(num);\n            continue;\n        }\n        if (num\
    \ > result[0]) {\n            result.shift();\n            result.push(num);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3bygw1ov.ts(51,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptmi2nc4j.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n\
    \  let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpezo9pw6j.js:34:12)\n    at Object.<anonymous> (/tmp/tmpezo9pw6j.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpryqy875l.js:30:12)\n    at Object.<anonymous> (/tmp/tmpryqy875l.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  const len = arr.length;\n\
    \  if (k >= len) {\n    return arr.sort((a, b) => b - a);\n  }\n  for (let i =\
    \ 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b -\
    \ a);\n  for (let i = k; i < len; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpsskukgjr.js:34:12)\n    at Object.<anonymous> (/tmp/tmpsskukgjr.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpqyawk2ii.js:25:12)\n    at Object.<anonymous> (/tmp/tmpqyawk2ii.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2,\
    \ 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpxxu6mn9o.js:26:12)\n    at Object.<anonymous> (/tmp/tmpxxu6mn9o.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwny784vb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwny784vb.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let max: number[] = [];\n  for (let i = 0; i < k;\
    \ i++) {\n    max.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n\
    \    let min = Math.min(...max);\n    if (arr[i] > min) {\n      max.splice(max.indexOf(min),\
    \ 1, arr[i]);\n    }\n  }\n  return max;\n}\n\nconsole.log(maximum([1, 2, 3, 4,\
    \ 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpktgvbrmf.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpktgvbrmf.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let length = arr.length;\n\
    \    if (k === 0) {\n        return result;\n    }\n    if (k === length) {\n\
    \        return arr;\n    }\n    let left = 0;\n    let right = length - 1;\n\
    \    let index = partition(arr, left, right);\n    while (index !== k - 1) {\n\
    \        if (index > k - 1) {\n            right = index - 1;\n            index\
    \ = partition(arr, left, right);\n        } else {\n            left = index +\
    \ 1;\n            index = partition(arr, left, right);\n        }\n    }\n   \
    \ for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6_feh9bu.ts(21,17): error TS2304: Cannot find name
    ''partition''.

    ../../../../../tmp/tmp6_feh9bu.ts(25,21): error TS2304: Cannot find name ''partition''.

    ../../../../../tmp/tmp6_feh9bu.ts(28,21): error TS2304: Cannot find name ''partition''.

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], 1));\n\
    console.log(maximum([], -1));\nconsole.log(maximum([1], 1));\nconsole.log(maximum([1],\
    \ 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1], 2));\nconsole.log(maximum([1,\
    \ 2], 1));\nconsole.log(maximum([1, 2], 0));\nconsole.log(maximum([1, 2], -1));\n\
    console.log(maximum([1, 2], 2));\nconsole.log(maximum([1, 2], 3));\nconsole.log(maximum([1,\
    \ 2, 3], 1));\nconsole.log(maximum([1, 2, 3], 0));\nconsole.log(maximum([1, 2,\
    \ 3], -1));\nconsole.log(maximum([1, 2, 3], 2));\nconsole.log(maximum([1, 2, 3],\
    \ 3));\nconsole.log(maximum([1, 2, 3\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzg0y7dxy.ts(51,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzg0y7dxy.ts(51,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr3wnnenr.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpr3wnnenr.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [5, 4]\nconsole.log(maximum([3, 2, 1], 2)); // [3, 2]\nconsole.log(maximum([1,\
    \ 2], 2)); // [2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpdvx_s49x.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdvx_s49x.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr3wnnenr.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpr3wnnenr.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    [arr[i], arr[maxIndex]]\
    \ = [arr[maxIndex], arr[i]];\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpeqcfe9sj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpeqcfe9sj.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphnf9hpag.js:34:12)\n    at Object.<anonymous> (/tmp/tmphnf9hpag.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  const maxHeap = new\
    \ MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv0x5ebl6.ts(12,23): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978058
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a\
    \ - b);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    if (arr.length ===\
    \ 0) {\n        return result;\n    }\n    if (arr.length <= k) {\n        return\
    \ arr.sort((a, b) => b - a);\n    }\n    for (let i = 0; i < k; i++) {\n     \
    \   let max = arr[i];\n        let index = i;\n        for (let j = i + 1; j <\
    \ arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n\
    \                index = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[index] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpc_24gtze.js:39:12)\n    at Object.<anonymous> (/tmp/tmpc_24gtze.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,\
    \ 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\
    \ // []\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpszb_ip22.js:23:12)\n    at Object.<anonymous> (/tmp/tmpszb_ip22.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5 ]

    [ 5, 4, 3, 2, 1 ]

    []

    [ 5, 4, 3, 2, 1 ]

    '
  timestamp: 1659978059
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    if (arr.length ===\
    \ 0) {\n        return result;\n    }\n    if (arr.length === 1) {\n        return\
    \ arr;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.sort((a, b) => a - b);\n    for (let i = k; i < arr.length;\
    \ i++) {\n        if (arr[i] > result[0]) {\n            result.shift();\n   \
    \         result.push(arr[i]);\n            result.sort((a, b) => a - b);\n  \
    \      }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([],\
    \ 1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], -1));\nconsole.log(maximum([1],\
    \ 1));\nconsole.log(maximum([1], 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1,\
    \ 2], 1));\nconsole.log(maximum([1, 2], 0));\nconsole.log(maximum([1, 2], -1));\n\
    console.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3nv6e226.ts(54,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3nv6e226.ts(54,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    if (k === 0) {\n        return [];\n    }\n    if\
    \ (k === arr.length) {\n        return arr;\n    }\n    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp6x6k4fsz.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6x6k4fsz.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 4, 5 ]

    [ 3, 2 ]

    [ 1, 2 ]

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n\
    \  let index: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       index = j;\n      }\n    }\n    result.push(max);\n    arr[index] = -Infinity;\n\
    \    max = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp4hdrxcxs.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4hdrxcxs.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 0, 0\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let index: number\
    \ = 0;\n    while (index < k) {\n        let max: number = arr[0];\n        let\
    \ maxIndex: number = 0;\n        for (let i: number = 1; i < arr.length; i++)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i];\n        \
    \        maxIndex = i;\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(maxIndex, 1);\n        index++;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp7ugud4ex.js:34:12)\n    at Object.<anonymous> (/tmp/tmp7ugud4ex.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwny784vb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwny784vb.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let length = arr.length;\n\
    \    if (length === 0) {\n        return result;\n    }\n    if (k === 0) {\n\
    \        return result;\n    }\n    if (k >= length) {\n        return arr.sort((a,\
    \ b) => b - a);\n    }\n    let maxHeap = new MaxHeap();\n    for (let i = 0;\
    \ i < k; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for (let i = k; i\
    \ < length; i++) {\n        if (arr[i] > maxHeap.peek()) {\n            maxHeap.pop();\n\
    \            maxHeap.insert(arr[i]);\n        }\n    }\n    while (!maxHeap.isEmpty())\
    \ {\n        result.push(maxHeap.pop());\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpusv2roz1.ts(22,23): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  if (k === 0) return [];\n  if (k === arr.length) return\
    \ arr;\n  let result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n\
    \    while (\n      result.length > 0 &&\n      result[result.length - 1] < arr[i]\
    \ &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpninnmx6b.ts(47,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpninnmx6b.ts(47,9): error TS1005: '','' expected.

    '
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpryqy875l.js:30:12)\n    at Object.<anonymous> (/tmp/tmpryqy875l.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978056
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a\
    \ - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 4, 5 ]

    [ 2, 3 ]

    [ 1, 2 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  if (arr.length ===\
    \ 0) {\n    return result;\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpgubh4jrx.js:30:12)\n    at Object.<anonymous> (/tmp/tmpgubh4jrx.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978059
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        } else {\n            result.sort((a, b) => b - a);\n            if (arr[i]\
    \ > result[k - 1]) {\n                result[k - 1] = arr[i];\n            }\n\
    \        }\n    }\n    return result.sort((a, b) => b - a);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2, 3, 4\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpei7mxv95.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpei7mxv95.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6rs34sn6.ts(45,9): error TS1003: Identifier expected.

    '
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  let i = 0;\n  while\
    \ (i < k) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i\
    \ + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpfp5zg9cg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpfp5zg9cg.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp7xtmijf4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7xtmijf4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let i = 0;\n  while\
    \ (i < k) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4,\
    \ 5], 2)); // [5, 4]\nconsole.log(maximum([3, 2, 1], 2)); // [3, 2]\nconsole.log(maximum([1,\
    \ 2], 2)); // [2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpc_8eixkv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpc_8eixkv.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978061
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let res: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (res.length < k) {\n      res.push(arr[i]);\n    } else {\n \
    \     res.sort((a, b) => a - b);\n      if (arr[i] > res[0]) {\n        res[0]\
    \ = arr[i];\n      }\n    }\n  }\n  return res.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,4,5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 4)); // [2,3,4,5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5)); // [1,2,3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\
    \ // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6)); // [1,2,3,4,5]\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 4, 5 ]

    [ 3, 4, 5 ]

    [ 2, 3, 4, 5 ]

    [ 1, 2, 3, 4, 5 ]

    [ 5 ]

    []

    [ 1, 2, 3, 4, 5 ]

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let i: number =\
    \ 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        if (arr[i]\
    \ > arr[j]) {\n            result.push(arr[i]);\n            i++;\n        } else\
    \ {\n            result.push(arr[j]);\n            j--;\n        }\n    }\n  \
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpz3j4szs3.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz3j4szs3.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2 ]

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    const maxHeap\
    \ = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n\
    \    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpts9sdy7f.ts(12,25): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let len = arr.length;\n\
    \    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n        let\
    \ maxIndex = -1;\n        for (let j = 0; j < len; j++) {\n            if (arr[j]\
    \ > max) {\n                max = arr[j];\n                maxIndex = j;\n   \
    \         }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp5dj2hmfk.js:33:12)\n    at Object.<anonymous> (/tmp/tmp5dj2hmfk.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n   \
    \     index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpji8wc1bw.js:32:12)\n    at Object.<anonymous> (/tmp/tmpji8wc1bw.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    if (k === 0) {\n        return [];\n    }\n    if\
    \ (k === arr.length) {\n        return arr;\n    }\n    let result: number[] =\
    \ [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n\
    \    result.sort((a, b) => a - b);\n    for (let i = k; i < arr.length; i++) {\n\
    \        let j = k - 1;\n        while (j >= 0 && arr[i] > result[j]) {\n    \
    \        j--;\n        }\n        if (j < k - 1) {\n            result.splice(j\
    \ + 1, 0, arr[i]);\n            result.pop();\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy3uhmcrk.ts(52,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4,\
    \ 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -1)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -6)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp8nd1ole0.js:43:12)\n    at Object.<anonymous> (/tmp/tmp8nd1ole0.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, undefined ]

    [ 5 ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n   \
    \ while (i < k) {\n        let max = arr[i];\n        let maxIndex = i;\n    \
    \    for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] > max)\
    \ {\n                max = arr[j];\n                maxIndex = j;\n          \
    \  }\n        }\n        result.push(max);\n        arr[maxIndex] = arr[i];\n\
    \        arr[i] = max;\n        i++;\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpn1bsqt5s.js:38:12)\n    at Object.<anonymous> (/tmp/tmpn1bsqt5s.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5 ]

    []

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwny784vb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwny784vb.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        let max = arr[i];\n        let maxIndex = i;\n      \
    \  for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] > max) {\n\
    \                max = arr[j];\n                maxIndex = j;\n            }\n\
    \        }\n        result.push(max);\n        arr[maxIndex] = arr[i];\n     \
    \   arr[i] = max;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkft0reqs.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpkft0reqs.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2,\
    \ 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpxxu6mn9o.js:26:12)\n    at Object.<anonymous> (/tmp/tmpxxu6mn9o.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n\
    \  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n\
    \    maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpv4dwaxv9.js:35:12)\n    at Object.<anonymous> (/tmp/tmpv4dwaxv9.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -13));\nconsole.log(maximum([1, 2, 3, 4, 5], -14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -15));\nconsole.log(maximum([1, 2, 3, 4, 5], -16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -17));\nconsole.log(maximum([1, 2\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppj5c5_o3.ts(39,1): error TS1005: '','' expected.

    ../../../../../tmp/tmppj5c5_o3.ts(39,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  const maxHeap = new\
    \ MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv0x5ebl6.ts(12,23): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwny784vb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwny784vb.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8590f515.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr3wnnenr.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpr3wnnenr.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptmi2nc4j.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphnf9hpag.js:34:12)\n    at Object.<anonymous> (/tmp/tmphnf9hpag.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -13));\nconsole.log(maximum([1, 2, 3, 4, 5], -14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -15));\nconsole.log(maximum([1, 2, 3, 4, 5], -16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -17));\nconsole.log(maximum([1, 2\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppj5c5_o3.ts(39,1): error TS1005: '','' expected.

    ../../../../../tmp/tmppj5c5_o3.ts(39,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    let i = 0;\n \
    \   while (i < k) {\n        result.push(arr[i]);\n        i++;\n    }\n    result.sort((a,\
    \ b) => b - a);\n    while (i < arr.length) {\n        if (arr[i] > result[k -\
    \ 1]) {\n            result[k - 1] = arr[i];\n            result.sort((a, b) =>\
    \ b - a);\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp09no8pz4.js:51:12)\n    at Object.<anonymous> (/tmp/tmp09no8pz4.js:63:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2,\
    \ 1, undefined ]\n[ 5, 4, 3, 2, 1, undefined, undefined ]\n[ 5, 4, 3, 2, 1, undefined,\
    \ undefined, undefined ]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n\
    \  undefined, undefined,\n  undefined\n]\n[\n  5,         4,\n  3,         2,\n\
    \  1,         undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n\
    [\n  5,         4,\n  3,         2,\n  1,         undefined,\n  undefined, undefined,\n\
    \  undefined, undefined,\n  undefined\n]\n[\n  5,         4,\n  3,         2,\n\
    \  1,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined,\n  undefined\n]\n[\n  5,         4,\n  3,         2,\n\
    \  1,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n\
    [\n  5,         4,         3,\n  2,         1,         undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,\
    \ undefined,\n  undefined, undefined\n]\n[\n  5,         4,         3,\n  2, \
    \        1,         undefined,\n  undefined, undefined, undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,\
    \ undefined\n]\n[\n  5,         4,         3,\n  2,         1,         undefined,\n\
    \  undefined, undefined, undefined,\n  undefined, undefined, undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined\n]\n\
    [\n  5,         4,         3,\n  2,         1,         undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,"
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwny784vb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwny784vb.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp3awwxrfw.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3awwxrfw.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    if (arr.length ===\
    \ 0) {\n        return result;\n    }\n    let max: number = arr[0];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n          \
    \  max = arr[i];\n        }\n    }\n    let count: number = 0;\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] === max) {\n            count++;\n\
    \        }\n    }\n    if (count >= k) {\n        for (let i = 0; i < k; i++)\
    \ {\n            result.push(max);\n        }\n        return result;\n    }\n\
    \    let index: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n    \
    \    if (arr[i] === max) {\n            result[index] = max;\n            index++;\n\
    \        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ !== max) {\n            result[index] = arr[i];\n            index++;\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpm2nhrdd7.js:51:12)\n    at Object.<anonymous> (/tmp/tmpm2nhrdd7.js:63:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  const len = arr.length;\n\
    \  if (k === 0) {\n    return result;\n  }\n  if (k === len) {\n    return arr;\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let\
    \ i = k; i < len; i++) {\n    let j = k - 1;\n    while (j >= 0 && arr[i] > result[j])\
    \ {\n      j--;\n    }\n    if (j !== k - 1) {\n      result.splice(j + 1, 0,\
    \ arr[i]);\n      result.pop();\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa04m1vso.ts(52,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n  \
    \      for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n\
    \                max = arr[j];\n                maxIndex = j;\n            }\n\
    \        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n\
    \    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp76li6m_i.js:34:12)\n    at Object.<anonymous> (/tmp/tmp76li6m_i.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978061
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \  return arr.sort((a, b) => a - b).slice(arr.length - k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([3, 2, 1], 2)); // [2, 3]\n\
    console.log(maximum([1, 2], 2)); // [1, 2]\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 4, 5 ]

    [ 2, 3 ]

    [ 1, 2 ]

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp7xtmijf4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7xtmijf4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978059
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        } else {\n            result.sort((a, b) => a - b);\n            if (arr[i]\
    \ > result[0]) {\n                result[0] = arr[i];\n            }\n       \
    \ }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpja2qc8m_.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n  \
    \      for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n\
    \                max = arr[j];\n                maxIndex = j;\n            }\n\
    \        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n\
    \    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp8_am086p.js:33:12)\n    at Object.<anonymous> (/tmp/tmp8_am086p.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\ndescribe(\"maximum\", () => {\n  test(\"#1\"\
    , () => {\n    expect(maximum([1, 2, 3, 4, 5], 2)).toEqual([5, 4]);\n  });\n \
    \ test(\"#2\", () => {\n    expect(maximum([3, 2, 1], 2)).toEqual([3, 2]);\n \
    \ });\n  test(\"#3\", () => {\n    expect(maximum([1, 2], 2)).toEqual([2, 1]);\n\
    \  });\n});\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm595gg0i.ts(27,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpm595gg0i.ts(28,8): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpm595gg0i.ts(29,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpm595gg0i.ts(31,8): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpm595gg0i.ts(32,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpm595gg0i.ts(34,8): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpm595gg0i.ts(35,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let temp: number[]\
    \ = [];\n    let len: number = arr.length;\n    for (let i: number = 0; i < len;\
    \ i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        } else {\n            temp = result.slice();\n            for (let j:\
    \ number = 0; j < k; j++) {\n                if (arr[i] > temp[j]) {\n       \
    \             temp.splice(j, 0, arr[i]);\n                    break;\n       \
    \         }\n            }\n            result = temp.slice(0, k);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp9hrytd85.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9hrytd85.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(maximum([\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2witfoij.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphnf9hpag.js:34:12)\n    at Object.<anonymous> (/tmp/tmphnf9hpag.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    const maxHeap\
    \ = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n\
    \    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpts9sdy7f.ts(12,25): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        max = -Infinity;\n        maxIndex = -1;\n        for (let j = 0;\
    \ j < arr.length; j++) {\n            if (arr[j] > max) {\n                max\
    \ = arr[j];\n                maxIndex = j;\n            }\n        }\n       \
    \ result.push(max);\n        arr[maxIndex] = -Infinity;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpgynu9zie.js:36:12)\n    at Object.<anonymous> (/tmp/tmpgynu9zie.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6rs34sn6.ts(45,9): error TS1003: Identifier expected.

    '
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let i = 0;\n  while\
    \ (i < k) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i\
    \ + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpherkramy.js:35:12)\n    at Object.<anonymous> (/tmp/tmpherkramy.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpxf2kto0i.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxf2kto0i.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978063
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        let max = Number.MIN_SAFE_INTEGER;\n        let maxIndex\
    \ = -1;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j]\
    \ > max) {\n                max = arr[j];\n                maxIndex = j;\n   \
    \         }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcd3b3ufs.ts(13,26): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978063
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2,\
    \ 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6)); // []\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpvh2rf5ag.js:33:12)\n    at Object.<anonymous> (/tmp/tmpvh2rf5ag.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5 ]

    [ 5, 4, 3, 2, 1 ]

    []

    [ 5, 4, 3, 2, 1, undefined ]

    '
  timestamp: 1659978063
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    if (arr.length\
    \ === 0) {\n        return result;\n    }\n    if (arr.length <= k) {\n      \
    \  return arr.sort((a, b) => b - a);\n    }\n    for (let i = 0; i < k; i++) {\n\
    \        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    for\
    \ (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[k - 1]) {\n\
    \            let j = k - 1;\n            while (j >= 0 && arr[i] > result[j])\
    \ {\n                j--;\n            }\n            result.splice(j + 1, 0,\
    \ arr[i]);\n            result.pop();\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp7ujfz5d5.js:40:12)\n    at Object.<anonymous> (/tmp/tmp7ujfz5d5.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978063
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = 0;\n    let maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n   \
    \     max = -Infinity;\n        for (let j = 0; j < arr.length; j++) {\n     \
    \       if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex]\
    \ = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2],\
    \ 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpqvdgolxp.js:33:12)\n    at Object.<anonymous> (/tmp/tmpqvdgolxp.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978063
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n\
    \  let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpezo9pw6j.js:34:12)\n    at Object.<anonymous> (/tmp/tmpezo9pw6j.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(maximum([1, 2, 3, 4, 5], 23));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 24));\nconsole.log(maximum([1, 2, 3, 4, 5], 25));\nconsole.log(maximum([1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprwnfmoi8.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprwnfmoi8.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659978063
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const maxHeap = new MaxHeap();\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    const\
    \ result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ddylcmo.ts(11,25): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978063
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result[0] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprdg9_uxy.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprdg9_uxy.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978063
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a\
    \ - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2)); // [4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,4,5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1,2,3,4,5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 6)); // [1,2,3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], -1)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -6)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -9)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10)); // []\nconsole.log\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 4, 5 ]

    [ 3, 4, 5 ]

    [ 5 ]

    [ 1, 2, 3, 4, 5 ]

    []

    [ 1, 2, 3, 4, 5, undefined ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1659978063
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n   \
    \     index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpji8wc1bw.js:32:12)\n    at Object.<anonymous> (/tmp/tmpji8wc1bw.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978061
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptmi2nc4j.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a\
    \ - b);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwny784vb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwny784vb.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpryqy875l.js:30:12)\n    at Object.<anonymous> (/tmp/tmpryqy875l.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqintys6z.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978063
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpryqy875l.js:30:12)\n    at Object.<anonymous> (/tmp/tmpryqy875l.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  const sortedArr =\
    \ arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpdxjcodmk.js:25:12)\n    at Object.<anonymous> (/tmp/tmpdxjcodmk.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    '
  timestamp: 1659978064
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  const heap = new Heap(arr,\
    \ (a, b) => a > b);\n  for (let i = 0; i < k; i++) {\n    result.push(heap.pop());\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz8j3xkst.ts(12,20): error TS2552: Cannot find name
    ''Heap''. Did you mean ''heap''?

    '
  timestamp: 1659978063
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpryqy875l.js:30:12)\n    at Object.<anonymous> (/tmp/tmpryqy875l.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let len = arr.length;\n\
    \    if (len <= k) {\n        return arr.sort((a, b) => b - a);\n    }\n    for\
    \ (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a,\
    \ b) => b - a);\n    for (let i = k; i < len; i++) {\n        if (arr[i] > result[k\
    \ - 1]) {\n            let j = k - 1;\n            while (j >= 0 && arr[i] > result[j])\
    \ {\n                j--;\n            }\n            result.splice(j + 1, 0,\
    \ arr[i]);\n            result.pop();\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprt4vrlvq.ts(50,9): error TS1005: '','' expected.

    '
  timestamp: 1659978064
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  const maxHeap = new\
    \ MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv0x5ebl6.ts(12,23): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let max: number = arr[0];\n\
    \  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n\
    \    maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpukc8iov_.js:35:12)\n    at Object.<anonymous> (/tmp/tmpukc8iov_.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978064
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr3wnnenr.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpr3wnnenr.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    if (arr.length\
    \ === 0) {\n        return result;\n    }\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const num = arr[i];\n        if (result.length < k) {\n    \
    \        result.push(num);\n            result.sort((a, b) => b - a);\n      \
    \  } else {\n            if (num > result[k - 1]) {\n                result.pop();\n\
    \                result.push(num);\n                result.sort((a, b) => b -\
    \ a);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([],\
    \ 1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], -1));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphn98wqj_.js:45:12)\n    at Object.<anonymous> (/tmp/tmphn98wqj_.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5 ]

    []

    []

    []

    []

    []

    '
  timestamp: 1659978064
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  if (k === 0) {\n \
    \   return result;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    while (\n\
    \      result.length > 0 &&\n      result[result.length - 1] < arr[i] &&\n   \
    \   result.length + arr.length - i > k\n    ) {\n      result.pop();\n    }\n\
    \    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprwbx_b1t.ts(50,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprwbx_b1t.ts(50,9): error TS1005: '','' expected.

    '
  timestamp: 1659978063
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp7xtmijf4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7xtmijf4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwny784vb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwny784vb.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  if (arr.length === 0)\
    \ {\n    return result;\n  }\n  let max: number = arr[0];\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp129w78e_.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp129w78e_.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978064
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max),\
    \ 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpmgvpwglg.js:22:12)\n    at Object.<anonymous> (/tmp/tmpmgvpwglg.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978064
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpqyawk2ii.js:25:12)\n    at Object.<anonymous> (/tmp/tmpqyawk2ii.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphnf9hpag.js:34:12)\n    at Object.<anonymous> (/tmp/tmphnf9hpag.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5,\
    \ 4, 3]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\
    \ // [5, 4, 3, 2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpuejphr1b.js:22:12)\n    at Object.<anonymous> (/tmp/tmpuejphr1b.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1 ]

    '
  timestamp: 1659978064
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp3awwxrfw.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3awwxrfw.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = 0;\n    let maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n   \
    \     for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n\
    \                max = arr[j];\n                maxIndex = j;\n            }\n\
    \        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n  \
    \      max = 0;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2],\
    \ 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmplkvuktop.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmplkvuktop.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 0, 0\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978064
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpcx4xtza3.js:34:12)\n    at Object.<anonymous> (/tmp/tmpcx4xtza3.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, undefined ]

    '
  timestamp: 1659978064
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  const maxHeap = new\
    \ MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv0x5ebl6.ts(12,23): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n   \
    \     index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index,\
    \ 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpc8797_ca.js:29:12)\n    at Object.<anonymous> (/tmp/tmpc8797_ca.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978064
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a\
    \ - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 4, 5 ]\n[ 3, 4, 5 ]\n[ 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4,\
    \ 5, undefined ]\n[ 1, 2, 3, 4, 5, undefined, undefined ]\n[ 1, 2, 3, 4, 5, undefined,\
    \ undefined, undefined ]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n\
    \  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n\
    \  5,         undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n\
    [\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n\
    \  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n\
    \  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n\
    \  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n\
    [\n  1,         2,         3,\n  4,         5,         undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,\
    \ undefined,\n  undefined, undefined\n]\n[\n  1,         2,         3,\n  4, \
    \        5,         undefined,\n  undefined, undefined, undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,\
    \ undefined\n]\n[\n  1,         2,         3,\n  4,         5,         undefined,\n\
    \  undefined, undefined, undefined,\n  undefined, undefined, undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined\n]\n\
    [\n  1,         2,         3,\n  4,         5,         undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,"
  timestamp: 1659978064
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    if (k === 0) {\n        return [];\n    }\n    const\
    \ result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ while (result.length > 0 && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length\
    \ < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpp5k_xi_f.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp5k_xi_f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 4, 5 ]

    [ 3, 2 ]

    [ 1, 2 ]

    '
  timestamp: 1659978065
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  if (k === 0) return [];\n  if (k === arr.length) return\
    \ arr;\n  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    while (\n      result.length > 0 &&\n      result[result.length - 1]\
    \ < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp45kl0a20.js:50:12)\n\
    \    at Object.<anonymous> (/tmp/tmp45kl0a20.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 4, 5 ]

    [ 5 ]

    [ 1, 2, 3, 4, 5 ]

    []

    [ 1, 2, 3, 4, 5 ]

    [ 3, 4, 5 ]

    [ 2, 3, 4, 5 ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(maximum([1, 2, 3, 4, 5], 23));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 24));\nconsole.log(maximum([1, 2, 3, 4, 5], 25));\nconsole.log(maximum([1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkw2tbkpm.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpkw2tbkpm.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 2)); // [5, 4]\n\
    console.log(maximum([5, 4, 3, 2, 1], 3)); // [5, 4, 3]\nconsole.log(maximum([5,\
    \ 4, 3, 2, 1], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 5)); // [5, 4,\
    \ 3, 2, 1]\nconsole.log(maximum([5, 4, 3, 2, 1], 0)); // []\nconsole.log(maximum([],\
    \ 0)); // []\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp6vyouutr.js:36:12)\n    at Object.<anonymous> (/tmp/tmp6vyouutr.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5 ]

    [ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5 ]

    [ 5, 4, 3, 2, 1 ]

    []

    []

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp7xtmijf4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7xtmijf4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978059
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6rs34sn6.ts(45,9): error TS1003: Identifier expected.

    '
  timestamp: 1659978059
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\n\
    console.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 2)); // [5, 4]\n\
    console.log(maximum([5, 4, 3, 2, 1], 3)); // [5, 4, 3]\nconsole.log(maximum([5,\
    \ 4, 3, 2, 1], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 5)); // [5, 4,\
    \ 3, 2, 1]\nconsole.log(maximum([5, 4, 3, 2, 1], 0)); // []\nconsole.log(maximum([],\
    \ 0)); // []\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp6vyouutr.js:36:12)\n    at Object.<anonymous> (/tmp/tmp6vyouutr.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5 ]

    [ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5 ]

    [ 5, 4, 3, 2, 1 ]

    []

    []

    '
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 21));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6rs34sn6.ts(45,9): error TS1003: Identifier expected.

    '
  timestamp: 1659978059
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1,\
    \ 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr3wnnenr.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpr3wnnenr.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978058
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let len = arr.length;\n\
    \    if (len === 0) {\n        return result;\n    }\n    if (len <= k) {\n  \
    \      return arr;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    for (let i = k; i < len; i++) {\n        let min = Math.min(...result);\n\
    \        if (arr[i] > min) {\n            let index = result.indexOf(min);\n \
    \           result[index] = arr[i];\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpnujtbgvr.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnujtbgvr.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3,\
    \ 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp3awwxrfw.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3awwxrfw.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpziw_idu7.js:20:12)\n    at Object.<anonymous> (/tmp/tmpziw_idu7.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length && arr[i] > result[result.length\
    \ - 1] && result.length + arr.length - i > k) {\n            result.pop();\n \
    \       }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(maximum([\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphz4noeyb.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(maximum([\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2witfoij.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 0
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n   \
    \   result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a\
    \ - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 4, 5 ]\n[ 3, 4, 5 ]\n[ 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4,\
    \ 5, undefined ]\n[ 1, 2, 3, 4, 5, undefined, undefined ]\n[ 1, 2, 3, 4, 5, undefined,\
    \ undefined, undefined ]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n\
    \  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n\
    \  5,         undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n\
    [\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n\
    \  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n\
    \  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n\
    \  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n\
    \  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n \
    \ undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n\
    [\n  1,         2,         3,\n  4,         5,         undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,\
    \ undefined,\n  undefined, undefined\n]\n[\n  1,         2,         3,\n  4, \
    \        5,         undefined,\n  undefined, undefined, undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,\
    \ undefined\n]\n[\n  1,         2,         3,\n  4,         5,         undefined,\n\
    \  undefined, undefined, undefined,\n  undefined, undefined, undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined\n]\n\
    [\n  1,         2,         3,\n  4,         5,         undefined,\n  undefined,\
    \ undefined, undefined,\n  undefined, undefined, undefined,\n  undefined, undefined,"
  timestamp: 1659978064
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    if (arr.length\
    \ === 0) {\n        return result;\n    }\n    for (let i = 0; i < k; i++) {\n\
    \        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    for\
    \ (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[k - 1]) {\n\
    \            result[k - 1] = arr[i];\n            result.sort((a, b) => b - a);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], 1));\n\
    console.log(maximum([], -1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpj6pwj5l9.js:40:12)\n    at Object.<anonymous> (/tmp/tmpj6pwj5l9.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5 ]

    []

    [ 5, 4, 3, 2, 1, undefined ]

    []

    []

    []

    []

    '
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length > 0 && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7j37702.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        while (result.length && result[result.length\
    \ - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n\
    \        }\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 22));\nconsole.log(maximum([\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2witfoij.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978061
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n\
    \  let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); //\
    \ [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwx0whwwa.js:36:12)\n    at Object.<anonymous> (/tmp/tmpwx0whwwa.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    if (k === 0) {\n        return [];\n    }\n    if\
    \ (k === arr.length) {\n        return arr;\n    }\n    const result: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k) {\n            result.pop();\n        }\n        if (result.length < k)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4mlbzh38.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp4mlbzh38.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max),\
    \ 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpmgvpwglg.js:22:12)\n    at Object.<anonymous> (/tmp/tmpmgvpwglg.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978064
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp7xtmijf4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7xtmijf4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwny784vb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwny784vb.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978058
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = 0;\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp89nzhqfl.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp89nzhqfl.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let len = arr.length;\n\
    \  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex =\
    \ -1;\n    for (let j = 0; j < len; j++) {\n      if (arr[j] > max) {\n      \
    \  max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = -Infinity;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp1fl5gwvf.js:35:12)\n    at Object.<anonymous> (/tmp/tmp1fl5gwvf.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let max: number = arr[0];\n\
    \  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n    max = arr[0];\n    maxIndex = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpqfbtyeqv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpqfbtyeqv.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); //\
    \ [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\
    \ // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2,\
    \ 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpp2vb2ln8.js:34:12)\n    at Object.<anonymous> (/tmp/tmpp2vb2ln8.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp7xtmijf4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7xtmijf4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978059
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp_hxgx4py.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_hxgx4py.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, -Infinity ]

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpxf2kto0i.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxf2kto0i.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978063
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpxf2kto0i.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxf2kto0i.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978063
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  const num = arr[i];\n    if (result.length < k) {\n      result.push(num);\n\
    \      continue;\n    }\n    for (let j = 0; j < result.length; j++) {\n     \
    \ if (num > result[j]) {\n        result.splice(j, 0, num);\n        result.pop();\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp23_ekroj.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp23_ekroj.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    const maxHeap\
    \ = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n\
    \    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpts9sdy7f.ts(12,25): error TS2552: Cannot find name
    ''MaxHeap''. Did you mean ''maxHeap''?

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n\
    \  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp59n0qvz9.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp59n0qvz9.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 0, 0\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpcx4xtza3.js:34:12)\n    at Object.<anonymous> (/tmp/tmpcx4xtza3.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 5, 4, 3 ]

    [ 5, 4, 3, 2 ]

    [ 5, 4, 3, 2, 1 ]

    [ 5, 4, 3, 2, 1, undefined ]

    '
  timestamp: 1659978064
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\
    \nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\n\
    console.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmprq7ynabx.js:19:12)\n    at Object.<anonymous> (/tmp/tmprq7ynabx.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = 0;\n    let maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n   \
    \     max = -Infinity;\n        for (let j = 0; j < arr.length; j++) {\n     \
    \       if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex]\
    \ = -Infinity;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpq4ua8vj_.js:30:12)\n    at Object.<anonymous> (/tmp/tmpq4ua8vj_.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) =>\
    \ b - a);\n    for (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[k\
    \ - 1]) {\n            result[k - 1] = arr[i];\n            result.sort((a, b)\
    \ => b - a);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt92daaa5.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpt92daaa5.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] < result[k - 1]) {\n\
    \      continue;\n    }\n    for (let j = 0; j < k; j++) {\n      if (arr[i] >\
    \ result[j]) {\n        result.splice(j, 0, arr[i]);\n        result.pop();\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpm9f0zjf9.js:33:12)\n    at Object.<anonymous> (/tmp/tmpm9f0zjf9.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++)\
    \ {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphnf9hpag.js:34:12)\n    at Object.<anonymous> (/tmp/tmphnf9hpag.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978056
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptmi2nc4j.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978056
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  let i = 0;\n  while\
    \ (i < k) {\n    result.push(arr[i]);\n    i++;\n  }\n  result.sort((a, b) =>\
    \ b - a);\n  while (i < arr.length) {\n    if (arr[i] > result[k - 1]) {\n   \
    \   result.pop();\n      result.push(arr[i]);\n      result.sort((a, b) => b -\
    \ a);\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpiy9_90_f.js:34:12)\n    at Object.<anonymous> (/tmp/tmpiy9_90_f.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    let index: number = 0;\n    for (let i = 0; i < k; i++) {\n\
    \        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max)\
    \ {\n                max = arr[j];\n                index = j;\n            }\n\
    \        }\n        result.push(max);\n        arr[index] = -Infinity;\n     \
    \   max = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpk98yvweu.js:33:12)\n    at Object.<anonymous> (/tmp/tmpk98yvweu.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978066
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\n\
    console.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5],\
    \ 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2,\
    \ 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp42wy5dn0.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1659978066
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n\
    \      result[k - 1] = arr[i];\n      for (let j = k - 1; j > 0; j--) {\n    \
    \    if (result[j] > result[j - 1]) {\n          const temp = result[j];\n   \
    \       result[j] = result[j - 1];\n          result[j - 1] = temp;\n        }\n\
    \      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp0vc1v4a0.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0vc1v4a0.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978067
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let heap = new Heap<number>(arr, (a, b) => a - b);\n\
    \    let result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(heap.pop());\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3aig6nk1.ts(11,20): error TS2552: Cannot find name
    ''Heap''. Did you mean ''heap''?

    '
  timestamp: 1659978067
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n  \
    \      for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n\
    \                max = arr[j];\n                maxIndex = j;\n            }\n\
    \        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp4es6bzya.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4es6bzya.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978067
- exit_code: 2
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n\
    \        } else {\n            result.sort((a, b) => a - b);\n            if (arr[i]\
    \ > result[0]) {\n                result[0] = arr[i];\n            }\n       \
    \ }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2, 3, 4, 5], -\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn12_eic4.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1659978067
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1,\
    \ 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp0kgkq8yl.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0kgkq8yl.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5, 4 ]

    [ 3, 2 ]

    [ 2, 1 ]

    '
  timestamp: 1659978067
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n    const result: number[] = [];\n    const len = arr.length;\n\
    \    if (k === 0) {\n        return result;\n    }\n    if (k === len) {\n   \
    \     return arr;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.sort((a, b) => a - b);\n    for (let i = k; i < len; i++) {\n\
    \        if (arr[i] > result[0]) {\n            result.shift();\n            result.push(arr[i]);\n\
    \            result.sort((a, b) => a - b);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1],\
    \ 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpuyyq8_as.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuyyq8_as.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 4, 5 ]

    [ 2, 3 ]

    [ 1, 2 ]

    '
  timestamp: 1659978067
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[],\
    \ k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n\
    \  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  while (result.length && result[result.length - 1] < arr[i] && result.length\
    \ + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length <\
    \ k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,\
    \ 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\
    \ // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -1)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -2)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -4)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1,\
    \ 2, 3, 4, 5], -6)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -7)); // []\n\
    console.log(maximum([1, 2, 3, 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3,\
    \ 4, 5], -9)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -10)); //\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppvtoi94g.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmppvtoi94g.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 4, 5 ]

    [ 3, 4, 5 ]

    [ 2, 3, 4, 5 ]

    [ 1, 2, 3, 4, 5 ]

    [ 1, 2, 3, 4, 5 ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1659978068
