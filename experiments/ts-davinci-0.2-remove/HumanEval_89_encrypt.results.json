{
  "language": "ts",
  "name": "HumanEval_89_encrypt",
  "results": [
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let code = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpgt7oj2rv.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgt7oj2rv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\nconsole.log(encrypt('Hello World')); // Jgnnq Yqtnf\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encrypt('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encrypt('!@#$%^&*()_+')); // !@#$%^&*()_+\nconsole.log(encrypt('1234567890')); // 1234567890\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpey0jfrwq.js:35:12)\n    at Object.<anonymous> (/tmp/tmpey0jfrwq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq Yqtnf\ncdefghijklmnopqrstuvwxyzab\nCDEFGHIJKLMNOPQRSTUVWXYZAB\n!@#$%^&*()_+\n1234567890\n",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        encrypted += alphabet[(index + 2) % 26];\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmprp4kwm47.js:18:12)\n    at Object.<anonymous> (/tmp/tmprp4kwm47.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let code = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpgt7oj2rv.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgt7oj2rv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpeyjq8go5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpeyjq8go5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('ABC')); // CDE\nconsole.log(encrypt('XYZ')); // ZAB\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpfkhlg4tm.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfkhlg4tm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\nCDE\nZAB\nJgnnq Yqtnf!\n",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpivnd9mtj.js:29:12)\n    at Object.<anonymous> (/tmp/tmpivnd9mtj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmplw7kgwbw.js:29:12)\n    at Object.<anonymous> (/tmp/tmplw7kgwbw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c.match(/[a-z]/i)) {\n      let code = s.charCodeAt(i);\n      if ((code >= 65) && (code <= 77)) {\n        c = String.fromCharCode(code + 13);\n      } else if ((code >= 78) && (code <= 90)) {\n        c = String.fromCharCode(code - 13);\n      } else if ((code >= 97) && (code <= 109)) {\n        c = String.fromCharCode(code + 13);\n      } else if ((code >= 110) && (code <= 122)) {\n        c = String.fromCharCode(code - 13);\n      }\n    }\n    result += c;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpn_qdcasl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpn_qdcasl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpcio866cg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcio866cg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmppmnj8v19.js:29:12)\n    at Object.<anonymous> (/tmp/tmppmnj8v19.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            result += s[i];\n        } else {\n            let newIndex = (index + 2) % alphabet.length;\n            result += alphabet[newIndex];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpf24fi1sv.js:24:12)\n    at Object.<anonymous> (/tmp/tmpf24fi1sv.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = (charCode - 65 + 2) % 26 + 65;\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = (charCode - 97 + 2) % 26 + 97;\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpn1sviwd3.js:23:12)\n    at Object.<anonymous> (/tmp/tmpn1sviwd3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        let newCharCode = charCode;\n        if (charCode >= 65 && charCode <= 90) {\n            newCharCode = charCode + 2;\n            if (newCharCode > 90) {\n                newCharCode = newCharCode - 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            newCharCode = charCode + 2;\n            if (newCharCode > 122) {\n                newCharCode = newCharCode - 26;\n            }\n        }\n        result += String.fromCharCode(newCharCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmplx5ip56e.js:31:12)\n    at Object.<anonymous> (/tmp/tmplx5ip56e.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp67888_wq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp67888_wq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c.match(/[a-z]/i)) {\n      let code = s.charCodeAt(i);\n      if ((code >= 65) && (code <= 77)) {\n        c = String.fromCharCode(code + 13);\n      } else if ((code >= 78) && (code <= 90)) {\n        c = String.fromCharCode(code - 13);\n      } else if ((code >= 97) && (code <= 109)) {\n        c = String.fromCharCode(code + 13);\n      } else if ((code >= 110) && (code <= 122)) {\n        c = String.fromCharCode(code - 13);\n      }\n    }\n    result += c;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpn_qdcasl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpn_qdcasl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpeyjq8go5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpeyjq8go5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        result += String.fromCharCode(s.charCodeAt(i) + 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpxq1fpy48.js:16:12)\n    at Object.<anonymous> (/tmp/tmpxq1fpy48.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i: number = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpinxixxed.js:32:12)\n    at Object.<anonymous> (/tmp/tmpinxixxed.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpmbitpibg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpmbitpibg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp6kupls_k.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6kupls_k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = (ascii - 65 + 2 * 2) % 26 + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = (ascii - 97 + 2 * 2) % 26 + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ((ascii - 65 + 2 * 2) % 26) + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ((ascii - 97 + 2 * 2) % 26) + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('ABC')); // CDE\nconsole.log(encrypt('XYZ')); // ZAB\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encrypt('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encrypt('The quick brown fox jumps over the lazy dog.')); // Vjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "efg\nbcd\nEFG\nBCD\nLipps Asvph!\nefghijklmnopqrstuvwxyzabcd\nEFGHIJKLMNOPQRSTUVWXYZABCD\nXli uymgo fvsar jsb nyqtw sziv xli pedc hsk.\n",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encrypted = '';\n    for (let i = 0; i < s.length; i++) {\n        const letter = s[i];\n        const index = alphabet.indexOf(letter);\n        const newIndex = (index + 2) % alphabet.length;\n        encrypted += alphabet[newIndex];\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpw3w8l9zf.js:20:12)\n    at Object.<anonymous> (/tmp/tmpw3w8l9zf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let newAlphabet = alphabet.slice(2) + alphabet.slice(0, 2);\n    let newString = '';\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            newString += s[i];\n        } else {\n            newString += newAlphabet[index];\n        }\n    }\n    return newString;\n}\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('hello')); // jgnnq\nconsole.log(encrypt('hello world')); // jgnnq yqtnf\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpl065z44f.js:28:12)\n    at Object.<anonymous> (/tmp/tmpl065z44f.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\njgnnq\njgnnq yqtnf\n",
      "timestamp": 1660333666
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                char = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                char = String.fromCharCode(code - 13);\n            }\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpvda25tyi.js:32:12)\n    at Object.<anonymous> (/tmp/tmpvda25tyi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333666
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        let index: number = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            encrypted += s[i];\n        } else {\n            let newIndex: number = index + 2 * 2;\n            if (newIndex > 25) {\n                newIndex -= 26;\n            }\n            encrypted += alphabet[newIndex];\n        }\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333666
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp67888_wq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp67888_wq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpjgp3rcyy.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjgp3rcyy.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char: string = s[i];\n        let charCode: number = char.charCodeAt(0);\n        let newCharCode: number = charCode + (2 * 2);\n        let newChar: string = String.fromCharCode(newCharCode);\n        result += newChar;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jei{je{ijei{k'\n\nshould loosely deep-equal\n\n'jeiajeaijeiak'\n    at test (/tmp/tmp8djr9a_4.js:24:12)\n    at Object.<anonymous> (/tmp/tmp8djr9a_4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jei{je{ijei{k',\n  expected: 'jeiajeaijeiak',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        encrypted += alphabet[(index + 2) % 26];\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmprp4kwm47.js:18:12)\n    at Object.<anonymous> (/tmp/tmprp4kwm47.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmplw7kgwbw.js:29:12)\n    at Object.<anonymous> (/tmp/tmplw7kgwbw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ascii + 2;\n            if (ascii > 90) {\n                ascii = ascii - 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ascii + 2;\n            if (ascii > 122) {\n                ascii = ascii - 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpyo5zuuvt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpyo5zuuvt.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            result += s[i];\n        } else {\n            result += alphabet[(index + 2) % 26];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpucmi0s98.js:23:12)\n    at Object.<anonymous> (/tmp/tmpucmi0s98.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ascii + 2;\n            if (ascii > 90) {\n                ascii = ascii - 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ascii + 2;\n            if (ascii > 122) {\n                ascii = ascii - 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('ABC')); // CDE\nconsole.log(encrypt('XYZ')); // ZAB\nconsole.log(encrypt('The quick brown fox jumps over the lazy dog.')); // Vjg swkem dtqyp hqz lworu jxhgswkbs dtqyp oqfbo axeb.\nconsole.log(encrypt('There are two types of people in the world: those who know binary and those who don\\'t.')); // Vjku ku c ecp uggu vjg yknn ctg rqpgu vq xctkqp vjg yknn ku c ecp uggu.\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpxypx8zad.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxypx8zad.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\nCDE\nZAB\nVjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.\nVjgtg ctg vyq vargu qh rgqrng kp vjg yqtnf: vjqug yjq mpqy dkpcta cpf vjqug yjq fqp'v.\n",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\nconsole.log(encrypt('Genius without education is like silver in the mine'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmph3el6skh.js:33:12)\n    at Object.<anonymous> (/tmp/tmph3el6skh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Travhf jvgubhg rqhpngvba vf yvxr fvyire va gur zvar\n",
      "timestamp": 1660333667
    },
    {
      "exit_code": 2,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ((ascii - 65 + 2) % 26) + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ((ascii - 97 + 2) % 26) + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt(\"cat\")); // \"ecv\"\nconsole.log(encrypt(\"zzz\")); // \"bbb\"\nconsole.log(encrypt(\"abc\")); // \"cde\"\nconsole.log(encrypt(\"xyz\")); // \"zab\"\nconsole.log(encrypt(\"ABC\")); // \"CDE\"\nconsole.log(encrypt(\"XYZ\")); // \"ZAB\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World!\")); // \"Jgnnq Yqtnf!\"\nconsole.log(encrypt(\"Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbevftyep.ts(37,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmpbevftyep.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpbevftyep.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333666
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let encrypted = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    encrypted += alphabet[(index + 2) % 26];\n  }\n  return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpkis7f2sn.js:18:12)\n    at Object.<anonymous> (/tmp/tmpkis7f2sn.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp67888_wq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp67888_wq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpeyjq8go5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpeyjq8go5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        encrypted += alphabet[(index + 2) % 26];\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmprp4kwm47.js:18:12)\n    at Object.<anonymous> (/tmp/tmprp4kwm47.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            result += String.fromCharCode((charCode - 65 + 2 * 2) % 26 + 65);\n        } else if (charCode >= 97 && charCode <= 122) {\n            result += String.fromCharCode((charCode - 97 + 2 * 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let ascii = s.charCodeAt(i);\n    if (ascii >= 65 && ascii <= 90) {\n      result += String.fromCharCode((ascii - 65 + 2 * 2) % 26 + 65);\n    } else if (ascii >= 97 && ascii <= 122) {\n      result += String.fromCharCode((ascii - 97 + 2 * 2) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        let newIndex = index * 2;\n        if (newIndex > 25) {\n            newIndex = newIndex % 26;\n        }\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // 'cde'\nconsole.log(encrypt('xyz')); // 'zab'\nconsole.log(encrypt('hello')); // 'jgnnq'\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'oq'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp_r4_duay.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_r4_duay.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'oq',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ace\nuwy\noiwwc\n",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = charCode + 2;\n            if (charCode > 90) {\n                charCode = charCode - 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = charCode + 2;\n            if (charCode > 122) {\n                charCode = charCode - 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp3p3rlooa.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3p3rlooa.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char: string = s[i];\n        let charCode: number = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp231ackiq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp231ackiq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\nconsole.log(encrypt('Genius without education is like silver in the mine'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpoqv8jn4c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpoqv8jn4c.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Travhf jvgubhg rqhpngvba vf yvxr fvyire va gur zvar\n",
      "timestamp": 1660333667
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = ((charCode - 65 + 2 * 2) % 26) + 65;\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = ((charCode - 97 + 2 * 2) % 26) + 97;\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpqra5s0ki.js:30:12)\n    at Object.<anonymous> (/tmp/tmpqra5s0ki.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = (ascii - 65 + 2 * 2) % 26 + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = (ascii - 97 + 2 * 2) % 26 + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmps_faxbwi.js:32:12)\n    at Object.<anonymous> (/tmp/tmps_faxbwi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            result += String.fromCharCode((ascii - 65 + 2 * 2) % 26 + 65);\n        } else if (ascii >= 97 && ascii <= 122) {\n            result += String.fromCharCode((ascii - 97 + 2 * 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ascii + 2;\n            if (ascii > 90) {\n                ascii = ascii - 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ascii + 2;\n            if (ascii > 122) {\n                ascii = ascii - 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp1vphzezg.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1vphzezg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ((ascii - 65 + 2 * 2) % 26) + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ((ascii - 97 + 2 * 2) % 26) + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('ABC')); // CDE\nconsole.log(encrypt('XYZ')); // ZAB\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "efg\nbcd\nEFG\nBCD\nLipps Asvph!\nLipps Asvph!\n",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp6kupls_k.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6kupls_k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpi2ehfyfb.js:32:12)\n    at Object.<anonymous> (/tmp/tmpi2ehfyfb.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\nJgnnq Yqtnf!\n",
      "timestamp": 1660333669
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp67888_wq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp67888_wq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        if (index > -1) {\n            let newIndex = (index + 2) % alphabet.length;\n            result += alphabet[newIndex];\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpg0tpv2ja.js:25:12)\n    at Object.<anonymous> (/tmp/tmpg0tpv2ja.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = (ascii - 65 + 2 * 2) % 26 + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = (ascii - 97 + 2 * 2) % 26 + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmppmnj8v19.js:29:12)\n    at Object.<anonymous> (/tmp/tmppmnj8v19.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpcio866cg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcio866cg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2 * 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2 * 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encrypted = '';\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        let newIndex = index + 2 * 2;\n        if (newIndex > 25) {\n            newIndex = newIndex - 26;\n        }\n        encrypted += alphabet[newIndex];\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77))\n                c = String.fromCharCode(code + 13);\n            else if ((code >= 78) && (code <= 90))\n                c = String.fromCharCode(code - 13);\n            else if ((code >= 97) && (code <= 109))\n                c = String.fromCharCode(code + 13);\n            else if ((code >= 110) && (code <= 122))\n                c = String.fromCharCode(code - 13);\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp9f6_hpca.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9f6_hpca.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                char = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                char = String.fromCharCode(code - 13);\n            }\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp7podea6p.js:32:12)\n    at Object.<anonymous> (/tmp/tmp7podea6p.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmplw7kgwbw.js:29:12)\n    at Object.<anonymous> (/tmp/tmplw7kgwbw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        const c = s.charCodeAt(i);\n        if (c >= 65 && c <= 90) {\n            result += String.fromCharCode((c - 65 + 2) % 26 + 65);\n        } else if (c >= 97 && c <= 122) {\n            result += String.fromCharCode((c - 97 + 2) % 26 + 97);\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpaohi6tyg.js:25:12)\n    at Object.<anonymous> (/tmp/tmpaohi6tyg.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 77) {\n            result += String.fromCharCode(code + 13);\n        } else if (code >= 78 && code <= 90) {\n            result += String.fromCharCode(code - 13);\n        } else if (code >= 97 && code <= 109) {\n            result += String.fromCharCode(code + 13);\n        } else if (code >= 110 && code <= 122) {\n            result += String.fromCharCode(code - 13);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpfddmduk1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpfddmduk1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = charCode + 2;\n            if (charCode > 90) {\n                charCode = 65 + (charCode - 90) - 1;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = charCode + 2;\n            if (charCode > 122) {\n                charCode = 97 + (charCode - 122) - 1;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpo_gpi1zv.js:29:12)\n    at Object.<anonymous> (/tmp/tmpo_gpi1zv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = (charCode - 65 + 2 * 2) % 26 + 65;\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = (charCode - 97 + 2 * 2) % 26 + 97;\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let code = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpgt7oj2rv.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgt7oj2rv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            result += s[i];\n        } else {\n            result += alphabet[(index + 2) % 26];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp9r8rab_g.js:23:12)\n    at Object.<anonymous> (/tmp/tmp9r8rab_g.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let result: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        let index: number = alphabet.indexOf(s[i]);\n        let newIndex: number = (index + 2) * 2;\n        if (newIndex > 25) {\n            newIndex = newIndex - 26;\n        }\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'su'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp04t3du4x.js:22:12)\n    at Object.<anonymous> (/tmp/tmp04t3du4x.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'su',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = (ascii - 65 + 2 * 2) % 26 + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = (ascii - 97 + 2 * 2) % 26 + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ((ascii - 65 + 2 * 2) % 26) + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ((ascii - 97 + 2 * 2) % 26) + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpcio866cg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcio866cg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        let newIndex = index * 2;\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'oq'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpd1cc0svl.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd1cc0svl.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'oq',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ascii + 2;\n            if (ascii > 90) {\n                ascii = ascii - 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ascii + 2;\n            if (ascii > 122) {\n                ascii = ascii - 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp45kjqk99.js:29:12)\n    at Object.<anonymous> (/tmp/tmp45kjqk99.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('abc xyz')); // cde zab\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp6bb2cpfp.js:33:12)\n    at Object.<anonymous> (/tmp/tmp6bb2cpfp.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\nJgnnq Yqtnf!\ncde zab\n",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp67888_wq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp67888_wq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpeyjq8go5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpeyjq8go5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        let index: number = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            encrypted += s[i];\n        } else {\n            encrypted += alphabet[(index + 2) % 26];\n        }\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpue498bih.js:23:12)\n    at Object.<anonymous> (/tmp/tmpue498bih.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpivnd9mtj.js:29:12)\n    at Object.<anonymous> (/tmp/tmpivnd9mtj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        if (index === -1) {\n            result += c;\n        } else {\n            let newIndex = index + 2 * 2;\n            if (newIndex >= alphabet.length) {\n                newIndex -= alphabet.length;\n            }\n            result += alphabet[newIndex];\n        }\n    }\n    return result;\n}\n\nconsole.log(encrypt(\"cat\"));\nconsole.log(encrypt(\"zzz\"));\nconsole.log(encrypt(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "gex\nddd\nefg\n",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let encryptedString = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = charCode + 2;\n            if (charCode > 90) {\n                charCode = charCode - 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = charCode + 2;\n            if (charCode > 122) {\n                charCode = charCode - 26;\n            }\n        }\n        encryptedString += String.fromCharCode(charCode);\n    }\n    return encryptedString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpp15b3iy2.js:29:12)\n    at Object.<anonymous> (/tmp/tmpp15b3iy2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    return s.split('').map(c => {\n        if (c.match(/[a-z]/i)) {\n            return String.fromCharCode(c.charCodeAt(0) + 2);\n        }\n        return c;\n    }).join('');\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encrypt('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encrypt('The quick brown fox jumps over the lazy dog.')); // Vjg swkem dtqyp hqz lworu qxgt vjg swkem rwt fqi.\nconsole.log(encrypt('There are, as you can see, many punctuations. Right?')); // Vjku ku, ctg rtqpgu, ocpa rwpevwuv. Tkijv?\nconsole.log(encrypt('1234567890!@#$%^&*()-_=+[{]}\\\\|;:\\'\",<.>/?')); // 1234567890!@#$%^&*()-_=+[{]}\\\\|;:\\'\",<.>/?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmppodv8i9w.js:25:12)\n    at Object.<anonymous> (/tmp/tmppodv8i9w.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nz{|\nJgnnq Yqtnf!\ncdefghijklmnopqrstuvwxyz{|\nCDEFGHIJKLMNOPQRSTUVWXYZ[\\\nVjg swkem dtqyp hqz lworu qxgt vjg nc|{ fqi.\nVjgtg ctg, cu {qw ecp ugg, ocp{ rwpevwcvkqpu. Tkijv?\n1234567890!@#$%^&*()-_=+[{]}\\|;:'\",<.>/?\n",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ascii + 2;\n            if (ascii > 90) {\n                ascii = ascii - 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ascii + 2;\n            if (ascii > 122) {\n                ascii = ascii - 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp2h87ppor.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2h87ppor.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                char = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                char = String.fromCharCode(code - 13);\n            }\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp7podea6p.js:32:12)\n    at Object.<anonymous> (/tmp/tmp7podea6p.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\nconsole.log(encrypt(\"abc\"));\nconsole.log(encrypt(\"xyz\"));\nconsole.log(encrypt(\"ABC\"));\nconsole.log(encrypt(\"XYZ\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpoufxv_xn.js:34:12)\n    at Object.<anonymous> (/tmp/tmpoufxv_xn.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\nCDE\nZAB\n",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                char = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                char = String.fromCharCode(code - 13);\n            }\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpvda25tyi.js:32:12)\n    at Object.<anonymous> (/tmp/tmpvda25tyi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333666
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ascii + 2;\n            if (ascii > 90) {\n                ascii = ascii - 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ascii + 2;\n            if (ascii > 122) {\n                ascii = ascii - 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt(\"abc\"));\nconsole.log(encrypt(\"xyz\"));\nconsole.log(encrypt(\"ABC\"));\nconsole.log(encrypt(\"XYZ\"));\nconsole.log(encrypt(\"Hello World!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpijbkjq8l.js:34:12)\n    at Object.<anonymous> (/tmp/tmpijbkjq8l.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\nCDE\nZAB\nJgnnq Yqtnf!\n",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        encrypted += alphabet[(index + 2) % 26];\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmprp4kwm47.js:18:12)\n    at Object.<anonymous> (/tmp/tmprp4kwm47.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    let charCode = char.charCodeAt(0);\n    if (charCode >= 65 && charCode <= 90) {\n      charCode = (charCode - 65 + 2 * 2) % 26 + 65;\n    } else if (charCode >= 97 && charCode <= 122) {\n      charCode = (charCode - 97 + 2 * 2) % 26 + 97;\n    }\n    result += String.fromCharCode(charCode);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333673
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let encryptedString = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            encryptedString += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n        } else if (charCode >= 97 && charCode <= 122) {\n            encryptedString += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n        } else {\n            encryptedString += s[i];\n        }\n    }\n    return encryptedString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0lvq_3z3.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0lvq_3z3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333673
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 77) {\n            charCode += 20;\n        } else if (charCode >= 78 && charCode <= 90) {\n            charCode -= 20;\n        } else if (charCode >= 97 && charCode <= 109) {\n            charCode += 20;\n        } else if (charCode >= 110 && charCode <= 122) {\n            charCode -= 20;\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'|}'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpzvjdb4lc.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzvjdb4lc.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '|}',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333673
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\nconsole.log(encrypt('Genius without education is like silver in the mine'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpoqv8jn4c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpoqv8jn4c.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Travhf jvgubhg rqhpngvba vf yvxr fvyire va gur zvar\n",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            result += String.fromCharCode((code - 65 + 2 * 2) % 26 + 65);\n        } else if (code >= 97 && code <= 122) {\n            result += String.fromCharCode((code - 97 + 2 * 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333673
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        encrypted += alphabet[(index + 2) % 26];\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmprp4kwm47.js:18:12)\n    at Object.<anonymous> (/tmp/tmprp4kwm47.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        if (index === -1) {\n            result += c;\n        } else {\n            result += alphabet[(index + 2) % alphabet.length];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpf0q9m8o0.js:24:12)\n    at Object.<anonymous> (/tmp/tmpf0q9m8o0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        encrypted += alphabet[(index + (2 * 2)) % 26];\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        result += String.fromCharCode(s.charCodeAt(i) + 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpxq1fpy48.js:16:12)\n    at Object.<anonymous> (/tmp/tmpxq1fpy48.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += String.fromCharCode(s.charCodeAt(i) + 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp1iejgsch.js:16:12)\n    at Object.<anonymous> (/tmp/tmp1iejgsch.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let code = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpjjyh0s15.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjjyh0s15.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc'));\nconsole.log(encrypt('xyz'));\nconsole.log(encrypt('Hello World'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpepjfnocz.js:32:12)\n    at Object.<anonymous> (/tmp/tmpepjfnocz.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\nJgnnq Yqtnf\n",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                char = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                char = String.fromCharCode(code - 13);\n            }\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp7podea6p.js:32:12)\n    at Object.<anonymous> (/tmp/tmp7podea6p.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpivnd9mtj.js:29:12)\n    at Object.<anonymous> (/tmp/tmpivnd9mtj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            result += String.fromCharCode((ascii - 65 + 2 * 2) % 26 + 65);\n        } else if (ascii >= 97 && ascii <= 122) {\n            result += String.fromCharCode((ascii - 97 + 2 * 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c === ' ') {\n            result += c;\n            continue;\n        }\n        let index = alphabet.indexOf(c);\n        let newIndex = index * 2;\n        if (newIndex >= alphabet.length) {\n            newIndex = newIndex % alphabet.length;\n        }\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\nconsole.log(encrypt('cat')); // 'fiv'\nconsole.log(encrypt('map')); // 'ocq'\nconsole.log(encrypt('hello world')); // 'jgnnq yqtnf'\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'oq'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp4z31a4tj.js:30:12)\n    at Object.<anonymous> (/tmp/tmp4z31a4tj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'oq',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "eam\nyae\noiwwc sciwg\n",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char: string = s[i];\n        let charCode: number = char.charCodeAt(0);\n        let newCharCode: number = charCode + 2 * 2;\n        let newChar: string = String.fromCharCode(newCharCode);\n        result += newChar;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jei{je{ijei{k'\n\nshould loosely deep-equal\n\n'jeiajeaijeiak'\n    at test (/tmp/tmpxolkbik4.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxolkbik4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jei{je{ijei{k',\n  expected: 'jeiajeaijeiak',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333675
    },
    {
      "exit_code": 2,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('ABC')); // CDE\nconsole.log(encrypt('XYZ')); // ZAB\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4zjybosj.ts(42,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4zjybosj.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp4zjybosj.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333674
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2 * 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2 * 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = ((charCode - 65 + 2) % 26) + 65;\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = ((charCode - 97 + 2) % 26) + 97;\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpwh0xkqo0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwh0xkqo0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        result += alphabet[(index + 2) % 26];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpo5crnwlk.js:18:12)\n    at Object.<anonymous> (/tmp/tmpo5crnwlk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2 * 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2 * 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333675
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            result += String.fromCharCode((code - 65 + 2) % 26 + 65);\n        } else if (code >= 97 && code <= 122) {\n            result += String.fromCharCode((code - 97 + 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp7vkezdd1.js:25:12)\n    at Object.<anonymous> (/tmp/tmp7vkezdd1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            result += String.fromCharCode((ascii - 65 + 2 * 2) % 26 + 65);\n        } else if (ascii >= 97 && ascii <= 122) {\n            result += String.fromCharCode((ascii - 97 + 2 * 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let ascii = s.charCodeAt(i);\n    if (ascii >= 65 && ascii <= 90) {\n      ascii += 2;\n      if (ascii > 90) {\n        ascii -= 26;\n      }\n    } else if (ascii >= 97 && ascii <= 122) {\n      ascii += 2;\n      if (ascii > 122) {\n        ascii -= 26;\n      }\n    }\n    result += String.fromCharCode(ascii);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpgeupetu8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgeupetu8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333675
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77))\n                c = String.fromCharCode(code + 13);\n            else if ((code >= 78) && (code <= 90))\n                c = String.fromCharCode(code - 13);\n            else if ((code >= 97) && (code <= 109))\n                c = String.fromCharCode(code + 13);\n            else if ((code >= 110) && (code <= 122))\n                c = String.fromCharCode(code - 13);\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp9f6_hpca.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9f6_hpca.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        let newIndex = index * 2;\n        if (newIndex > 25) {\n            newIndex = newIndex % 26;\n        }\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'oq'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpnjhqc3q4.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnjhqc3q4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'oq',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333675
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2 * 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2 * 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            encrypted += s[i];\n        } else {\n            encrypted += alphabet[(index + (2 * 2)) % alphabet.length];\n        }\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333675
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let code = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpgt7oj2rv.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgt7oj2rv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp67888_wq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp67888_wq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        let newIndex = index * 2;\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'oq'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmplzcu_l5v.js:20:12)\n    at Object.<anonymous> (/tmp/tmplzcu_l5v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'oq',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpeyjq8go5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpeyjq8go5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp67888_wq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp67888_wq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77))\n                c = String.fromCharCode(code + 13);\n            else if ((code >= 78) && (code <= 90))\n                c = String.fromCharCode(code - 13);\n            else if ((code >= 97) && (code <= 109))\n                c = String.fromCharCode(code + 13);\n            else if ((code >= 110) && (code <= 122))\n                c = String.fromCharCode(code - 13);\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp9f6_hpca.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9f6_hpca.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333670
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp67888_wq.js:30:12)\n    at Object.<anonymous> (/tmp/tmp67888_wq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            result += String.fromCharCode((charCode - 65 + 2 * 2) % 26 + 65);\n        } else if (charCode >= 97 && charCode <= 122) {\n            result += String.fromCharCode((charCode - 97 + 2 * 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp0muohb2a.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0muohb2a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            result += String.fromCharCode((ascii - 65 + 2) % 26 + 65);\n        } else if (ascii >= 97 && ascii <= 122) {\n            result += String.fromCharCode((ascii - 97 + 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(encrypt('Hello World')); // Jgnnq Yqtnf\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encrypt('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encrypt('The quick brown fox jumps over the lazy dog.')); // Vjg swkem dtqyp hqz lworu jnmbx nx ymj rfsg kv.\nconsole.log(encrypt('There are, as you can see, many punctuations. Right?')); // Vjku ku, ctg rtqp ecp ugg, ocpa rwpevwcvkqpu. Tkijv?\nconsole.log(encrypt('1234567890')); // 1234567890\nconsole.log(encrypt('!@#$%^&*()~`-=_+[]{}|;:\",./<>?')); // !@#$%^&*()~`-=_+[]{}|;:\",./<>?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpbqxwrjte.js:32:12)\n    at Object.<anonymous> (/tmp/tmpbqxwrjte.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq Yqtnf\ncdefghijklmnopqrstuvwxyzab\nCDEFGHIJKLMNOPQRSTUVWXYZAB\nVjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.\nVjgtg ctg, cu aqw ecp ugg, ocpa rwpevwcvkqpu. Tkijv?\n1234567890\n!@#$%^&*()~`-=_+[]{}|;:\",./<>?\n",
      "timestamp": 1660333675
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpcio866cg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcio866cg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2 * 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2 * 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp8dai64fs.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8dai64fs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333675
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            result += String.fromCharCode((ascii - 65 + 2 * 2) % 26 + 65);\n        } else if (ascii >= 97 && ascii <= 122) {\n            result += String.fromCharCode((ascii - 97 + 2 * 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('ABC')); // CDE\nconsole.log(encrypt('XYZ')); // ZAB\nconsole.log(encrypt('!@#$%^&*()')); // !@#$%^&*()\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encrypt('Hello World!')); // Jgnnq Yqtn\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "efg\nbcd\nEFG\nBCD\n!@#$%^&*()\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\nLipps Asvph!\n",
      "timestamp": 1660333676
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = charCode + 2;\n            if (charCode > 90) {\n                charCode = charCode - 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = charCode + 2;\n            if (charCode > 122) {\n                charCode = charCode - 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpg05t7y20.js:30:12)\n    at Object.<anonymous> (/tmp/tmpg05t7y20.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333676
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i: number = 0; i < s.length; i++) {\n        let char: string = s[i];\n        let code: number = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpsm4g5b8x.js:30:12)\n    at Object.<anonymous> (/tmp/tmpsm4g5b8x.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333676
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    encrypted += alphabet[(index + 2) % 26];\n  }\n  return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpgrwznwum.js:18:12)\n    at Object.<anonymous> (/tmp/tmpgrwznwum.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333676
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = alphabet.slice(2) + alphabet.slice(0, 2);\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    if (index === -1) {\n      newString += s[i];\n    } else {\n      newString += newAlphabet[index];\n    }\n  }\n  return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp4i4x8xon.js:24:12)\n    at Object.<anonymous> (/tmp/tmp4i4x8xon.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333677
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char === ' ') {\n      result += ' ';\n    } else {\n      const charCode = char.charCodeAt(0);\n      const newCharCode = charCode + 2 * 2;\n      result += String.fromCharCode(newCharCode);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jei{je{ijei{k'\n\nshould loosely deep-equal\n\n'jeiajeaijeiak'\n    at test (/tmp/tmpz_dmnzya.js:28:12)\n    at Object.<anonymous> (/tmp/tmpz_dmnzya.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jei{je{ijei{k',\n  expected: 'jeiajeaijeiak',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333677
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let newAlphabet = \"\";\n    let newString = \"\";\n    for (let i = 0; i < alphabet.length; i++) {\n        if (i < alphabet.length - 2) {\n            newAlphabet += alphabet[i + 2];\n        } else {\n            newAlphabet += alphabet[i - 24];\n        }\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \" \") {\n            newString += \" \";\n        } else {\n            newString += newAlphabet[alphabet.indexOf(s[i])];\n        }\n    }\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpc7ms7luo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpc7ms7luo.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333677
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        result += alphabet[(index + 2) % 26];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpo5crnwlk.js:18:12)\n    at Object.<anonymous> (/tmp/tmpo5crnwlk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\nconsole.log(encrypt('Hello World'));\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(encrypt('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmphd3iwgwd.js:34:12)\n    at Object.<anonymous> (/tmp/tmphd3iwgwd.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq Yqtnf\ncdefghijklmnopqrstuvwxyzab\nCDEFGHIJKLMNOPQRSTUVWXYZAB\ncdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\n",
      "timestamp": 1660333677
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpdx7zoho8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdx7zoho8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                char = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                char = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                char = String.fromCharCode(code - 13);\n            }\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpvda25tyi.js:32:12)\n    at Object.<anonymous> (/tmp/tmpvda25tyi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333666
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmppmnj8v19.js:29:12)\n    at Object.<anonymous> (/tmp/tmppmnj8v19.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpmbitpibg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpmbitpibg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            result += String.fromCharCode((ascii - 65 + 2 * 2) % 26 + 65);\n        } else if (ascii >= 97 && ascii <= 122) {\n            result += String.fromCharCode((ascii - 97 + 2 * 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encrypt('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encrypt('The quick brown fox jumps over the lazy dog!')); // Vjg swkem dtqyp hqz lworu qxgt vjg swkem rnc yqtf!\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')); // cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZ\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "efghijklmnopqrstuvwxyzabcd\nEFGHIJKLMNOPQRSTUVWXYZABCD\nXli uymgo fvsar jsb nyqtw sziv xli pedc hsk!\nefghijklmnopqrstuvwxyzabcdEFGHIJKLMNOPQRSTUVWXYZABCD\n",
      "timestamp": 1660333677
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpeyjq8go5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpeyjq8go5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpmbitpibg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpmbitpibg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp6kupls_k.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6kupls_k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpivnd9mtj.js:29:12)\n    at Object.<anonymous> (/tmp/tmpivnd9mtj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let code = char.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpqra5s0ki.js:30:12)\n    at Object.<anonymous> (/tmp/tmpqra5s0ki.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpcio866cg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcio866cg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        result += String.fromCharCode(s.charCodeAt(i) + 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpxq1fpy48.js:16:12)\n    at Object.<anonymous> (/tmp/tmpxq1fpy48.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        let newIndex = index * 2;\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'oq'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmplzcu_l5v.js:20:12)\n    at Object.<anonymous> (/tmp/tmplzcu_l5v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'oq',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333674
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let a = 'abcdefghijklmnopqrstuvwxyz';\n    let b = 'cdefghijklmnopqrstuvwxyzab';\n    let c = '';\n    for (let i = 0; i < s.length; i++) {\n        c += b[a.indexOf(s[i])];\n    }\n    return c;\n}\n\nconsole.log(encrypt('hello'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp02_dd_m6.js:19:12)\n    at Object.<anonymous> (/tmp/tmp02_dd_m6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jgnnq\n",
      "timestamp": 1660333677
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            result += s[i];\n        } else {\n            result += alphabet[(index + 2) % 26];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpucmi0s98.js:23:12)\n    at Object.<anonymous> (/tmp/tmpucmi0s98.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpxlq0yo8l.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxlq0yo8l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333677
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let c: string = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code: number = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpeyjq8go5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpeyjq8go5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let arr = s.split('');\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n        let code = arr[i].charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            code += 2;\n            if (code > 90) {\n                code -= 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code += 2;\n            if (code > 122) {\n                code -= 26;\n            }\n        }\n        newArr.push(String.fromCharCode(code));\n    }\n    return newArr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmph4rmnw1v.js:30:12)\n    at Object.<anonymous> (/tmp/tmph4rmnw1v.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333677
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        let newIndex = index * 2;\n        if (newIndex > 25) {\n            newIndex = newIndex % 26;\n        }\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'oq'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpnjhqc3q4.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnjhqc3q4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'oq',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333675
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 2;\n            if (charCode > 90) {\n                charCode -= 26;\n            }\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpmbitpibg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpmbitpibg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii: number = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ((ascii - 65 + 2) % 26) + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ((ascii - 97 + 2) % 26) + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\nconsole.log(encrypt('Hello World'));\nconsole.log(encrypt('abc'));\nconsole.log(encrypt('xyz'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp4tz7voqx.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4tz7voqx.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq Yqtnf\ncde\nzab\n",
      "timestamp": 1660333678
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let newString: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        let index: number = alphabet.indexOf(s[i]);\n        newString += alphabet[(index + 2) * 2];\n    }\n    return newString;\n}\n\nconsole.log(encrypt(\"abc\"));\nconsole.log(encrypt(\"xyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'su'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmptrt97fqe.js:20:12)\n    at Object.<anonymous> (/tmp/tmptrt97fqe.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'su',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "egi\nundefinedundefinedundefined\n",
      "timestamp": 1660333677
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode: number = s.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode = ((charCode - 65 + 2 * 2) % 26) + 65;\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode = ((charCode - 97 + 2 * 2) % 26) + 97;\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333678
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        let index = alphabet.indexOf(c);\n        let newIndex = index * 2;\n        result += alphabet[newIndex];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'oq'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpd1cc0svl.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd1cc0svl.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'oq',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333671
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii += 2;\n            if (ascii > 90) {\n                ascii -= 26;\n            }\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n            }\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmplw7kgwbw.js:29:12)\n    at Object.<anonymous> (/tmp/tmplw7kgwbw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) {\n            ascii = ((ascii - 65 + 2 * 2) % 26) + 65;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii = ((ascii - 97 + 2 * 2) % 26) + 97;\n        }\n        result += String.fromCharCode(ascii);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333677
    },
    {
      "exit_code": 0,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        let index: number = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            encrypted += s[i];\n        } else {\n            encrypted += alphabet[(index + 2 * 2) % alphabet.length];\n        }\n    }\n    return encrypted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333678
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c.match(/[a-z]/i)) {\n            let code = s.charCodeAt(i);\n            if ((code >= 65) && (code <= 77)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 78) && (code <= 90)) {\n                c = String.fromCharCode(code - 13);\n            } else if ((code >= 97) && (code <= 109)) {\n                c = String.fromCharCode(code + 13);\n            } else if ((code >= 110) && (code <= 122)) {\n                c = String.fromCharCode(code - 13);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\n\nconsole.log(encrypt('Genius without education is like silver in the mine'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uv'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpoqv8jn4c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpoqv8jn4c.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uv',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Travhf jvgubhg rqhpngvba vf yvxr fvyire va gur zvar\n",
      "timestamp": 1660333667
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        result += String.fromCharCode(s.charCodeAt(i) + 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpuofi6l6f.js:16:12)\n    at Object.<anonymous> (/tmp/tmpuofi6l6f.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333678
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let code = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            code = code + 2;\n            if (code > 90) {\n                code = code - 26;\n            }\n        } else if (code >= 97 && code <= 122) {\n            code = code + 2;\n            if (code > 122) {\n                code = code - 26;\n            }\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmpgt7oj2rv.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgt7oj2rv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333663
    },
    {
      "exit_code": 1,
      "program": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\nfunction encrypt(s: string): string {\n    let str = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'z') {\n            str += 'b';\n        } else if (s[i] === 'y') {\n            str += 'a';\n        } else {\n            str += String.fromCharCode(s.charCodeAt(i) + 2);\n        }\n    }\n    return str;\n}\n\nconsole.log(encrypt('abc')); // cde\nconsole.log(encrypt('xyz')); // zab\nconsole.log(encrypt('hello')); // jgnnq\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'jk'\n\nshould loosely deep-equal\n\n'lm'\n    at test (/tmp/tmp8b_vr_k4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp8b_vr_k4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'jk',\n  expected: 'lm',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cde\nzab\njgnnq\n",
      "timestamp": 1660333678
    }
  ]
}