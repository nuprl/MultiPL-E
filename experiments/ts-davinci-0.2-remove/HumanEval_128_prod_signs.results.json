{
  "language": "ts",
  "name": "HumanEval_128_prod_signs",
  "results": [
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n0\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333614
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_sign\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpos0yu_5r.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpos0yu_5r.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n-0\nundefined\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "21\n0\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([])); // undefined\nconsole.log(prod_signs([1, 2, 3])); // 18\nconsole.log(prod_signs([-1, -2, -3])); // 18\nconsole.log(prod_signs([-1, 2, -3])); // -18\nconsole.log(prod_signs([1, -2, 3])); // -18\nconsole.log(prod_signs([-1, 2, 3])); // -18\nconsole.log(prod_signs([1, -2, -3])); // 18\nconsole.log(prod_signs([0, -2, -3])); // 0\nconsole.log(prod_signs([0, -2, 3])); // 0\nconsole.log(prod_signs([0, 2, 3])); // 0\nconsole.log(prod_signs([0, 2, -3])); // 0\nconsole.log(prod_signs([0, 0, 0])); // 0\nconsole.log(prod_signs([-1, 0, 0])); // 0\nconsole.log(prod_signs([1, 0, 0])); // 0\nconsole.log(prod_signs([-1, 0, 1])); // 0\nconsole.log(prod_signs([1, 0, -1])); // 0\nconsole.log(prod_signs([-1, 0, -1])); // 0\nconsole.log(prod_signs([1, 0, 1])); // 0\nconsole.log(prod_signs([-1, -1, -1])); // 3\nconsole.log(prod_signs([1, 1, 1])); // 3\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "undefined\n6\n-6\n6\n-6\n-6\n6\n0\n-0\n0\n-0\n0\n-0\n0\n-0\n-0\n0\n0\n-3\n3\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\nundefined\n0\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5])); // -120\nconsole.log(prod_signs([1, 2, 3, 4, 5])); // 120\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5])); // 0\nconsole.log(prod_signs([])); // undefined\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n-0\nundefined\n-0\n-0\n-0\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum: number = 0;\n    let prod: number = 1;\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n-15\n15\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-0\n-0\n-0\n-0\n-0\nundefined\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 0, -5]));\nconsole.log(prod_signs([-1, -2, -3, 0, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\n15\n-0\n-0\nundefined\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum += Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([0, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\n0\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp24b3lzpe.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp24b3lzpe.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333615
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-3, -4, -5]));\nconsole.log(prod_signs([-3, -4, -5, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0fvbu2ix.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp0fvbu2ix.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, -1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-0\nundefined\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 0, 5, 6]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-21\n-21\n-0\nundefined\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n            sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpgh38bwar.js:40:12)\n    at Object.<anonymous> (/tmp/tmpgh38bwar.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-21\n21\n21\n-21\n-21\n-21\n21\n21\n-21\n-21\n21\n-21\n21\n21\n21\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n0\n-0\n",
      "timestamp": 1660333615
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4]));\nconsole.log(prod_signs([-1, -2, -3, 4]));\nconsole.log(prod_signs([-1, -2, -3, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmph9qsi59b.js:29:12)\n    at Object.<anonymous> (/tmp/tmph9qsi59b.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-10\n-10\n-6\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-3, -4, 5]));\nconsole.log(prod_signs([-3, -4, -5]));\nconsole.log(prod_signs([-3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5]));\nconsole.log(prod_signs([-3, 0, -5, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "12\n-12\n12\nundefined\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl9_b6rma.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpl9_b6rma.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let prodSigns = 1;\n  let sumMagnitudes = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prodSigns *= 1;\n      sumMagnitudes += arr[i];\n    } else if (arr[i] < 0) {\n      prodSigns *= -1;\n      sumMagnitudes += arr[i] * -1;\n    } else {\n      prodSigns *= 0;\n    }\n  }\n  return sumMagnitudes * prodSigns;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-21\n21\n0\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, 3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n-15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg6xy_8bi.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpg6xy_8bi.ts(22,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      sum += 0;\n      prod *= 1;\n    } else if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp9klbw8hx.js:31:12)\n    at Object.<anonymous> (/tmp/tmp9klbw8hx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length == 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let sum = 0;\n    let prod = 1;\n    if (arr.length === 0) {\n        return undefined;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, -2, 0, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n0\n-0\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    if (arr[i] !== 0) prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpw85l18z_.js:22:12)\n    at Object.<anonymous> (/tmp/tmpw85l18z_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1, -2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, 6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1, -2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn9w7xlpk.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpn9w7xlpk.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0, -5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0, -5, 0, 0, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0, 5, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 0, 5, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 0, 5, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp9w8zchue.js:37:12)\n    at Object.<anonymous> (/tmp/tmp9w8zchue.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n-15\n-15\n-15\n-15\nundefined\n0\n15\n15\n15\n15\n15\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else if (arr[i] === 0) {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_sign\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe_gfbwj9.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpe_gfbwj9.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let prod = 1;\n    let sum = 0;\n    if (arr.length === 0) {\n        return undefined;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            prod *= 1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n        } else {\n            prod *= -1;\n            sum += arr[i];\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n-9\n    at test (/tmp/tmpbt2rbntq.js:38:12)\n    at Object.<anonymous> (/tmp/tmpbt2rbntq.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: -9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-0\n-0\nundefined\n0\n15\n-0\n-0\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0, 0, 1]));\nconsole.log(prod_signs([0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 1, -1]));\nconsole.log(prod_signs([0, 0, 1, -1, -1]));\nconsole.log(prod_signs([0, 1, -1, -1, -1]));\nconsole.log(prod_signs([1, -1, -1, -1, -1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n0\n0\n-0\n-0\n0\n-0\n5\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 0]));\nconsole.log(prod_signs([-1, 2, -3, 0, 5]));\nconsole.log(prod_signs([-1, 2, 0, 4, 5]));\nconsole.log(prod_signs([-1, 0, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_sign\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2ygq26qw.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp2ygq26qw.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5, 0]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5, 0, 0]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n0\n0\n0\nundefined\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) continue;\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmppufqnla3.js:27:12)\n    at Object.<anonymous> (/tmp/tmppufqnla3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-21\n-21\n0\nundefined\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\nundefined\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n-0\nundefined\n-0\n-0\n-0\n-0\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([0, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n0\nundefined\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) continue;\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpbptwgb_e.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbptwgb_e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333622
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) continue;\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp0cdi4r1u.js:28:12)\n    at Object.<anonymous> (/tmp/tmp0cdi4r1u.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-15\n-15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    const sum = arr.reduce((acc, curr) => acc + Math.abs(curr), 0);\n    const prod = arr.reduce((acc, curr) => acc * Math.sign(curr), 1);\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3])); // 6\nconsole.log(prod_signs([-1, -2, -3])); // 6\nconsole.log(prod_signs([1, -2, 3])); // -6\nconsole.log(prod_signs([-1, 2, -3])); // -6\nconsole.log(prod_signs([1, 0, -3])); // -3\nconsole.log(prod_signs([-1, 0, 3])); // 3\nconsole.log(prod_signs([0, 0, 0])); // 0\nconsole.log(prod_signs([])); // None\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "6\n-6\n-6\n6\n-0\n-0\n0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmprapcl0jd.js:33:12)\n    at Object.<anonymous> (/tmp/tmprapcl0jd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-21\n-0\n0\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -1, 1, 1, 1]));\nconsole.log(prod_signs([-1, -1, 1, 1, 1, 0, 10]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "5\n0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-2, -3, 4, -5]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-14\n-0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            product *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -1, -2, -3]));\nconsole.log(prod_signs([-1, -2, -3]));\nconsole.log(prod_signs([1, 2, 3]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-12\n-6\n6\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      prod *= 1;\n      sum += 0;\n    } else if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else {\n      prod *= -1;\n      sum += Math.abs(arr[i]);\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpia7slpbk.js:35:12)\n    at Object.<anonymous> (/tmp/tmpia7slpbk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n15\n15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n15\n15\n-0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            product *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([-3, -4, -5]));\nconsole.log(prod_signs([-3, -4, -5, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb5clf7ua.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpb5clf7ua.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3]));\nconsole.log(prod_signs([-1, 2, 3]));\nconsole.log(prod_signs([-1, -2, 3]));\nconsole.log(prod_signs([-1, -2, -3]));\nconsole.log(prod_signs([1, -2, 3]));\nconsole.log(prod_signs([1, -2, -3]));\nconsole.log(prod_signs([1, 2, -3]));\nconsole.log(prod_signs([-1, 2, -3]));\nconsole.log(prod_signs([-1, -2, -3]));\nconsole.log(prod_signs([0, 0, 0]));\nconsole.log(prod_signs([0, 0, 1]));\nconsole.log(prod_signs([0, 0, -1]));\nconsole.log(prod_signs([0, 1, -1]));\nconsole.log(prod_signs([0, -1, -1]));\nconsole.log(prod_signs([1, -1, -1]));\nconsole.log(prod_signs([-1, -1, -1]));\nconsole.log(prod_signs([-1, -1, 1]));\nconsole.log(prod_signs([-1, 1, 1]));\nconsole.log(prod_signs([1, 1, 1]));\nconsole.log(prod_sign\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_f2jn36c.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmp_f2jn36c.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum: number = 0;\n    let prod: number = 1;\n    for (let i: number = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, -1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-0\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(pro\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpximqq_g7.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpximqq_g7.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\n-15\n15\n-15\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, 5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\nundefined\n-15\n15\n0\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n0\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "55\n55\n-55\n-0\nundefined\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    } else if (arr[i] > 0) {\n      sum += arr[i];\n    } else {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-2, -3, 4, 0, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([-1, 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([0, -2, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy0_es__v.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let sum = 0;\n    let prod = 1;\n    if (arr.length === 0) {\n        return undefined;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 0, 5, 6]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-21\n21\n21\n-21\n-0\n0\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n        prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, 2, -3, -4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp6jthmra1.js:42:12)\n    at Object.<anonymous> (/tmp/tmp6jthmra1.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n15\n-15\n15\n-15\n15\n15\n15\n-15\n15\n-15\n-15\n15\n-15\n-15\n15\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsvszyag8.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprfak1cd9.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmprfak1cd9.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\nundefined\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-3, -4, 5]));\nconsole.log(prod_signs([-3, -4, 0, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "12\n0\nundefined\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n-15\n15\n0\nundefined\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333626
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-21\n-0\n-0\nundefined\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([-3, -4, -5]));\nconsole.log(prod_signs([-3, -4, -5, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3q9_s1l2.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp3q9_s1l2.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpzj2ub0k1.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzj2ub0k1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpj3wyq186.js:39:12)\n    at Object.<anonymous> (/tmp/tmpj3wyq186.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4]));\nconsole.log(prod_signs([-1, -2, -3, -4]));\nconsole.log(prod_signs([1, 2, 3, -4, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-10\n10\n-0\nundefined\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\nundefined\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            prod *= 1;\n            sum += 0;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n        } else {\n            prod *= -1;\n            sum += Math.abs(arr[i]);\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpevb6vuqs.js:43:12)\n    at Object.<anonymous> (/tmp/tmpevb6vuqs.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5])); // 30\nconsole.log(prod_signs([-1, -2, -3, -4, 5])); // -30\nconsole.log(prod_signs([-1, -2, -3, 4, 5])); // -30\nconsole.log(prod_signs([-1, -2, 3, 4, 5])); // -30\nconsole.log(prod_signs([1, 2, 3, 4, 5])); // 30\nconsole.log(prod_signs([1, 2, 3, 4, -5])); // -30\nconsole.log(prod_signs([1, 2, 3, -4, -5])); // -30\nconsole.log(prod_signs([1, 2, -3, -4, -5])); // -30\nconsole.log(prod_signs([1, -2, -3, -4, -5])); // 30\nconsole.log(prod_signs([-1, -2, -3, -4, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, 0, -5])); // 0\nconsole.log(prod_signs([-1, -2, 0, -4, -5])); // 0\nconsole.log(prod_signs([-1, 0, -3, -4, -5])); // 0\nconsole.log(prod_signs([0, -2, -3, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4b6mgwq7.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp24b3lzpe.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp24b3lzpe.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      product *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      product *= -1;\n    } else {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-21\n0\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        let sign = Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n        product *= sign;\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, -5]));\nconsole.log(prod_signs([-1, -2, 0, -4, -5]));\nconsole.log(prod_signs([-1, 0, -3, -4, -5]));\nconsole.log(prod_signs([0, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\n-15\n15\n0\n0\n0\n0\n0\n0\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "21\nundefined\n21\n21\n-21\n-21\n-0\n0\n0\n-0\n-0\n-0\n-0\n-0\n-0\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n        prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnr21wk_s.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpnr21wk_s.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n-15\n15\n0\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  let sum = 0;\n  let prod = 1;\n  if (arr.length === 0) {\n    return undefined;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "21\n0\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3]));\nconsole.log(prod_signs([-1, -2, -3]));\nconsole.log(prod_signs([1, -2, 3]));\nconsole.log(prod_signs([-1, 2, -3]));\nconsole.log(prod_signs([1, 2, 0]));\nconsole.log(prod_signs([-1, -2, 0]));\nconsole.log(prod_signs([1, -2, 0]));\nconsole.log(prod_signs([-1, 2, 0]));\nconsole.log(prod_signs([0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "6\n-6\n-6\n6\n0\n0\n-0\n-0\n0\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) prod *= -1;\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpsitr9lw9.js:26:12)\n    at Object.<anonymous> (/tmp/tmpsitr9lw9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 7, -8, 9, 0, -10]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\nundefined\n55\n55\n0\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n0\nundefined\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1]));\nconsole.log(prod_signs([-1, 0, 1, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpysh_uvap.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) prod *= 1;\n    else if (arr[i] < 0) prod *= -1;\n    else prod *= 0;\n    sum += Math.abs(arr[i]);\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\n0\nundefined\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0, 0, 1]));\nconsole.log(prod_signs([0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 1, -1]));\nconsole.log(prod_signs([0, 0, 1, 1, -1]));\nconsole.log(prod_signs([0, 1, 1, 1, -1]));\nconsole.log(prod_signs([1, 1, 1, 1, -1]));\nconsole.log(prod_signs([1, 1, 1, 1, 1]));\nconsole.log(prod_signs([-1, -1, -1, -1, -1]));\nconsole.log(prod_signs([-1, -1, -1, -1, 1]));\nconsole.log(prod_signs([-1, -1, -1, 1, 1]));\nconsole.log(prod_signs([-1, -1, 1, 1, 1]));\nconsole.log(prod_signs([-1, 1, 1, 1, 1]));\nconsole.log(prod_signs([1, 1, 1, 1, 0]));\nconsole.log(prod_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm__xy11o.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpm__xy11o.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, 0, 1]));\nconsole.log(prod_signs([-1, -2, -3]));\nconsole.log(prod_signs([-1, -2, -3, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-0\n-6\n-0\nundefined\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\nundefined\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n0\nundefined\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum += arr[i];\n        } else {\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -1, -1, -1, -1]));\nconsole.log(prod_signs([1, 1, 1, 1, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n-9\n    at test (/tmp/tmp908qxwyb.js:36:12)\n    at Object.<anonymous> (/tmp/tmp908qxwyb.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: -9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-3\n-0\nundefined\n0\n5\n5\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n        prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpp1lkfoaw.js:32:12)\n    at Object.<anonymous> (/tmp/tmpp1lkfoaw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n10\n15\n15\n10\n-15\nundefined\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "21\nundefined\n0\n21\n21\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let prod = 1;\n    let sum = 0;\n    if (arr.length === 0) {\n        return undefined;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, -4, 5]));\nconsole.log(prod_signs([1, -2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, 5]));\nconsole.log(prod_signs([-1, 2, -3, -4, -5]));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9vunf25v.ts(41,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-5, -3, -1, 0, 1, 3, 5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, 0, 1]));\nconsole.log(prod_signs([-1, 1]));\nconsole.log(prod_signs([1, 1, 1, 1]));\nconsole.log(prod_signs([-1, -1, -1, -1]));\nconsole.log(prod_signs([-1, -1, -1, 1]));\nconsole.log(prod_signs([-1, -1, 1, 1]));\nconsole.log(prod_signs([-1, 1, 1, 1]));\nconsole.log(prod_signs([1, 1, 1, -1]));\nconsole.log(prod_signs([1, -1, -1, -1]));\nconsole.log(prod_signs([1, -1, -1, 1]));\nconsole.log(prod_signs([1, -1, 1, 1]));\nconsole.log(prod_signs([1, 1, -1, 1]));\nconsole.log(prod_signs([0, 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0, 1]));\nconsole.log(prod_signs([0, 0, 1, 1]));\nconsole.log(prod_signs([0, 1, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_4o8bvse.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmp_4o8bvse.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum: number = 0;\n    let prod: number = 1;\n    for (let i: number = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\nconsole.log(prod_signs([1, 2, 3, -4]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4]));\nconsole.log(prod_signs([-1, -2, -3, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt19mahfc.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, -3, 0, -5]));\nconsole.log(prod_signs([1, 0, 3, 0, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n0\n-0\n0\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  return arr.reduce((acc, curr) => acc + Math.abs(curr) * Math.sign(curr), 0);\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5])); // -1\nconsole.log(prod_signs([-1, -2, -3, -4, -5])); // 1\nconsole.log(prod_signs([1, 2, 3, 4, -5])); // -1\nconsole.log(prod_signs([-1, -2, -3, -4, 5])); // 1\nconsole.log(prod_signs([1, 2, 3, -4, -5])); // -1\nconsole.log(prod_signs([-1, -2, 3, 4, -5])); // 1\nconsole.log(prod_signs([1, -2, 3, 4, -5])); // -1\nconsole.log(prod_signs([1, 2, -3, 4, -5])); // -1\nconsole.log(prod_signs([1, 2, 3, -4, 5])); // 1\nconsole.log(prod_signs([-1, 2, 3, -4, 5])); // 1\nconsole.log(prod_signs([1, -2, 3, 4, 5])); // 1\nconsole.log(prod_signs([1, 2, -3, 4, 5])); // 1\nconsole.log(prod_signs([1, 2, 3, -4, -5])); // -1\nconsole.log(prod_signs([-1, 2, 3, 4, -5])); // 1\nconsole.log(prod_signs([1, -2, 3, -4, 5])); // 1\nconsole.log(prod_signs([1, -2, 3, 4, 5])); // 1\nconsole.log(prod_signs([1, 2, -3, -4, 5])); // 1\nconsole.log(prod_signs([1, 2, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvlh0ksqq.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, -2, 3, -4, 5, -6]));\nconsole.log(prod_signs([1, -2, 3, -4, 5, -6, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-21\n-0\nundefined\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n-0\n-0\nundefined\n0\n15\n0\n-0\n-0\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n            sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz5tp13cg.ts(23,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp24b3lzpe.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp24b3lzpe.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum += arr[i];\n        } else {\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n-9\n    at test (/tmp/tmpv_z0uxpr.js:35:12)\n    at Object.<anonymous> (/tmp/tmpv_z0uxpr.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: -9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n0\n-0\nundefined\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 7, -8, 9, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, -7, -8, -9, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-0\nundefined\n-0\n0\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n0\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-21\nundefined\n0\n-0\n-21\n-0\n21\n0\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1, -2, -3, 4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n15\n-15\n15\n-15\n15\nundefined\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5])); // -51\nconsole.log(prod_signs([-1, -2, -3, -4, -5])); // -51\nconsole.log(prod_signs([1, 2, 3, 4, 5])); // 51\nconsole.log(prod_signs([-1, -2, -3, 4, 5])); // -51\nconsole.log(prod_signs([-1, -2, -3, -4, 5])); // 51\nconsole.log(prod_signs([])); // None\nconsole.log(prod_signs([0, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp315wonje.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp315wonje.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    } else if (arr[i] > 0) {\n      sum += arr[i];\n    } else {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5])); // -120\nconsole.log(prod_signs([1, 2, 3, 4, 5])); // 120\nconsole.log(prod_signs([-1, 2, -3, 4, -5])); // 120\nconsole.log(prod_signs([-1, -2, 3, 4, -5])); // -120\nconsole.log(prod_signs([1, 2, 3, 4, 0])); // 0\nconsole.log(prod_signs([])); // None\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpcvxbyrfc.js:35:12)\n    at Object.<anonymous> (/tmp/tmpcvxbyrfc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n15\n-15\n-15\n10\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-21\n21\n0\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 0, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n-0\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([1, 2, 3, 0, 5]));\nconsole.log(prod_signs([1, 2, 0, 4, 5]));\nconsole.log(prod_signs([1, 0, 3, 4, 5]));\nconsole.log(prod_signs([0, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n15\n-15\n15\n-15\n15\n0\n0\n0\n0\n0\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6])); // -21\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 0])); // 0\nconsole.log(prod_signs([])); // undefined\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6])); // 21\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, 0, 0])); // 0\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, 0, 0, 0])); // 0\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 0, 0, 0])); // 0\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1qgqs_pa.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp1qgqs_pa.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\nundefined\n15\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -1, -2, -3]));\nconsole.log(prod_signs([1, 2, 3, -1, -2, -3, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-12\n-0\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\n0\n0\nundefined\n",
      "timestamp": 1660333637
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let sum = 0;\n    let prod = 1;\n    if (arr.length === 0) {\n        return undefined;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, 2, 3, -4]));\nconsole.log(prod_signs([-1, 2, 3, -4, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "10\n0\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\n15\nundefined\n",
      "timestamp": 1660333637
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 2, -3, 4, 0]));\nconsole.log(prod_signs([-1, 2, -3, 4, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 2, -3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgm_x5xj.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\n-15\n15\n-15\n0\nundefined\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-2, -3, 4, -5]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptb6xg_ts.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333636
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, -7, 8, 9]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, -7, 8, 9, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333637
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (!arr.length) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n0\nundefined\n",
      "timestamp": 1660333637
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -1, -1, -1, -1]));\nconsole.log(prod_signs([-1, -1, -1, -1, 1]));\nconsole.log(prod_signs([-1, -1, -1, 0, -1]));\nconsole.log(prod_signs([-1, -1, -1, 0, 0]));\nconsole.log(prod_signs([-1, -1, -1, 0, 1]));\nconsole.log(prod_signs([-1, -1, 0, -1, -1]));\nconsole.log(prod_signs([-1, -1, 0, -1, 0]));\nconsole.log(prod_signs([-1, -1, 0, -1, 1]));\nconsole.log(prod_signs([-1, -1, 0, 0, -1]));\nconsole.log(prod_signs([-1, -1, 0, 0, 0]));\nconsole.log(prod_signs([-1, -1, 0, 0, 1]));\nconsole.log(prod_signs([-1, -1, 0, 1, -1]));\nconsole.log(prod_signs([-1, -1, 0, 1, 0]));\nconsole.log(prod_signs([-1, -1, 0, 1, 1]));\nconsole.log(prod_signs([-1, -1, 1, -1, -1]));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsjo88fwl.ts(40,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333637
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum += arr[i];\n        } else {\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n-9\n    at test (/tmp/tmpnksyq1ij.js:34:12)\n    at Object.<anonymous> (/tmp/tmpnksyq1ij.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: -9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n0\nundefined\n",
      "timestamp": 1660333637
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4])); // -4\nconsole.log(prod_signs([-1, -2, -3, -4])); // 4\nconsole.log(prod_signs([0, 0, 0, 0])); // 0\nconsole.log(prod_signs([])); // undefined\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-10\n10\n0\nundefined\n",
      "timestamp": 1660333638
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5, 6]));\nconsole.log(prod_signs([1, -2, 3, -4, 5, -6]));\nconsole.log(prod_signs([1, -2, 3, -4, 5, -6, 7, 8, 9, 10]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(prod_signs([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]));\nconsole.log(prod_signs([1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(prod_signs([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9kqa4xks.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n            sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpz0i873lw.js:30:12)\n    at Object.<anonymous> (/tmp/tmpz0i873lw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "-15\n-15\n15\n15\n0\nundefined\n",
      "timestamp": 1660333638
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\nundefined\n0\n",
      "timestamp": 1660333638
    },
    {
      "exit_code": 2,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdfxqvcfu.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpdfxqvcfu.ts(22,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333638
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n-15\nundefined\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n0\nundefined\n",
      "timestamp": 1660333614
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333638
    },
    {
      "exit_code": 0,
      "program": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "-15\n15\n0\nundefined\n",
      "timestamp": 1660333638
    }
  ]
}