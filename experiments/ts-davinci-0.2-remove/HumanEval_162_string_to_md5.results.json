{
  "language": "ts",
  "name": "HumanEval_162_string_to_md5",
  "results": [
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4w4e26od.ts(7,23): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx0zj6pv3.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === '') {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxy7ue3eo.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length == 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0arv3o6y.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp559dudbx.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === '') {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzhsuu_j4.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === '') {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb0z897ch.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp559dudbx.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdfyfdz72.ts(8,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === '') {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzhsuu_j4.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5n8323bu.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp559dudbx.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length == 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0arv3o6y.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8zapt91b.ts(7,25): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx0zj6pv3.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text == \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcyg68no5.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5n8323bu.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcn8mz5u6.ts(8,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx0zj6pv3.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcn8mz5u6.ts(8,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === '') {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbq87ereu.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx0zj6pv3.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp559dudbx.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp559dudbx.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvan_13j.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (!text) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpatu02qqz.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text === \"\") {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_0brxa.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph4csaws4.ts(8,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5n8323bu.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length == 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp559dudbx.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpty9f3i50.ts(7,10): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcuvfgio2.ts(8,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4le12r9.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return md5(text);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplirrkj4d.ts(7,12): error TS2304: Cannot find name 'md5'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n    if (text.length === 0) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6tqv_nr.ts(7,19): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    },
    {
      "exit_code": 2,
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7fxdpwnr.ts(7,17): error TS2339: Property 'createHash' does not exist on type 'Crypto'.\n",
      "timestamp": 1660333820
    }
  ]
}