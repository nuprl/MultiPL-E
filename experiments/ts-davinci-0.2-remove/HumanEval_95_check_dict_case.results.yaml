language: ts
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let allLower:\
    \ boolean = true;\n    let allUpper: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            allLower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            allUpper = false;\n\
    \        }\n    }\n    return allLower || allUpper;\n}\n\nconsole.log(check_dict_case({}));\n\
    console.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp550zyfer.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp550zyfer.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper = false;\n      \
    \  }\n    }\n    return lower || upper;\n}\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq9pau0_b.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq9pau0_b.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let all_lower\
    \ = true;\n    let all_upper = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            all_lower = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            all_upper = false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpii174p28.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpii174p28.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    for (let key in dict) {\n        if (key !== key.toLowerCase())\
    \ {\n            lower = false;\n        }\n        if (key !== key.toUpperCase())\
    \ {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvgev6cnb.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvgev6cnb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = Object.keys(dict).filter(key => key === key.toLowerCase());\n    let upper_keys\
    \ = Object.keys(dict).filter(key => key === key.toUpperCase());\n    return lower_keys.length\
    \ === Object.keys(dict).length || upper_keys.length === Object.keys(dict).length;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmn29sbj6.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmn29sbj6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys:\
    \ string[] = [];\n    let upper_keys: string[] = [];\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() === key) {\n            lower_keys.push(key);\n\
    \        } else {\n            upper_keys.push(key);\n        }\n    }\n    return\
    \ (lower_keys.length === 0 || upper_keys.length === 0);\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp79mqwdc7.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp79mqwdc7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = false;\n    let upper_case: boolean = false;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            lower_case =\
    \ true;\n        } else if (key.toUpperCase() === key) {\n            upper_case\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ return lower_case && upper_case ? false : true;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn8cae41v.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn8cae41v.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let lower = keys.every(key\
    \ => key === key.toLowerCase());\n    let upper = keys.every(key => key === key.toUpperCase());\n\
    \    return lower || upper;\n}\n\nconsole.log(check_dict_case({}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2', 'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'1': 'A',\
    \ '2': 'B'}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptvz8o4yk.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptvz8o4yk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let lowerCase\
    \ = keys.every(key => key === key.toLowerCase());\n    let upperCase = keys.every(key\
    \ => key === key.toUpperCase());\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppty25o_f.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppty25o_f.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lowerCase = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\nconsole.log(check_dict_case({'a':'1', 'b':'2'}));\nconsole.log(check_dict_case({'A':'1',\
    \ 'B':'2'}));\nconsole.log(check_dict_case({'A':'1', 'b':'2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd1jyfojw.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd1jyfojw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg1ew30kc.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg1ew30kc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = false;\n    let upper: boolean = false;\n    for (let key in dict) {\n   \
    \     if (key.toLowerCase() === key) {\n            lower = true;\n        } else\
    \ if (key.toUpperCase() === key) {\n            upper = true;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpndrgeah4.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpndrgeah4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfkxsqv6z.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfkxsqv6z.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = false;\n    let upper_case: boolean = false;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            lower_case =\
    \ true;\n        } else if (key.toUpperCase() === key) {\n            upper_case\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a': '1',\
    \ 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0lqqhrqw.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0lqqhrqw.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    false

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) lower = false;\n        if (key.toUpperCase() !== key) upper = false;\n\
    \    }\n    return lower || upper;\n}\nconsole.log(check_dict_case({'a': '1',\
    \ 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn1x9rrio.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn1x9rrio.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = 0;\n\
    \    let upper = 0;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            lower++;\n        } else if (key.toUpperCase() === key)\
    \ {\n            upper++;\n        }\n    }\n    return lower === Object.keys(dict).length\
    \ || upper === Object.keys(dict).length;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3x1rrfhb.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3x1rrfhb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = Object.keys(dict).filter(x => x === x.toLowerCase());\n    let upper_keys\
    \ = Object.keys(dict).filter(x => x === x.toUpperCase());\n    return (lower_keys.length\
    \ === Object.keys(dict).length || upper_keys.length === Object.keys(dict).length);\n\
    }\n\nconsole.log(check_dict_case({'a': 'A', 'b': 'B'}));\nconsole.log(check_dict_case({'a':\
    \ 'A', 'B': 'b'}));\nconsole.log(check_dict_case({'a': 'A', 'B': 'b', 'c': 'C'}));\n\
    console.log(check_dict_case({'a': 'A', 'b': 'B', 'c': 'C'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'B': 'b', 'C': 'c'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b',\
    \ 'C': 'c', 'D': 'd'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8yk15zf2.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8yk15zf2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    true

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase:\
    \ boolean = false;\n    let upperCase: boolean = false;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() === key) {\n            lowerCase = true;\n\
    \        } else if (key.toUpperCase() === key) {\n            upperCase = true;\n\
    \        }\n    }\n    return lowerCase && upperCase ? false : true;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7ymuz0_e.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ymuz0_e.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() != key) {\n            lower = false;\n        }\n \
    \       if (key.toUpperCase() != key) {\n            upper = false;\n        }\n\
    \    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmvlt0q8l.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmvlt0q8l.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) return false;\n    let lower = keys[0].toLowerCase()\
    \ === keys[0];\n    for (let key of keys) {\n        if (lower && key.toLowerCase()\
    \ !== key) return false;\n        if (!lower && key.toUpperCase() !== key) return\
    \ false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdwtdze3q.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdwtdze3q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8xzz30ov.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8xzz30ov.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfkxsqv6z.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfkxsqv6z.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case\
    \ = true;\n    let upper_case = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lower_case = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper_case = false;\n \
    \       }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgqj63ge_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgqj63ge_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsqn4wq0l.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsqn4wq0l.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660334614
- exit_code: 2
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({}));\n\
    console.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'b': '2', 'c': '3'}));\n\
    console.log(check_dict_case({'A': '1', 'B': '2', 'C': '3'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2', 'C': '3', 'D': '4'}));\nconsole.log(check_dict_case({'a': '1',\
    \ 'b': '2', 'c': '3', 'd': '4'}));\nconsole.log(check_dict_case({'a': '1', 'b':\
    \ '2', 'c': '3', 'D': '4'}));\nconsole.log(check_dict_case({'a': '1', 'b': '2',\
    \ 'C': '3', 'd': '4'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2', 'c':\
    \ '3', 'd': '4'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2', 'c': '3',\
    \ 'd': '4'}));\nconsole.log(check_dict_case({'a': '1', 'b': '2', 'C': '3', 'D':\
    \ '4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpklljynmp.ts(28,67): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpklljynmp.ts(29,1): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(29,13): error TS1005: '':'' expected.

    ../../../../tmp/tmpklljynmp.ts(29,20): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(29,25): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(30,7): error TS1005: '':'' expected.

    ../../../../tmp/tmpklljynmp.ts(30,38): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(33,10): error TS1005: '':'' expected.

    ../../../../tmp/tmpklljynmp.ts(33,17): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(34,7): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(34,34): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(35,9): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(35,70): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(36,9): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(36,86): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(37,9): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(37,85): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(38,9): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(38,86): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(39,9): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(39,68): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(40,9): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(40,74): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(41,9): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(41,40): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(44,1): error TS1005: '','' expected.

    ../../../../tmp/tmpklljynmp.ts(44,7): error TS1005: '')'' expected.

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 2
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    let lower = keys.every(key => key === key.toLowerCase());\n    let upper\
    \ = keys.every(key => key === key.toUpperCase());\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({'a': 1, 'b': 2}));\nconsole.log(check_dict_case({'A':\
    \ 1, 'B': 2}));\nconsole.log(check_dict_case({'a': 1, 'B': 2}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmprfpwplt3.ts(12,30): error TS2322: Type ''number'' is
    not assignable to type ''string''.

    ../../../../tmp/tmprfpwplt3.ts(12,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmprfpwplt3.ts(13,30): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmprfpwplt3.ts(13,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmprfpwplt3.ts(14,30): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmprfpwplt3.ts(14,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = Object.keys(dict).filter(key => key === key.toLowerCase());\n    let upper_keys\
    \ = Object.keys(dict).filter(key => key === key.toUpperCase());\n    return lower_keys.length\
    \ === Object.keys(dict).length || upper_keys.length === Object.keys(dict).length;\n\
    }\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgqvqhhay.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgqvqhhay.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = Object.keys(dict).filter(key => key.toLowerCase() === key);\n    let upper_keys\
    \ = Object.keys(dict).filter(key => key.toUpperCase() === key);\n    return (lower_keys.length\
    \ === Object.keys(dict).length || upper_keys.length === Object.keys(dict).length);\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    console.log(check_dict_case({'a': '1', 'b': '2', 'C': '3'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2', 'c': '3'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2',\
    \ 'c': '3'}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwxc4eeq2.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwxc4eeq2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    false

    false

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_6e_ie6h.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_6e_ie6h.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let isUpper =\
    \ true;\n    let isLower = true;\n    for (let key in dict) {\n        if (key.toUpperCase()\
    \ !== key) {\n            isUpper = false;\n        }\n        if (key.toLowerCase()\
    \ !== key) {\n            isLower = false;\n        }\n    }\n    return isUpper\
    \ || isLower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppuxth5f5.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppuxth5f5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase\
    \ = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lowerCase = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            upperCase = false;\n   \
    \     }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdtp9f2m6.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdtp9f2m6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({}));\nconsole.log(check_dict_case({'a': '1',\
    \ 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2', 'c': '3'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvr1hqhf5.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvr1hqhf5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    false

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = Object.keys(dict).filter(key => key.toLowerCase() === key);\n    let upper_keys\
    \ = Object.keys(dict).filter(key => key.toUpperCase() === key);\n    return lower_keys.length\
    \ === Object.keys(dict).length || upper_keys.length === Object.keys(dict).length;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplf6aqvdu.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplf6aqvdu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper = false;\n      \
    \  }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjxgsr0uu.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjxgsr0uu.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_6e_ie6h.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_6e_ie6h.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = false;\n    let upper_case: boolean = false;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            lower_case =\
    \ true;\n        } else if (key.toUpperCase() === key) {\n            upper_case\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a': '1',\
    \ 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp87rtylql.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp87rtylql.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({}));\n\
    console.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdwgbrv_z.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdwgbrv_z.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfbn_riwq.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfbn_riwq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key !== key.toLowerCase()) {\n            lower_case = false;\n\
    \        }\n        if (key !== key.toUpperCase()) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0doip9or.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0doip9or.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase\
    \ = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lowerCase = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            upperCase = false;\n   \
    \     }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp222l3bpl.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp222l3bpl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = false;\n    let upper: boolean = false;\n    for (let key in dict) {\n   \
    \     if (key.toLowerCase() === key) {\n            lower = true;\n        } else\
    \ if (key.toUpperCase() === key) {\n            upper = true;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpts_uhnlv.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpts_uhnlv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = Object.keys(dict).filter(key => key.toLowerCase() === key);\n    let upper_keys\
    \ = Object.keys(dict).filter(key => key.toUpperCase() === key);\n    return lower_keys.length\
    \ === Object.keys(dict).length || upper_keys.length === Object.keys(dict).length;\n\
    }\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo5_dn6et.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo5_dn6et.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    for (let key in dict) {\n        if (key !== key.toLowerCase())\
    \ {\n            lower = false;\n        }\n        if (key !== key.toUpperCase())\
    \ {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7_j3fjpm.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7_j3fjpm.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerKeys:\
    \ string[] = [];\n    let upperKeys: string[] = [];\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() === key) {\n            lowerKeys.push(key);\n\
    \        } else {\n            upperKeys.push(key);\n        }\n    }\n    if\
    \ (lowerKeys.length === 0 || upperKeys.length === 0) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nconsole.log(check_dict_case({'a':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'b': 'b', 'c': 'c'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b',\
    \ 'C': 'c'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeyn1fuvp.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeyn1fuvp.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = 0;\n    let upper_keys = 0;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            lower_keys += 1;\n        } else if (key.toUpperCase()\
    \ === key) {\n            upper_keys += 1;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_keys === Object.keys(dict).length\
    \ || upper_keys === Object.keys(dict).length;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph6pzlry9.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph6pzlry9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334617
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let is_lower\
    \ = keys[0].toLowerCase() === keys[0];\n    for (let i = 1; i < keys.length; i++)\
    \ {\n        if (is_lower) {\n            if (keys[i].toLowerCase() !== keys[i])\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (keys[i].toUpperCase() !== keys[i]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuke_sfhd.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuke_sfhd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334617
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = Object.keys(dict).filter(k => k === k.toLowerCase());\n    let upper_keys\
    \ = Object.keys(dict).filter(k => k === k.toUpperCase());\n    return lower_keys.length\
    \ === Object.keys(dict).length || upper_keys.length === Object.keys(dict).length;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnre0d8j5.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnre0d8j5.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334617
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let lower_case\
    \ = keys.every(key => key === key.toLowerCase());\n    let upper_case = keys.every(key\
    \ => key === key.toUpperCase());\n    return lower_case || upper_case;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp33nfy2ui.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp33nfy2ui.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = 0;\n\
    \    let upper = 0;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            lower++;\n        } else if (key.toUpperCase() === key)\
    \ {\n            upper++;\n        }\n    }\n    return lower === Object.keys(dict).length\
    \ || upper === Object.keys(dict).length;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3x1rrfhb.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3x1rrfhb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = false;\n    let upper: boolean = false;\n    for (let key in dict) {\n   \
    \     if (key.toLowerCase() === key) {\n            lower = true;\n        } else\
    \ if (key.toUpperCase() === key) {\n            upper = true;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return lower && upper;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbes83i5e.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbes83i5e.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    true

    false

    '
  timestamp: 1660334617
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let isLower =\
    \ keys[0] === keys[0].toLowerCase();\n    for (let key of keys) {\n        if\
    \ (isLower && key !== key.toLowerCase()) {\n            return false;\n      \
    \  }\n        if (!isLower && key !== key.toUpperCase()) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp08tq3fpu.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp08tq3fpu.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        lower = lower &&\
    \ key.toLowerCase() === key;\n        upper = upper && key.toUpperCase() === key;\n\
    \    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a': '1',\
    \ 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmps_i4ab0o.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps_i4ab0o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 2
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nlet dict1 = {'a': 1, 'b': 2, 'c': 3};\nlet dict2 = {'A': 1, 'B': 2, 'C':\
    \ 3};\nlet dict3 = {'A': 1, 'b': 2, 'C': 3};\nlet dict4 = {};\nconsole.log(check_dict_case(dict1));\n\
    console.log(check_dict_case(dict2));\nconsole.log(check_dict_case(dict3));\nconsole.log(check_dict_case(dict4));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: "../../../../tmp/tmpvqm4ba2d.ts(26,29): error TS2345: Argument of type '{\
    \ a: number; b: number; c: number; }' is not assignable to parameter of type '{\
    \ [key: string]: string; }'.\n  Property ''a'' is incompatible with index signature.\n\
    \    Type 'number' is not assignable to type 'string'.\n../../../../tmp/tmpvqm4ba2d.ts(27,29):\
    \ error TS2345: Argument of type '{ A: number; B: number; C: number; }' is not\
    \ assignable to parameter of type '{ [key: string]: string; }'.\n  Property ''A''\
    \ is incompatible with index signature.\n    Type 'number' is not assignable to\
    \ type 'string'.\n../../../../tmp/tmpvqm4ba2d.ts(28,29): error TS2345: Argument\
    \ of type '{ A: number; b: number; C: number; }' is not assignable to parameter\
    \ of type '{ [key: string]: string; }'.\n  Property ''A'' is incompatible with\
    \ index signature.\n    Type 'number' is not assignable to type 'string'.\n"
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase\
    \ = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lowerCase = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            upperCase = false;\n   \
    \     }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp222l3bpl.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp222l3bpl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    Object.keys(dict).forEach(key => {\n        if (key !== key.toLowerCase())\
    \ {\n            lower = false;\n        }\n        if (key !== key.toUpperCase())\
    \ {\n            upper = false;\n        }\n    });\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({}));\nconsole.log(check_dict_case({'A': 'a',\
    \ 'B': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'B': 'b'}));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgm0hp3a7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgm0hp3a7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    false

    false

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let lowerCase\
    \ = keys.every(key => key === key.toLowerCase());\n    let upperCase = keys.every(key\
    \ => key === key.toUpperCase());\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf7vp7o3q.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf7vp7o3q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase\
    \ = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lowerCase = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            upperCase = false;\n   \
    \     }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr42l9xpy.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr42l9xpy.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys:\
    \ string[] = [];\n    let upper_keys: string[] = [];\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() === key) {\n            lower_keys.push(key);\n\
    \        } else {\n            upper_keys.push(key);\n        }\n    }\n    return\
    \ (lower_keys.length === 0 || upper_keys.length === 0);\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp79mqwdc7.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp79mqwdc7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334611
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoccd_sa5.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoccd_sa5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) return false;\n    let isLower = keys[0].toLowerCase()\
    \ === keys[0];\n    for (let key of keys) {\n        if (isLower && key.toLowerCase()\
    \ !== key) return false;\n        if (!isLower && key.toUpperCase() !== key) return\
    \ false;\n    }\n    return true;\n}\n\nconsole.log(check_dict_case({'a': '1',\
    \ 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7dwi1fb0.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7dwi1fb0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    console.log(check_dict_case({'a': '1', 'b': '2', 'c': '3'}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp29ynpybw.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp29ynpybw.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 2
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 1, 'b': 2}));\nconsole.log(check_dict_case({'A':\
    \ 1, 'B': 2}));\nconsole.log(check_dict_case({'A': 1, 'b': 2}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpxlnsazgc.ts(19,30): error TS2322: Type ''number'' is
    not assignable to type ''string''.

    ../../../../tmp/tmpxlnsazgc.ts(19,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmpxlnsazgc.ts(20,30): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmpxlnsazgc.ts(20,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmpxlnsazgc.ts(21,30): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmpxlnsazgc.ts(21,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            upper = false;\n        } else if (key.toUpperCase()\
    \ === key) {\n            lower = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5ywgmf5r.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5ywgmf5r.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            upper = false;\n        } else if (key.toUpperCase()\
    \ === key) {\n            lower = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm5tx3xn_.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm5tx3xn_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg1sm51p_.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg1sm51p_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8xzz30ov.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8xzz30ov.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\nconsole.log(check_dict_case({'a': 'A', 'b': 'B'}));\nconsole.log(check_dict_case({'a':\
    \ 'A', 'b': 'B', 'c': 'C'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\n\
    console.log(check_dict_case({'A': 'a', 'B': 'b', 'C': 'c'}));\nconsole.log(check_dict_case({'1':\
    \ 'a', '2': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoanont2_.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoanont2_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    true

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = 0;\n    let upper_keys = 0;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            lower_keys += 1;\n        } else if (key.toUpperCase()\
    \ === key) {\n            upper_keys += 1;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_keys === Object.keys(dict).length\
    \ || upper_keys === Object.keys(dict).length;\n}\n\nconsole.log(check_dict_case({'a':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp56s4yndw.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp56s4yndw.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let all_lower\
    \ = true;\n    let all_upper = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            all_lower = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            all_upper = false;\n   \
    \     }\n    }\n    return all_lower || all_upper;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr4m51vkw.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr4m51vkw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys: string[]\
    \ = Object.keys(dict);\n    if (keys.length === 0) {\n        return false;\n\
    \    }\n    let is_lower: boolean = keys[0].toLowerCase() === keys[0];\n    for\
    \ (let key of keys) {\n        if (is_lower && key.toLowerCase() !== key) {\n\
    \            return false;\n        }\n        if (!is_lower && key.toUpperCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz0whh6au.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz0whh6au.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_keys\
    \ = Object.keys(dict).filter(key => key === key.toLowerCase());\n    let upper_keys\
    \ = Object.keys(dict).filter(key => key === key.toUpperCase());\n    return lower_keys.length\
    \ === Object.keys(dict).length || upper_keys.length === Object.keys(dict).length;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmn29sbj6.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmn29sbj6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper = false;\n      \
    \  }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0ghhqzvp.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0ghhqzvp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbpdpd2oa.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbpdpd2oa.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper = false;\n      \
    \  }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9rf6vdz0.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9rf6vdz0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({}));\n\
    console.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2', 'c': '3'}));\n\
    console.log(check_dict_case({'1': 'A', '2': 'B', '3': 'C'}));\nconsole.log(check_dict_case({'1':\
    \ 'a', '2': 'b', '3': 'c'}));\nconsole.log(check_dict_case({'1': 'A', '2': 'B',\
    \ '3': 'c'}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsif4r_75.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsif4r_75.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    false

    true

    true

    true

    '
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = 0;\n\
    \    let upper = 0;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            lower++;\n        } else if (key.toUpperCase() === key)\
    \ {\n            upper++;\n        }\n    }\n    return lower === Object.keys(dict).length\
    \ || upper === Object.keys(dict).length;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplgxwwxu3.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplgxwwxu3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase\
    \ = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lowerCase = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            upperCase = false;\n   \
    \     }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdtp9f2m6.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdtp9f2m6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase\
    \ = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lowerCase = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            upperCase = false;\n   \
    \     }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp222l3bpl.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp222l3bpl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkqapopma.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkqapopma.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334621
- exit_code: 2
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) return false;\n    let lower = keys[0].toLowerCase()\
    \ === keys[0];\n    for (let key of keys) {\n        if (lower && key.toLowerCase()\
    \ !== key) return false;\n        if (!lower && key.toUpperCase() !== key) return\
    \ false;\n    }\n    return true;\n}\n\nconsole.log(check_dict_case({'a': 1, 'b':\
    \ 2}));\nconsole.log(check_dict_case({'A': 1, 'B': 2}));\nconsole.log(check_dict_case({'a':\
    \ 1, 'B': 2}));\nconsole.log(check_dict_case({}));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4dlso5x7.ts(16,30): error TS2322: Type ''number'' is
    not assignable to type ''string''.

    ../../../../tmp/tmp4dlso5x7.ts(16,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmp4dlso5x7.ts(17,30): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmp4dlso5x7.ts(17,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmp4dlso5x7.ts(18,30): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    ../../../../tmp/tmp4dlso5x7.ts(18,38): error TS2322: Type ''number'' is not assignable
    to type ''string''.

    '
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({}));\nconsole.log(check_dict_case({'a': 'a'}));\n\
    console.log(check_dict_case({'a': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b', 'c': 'c'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b',\
    \ 'c': 'c'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b', 'C': 'c'}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp54urnlmx.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp54urnlmx.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    false

    false

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    console.log(check_dict_case({'a': '1', 'b': '2', 'c': '3'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2', 'C': '3'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2',\
    \ 'c': '3'}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfy0859_8.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfy0859_8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    true

    true

    false

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase\
    \ = true;\n    for (let key in dict) {\n        if (key !== key.toLowerCase())\
    \ {\n            lowerCase = false;\n        }\n        if (key !== key.toUpperCase())\
    \ {\n            upperCase = false;\n        }\n    }\n    return lowerCase ||\
    \ upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp82ek730o.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp82ek730o.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg1sm51p_.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg1sm51p_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper = false;\n      \
    \  }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9rf6vdz0.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9rf6vdz0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    let is_lower = keys[0].toLowerCase() === keys[0];\n    for (let key of keys)\
    \ {\n        if (is_lower && key.toLowerCase() !== key) {\n            return\
    \ false;\n        }\n        if (!is_lower && key.toUpperCase() !== key) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpn5bqj5ea.js:7\n    let is_lower = keys[0].toLowerCase() === keys[0];\n\
    \                           ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading 'toLowerCase')\n    at check_dict_case (/tmp/tmpn5bqj5ea.js:7:28)\n\
    \    at Object.<anonymous> (/tmp/tmpn5bqj5ea.js:21:13)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case\
    \ = true;\n    let upper_case = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lower_case = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper_case = false;\n \
    \       }\n    }\n    return lower_case || upper_case;\n}\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphrhbq55x.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphrhbq55x.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() != key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0lgt7pyw.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0lgt7pyw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerKeys\
    \ = 0;\n    let upperKeys = 0;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            lowerKeys++;\n        } else if (key.toUpperCase() ===\
    \ key) {\n            upperKeys++;\n        }\n    }\n    return lowerKeys ===\
    \ Object.keys(dict).length || upperKeys === Object.keys(dict).length;\n}\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvgnazfd1.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvgnazfd1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowercase\
    \ = true;\n    let uppercase = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() === key) {\n            uppercase = false;\n        } else\
    \ if (key.toUpperCase() === key) {\n            lowercase = false;\n        }\
    \ else {\n            return false;\n        }\n    }\n    return lowercase ||\
    \ uppercase;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5t13blk2.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5t13blk2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length == 0) {\n        return false;\n    }\n    let isLower =\
    \ keys[0].toLowerCase() == keys[0];\n    for (let key of keys) {\n        if (isLower\
    \ && key.toLowerCase() != key) {\n            return false;\n        }\n     \
    \   if (!isLower && key.toUpperCase() != key) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconsole.log(check_dict_case({'a': '1',\
    \ 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp66cqpco2.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp66cqpco2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase\
    \ = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lowerCase = false;\n        }\n \
    \       if (key.toUpperCase() !== key) {\n            upperCase = false;\n   \
    \     }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnpgqf12e.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnpgqf12e.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ != key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ != key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7153cgtd.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7153cgtd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1q9apxl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1q9apxl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgen4csbk.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgen4csbk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case\
    \ = true;\n    let upper_case = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lower_case = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper_case = false;\n \
    \       }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp33s1f0gy.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp33s1f0gy.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkqapopma.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkqapopma.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case\
    \ = true;\n    let upper_case = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() != key) {\n            lower_case = false;\n        }\n \
    \       if (key.toUpperCase() != key) {\n            upper_case = false;\n   \
    \     }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_bl_ryyp.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_bl_ryyp.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt2kq8_8u.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt2kq8_8u.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case\
    \ = true;\n    let upper_case = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lower_case = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper_case = false;\n \
    \       }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxnz5ut0w.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxnz5ut0w.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ != key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ != key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7153cgtd.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7153cgtd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let lower = keys.every(key\
    \ => key === key.toLowerCase());\n    let upper = keys.every(key => key === key.toUpperCase());\n\
    \    return lower || upper;\n}\n\nconsole.log(check_dict_case({}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'B': 'b'}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnwsm46p4.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnwsm46p4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    true

    '
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper = false;\n      \
    \  }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'a':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjxgsr0uu.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjxgsr0uu.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334614
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkqapopma.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkqapopma.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case\
    \ = true;\n    let upper_case = true;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() !== key) {\n            lower_case = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper_case = false;\n \
    \       }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxnz5ut0w.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxnz5ut0w.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334622
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkqapopma.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkqapopma.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334621
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper = false;\n      \
    \  }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0ghhqzvp.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0ghhqzvp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase:\
    \ boolean = true;\n    let upperCase: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lowerCase = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upperCase =\
    \ false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsma1kxtv.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsma1kxtv.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334623
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoccd_sa5.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoccd_sa5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let key in dict) {\n     \
    \   if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n\
    \        if (key.toUpperCase() !== key) {\n            upper = false;\n      \
    \  }\n    }\n    return lower || upper;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0ghhqzvp.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0ghhqzvp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334618
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerKeys:\
    \ string[] = [];\n    let upperKeys: string[] = [];\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() === key) {\n            lowerKeys.push(key);\n\
    \        } else {\n            upperKeys.push(key);\n        }\n    }\n    return\
    \ (lowerKeys.length === 0 || upperKeys.length === 0);\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvtbec5as.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvtbec5as.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334623
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk038vatk.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk038vatk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lowerCase:\
    \ boolean = true;\n    let upperCase: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lowerCase = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upperCase =\
    \ false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'A': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsma1kxtv.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsma1kxtv.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334623
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lowerCase = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp08wkz9x_.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp08wkz9x_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660334623
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\nconsole.log(check_dict_case({'a': '1', 'b': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({'A': '1', 'b': '2'}));\nconsole.log(check_dict_case({}));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3wsdp64.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3wsdp64.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    false

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower_case:\
    \ boolean = true;\n    let upper_case: boolean = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower_case = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper_case =\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\nconsole.log(check_dict_case({'a':\
    \ '1', 'b': '2'}));\nconsole.log(check_dict_case({'a': '1', 'B': '2'}));\nconsole.log(check_dict_case({'A':\
    \ '1', 'B': '2'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp128ty3vz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp128ty3vz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    '
  timestamp: 1660334610
- exit_code: 1
  program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\nfunction\
    \ check_dict_case(dict: {[key: string]: string}): boolean {\n    let lower = true;\n\
    \    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\nconsole.log(check_dict_case({'a': 'a', 'b': 'b'}));\nconsole.log(check_dict_case({'a':\
    \ 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A': 'a', 'B': 'b'}));\nconsole.log(check_dict_case({'A':\
    \ 'a', 'b': 'b'}));\nconsole.log(check_dict_case({}));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnrpthvri.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnrpthvri.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    false

    true

    '
  timestamp: 1660334623
