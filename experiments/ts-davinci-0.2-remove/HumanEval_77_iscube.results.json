{
  "language": "ts",
  "name": "HumanEval_77_iscube",
  "results": [
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i <= a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpo59cica1.js:22:12)\n    at Object.<anonymous> (/tmp/tmpo59cica1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i ** 3 < a) {\n        i++;\n    }\n    return i ** 3 === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp95elnhhu.js:24:12)\n    at Object.<anonymous> (/tmp/tmp95elnhhu.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(10));\nconsole.log(iscube(11));\nconsole.log(iscube(12));\nconsole.log(iscube(13));\nconsole.log(iscube(14));\nconsole.log(iscube(15));\nconsole.log(iscube(16));\nconsole.log(iscube(17));\nconsole.log(iscube(18));\nconsole.log(iscube(19));\nconsole.log(iscube(20));\nconsole.log(iscube(21));\nconsole.log(iscube(22));\nconsole.log(iscube(23));\nconsole.log(iscube(24));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp10214hzj.js:66:12)\n    at Object.<anonymous> (/tmp/tmp10214hzj.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    let i: number = 0;\n    while (cube < a) {\n        i++;\n        cube = i * i * i;\n    }\n    return cube === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpikba553f.js:31:12)\n    at Object.<anonymous> (/tmp/tmpikba553f.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(1.5));\nconsole.log(iscube(2.5));\nconsole.log(iscube(3.5));\nconsole.log(iscube(4.5));\nconsole.log(iscube(5.5));\nconsole.log(iscube(6.5));\nconsole.log(iscube(7.5));\nconsole.log(iscube(8.5));\nconsole.log(iscube(9.5));\nconsole.log(iscube(10.5));\nconsole.log(iscube(11.5));\nconsole.log(iscube(12.5));\nconsole.log(iscube(13.5));\nconsole.log(iscube(14.5));\nconsole.log(iscube(15.5));\nconsole.log(iscube(16.5));\nconsole.log(iscube(17.5));\nconsole.log(iscube(18.5));\nconsole.log(iscube(19.5));\nconsole.log(iscube(20.5));\nconsole.log(iscube(21.5));\nconsole.log(iscube(22.5));\nconsole.log(iscube(23.5));\nconsole.log(iscube(24.5));\nconsole.log(iscube(25.5));\nconsole.log(iscube(26.5));\nconsole.log(iscube(27.5));\nconsole.log(iscube(28.5));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu8y8wwxj.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15129));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(iscube(91125));\nconsole.log(iscube(97336));\nconsole.log(iscube(103823));\nconsole.log(iscube(110592));\nconsole.log(iscube(117649));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_bwg6m0b.ts(56,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpip11a834.js:22:12)\n    at Object.<anonymous> (/tmp/tmpip11a834.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(20));\nconsole.log(iscube(125));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgqj2qsc4.js:21:12)\n    at Object.<anonymous> (/tmp/tmpgqj2qsc4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\nfalse\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp12_kf01g.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu357l8up.js:63:12)\n    at Object.<anonymous> (/tmp/tmpu357l8up.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(125));\nconsole.log(iscube(1000));\nconsole.log(iscube(1728));\nconsole.log(iscube(10000));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(27000));\nconsole.log(iscube(50653));\nconsole.log(iscube(51452));\nconsole.log(iscube(54872));\nconsole.log(iscube(60007));\nconsole.log(iscube(68719));\nconsole.log(iscube(79507));\nconsole.log(iscube(91125));\nconsole.log(iscube(100000));\nconsole.log(iscube(177147));\nconsole.log(iscube(279936));\nconsole.log(iscube(493039));\nconsole.log(iscube(571787));\nconsole.log(iscube(704969));\nconsole.log(iscube(823543));\nconsole.log(iscube(976562));\nconsole.log(iscube(1002001));\nconsole.log(iscube(1299721));\nconsole.log(iscube(1679616));\nconsole.log(iscube(2438901));\nconsole.log(iscube(2985984));\nconsole.log(iscube(3779136));\nconsole.log(iscube(4826809\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9v9qkze_.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmp9v9qkze_.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-27));\nconsole.log(iscube(-28));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpabojhe4q.js:26:12)\n    at Object.<anonymous> (/tmp/tmpabojhe4q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps96f7qi5.js:62:12)\n    at Object.<anonymous> (/tmp/tmps96f7qi5.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i < a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-729));\nconsole.log(iscube(-1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2q1vkorh.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2q1vkorh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg2tzp7rr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpg2tzp7rr.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1000000));\nconsole.log(iscube(10000000000));\nconsole.log(iscube(1000000000000000000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6ymzh01p.js:40:12)\n    at Object.<anonymous> (/tmp/tmp6ymzh01p.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp07bzrty5.ts(57,1): error TS1005: ',' expected.\n../../../../tmp/tmp07bzrty5.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps96f7qi5.js:62:12)\n    at Object.<anonymous> (/tmp/tmps96f7qi5.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1331));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3l1qjcl8.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3l1qjcl8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm9b9ucyq.js:25:12)\n    at Object.<anonymous> (/tmp/tmpm9b9ucyq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmponlo2_d8.js:26:12)\n    at Object.<anonymous> (/tmp/tmponlo2_d8.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnv_aty0k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnv_aty0k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(125));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjjpo891t.js:21:12)\n    at Object.<anonymous> (/tmp/tmpjjpo891t.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp12_kf01g.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpevfiam2h.js:22:12)\n    at Object.<anonymous> (/tmp/tmpevfiam2h.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1331));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3l1qjcl8.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3l1qjcl8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i < a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppfhrri5k.js:22:12)\n    at Object.<anonymous> (/tmp/tmppfhrri5k.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    return Number.isInteger(cube);\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334348
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdqktd3yr.js:63:12)\n    at Object.<anonymous> (/tmp/tmpdqktd3yr.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(iscube(91125));\nconsole.log(iscube(97336));\nconsole.log(iscube(103823));\nconsole.log(iscube(110592));\nconsole.log(iscube(117649));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq82tn_ri.js:61:12)\n    at Object.<anonymous> (/tmp/tmpq82tn_ri.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsmjdr5rz.js:17:12)\n    at Object.<anonymous> (/tmp/tmpsmjdr5rz.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps96f7qi5.js:62:12)\n    at Object.<anonymous> (/tmp/tmps96f7qi5.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(iscube(91125));\nconsole.log(iscube(97336));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzql2t2x9.js:62:12)\n    at Object.<anonymous> (/tmp/tmpzql2t2x9.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2q7g0n6z.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2q7g0n6z.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpom86him7.js:22:12)\n    at Object.<anonymous> (/tmp/tmpom86him7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnv_aty0k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnv_aty0k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjwnbgd6y.js:60:12)\n    at Object.<anonymous> (/tmp/tmpjwnbgd6y.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3vhfltlr.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3vhfltlr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let num = Math.sqrt(a);\n    if (num % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp87gbvqsb.js:28:12)\n    at Object.<anonymous> (/tmp/tmp87gbvqsb.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp553k7kk0.js:19:12)\n    at Object.<anonymous> (/tmp/tmp553k7kk0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8h5cqctw.js:66:12)\n    at Object.<anonymous> (/tmp/tmp8h5cqctw.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdmr8w2kd.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdmr8w2kd.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(9));\nconsole.log(iscube(1));\nconsole.log(iscube(125));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(10000));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(64));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6wudectv.ts(60,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(9));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\nconsole.log(iscube(-28));\nconsole.log(iscube(-125));\nconsole.log(iscube(-9));\nconsole.log(iscube(-1));\nconsole.log(iscube(-0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpayeq0e0n.js:33:12)\n    at Object.<anonymous> (/tmp/tmpayeq0e0n.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8wtg5h_o.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8wtg5h_o.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu357l8up.js:63:12)\n    at Object.<anonymous> (/tmp/tmpu357l8up.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps96f7qi5.js:62:12)\n    at Object.<anonymous> (/tmp/tmps96f7qi5.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1000000));\nconsole.log(iscube(10000000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp2meq9fn.js:33:12)\n    at Object.<anonymous> (/tmp/tmpp2meq9fn.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu357l8up.js:63:12)\n    at Object.<anonymous> (/tmp/tmpu357l8up.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let result: boolean = false;\n    for (let i: number = 0; i < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0ck8qdc_.js:21:12)\n    at Object.<anonymous> (/tmp/tmp0ck8qdc_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n  return Math.cbrt(a) % 1 === 0;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(9));\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(3));\nconsole.log(iscube(4));\nconsole.log(iscube(5));\nconsole.log(iscube(6));\nconsole.log(iscube(7));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(10));\nconsole.log(iscube(11));\nconsole.log(iscube(12));\nconsole.log(iscube(13));\nconsole.log(iscube(14));\nconsole.log(iscube(15));\nconsole.log(iscube(16));\nconsole.log(iscube(17));\nconsole.log(iscube(18));\nconsole.log(iscube(19));\nconsole.log(iscube(20));\nconsole.log(iscube(21));\nconsole.log(iscube(22));\nconsole.log(iscube(23));\nconsole.log(iscube(24));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiohnvwox.ts(58,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(3));\nconsole.log(iscube(8));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_vvq6qjx.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_vvq6qjx.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp07bzrty5.ts(57,1): error TS1005: ',' expected.\n../../../../tmp/tmp07bzrty5.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(256));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-343));\nconsole.log(iscube(-512));\nconsole.log(iscube(-729));\nconsole.log(iscube(-1000));\nconsole.log(iscube(-1331));\nconsole.log(iscube(-1728));\nconsole.log(iscube(-2197));\nconsole.log(iscube(-2744));\nconsole.log(iscube(-3375));\nconsole.log(iscube(-4096));\nconsole.log(iscube(-4913));\nconsole.log(iscube(-5832));\nconsole.log(iscube(-6859));\nconsole.log(iscube(-8000));\nconsole.log(iscube(-9261));\nconsole.log(iscube(-10648));\nconsole.log(iscube(-12167));\nconsole.log(iscube(-13824));\nconsole.log(iscube(-15625));\nconsole.log(iscube(-17576));\nconsole.log(iscube(-19683));\nconsole.log(iscube(-21952));\nconsole.log(iscube(-24389));\nconsole.log(iscube(-27000));\nconsole.log(iscube(-29791));\nconsole.log(iscube(-32768));\nconsole.log(iscube(-35937));\nconsole.log(iscube(-39304));\nconsole.log(iscube(-42875));\nconsole.log(iscube(-46656));\nconsole.log(iscube(-50653));\nconsole.log(iscube(-\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpas17hs6l.ts(58,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(0));\nconsole.log(iscube(1000000));\nconsole.log(iscube(531441));\nconsole.log(iscube(4));\nconsole.log(iscube(125));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(1000000));\nconsole.log(iscube(531441));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp71m_ol1q.js:40:12)\n    at Object.<anonymous> (/tmp/tmp71m_ol1q.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9shm846o.js:24:12)\n    at Object.<anonymous> (/tmp/tmp9shm846o.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.pow(a, 1 / 3);\n    if (cube % 1 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.log(iscube(72));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw6yk1qnu.ts(60,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps96f7qi5.js:62:12)\n    at Object.<anonymous> (/tmp/tmps96f7qi5.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(3));\nconsole.log(iscube(4));\nconsole.log(iscube(5));\nconsole.log(iscube(6));\nconsole.log(iscube(7));\nconsole.log(iscube(9));\nconsole.log(iscube(10));\nconsole.log(iscube(11));\nconsole.log(iscube(12));\nconsole.log(iscube(13));\nconsole.log(iscube(14));\nconsole.log(iscube(15));\nconsole.log(iscube(16));\nconsole.log(iscube(17));\nconsole.log(iscube(18));\nconsole.log(iscube(19));\nconsole.log(iscube(20));\nconsole.log(iscube(21));\nconsole.log(iscube(22));\nconsole.log(iscube(23));\nconsole.log(iscube(24));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy7r5657q.js:63:12)\n    at Object.<anonymous> (/tmp/tmpy7r5657q.js:72:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let b: number = Math.cbrt(a);\n    if (b % 1 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.log(iscube(72));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps9z0fddw.ts(60,1): error TS1005: ',' expected.\n../../../../tmp/tmps9z0fddw.ts(60,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpanuv6971.js:18:12)\n    at Object.<anonymous> (/tmp/tmpanuv6971.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    return Math.pow(Math.round(Math.cbrt(a)), 3) === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(9));\nconsole.log(iscube(1));\nconsole.log(iscube(125));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-27));\nconsole.log(iscube(-1));\nconsole.log(iscube(-125));\nconsole.log(iscube(-256));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgq8a9lpi.js:30:12)\n    at Object.<anonymous> (/tmp/tmpgq8a9lpi.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0or6x74z.ts(61,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsibthy3k.js:23:12)\n    at Object.<anonymous> (/tmp/tmpsibthy3k.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoy5p4j3n.js:59:12)\n    at Object.<anonymous> (/tmp/tmpoy5p4j3n.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    return Number.isInteger(cube);\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(3));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(1728));\nconsole.log(iscube(5832));\nconsole.log(iscube(10000));\nconsole.log(iscube(50653));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp12_kf01g.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp97kyxp9w.js:20:12)\n    at Object.<anonymous> (/tmp/tmp97kyxp9w.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i < a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.log(iscube(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphut91a6e.ts(62,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(3));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(1728));\nconsole.log(iscube(0));\nconsole.log(iscube(-8));\nconsole.log(iscube(-125));\nconsole.log(iscube(-27));\nconsole.log(iscube(-1));\nconsole.log(iscube(-125));\nconsole.log(iscube(-27));\nconsole.log(iscube(-1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmph92um_4f.js:29:12)\n    at Object.<anonymous> (/tmp/tmph92um_4f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2));\nconsole.log(iscube(3));\nconsole.log(iscube(4));\nconsole.log(iscube(5));\nconsole.log(iscube(6));\nconsole.log(iscube(7));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(10));\nconsole.log(iscube(11));\nconsole.log(iscube(12));\nconsole.log(iscube(13));\nconsole.log(iscube(14));\nconsole.log(iscube(15));\nconsole.log(iscube(16));\nconsole.log(iscube(17));\nconsole.log(iscube(18));\nconsole.log(iscube(19));\nconsole.log(iscube(20));\nconsole.log(iscube(21));\nconsole.log(iscube(22));\nconsole.log(iscube(23));\nconsole.log(iscube(24));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz3hjon_5.js:66:12)\n    at Object.<anonymous> (/tmp/tmpz3hjon_5.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let result: boolean = false;\n    for (let i: number = 0; i < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp69azyt05.ts(59,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let b: number = Math.cbrt(a);\n    if (b % 1 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp52n4nq5a.js:28:12)\n    at Object.<anonymous> (/tmp/tmp52n4nq5a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp12_kf01g.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(iscube(91125\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg5v7f0rg.ts(57,1): error TS1005: ',' expected.\n../../../../tmp/tmpg5v7f0rg.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(10));\nconsole.log(iscube(11));\nconsole.log(iscube(12));\nconsole.log(iscube(13));\nconsole.log(iscube(14));\nconsole.log(iscube(15));\nconsole.log(iscube(16));\nconsole.log(iscube(17));\nconsole.log(iscube(18));\nconsole.log(iscube(19));\nconsole.log(iscube(20));\nconsole.log(iscube(21));\nconsole.log(iscube(22));\nconsole.log(iscube(23));\nconsole.log(iscube(24));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp79qk7f_r.js:64:12)\n    at Object.<anonymous> (/tmp/tmp79qk7f_r.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334355
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1331));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwu9nofyz.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwu9nofyz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334355
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(8));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2147483648));\nconsole.log(iscube(3147483648));\nconsole.log(iscube(4147483648));\nconsole.log(iscube(5147483648));\nconsole.log(iscube(6147483648));\nconsole.log(iscube(7147483648));\nconsole.log(iscube(8147483648));\nconsole.log(iscube(9147483648));\nconsole.log(iscube(10147483648));\nconsole.log(iscube(11147483648));\nconsole.log(iscube(12147483648));\nconsole.log(iscube(13147483648));\nconsole.log(iscube(14147483648));\nconsole.log(iscube(15147483648));\nconsole.log(iscube(16147483648));\nconsole.log(iscube(17147483648));\nconsole.log(iscube(18147483648));\nconsole.log(iscube(19147483648));\nconsole.log(iscube(20147483648));\nconsole.log(iscube(21147483648));\nconsole.log(iscube(22147483648));\nconsole.log(iscube(23147483648));\nconsole.log(iscube(24147483648));\nconsole.log(iscube(25147483648));\nconsole.log(iscube(26147483648));\nconsole.log(iscube(27147483648));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq6arw68h.js:32:12)\n    at Object.<anonymous> (/tmp/tmpq6arw68h.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(1.5));\nconsole.log(iscube(2.5));\nconsole.log(iscube(3.5));\nconsole.log(iscube(4.5));\nconsole.log(iscube(5.5));\nconsole.log(iscube(6.5));\nconsole.log(iscube(7.5));\nconsole.log(iscube(8.5));\nconsole.log(iscube(9.5));\nconsole.log(iscube(10.5));\nconsole.log(iscube(11.5));\nconsole.log(iscube(12.5));\nconsole.log(iscube(13.5));\nconsole.log(iscube(14.5));\nconsole.log(iscube(15.5));\nconsole.log(iscube(16.5));\nconsole.log(iscube(17.5));\nconsole.log(iscube(18.5));\nconsole.log(iscube(19.5));\nconsole.log(iscube(20.5));\nconsole.log(iscube(21.5));\nconsole.log(iscube(22.5));\nconsole.log(iscube(23.5));\nconsole.log(iscube(24.5));\nconsole.log(iscube(25.5));\nconsole.log(iscube(26.5));\nconsole.log(iscube(27.5));\nconsole.log(iscube(28.5));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu8y8wwxj.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps96f7qi5.js:62:12)\n    at Object.<anonymous> (/tmp/tmps96f7qi5.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(125));\nconsole.log(iscube(256));\nconsole.log(iscube(9));\nconsole.log(iscube(8));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-125));\nconsole.log(iscube(-256));\nconsole.log(iscube(-9));\nconsole.log(iscube(-64));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9p1cjorb.js:30:12)\n    at Object.<anonymous> (/tmp/tmp9p1cjorb.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let b: number = Math.cbrt(a);\n    if (b % 1 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(9));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(1.5));\nconsole.log(iscube(2.5));\nconsole.log(iscube(3.5));\nconsole.log(iscube(4.5));\nconsole.log(iscube(5.5));\nconsole.log(iscube(6.5));\nconsole.log(iscube(7.5));\nconsole.log(iscube(8.5));\nconsole.log(iscube(9.5));\nconsole.log(iscube(10.5));\nconsole.log(iscube(11.5));\nconsole.log(iscube(12.5));\nconsole.log(iscube(13.5));\nconsole.log(iscube(14.5));\nconsole.log(iscube(15.5));\nconsole.log(iscube(16.5));\nconsole.log(iscube(17.5));\nconsole.log(iscube(18.5));\nconsole.log(iscube(19.5));\nconsole.log(iscube(20.5));\nconsole.log(iscube(21.5));\nconsole.log(iscube(22.5));\nconsole.log(iscube(23.5));\nconsole.log(iscube(24.5));\nconsole.log(iscube(25.5));\nconsole.log(iscube(26.5));\nconsole.log(iscube(27.5));\nconsole.log(iscube(28.5));\nconsole.log(iscube(29.5));\nconsole.log(iscube(30.5));\nconsole.log(iscube(31.5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let result: boolean = false;\n    for (let i: number = 0; i < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp69azyt05.ts(59,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(64));\nconsole.log(iscube(1000));\nconsole.log(iscube(729));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8r8m6kp0.js:27:12)\n    at Object.<anonymous> (/tmp/tmp8r8m6kp0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    return Number.isInteger(cube);\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\nconsole.log(iscube(-125));\nconsole.log(iscube(-64));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1000000000000000000));\nconsole.log(iscube(1000000000000000000000));\nconsole.log(iscube(1000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpprcgd54j.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpprcgd54j.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd0n7ek_3.js:26:12)\n    at Object.<anonymous> (/tmp/tmpd0n7ek_3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1331));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpch1txvd0.js:24:12)\n    at Object.<anonymous> (/tmp/tmpch1txvd0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvrizhreo.js:40:12)\n    at Object.<anonymous> (/tmp/tmpvrizhreo.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n  let i: number = 1;\n  while (i * i * i <= a) {\n    if (i * i * i === a) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(-2197));\nconsole.log(iscube(-2744));\nconsole.log(iscube(-3375));\nconsole.log(iscube(-4096));\nconsole.log(iscube(-4913));\nconsole.log(iscube(-5832));\nconsole.log(iscube(-6859));\nconsole.log(iscube(-8000));\nconsole.log(iscube(-9261));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp1hxturz.js:42:12)\n    at Object.<anonymous> (/tmp/tmpp1hxturz.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = a ** (1 / 3);\n    if (Number.isInteger(cube)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjd348ohl.js:63:12)\n    at Object.<anonymous> (/tmp/tmpjd348ohl.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeo9f4324.js:21:12)\n    at Object.<anonymous> (/tmp/tmpeo9f4324.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfaw2tri1.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfaw2tri1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i ** 3 === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(722));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp70a1d14x.js:24:12)\n    at Object.<anonymous> (/tmp/tmp70a1d14x.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbm3807dn.js:28:12)\n    at Object.<anonymous> (/tmp/tmpbm3807dn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\nconsole.log(iscube(-125));\nconsole.log(iscube(-64));\nconsole.log(iscube(-8));\nconsole.log(iscube(-1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp528_3_gr.js:32:12)\n    at Object.<anonymous> (/tmp/tmp528_3_gr.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1ztgk6_w.js:27:12)\n    at Object.<anonymous> (/tmp/tmp1ztgk6_w.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwfclqnpk.js:21:12)\n    at Object.<anonymous> (/tmp/tmpwfclqnpk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(0));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(3));\nconsole.log(iscube(9));\nconsole.log(iscube(15));\nconsole.log(iscube(17));\nconsole.log(iscube(18));\nconsole.log(iscube(19));\nconsole.log(iscube(22));\nconsole.log(iscube(23));\nconsole.log(iscube(24));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp40exyth_.js:66:12)\n    at Object.<anonymous> (/tmp/tmp40exyth_.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334359
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    let i: number = 0;\n    while (cube < a) {\n        i++;\n        cube = i * i * i;\n    }\n    return cube === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(1000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpctpnu4dn.js:32:12)\n    at Object.<anonymous> (/tmp/tmpctpnu4dn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334358
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq8duiykm.js:20:12)\n    at Object.<anonymous> (/tmp/tmpq8duiykm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334359
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    if (a < 0) {\n        return false;\n    }\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(0));\nconsole.log(iscube(-8));\nconsole.log(iscube(1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnxnccti7.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnxnccti7.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\n",
      "timestamp": 1660334359
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(iscube(91125));\nconsole.log(iscube(97336));\nconsole.log(iscube(103823));\nconsole.log(iscube(110592));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvpcy5u3i.js:62:12)\n    at Object.<anonymous> (/tmp/tmpvpcy5u3i.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334359
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-1));\nconsole.log(iscube(-0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp64s_ju9h.js:28:12)\n    at Object.<anonymous> (/tmp/tmp64s_ju9h.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_vvq6qjx.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_vvq6qjx.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n  let i: number = 1;\n  while (i * i * i <= a) {\n    if (i * i * i === a) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe2uhox8j.js:23:12)\n    at Object.<anonymous> (/tmp/tmpe2uhox8j.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpds19dtc_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpds19dtc_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnv_aty0k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnv_aty0k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp12_kf01g.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxu0ugeuz.js:26:12)\n    at Object.<anonymous> (/tmp/tmpxu0ugeuz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzcmz70es.js:32:12)\n    at Object.<anonymous> (/tmp/tmpzcmz70es.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzqu5bqlv.js:24:12)\n    at Object.<anonymous> (/tmp/tmpzqu5bqlv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoy5p4j3n.js:59:12)\n    at Object.<anonymous> (/tmp/tmpoy5p4j3n.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334353
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(256));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\nconsole.log(iscube(-28));\nconsole.log(iscube(-125));\nconsole.log(iscube(-256));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwu3rejh7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpwu3rejh7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(8));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp88bqq339.js:29:12)\n    at Object.<anonymous> (/tmp/tmp88bqq339.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp553k7kk0.js:19:12)\n    at Object.<anonymous> (/tmp/tmp553k7kk0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp553k7kk0.js:19:12)\n    at Object.<anonymous> (/tmp/tmp553k7kk0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0i4noczu.js:62:12)\n    at Object.<anonymous> (/tmp/tmp0i4noczu.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(4));\nconsole.log(iscube(5));\nconsole.log(iscube(6));\nconsole.log(iscube(7));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(10));\nconsole.log(iscube(11));\nconsole.log(iscube(12));\nconsole.log(iscube(13));\nconsole.log(iscube(14));\nconsole.log(iscube(15));\nconsole.log(iscube(16));\nconsole.log(iscube(17));\nconsole.log(iscube(18));\nconsole.log(iscube(19));\nconsole.log(iscube(20));\nconsole.log(iscube(21));\nconsole.log(iscube(22));\nconsole.log(iscube(23));\nconsole.log(iscube(24));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp6l4a04r.ts(61,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(3));\nconsole.log(iscube(8));\nconsole.log(iscube(26));\nconsole.log(iscube(1728));\nconsole.log(iscube(0));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(125));\nconsole.log(iscube(64));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15504));\nconsole.log(iscube(17281));\nconsole.log(iscube(19600));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6e_ikuex.ts(58,1): error TS1005: ',' expected.\n../../../../tmp/tmp6e_ikuex.ts(58,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpovtjg6lk.js:26:12)\n    at Object.<anonymous> (/tmp/tmpovtjg6lk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa6bqkqsy.js:24:12)\n    at Object.<anonymous> (/tmp/tmpa6bqkqsy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1331));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwu9nofyz.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwu9nofyz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334355
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(12));\nconsole.log(iscube(9));\nconsole.log(iscube(8));\nconsole.log(iscube(7));\nconsole.log(iscube(6));\nconsole.log(iscube(5));\nconsole.log(iscube(4));\nconsole.log(iscube(3));\nconsole.log(iscube(2));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-2));\nconsole.log(iscube(-3));\nconsole.log(iscube(-4));\nconsole.log(iscube(-5));\nconsole.log(iscube(-6));\nconsole.log(iscube(-7));\nconsole.log(iscube(-8));\nconsole.log(iscube(-9));\nconsole.log(iscube(-10));\nconsole.log(iscube(-11));\nconsole.log(iscube(-12));\nconsole.log(iscube(-13));\nconsole.log(iscube(-14));\nconsole.log(iscube(-15));\nconsole.log(iscube(-16));\nconsole.log(iscube(-17));\nconsole.log(iscube(-18));\nconsole.log(iscube(-19));\nconsole.log(iscube(-20));\nconsole.log(iscube(-21));\nconsole.log(iscube(-22));\nconsole.log(iscube(-23));\nconsole.log(iscube(-24));\nconsole.log(iscube(-25));\nconsole.log(iscube(-26));\nconsole.log(iscube(-27));\nconsole.log(iscube(-28));\nconsole.log(iscube(-29));\nconsole.log(iscube(-30));\nconsole.log(iscube(-31));\nconsole.log(iscube(-\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr7u1ax8c.ts(60,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpipftdi3j.js:34:12)\n    at Object.<anonymous> (/tmp/tmpipftdi3j.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1331));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpginbirdv.js:21:12)\n    at Object.<anonymous> (/tmp/tmpginbirdv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgkwfmkyk.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgkwfmkyk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let x: number = Math.cbrt(a);\n    if (x % 1 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334360
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1331));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3l1qjcl8.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3l1qjcl8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let b: number = Math.pow(a, 1 / 3);\n    if (b % 1 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvaf9u964.js:39:12)\n    at Object.<anonymous> (/tmp/tmpvaf9u964.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(256));\nconsole.log(iscube(512));\nconsole.log(iscube(1000));\nconsole.log(iscube(10000));\nconsole.log(iscube(100000));\nconsole.log(iscube(1000000));\nconsole.log(iscube(10000000));\nconsole.log(iscube(100000000));\nconsole.log(iscube(1000000000));\nconsole.log(iscube(10000000000));\nconsole.log(iscube(100000000000));\nconsole.log(iscube(1000000000000));\nconsole.log(iscube(10000000000000));\nconsole.log(iscube(100000000000000));\nconsole.log(iscube(1000000000000000));\nconsole.log(iscube(10000000000000000));\nconsole.log(iscube(100000000000000000));\nconsole.log(iscube(1000000000000000000));\nconsole.log(iscube(10000000000000000000));\nconsole.log(iscube(100000000000000000000));\nconsole.log(iscube(1000000000000000000000));\nconsole.log(iscube(10000000000000000000000));\nconsole.log(iscube(100000000000000000000000));\nconsole.log(iscube(1000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000));\nconsole.log(iscube(100000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000));\nconsole.log(iscube(100000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000));\nconsole.log(iscube(100000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000));\nconsole.log(iscube(100000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000));\nconsole.log(iscube\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvq85z5qo.ts(53,1): error TS1005: ',' expected.\n../../../../tmp/tmpvq85z5qo.ts(53,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334361
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps96f7qi5.js:62:12)\n    at Object.<anonymous> (/tmp/tmps96f7qi5.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnv_aty0k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnv_aty0k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnv_aty0k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnv_aty0k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2vmv7l8t.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2vmv7l8t.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let x: number = Math.sqrt(a);\n    return Number.isInteger(x);\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl3dt7ois.js:19:12)\n    at Object.<anonymous> (/tmp/tmpl3dt7ois.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\ntrue\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(8));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2187));\nconsole.log(iscube(3375));\nconsole.log(iscube(4913));\nconsole.log(iscube(6859));\nconsole.log(iscube(9261));\nconsole.log(iscube(13832));\nconsole.log(iscube(19683));\nconsole.log(iscube(234256));\nconsole.log(iscube(2097152));\nconsole.log(iscube(4782969));\nconsole.log(iscube(16777216));\nconsole.log(iscube(282475249));\nconsole.log(iscube(1073741824));\nconsole.log(iscube(1610612736));\nconsole.log(iscube(134217728));\nconsole.log(iscube(34359738368));\nconsole.log(iscube(35184372088832));\nconsole.log(iscube(387420489));\nconsole.log(iscube(1099511627776));\nconsole.log(iscube(285311670611));\nconsole.log(iscube(576650390625));\nconsole.log(iscube(1152921504606846976));\nconsole.log(iscube(13407807929942597099574024998));\nconsole.log(iscube(900\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm3gracu4.ts(52,1): error TS1005: ',' expected.\n../../../../tmp/tmpm3gracu4.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu357l8up.js:63:12)\n    at Object.<anonymous> (/tmp/tmpu357l8up.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let result: boolean = false;\n    for (let i: number = 0; i < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp69azyt05.ts(59,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpki1lv1oq.js:25:12)\n    at Object.<anonymous> (/tmp/tmpki1lv1oq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(16777216));\nconsole.log(iscube(16777217));\nconsole.log(iscube(4096));\nconsole.log(iscube(4097));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0piroh0r.js:34:12)\n    at Object.<anonymous> (/tmp/tmp0piroh0r.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.log(iscube(72));\nconsole.log(iscube\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpebgzfwcc.ts(61,1): error TS1005: ',' expected.\n../../../../tmp/tmpebgzfwcc.ts(61,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i <= a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt4i61qwh.ts(57,1): error TS1005: ',' expected.\n../../../../tmp/tmpt4i61qwh.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(729));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(1000000));\nconsole.log(iscube(10000000000));\nconsole.log(iscube(10000000000000));\nconsole.log(iscube(1000000000000000000));\nconsole.log(iscube(1000000000000000000000));\nconsole.log(iscube(1000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwrdue2mc.ts(53,1): error TS1005: ',' expected.\n../../../../tmp/tmpwrdue2mc.ts(53,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-27));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppwsig3_e.js:28:12)\n    at Object.<anonymous> (/tmp/tmppwsig3_e.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(8));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9s9pya19.js:22:12)\n    at Object.<anonymous> (/tmp/tmp9s9pya19.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfed949jn.ts(58,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(256));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwwfvsj_a.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwwfvsj_a.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let result: boolean = false;\n    for (let i: number = 0; i < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(8));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_vp0iaau.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_vp0iaau.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15129));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(iscube(91125));\nconsole.log(iscube(97336));\nconsole.log(iscube(103823));\nconsole.log(iscube(110592));\nconsole.log(iscube(117649));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_bwg6m0b.ts(56,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i <= a; i++) {\n        if (i ** 3 === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp8wy7dp4.js:24:12)\n    at Object.<anonymous> (/tmp/tmpp8wy7dp4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps96f7qi5.js:62:12)\n    at Object.<anonymous> (/tmp/tmps96f7qi5.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(3));\nconsole.log(iscube(8));\nconsole.log(iscube(26));\nconsole.log(iscube(1728));\nconsole.log(iscube(0));\nconsole.log(iscube(125));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(12));\nconsole.log(iscube(1728));\nconsole.log(iscube(5832));\nconsole.log(iscube(7000));\nconsole.log(iscube(531441));\nconsole.log(iscube(4104));\nconsole.log(iscube(13824));\nconsole.log(iscube(20736));\nconsole.log(iscube(24389));\nconsole.log(iscube(32805));\nconsole.log(iscube(4096));\nconsole.log(iscube(6561));\nconsole.log(iscube(13832));\nconsole.log(iscube(20736));\nconsole.log(iscube(28561));\nconsole.log(iscube(38416));\nconsole.log(iscube(50653));\nconsole.log(iscube(65536));\nconsole.log(iscube(83521));\nconsole.log(iscube(103823));\nconsole.log(iscube(130321));\nconsole.log(iscube(166375));\nconsole.log(iscube(208544));\nconsole.log(iscube(262144));\nconsole.log(iscube(331777));\nconsole.log(iscube(419904));\nconsole.log(iscube(524169));\nconsole.log(iscube(658503));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlzihibk.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpmlzihibk.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334349
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i < a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(8));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(1000));\nconsole.log(iscube(125));\nconsole.log(iscube(1000));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log(iscube(125));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdg5ns9ky.js:63:12)\n    at Object.<anonymous> (/tmp/tmpdg5ns9ky.js:72:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq6arw68h.js:32:12)\n    at Object.<anonymous> (/tmp/tmpq6arw68h.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334356
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i <= a; i++) {\n        if (i ** 3 === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(512));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(125));\nconsole.log(iscube(3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6xg0_bbg.js:27:12)\n    at Object.<anonymous> (/tmp/tmp6xg0_bbg.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5rxii2r0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5rxii2r0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp27fk6vl2.js:25:12)\n    at Object.<anonymous> (/tmp/tmp27fk6vl2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334364
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(8));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqfpt1hky.js:32:12)\n    at Object.<anonymous> (/tmp/tmpqfpt1hky.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334365
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let x: number = 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    if (x * x * x == a) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuaam_zwe.js:24:12)\n    at Object.<anonymous> (/tmp/tmpuaam_zwe.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334365
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    for (let i = 0; i <= a; i++) {\n        if (i * i * i === a) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4f1b_5oe.js:25:12)\n    at Object.<anonymous> (/tmp/tmp4f1b_5oe.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334365
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnv_aty0k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnv_aty0k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube: number = 0;\n    for (let i: number = 0; i < a; i++) {\n        cube = i * i * i;\n        if (cube === a) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(isc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp07bzrty5.ts(57,1): error TS1005: ',' expected.\n../../../../tmp/tmp07bzrty5.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz6u56rhy.js:40:12)\n    at Object.<anonymous> (/tmp/tmpz6u56rhy.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334365
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let result: boolean = false;\n    for (let i: number = 0; i < a; i++) {\n        if (i * i * i === a) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp75083ciu.ts(57,1): error TS1005: ',' expected.\n../../../../tmp/tmp75083ciu.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334365
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    return Math.cbrt(a) % 1 === 0;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(64));\nconsole.log(iscube(1));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(10000));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(343));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgde8z0rm.ts(57,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334365
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(8));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7drohcnm.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7drohcnm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(iscube(27));\nconsole.log(iscube(256));\nconsole.log(iscube(3));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-216));\nconsole.log(iscube(-1000));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(3375));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(234256));\nconsole.log(iscube(248832));\nconsole.log(iscube(279936));\nconsole.log(iscube(331776));\nconsole.log(iscube(357911));\nconsole.log(iscube(373248));\nconsole.log(iscube(421875));\nconsole.log(iscube(493039));\nconsole.log(iscube(507936));\nconsole.log(iscube(581562));\nconsole.log(iscube(688125));\nconsole.log(iscube(704969));\nconsole.log(iscube(759375));\nconsole.log(iscube(846464));\nconsole.log(iscube(941192));\nconsole.log(iscube(1030301));\nconsole.log(iscube(1048576));\nconsole.log(iscube(1188640));\nconsole.log(iscube(1225043));\nconsole.log(iscube(1295029));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgck01dhj.ts(57,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334365
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(-8));\nconsole.log(iscube(-27));\nconsole.log(iscube(-64));\nconsole.log(iscube(-125));\nconsole.log(iscube(-343));\nconsole.log(iscube(-1000));\nconsole.log(iscube(1.0));\nconsole.log(iscube(1.5));\nconsole.log(iscube(2.5));\nconsole.log(iscube(3.5));\nconsole.log(iscube(4.5));\nconsole.log(iscube(5.5));\nconsole.log(iscube(6.5));\nconsole.log(iscube(7.5));\nconsole.log(iscube(8.5));\nconsole.log(iscube(9.5));\nconsole.log(iscube(10.5));\nconsole.log(iscube(11.5));\nconsole.log(iscube(12.5));\nconsole.log(iscube(13.5));\nconsole.log(iscube(14.5));\nconsole.log(iscube(15.5));\nconsole.log(iscube(16.5));\nconsole.log(iscube(17.5));\nconsole.log(iscube(18.5));\nconsole.log(iscube(19.5));\nconsole.log(iscube(20.5));\nconsole.log(iscube(21.5));\nconsole.log(iscube(22.5));\nconsole.log(iscube(23.5));\nconsole.log(iscube(24.5));\nconsole.log(iscube(25.5));\nconsole.log(iscube(26.5));\nconsole.log(iscube(27.5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsh79uou9.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpsh79uou9.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334365
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu357l8up.js:63:12)\n    at Object.<anonymous> (/tmp/tmpu357l8up.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnv_aty0k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnv_aty0k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\n\nconsole.log(iscube(8));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1331));\nconsole.log(iscube(1728));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(3375));\nconsole.log(iscube(4096));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp12_kf01g.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334345
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0or6x74z.ts(61,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334352
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let cube = Math.cbrt(a);\n    if (cube % 1 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(125));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(1000));\nconsole.log(iscube(0));\nconsole.log(iscube(1));\nconsole.log(iscube(64));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(1000000));\nconsole.log(iscube(10000000000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppnx5g35k.js:34:12)\n    at Object.<anonymous> (/tmp/tmppnx5g35k.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i === a;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(343));\nconsole.log(iscube(512));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8t7s4gs3.js:25:12)\n    at Object.<anonymous> (/tmp/tmp8t7s4gs3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(1));\nconsole.log(iscube(8));\nconsole.log(iscube(125));\nconsole.log(iscube(216));\nconsole.log(iscube(729));\nconsole.log(iscube(1000));\nconsole.log(iscube(2197));\nconsole.log(iscube(2744));\nconsole.log(iscube(4913));\nconsole.log(iscube(5832));\nconsole.log(iscube(6859));\nconsole.log(iscube(8000));\nconsole.log(iscube(9261));\nconsole.log(iscube(10648));\nconsole.log(iscube(12167));\nconsole.log(iscube(13824));\nconsole.log(iscube(15625));\nconsole.log(iscube(17576));\nconsole.log(iscube(19683));\nconsole.log(iscube(21952));\nconsole.log(iscube(24389));\nconsole.log(iscube(27000));\nconsole.log(iscube(29791));\nconsole.log(iscube(32768));\nconsole.log(iscube(35937));\nconsole.log(iscube(39304));\nconsole.log(iscube(42875));\nconsole.log(iscube(46656));\nconsole.log(iscube(50653));\nconsole.log(iscube(54872));\nconsole.log(iscube(59319));\nconsole.log(iscube(64000));\nconsole.log(iscube(68921));\nconsole.log(iscube(74088));\nconsole.log(iscube(79507));\nconsole.log(iscube(85184));\nconsole.log(iscube(91125));\nconsole.log(iscube(97336));\nconsole.log(iscube(103823));\nconsole.log(iscube(110592));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvpcy5u3i.js:62:12)\n    at Object.<anonymous> (/tmp/tmpvpcy5u3i.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334359
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\nfunction iscube(a: number): boolean {\n    let i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i === a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(8));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr8xv8c6c.js:26:12)\n    at Object.<anonymous> (/tmp/tmpr8xv8c6c.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334366
    }
  ]
}