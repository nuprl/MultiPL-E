language: ts
name: HumanEval_128_prod_signs
results:
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9eu3nuvj.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpjjze7ido.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpjjze7ido.js:27:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpjjze7ido.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 0]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, -6, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0, 0]));\n\
    console.log(prod_signs([1, 2, 3, 4, 5, -6, 0, 0, 0]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, -6, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6, 0, 0, 0, 0, 0, 0]));\n\
    console.log(prod_sign\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy352elo0.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpy352elo0.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5p_v6t3b.ts(12,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa3525yms.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5dro97n_.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1, 2,\
    \ 3, -4, -5, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp44anicbs.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp44anicbs.js:29:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp44anicbs.js' ]\n\
    }\n"
  stdout: '21

    0

    undefined

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([])); // undefined\nconsole.log(prod_signs([1,\
    \ 2, 3])); // 18\nconsole.log(prod_signs([-1, -2, -3])); // 18\nconsole.log(prod_signs([-1,\
    \ 2, -3])); // -18\nconsole.log(prod_signs([1, -2, 3])); // -18\nconsole.log(prod_signs([-1,\
    \ 2, 3])); // -18\nconsole.log(prod_signs([1, -2, -3])); // 18\nconsole.log(prod_signs([0,\
    \ -2, -3])); // 0\nconsole.log(prod_signs([0, -2, 3])); // 0\nconsole.log(prod_signs([0,\
    \ 2, 3])); // 0\nconsole.log(prod_signs([0, 2, -3])); // 0\nconsole.log(prod_signs([0,\
    \ 0, 0])); // 0\nconsole.log(prod_signs([-1, 0, 0])); // 0\nconsole.log(prod_signs([1,\
    \ 0, 0])); // 0\nconsole.log(prod_signs([-1, 0, 1])); // 0\nconsole.log(prod_signs([1,\
    \ 0, -1])); // 0\nconsole.log(prod_signs([-1, 0, -1])); // 0\nconsole.log(prod_signs([1,\
    \ 0, 1])); // 0\nconsole.log(prod_signs([-1, -1, -1])); // 3\nconsole.log(prod_signs([1,\
    \ 1, 1])); // 3\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk4re4fit.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\n\
    console.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3,\
    \ -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp7vqu9_m1.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp7vqu9_m1.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp7vqu9_m1.js' ]\n\
    }\n"
  stdout: '15

    -15

    -15

    undefined

    0

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\
    \ // -120\nconsole.log(prod_signs([1, 2, 3, 4, 5])); // 120\nconsole.log(prod_signs([0,\
    \ 1, 2, 3, 4, 5])); // 0\nconsole.log(prod_signs([])); // undefined\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkd6bu_b2.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([-1, -2, -3,\
    \ -4, -5, 0, 1, 2, 3, 4, 5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4,\
    \ -5, 0, 1, 2, 3, 4, 5, 0, 0, 0]));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmporbl3x50.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmporbl3x50.js:33:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmporbl3x50.js' ]\n\
    }\n"
  stdout: '-15

    -0

    undefined

    -0

    -0

    -0

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqmc2k1_g.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum: number\
    \ = 0;\n    let prod: number = 1;\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, 5]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2,\
    \ 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpy5qj8jpj.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpy5qj8jpj.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpy5qj8jpj.js' ]\n\
    }\n"
  stdout: '-15

    -15

    15

    undefined

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ixabz7x.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 0, -5]));\nconsole.log(prod_signs([-1, -2, -3, 0, 5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpiohk3ktw.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpiohk3ktw.js:33:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpiohk3ktw.js' ]\n\
    }\n"
  stdout: '15

    -15

    -15

    15

    -0

    -0

    undefined

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0)\
    \ {\n            prod *= -1;\n            sum += Math.abs(arr[i]);\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3,\
    \ -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([0,\
    \ -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmplnvqevpd.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmplnvqevpd.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmplnvqevpd.js' ]\n\
    }\n"
  stdout: '15

    -15

    15

    0

    undefined

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp07p3wpx6.ts(31,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp07p3wpx6.ts(31,9): error TS1005: '','' expected.

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5odlhqq6.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-3, -4, -5]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg356pz9t.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpg356pz9t.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5dro97n_.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5]));\nconsole.log(prod_signs([0, -1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpu8cl3ikr.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpu8cl3ikr.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpu8cl3ikr.js' ]\n\
    }\n"
  stdout: '15

    -15

    -0

    undefined

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 0, 5, 6]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpsrpl9wx_.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpsrpl9wx_.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpsrpl9wx_.js' ]\n\
    }\n"
  stdout: '-21

    -21

    -0

    undefined

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ !== 0) {\n            sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n\
    \        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2,\
    \ 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, 5, -6]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 6]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpywdn016a.ts(15,26): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3,\
    \ -4, -5, 0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpoysx1go6.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpoysx1go6.js:33:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpoysx1go6.js' ]\n\
    }\n"
  stdout: '-15

    15

    -15

    undefined

    0

    -0

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n\
    \        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}\n\n\
    console.log(prod_signs([1, 2, 3, -4]));\nconsole.log(prod_signs([-1, -2, -3, 4]));\n\
    console.log(prod_signs([-1, -2, -3, 0]));\nconsole.log(prod_signs([]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv45oc0i2.ts(17,25): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-3, -4, 5]));\nconsole.log(prod_signs([-3,\
    \ -4, -5]));\nconsole.log(prod_signs([-3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5]));\nconsole.log(prod_signs([-3,\
    \ 0, -5, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ 0, -5, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ 0, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ 0, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, 0, -5, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplq2ji0db.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5aeltqsc.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf_qwwilh.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpf_qwwilh.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659979900
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp_og0m5xv.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp_og0m5xv.js:32:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp_og0m5xv.js' ]\n\
    }\n"
  stdout: '-15

    15

    15

    -15

    0

    undefined

    '
  timestamp: 1659979900
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let prodSigns = 1;\n  let sumMagnitudes = 0;\n \
    \ for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prodSigns\
    \ *= 1;\n      sumMagnitudes += arr[i];\n    } else if (arr[i] < 0) {\n      prodSigns\
    \ *= -1;\n      sumMagnitudes += arr[i] * -1;\n    } else {\n      prodSigns *=\
    \ 0;\n    }\n  }\n  return sumMagnitudes * prodSigns;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, -6, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpo93sc49i.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpo93sc49i.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpo93sc49i.js' ]\n\
    }\n"
  stdout: '-21

    21

    0

    undefined

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, 3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxgle0m0q.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9cwnp8_p.ts(22,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9cwnp8_p.ts(22,9): error TS1005: '','' expected.

    '
  timestamp: 1659979900
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmphqnupx4q.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmphqnupx4q.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmphqnupx4q.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5dro97n_.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] === 0) {\n      sum += 0;\n      prod\
    \ *= 1;\n    } else if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n\
    \    } else {\n      sum += Math.abs(arr[i]);\n      prod *= -1;\n    }\n  }\n\
    \  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmps_15iz84.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmps_15iz84.js:27:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmps_15iz84.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length == 0) {\n        return undefined;\n    }\n    let sum = 0;\n  \
    \  let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmput1f2wec.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let\
    \ sum = 0;\n    let prod = 1;\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2,\
    \ 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, -2,\
    \ 0, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp5n91a4cp.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp5n91a4cp.js:33:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp5n91a4cp.js' ]\n\
    }\n"
  stdout: '-15

    15

    -15

    undefined

    0

    -0

    '
  timestamp: 1659979900
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp_wjln0z6.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp_wjln0z6.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp_wjln0z6.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    if (arr[i] !== 0)\
    \ prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp35scdj99.ts(12,36): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, 6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptmn5xu3w.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptmn5xu3w.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 0, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0, -5, 0,\
    \ 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0, -5, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 0, 5, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 0, 5, 0, 0]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 0, 5, 0, 0, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz3yb7e2z.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\n\
    console.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3,\
    \ 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_n4ez9ov.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else if (arr[i] === 0) {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_sign\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxt2s52zj.ts(35,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpxt2s52zj.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659979901
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3,\
    \ -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpf3_5lakg.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpf3_5lakg.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpf3_5lakg.js' ]\n\
    }\n"
  stdout: '15

    -15

    15

    undefined

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi950rg94.ts(12,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpscc2rkip.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979901
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let\
    \ prod = 1;\n    let sum = 0;\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0)\
    \ {\n            prod *= 1;\n        } else if (arr[i] > 0) {\n            prod\
    \ *= 1;\n            sum += arr[i];\n        } else {\n            prod *= -1;\n\
    \            sum += arr[i];\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3,\
    \ 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\n\
    console.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]));\n\
    console.log(prod_signs([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, 0]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpjrj5j2m2.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpjrj5j2m2.js:35:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpjrj5j2m2.js' ]\n\
    }\n"
  stdout: '15

    -0

    -0

    undefined

    0

    15

    -0

    -0

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0, 0,\
    \ 1]));\nconsole.log(prod_signs([0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 1, -1]));\nconsole.log(prod_signs([0, 0, 1, -1, -1]));\nconsole.log(prod_signs([0,\
    \ 1, -1, -1, -1]));\nconsole.log(prod_signs([1, -1, -1, -1, -1]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp53stkidy.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa3525yms.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, 0]));\nconsole.log(prod_signs([-1, 2, -3, 0, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, 0, 4, 5]));\nconsole.log(prod_signs([-1, 0, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_sign\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvkvwn7dw.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvkvwn7dw.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5, 0]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm8qvw1_f.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] === 0) continue;\n    sum += Math.abs(arr[i]);\n\
    \    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0, 0, 0]));\n\
    console.log(prod_signs([0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmdd9l19d.ts(13,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl11sqg9k.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4,\
    \ -5, 0, 1, 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0,\
    \ 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4,\
    \ -5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9055e7pk.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, 5]));\nconsole.log(prod_signs([0, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpbo5mzxg_.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpbo5mzxg_.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpbo5mzxg_.js' ]\n\
    }\n"
  stdout: '-15

    15

    15

    0

    undefined

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbfcobk6z.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa3525yms.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) continue;\n\
    \        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n\
    \    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoc1vby_0.ts(13,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] === 0) continue;\n    sum += Math.abs(arr[i]);\n\
    \    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp18vrzah3.ts(13,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm5ds4cod.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    const sum = arr.reduce((acc, curr)\
    \ => acc + Math.abs(curr), 0);\n    const prod = arr.reduce((acc, curr) => acc\
    \ * Math.sign(curr), 1);\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3])); // 6\nconsole.log(prod_signs([-1, -2, -3])); // 6\nconsole.log(prod_signs([1,\
    \ -2, 3])); // -6\nconsole.log(prod_signs([-1, 2, -3])); // -6\nconsole.log(prod_signs([1,\
    \ 0, -3])); // -3\nconsole.log(prod_signs([-1, 0, 3])); // 3\nconsole.log(prod_signs([0,\
    \ 0, 0])); // 0\nconsole.log(prod_signs([])); // None\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1evwnz2v.ts(9,55): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let\
    \ sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n  \
    \      if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n\
    \        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n\
    \    return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\n\
    console.log(prod_signs([1, 2, 3, -4, -5, -6, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpg853z_m4.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpg853z_m4.js:27:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpg853z_m4.js' ]\n\
    }\n"
  stdout: '-21

    -0

    0

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -1, 1, 1, 1]));\nconsole.log(prod_signs([-1,\
    \ -1, 1, 1, 1, 0, 10]));\nconsole.log(prod_signs([]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj5jodgfy.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd9xs_zof.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-2,\
    \ -3, 4, -5]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmphkmkg_nz.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmphkmkg_nz.js:29:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmphkmkg_nz.js' ]\n\
    }\n"
  stdout: '-14

    -0

    undefined

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let product = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            product *= 1;\n        } else if (arr[i] <\
    \ 0) {\n            sum += Math.abs(arr[i]);\n            product *= -1;\n   \
    \     } else {\n            product *= 0;\n        }\n    }\n    return sum *\
    \ product;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmphd9giydo.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmphd9giydo.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmphd9giydo.js' ]\n\
    }\n"
  stdout: '15

    -15

    0

    undefined

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([1, 2, 3, -1, -2, -3]));\nconsole.log(prod_signs([-1,\
    \ -2, -3]));\nconsole.log(prod_signs([1, 2, 3]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp75429r4g.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp75429r4g.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp75429r4g.js' ]\n\
    }\n"
  stdout: '-12

    -6

    6

    undefined

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] === 0) {\n      prod *= 1;\n      sum\
    \ += 0;\n    } else if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n\
    \    } else {\n      prod *= -1;\n      sum += Math.abs(arr[i]);\n    }\n  }\n\
    \  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp151fc_85.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp151fc_85.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp151fc_85.js' ]\n\
    }\n"
  stdout: '-15

    15

    15

    undefined

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbggm6vev.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum\
    \ += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * product;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptxbb9l_x.ts(14,25): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0f9mx4i.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpr94sqdvl.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpr94sqdvl.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpr94sqdvl.js' ]\n\
    }\n"
  stdout: '15

    15

    15

    -0

    undefined

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            product *= 1;\n        } else\
    \ if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            product *= -1;\n\
    \        } else {\n            product *= 0;\n        }\n    }\n    return sum\
    \ * product;\n}\n\nconsole.log(prod_signs([-3, -4, -5]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp665zke05.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp665zke05.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([1, 2, 3]));\nconsole.log(prod_signs([-1, 2, 3]));\n\
    console.log(prod_signs([-1, -2, 3]));\nconsole.log(prod_signs([-1, -2, -3]));\n\
    console.log(prod_signs([1, -2, 3]));\nconsole.log(prod_signs([1, -2, -3]));\n\
    console.log(prod_signs([1, 2, -3]));\nconsole.log(prod_signs([-1, 2, -3]));\n\
    console.log(prod_signs([-1, -2, -3]));\nconsole.log(prod_signs([0, 0, 0]));\n\
    console.log(prod_signs([0, 0, 1]));\nconsole.log(prod_signs([0, 0, -1]));\nconsole.log(prod_signs([0,\
    \ 1, -1]));\nconsole.log(prod_signs([0, -1, -1]));\nconsole.log(prod_signs([1,\
    \ -1, -1]));\nconsole.log(prod_signs([-1, -1, -1]));\nconsole.log(prod_signs([-1,\
    \ -1, 1]));\nconsole.log(prod_signs([-1, 1, 1]));\nconsole.log(prod_signs([1,\
    \ 1, 1]));\nconsole.log(prod_sign\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaumkmy4z.ts(44,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpaumkmy4z.ts(44,9): error TS1005: '','' expected.

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum: number\
    \ = 0;\n    let prod: number = 1;\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\n\
    console.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 1, 2, 3,\
    \ 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphzjaklf5.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, -1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp00ilqfan.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp00ilqfan.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp00ilqfan.js' ]\n\
    }\n"
  stdout: '-15

    15

    -0

    undefined

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(pro\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprivvshgi.ts(37,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprivvshgi.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf_wws0za.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, 5]));\n\
    console.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\n\
    console.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0,\
    \ 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6g2m6bxa.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3a6xyr_d.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmprax2n6_f.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmprax2n6_f.js:32:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmprax2n6_f.js' ]\n\
    }\n"
  stdout: '-15

    15

    15

    -15

    0

    undefined

    '
  timestamp: 1659979910
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz2vqjuqi.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5, 6,\
    \ -7, 8, -9, 10]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10,\
    \ 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp8xdatux9.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp8xdatux9.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp8xdatux9.js' ]\n\
    }\n"
  stdout: '55

    55

    -55

    -0

    undefined

    '
  timestamp: 1659979910
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    } else\
    \ if (arr[i] > 0) {\n      sum += arr[i];\n    } else {\n      sum += Math.abs(arr[i]);\n\
    \      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-2,\
    \ -3, 4, 0, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 0]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([0,\
    \ -2, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuy80afno.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm68vushq.ts(12,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let\
    \ sum = 0;\n    let prod = 1;\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n    \
    \    } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 0, 5, 6]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp6orw3074.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp6orw3074.js:34:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp6orw3074.js' ]\n\
    }\n"
  stdout: '-21

    21

    21

    -21

    -0

    0

    undefined

    '
  timestamp: 1659979910
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        prod *= Math.sign(arr[i]);\n\
    \        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, -4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsgtoqtko.ts(16,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv81upbgu.ts(30,9): error TS1005: '','' expected.

    '
  timestamp: 1659979910
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, -6, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, 5, -6, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6, 0, 0]));\n\
    console.log(prod_signs([1, 2, 3, -4, 5, -6, 0, 0, 0]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, 5, -6, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, 5, -6,\
    \ 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptreoq6vw.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptreoq6vw.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659979910
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum +=\
    \ arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += arr[i]\
    \ * -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpi1xythn6.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpi1xythn6.js:32:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpi1xythn6.js' ]\n\
    }\n"
  stdout: '-15

    15

    15

    -15

    0

    undefined

    '
  timestamp: 1659979910
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt8c5ldou.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979910
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\n\
    console.log(prod_signs([-3, -4, 5]));\nconsole.log(prod_signs([-3, -4, 0, 5]));\n\
    console.log(prod_signs([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp_qwgy93h.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp_qwgy93h.js:29:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp_qwgy93h.js' ]\n\
    }\n"
  stdout: '12

    0

    undefined

    '
  timestamp: 1659979910
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2,\
    \ 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpoa10xdfo.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpoa10xdfo.js:33:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpoa10xdfo.js' ]\n\
    }\n"
  stdout: '-15

    15

    -15

    15

    -15

    0

    undefined

    '
  timestamp: 1659979910
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd9xs_zof.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpzh9ep9p6.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpzh9ep9p6.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpzh9ep9p6.js' ]\n\
    }\n"
  stdout: '-15

    -15

    15

    0

    undefined

    '
  timestamp: 1659979910
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0f9mx4i.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpgjbvgpe2.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpgjbvgpe2.js:26:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpgjbvgpe2.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659979910
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, -6, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp531rrz94.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp531rrz94.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp531rrz94.js' ]\n\
    }\n"
  stdout: '-21

    -0

    -0

    undefined

    '
  timestamp: 1659979910
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum\
    \ += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * product;\n}\n\nconsole.log(prod_signs([-3, -4, -5]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3,\
    \ -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([-3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1444hhhq.ts(32,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp1444hhhq.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1659979913
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n   \
    \         continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppvntqbwa.ts(15,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdyerij03.ts(17,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979913
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4]));\nconsole.log(prod_signs([1, 2, 3, -4, 0]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmposwvhox7.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbggm6vev.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_3uj7ppq.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979913
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n   \
    \         prod *= 1;\n            sum += 0;\n        } else if (arr[i] > 0) {\n\
    \            prod *= 1;\n            sum += arr[i];\n        } else {\n      \
    \      prod *= -1;\n            sum += Math.abs(arr[i]);\n        }\n    }\n \
    \   return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\n\
    console.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp3jm10uyo.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp3jm10uyo.js:39:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp3jm10uyo.js' ]\n\
    }\n"
  stdout: '-15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    undefined

    '
  timestamp: 1659979914
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2,\
    \ 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmphflxxsma.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmphflxxsma.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmphflxxsma.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpklun_kp5.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979914
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpt242z1i3.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpt242z1i3.js:32:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpt242z1i3.js' ]\n\
    }\n"
  stdout: '-15

    15

    15

    -15

    0

    undefined

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum\
    \ += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * product;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpri77idl1.ts(14,25): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5])); // 30\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5])); // -30\nconsole.log(prod_signs([-1, -2, -3, 4, 5])); // -30\n\
    console.log(prod_signs([-1, -2, 3, 4, 5])); // -30\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5])); // 30\nconsole.log(prod_signs([1, 2, 3, 4, -5])); // -30\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5])); // -30\nconsole.log(prod_signs([1, 2, -3, -4, -5])); // -30\n\
    console.log(prod_signs([1, -2, -3, -4, -5])); // 30\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, 0, -5])); // 0\n\
    console.log(prod_signs([-1, -2, 0, -4, -5])); // 0\nconsole.log(prod_signs([-1,\
    \ 0, -3, -4, -5])); // 0\nconsole.log(prod_signs([0, -2, -3, -\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprwa6i392.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp07p3wpx6.ts(31,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp07p3wpx6.ts(31,9): error TS1005: '','' expected.

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let product = 1;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n   \
    \   product *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n \
    \     product *= -1;\n    } else {\n      product *= 0;\n    }\n  }\n  return\
    \ sum * product;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp9u2z697n.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp9u2z697n.js:29:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp9u2z697n.js' ]\n\
    }\n"
  stdout: '-21

    0

    undefined

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        let\
    \ sign = Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n        product\
    \ *= sign;\n    }\n    return sum * product;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5mdtri5f.ts(13,25): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979914
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, 0, -4, -5]));\nconsole.log(prod_signs([-1, 0, -3, -4, -5]));\nconsole.log(prod_signs([0,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmptn3nxyqx.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmptn3nxyqx.js:41:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmptn3nxyqx.js' ]\n\
    }\n"
  stdout: '-15

    15

    -15

    15

    -15

    15

    -15

    15

    0

    0

    0

    0

    0

    0

    undefined

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3a6xyr_d.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\n\
    console.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, -6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 6]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 1]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, -1]));\nconsole\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp6xnnium4.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp6xnnium4.js:42:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp6xnnium4.js' ]\n\
    }\n"
  stdout: '21

    undefined

    21

    21

    -21

    -21

    -0

    0

    0

    -0

    -0

    -0

    -0

    -0

    -0

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        prod *= Math.sign(arr[i]);\n\
    \        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmk1bsd6i.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpmk1bsd6i.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\n\
    console.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3,\
    \ 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_n4ez9ov.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd9xs_zof.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3a6xyr_d.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn5fxgfee.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979914
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  let sum\
    \ = 0;\n  let prod = 1;\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum +=\
    \ arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i]\
    \ * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, 6, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpm_m2_7n8.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpm_m2_7n8.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpm_m2_7n8.js' ]\n\
    }\n"
  stdout: '21

    0

    undefined

    '
  timestamp: 1659979914
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm5ds4cod.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\n\
    console.log(prod_signs([1, 2, 3]));\nconsole.log(prod_signs([-1, -2, -3]));\n\
    console.log(prod_signs([1, -2, 3]));\nconsole.log(prod_signs([-1, 2, -3]));\n\
    console.log(prod_signs([1, 2, 0]));\nconsole.log(prod_signs([-1, -2, 0]));\nconsole.log(prod_signs([1,\
    \ -2, 0]));\nconsole.log(prod_signs([-1, 2, 0]));\nconsole.log(prod_signs([0,\
    \ 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpu1s1hw8y.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpu1s1hw8y.js:36:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpu1s1hw8y.js' ]\n\
    }\n"
  stdout: '6

    -6

    -6

    6

    0

    0

    -0

    -0

    0

    undefined

    '
  timestamp: 1659979914
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) prod *= -1;\n\
    \        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpc_m7b9li.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpc_m7b9li.js:22:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpc_m7b9li.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979915
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 7, -8, 9, 0, -10]));\n\
    console.log(prod_signs([]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp0yae502l.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp0yae502l.js:32:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp0yae502l.js' ]\n\
    }\n"
  stdout: '0

    undefined

    55

    55

    0

    '
  timestamp: 1659979914
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5]));\nconsole.log(prod_signs([0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp8f_05mf9.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp8f_05mf9.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp8f_05mf9.js' ]\n\
    }\n"
  stdout: '15

    -15

    0

    undefined

    '
  timestamp: 1659979915
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1]));\n\
    console.log(prod_signs([-1, 0, 1, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0,\
    \ 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ 0, 1, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ 0, 1, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppfv0s6cl.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659979915
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) prod *= 1;\n    else if (arr[i]\
    \ < 0) prod *= -1;\n    else prod *= 0;\n    sum += Math.abs(arr[i]);\n  }\n \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp4dgo_ohq.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp4dgo_ohq.js:22:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp4dgo_ohq.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum\
    \ += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * product;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppxf5zgus.ts(14,25): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979918
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmphqnupx4q.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmphqnupx4q.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmphqnupx4q.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979901
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpnkobs35y.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpnkobs35y.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpnkobs35y.js' ]\n\
    }\n"
  stdout: '15

    -15

    15

    0

    undefined

    '
  timestamp: 1659979918
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\n\
    console.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3,\
    \ 4, -5]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_n4ez9ov.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0, 0,\
    \ 1]));\nconsole.log(prod_signs([0, 0, 0, 0, -1]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 1, -1]));\nconsole.log(prod_signs([0, 0, 1, 1, -1]));\nconsole.log(prod_signs([0,\
    \ 1, 1, 1, -1]));\nconsole.log(prod_signs([1, 1, 1, 1, -1]));\nconsole.log(prod_signs([1,\
    \ 1, 1, 1, 1]));\nconsole.log(prod_signs([-1, -1, -1, -1, -1]));\nconsole.log(prod_signs([-1,\
    \ -1, -1, -1, 1]));\nconsole.log(prod_signs([-1, -1, -1, 1, 1]));\nconsole.log(prod_signs([-1,\
    \ -1, 1, 1, 1]));\nconsole.log(prod_signs([-1, 1, 1, 1, 1]));\nconsole.log(prod_signs([1,\
    \ 1, 1, 1, 0]));\nconsole.log(prod_\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn9mbwm_3.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpn9mbwm_3.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659979918
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([-1, 0, 1]));\nconsole.log(prod_signs([-1, -2, -3]));\n\
    console.log(prod_signs([-1, -2, -3, 0]));\nconsole.log(prod_signs([]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpb9rotv68.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpb9rotv68.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpb9rotv68.js' ]\n\
    }\n"
  stdout: '-0

    -6

    -0

    undefined

    '
  timestamp: 1659979918
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpklun_kp5.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979914
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp_nmnn7a8.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp_nmnn7a8.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp_nmnn7a8.js' ]\n\
    }\n"
  stdout: '-15

    15

    15

    0

    undefined

    '
  timestamp: 1659979918
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpgjbvgpe2.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpgjbvgpe2.js:26:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpgjbvgpe2.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659979910
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0)\
    \ {\n            prod *= -1;\n            sum += arr[i];\n        } else {\n \
    \           prod *= 0;\n            sum += 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -1, -1, -1, -1]));\nconsole.log(prod_signs([1,\
    \ 1, 1, 1, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmppyvojeo0.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmppyvojeo0.js:33:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmppyvojeo0.js' ]\n\
    }\n"
  stdout: '-3

    -0

    undefined

    0

    5

    5

    '
  timestamp: 1659979918
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbggm6vev.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum +=\
    \ arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += arr[i]\
    \ * -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2,\
    \ 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpnjbs1z12.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpnjbs1z12.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpnjbs1z12.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979918
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        prod *= Math.sign(arr[i]);\n\
    \        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp96qtxgmv.ts(16,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979918
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp9w1dtww9.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp9w1dtww9.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp9w1dtww9.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979918
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([1, 2, 3, -4, -5, 6]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp49xq5q5m.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp49xq5q5m.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp49xq5q5m.js' ]\n\
    }\n"
  stdout: '21

    undefined

    0

    21

    21

    '
  timestamp: 1659979918
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd9xs_zof.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let\
    \ prod = 1;\n    let sum = 0;\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            prod *= 1;\n            sum += arr[i];\n        } else if (arr[i]\
    \ < 0) {\n            prod *= -1;\n            sum += arr[i] * -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2,\
    \ 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, -4, 5]));\nconsole.log(prod_signs([1,\
    \ -2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, 5]));\nconsole.log(prod_signs([-1, 2, -3, -4, -5]));\nconsole.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2qxym1sh.ts(41,9): error TS1003: Identifier expected.

    '
  timestamp: 1659979918
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([-5, -3, -1, 0, 1, 3, 5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([-1, 0, 1]));\nconsole.log(prod_signs([-1, 1]));\nconsole.log(prod_signs([1,\
    \ 1, 1, 1]));\nconsole.log(prod_signs([-1, -1, -1, -1]));\nconsole.log(prod_signs([-1,\
    \ -1, -1, 1]));\nconsole.log(prod_signs([-1, -1, 1, 1]));\nconsole.log(prod_signs([-1,\
    \ 1, 1, 1]));\nconsole.log(prod_signs([1, 1, 1, -1]));\nconsole.log(prod_signs([1,\
    \ -1, -1, -1]));\nconsole.log(prod_signs([1, -1, -1, 1]));\nconsole.log(prod_signs([1,\
    \ -1, 1, 1]));\nconsole.log(prod_signs([1, 1, -1, 1]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0]));\nconsole.log(prod_signs([0, 0, 0, 1]));\nconsole.log(prod_signs([0,\
    \ 0, 1, 1]));\nconsole.log(prod_signs([0, 1, 1\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpojzqn0cz.ts(44,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpojzqn0cz.ts(44,9): error TS1005: '','' expected.

    '
  timestamp: 1659979919
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd9xs_zof.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm68vushq.ts(12,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979909
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum: number\
    \ = 0;\n    let prod: number = 1;\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\nconsole.log(prod_signs([1, 2, 3, -4]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([-1, -2, -3, -4]));\nconsole.log(prod_signs([-1, -2, -3,\
    \ 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsrb4o81p.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1659979919
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2,\
    \ 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 0, -3,\
    \ 0, -5]));\nconsole.log(prod_signs([1, 0, 3, 0, 5]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpkjde6ank.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpkjde6ank.js:33:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpkjde6ank.js' ]\n\
    }\n"
  stdout: '-15

    15

    -15

    undefined

    0

    -0

    0

    '
  timestamp: 1659979918
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  return arr.reduce((acc, curr) => acc + Math.abs(curr)\
    \ * Math.sign(curr), 0);\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5])); // -1\n\
    console.log(prod_signs([-1, -2, -3, -4, -5])); // 1\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, -5])); // -1\nconsole.log(prod_signs([-1, -2, -3, -4, 5])); // 1\n\
    console.log(prod_signs([1, 2, 3, -4, -5])); // -1\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, -5])); // 1\nconsole.log(prod_signs([1, -2, 3, 4, -5])); // -1\nconsole.log(prod_signs([1,\
    \ 2, -3, 4, -5])); // -1\nconsole.log(prod_signs([1, 2, 3, -4, 5])); // 1\nconsole.log(prod_signs([-1,\
    \ 2, 3, -4, 5])); // 1\nconsole.log(prod_signs([1, -2, 3, 4, 5])); // 1\nconsole.log(prod_signs([1,\
    \ 2, -3, 4, 5])); // 1\nconsole.log(prod_signs([1, 2, 3, -4, -5])); // -1\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, -5])); // 1\nconsole.log(prod_signs([1, -2, 3, -4, 5])); // 1\nconsole.log(prod_signs([1,\
    \ -2, 3, 4, 5])); // 1\nconsole.log(prod_signs([1, 2, -3, -4, 5])); // 1\nconsole.log(prod_signs([1,\
    \ 2, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoc6yr5x8.ts(29,9): error TS1005: '','' expected.

    '
  timestamp: 1659979919
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([1, -2, 3, -4, 5, -6]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, 5, -6, 0]));\nconsole.log(prod_signs([]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpmeuvs_vy.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpmeuvs_vy.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpmeuvs_vy.js' ]\n\
    }\n"
  stdout: '-21

    -0

    undefined

    '
  timestamp: 1659979919
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 1, 2,\
    \ 3, 4, 5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0, 0,\
    \ 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0, -1, -2, -3, -4,\
    \ -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, 0]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpokun6lne.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979919
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let\
    \ sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n  \
    \      if (arr[i] !== 0) {\n            sum += Math.abs(arr[i]);\n           \
    \ prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n}\n\n\
    console.log(prod_signs([1, 2, 3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3,\
    \ -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe7mi_tbd.ts(23,9): error TS1005: '','' expected.

    '
  timestamp: 1659979919
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp9u6qef6r.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp9u6qef6r.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp9u6qef6r.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979919
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0,\
    \ 0]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp07p3wpx6.ts(31,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp07p3wpx6.ts(31,9): error TS1005: '','' expected.

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0)\
    \ {\n            prod *= -1;\n            sum += arr[i];\n        } else {\n \
    \           prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod\
    \ * sum;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpdcc9tcie.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpdcc9tcie.js:32:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpdcc9tcie.js' ]\n\
    }\n"
  stdout: '15

    15

    0

    -0

    undefined

    '
  timestamp: 1659979919
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbggm6vev.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 7, -8, 9, 0]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([-1, -2, -3, -4, -5, -6, -7, -8, -9, 0]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpz2ptgw6i.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpz2ptgw6i.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpz2ptgw6i.js' ]\n\
    }\n"
  stdout: '-0

    undefined

    -0

    0

    '
  timestamp: 1659979919
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0,\
    \ 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxcmfulnm.ts(12,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979919
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3,\
    \ -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, -5]));\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpr57woad8.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpr57woad8.js:39:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpr57woad8.js' ]\n\
    }\n"
  stdout: '15

    -15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    undefined

    '
  timestamp: 1659979922
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6, 0, 0, 0, 0,\
    \ 0, 0]));\nconsole.log(prod_signs([-1, -2, -3, 4, 5, 6]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5, 6, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([1, 2, 3, 4, 5,\
    \ 6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp3j2qdgli.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp3j2qdgli.js:34:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp3j2qdgli.js' ]\n\
    }\n"
  stdout: '-21

    undefined

    0

    -0

    -21

    -0

    21

    0

    '
  timestamp: 1659979922
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([1, -2, -3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk762lzht.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979922
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5])); // -51\nconsole.log(prod_signs([-1, -2, -3, -4, -5])); // -51\n\
    console.log(prod_signs([1, 2, 3, 4, 5])); // 51\nconsole.log(prod_signs([-1, -2,\
    \ -3, 4, 5])); // -51\nconsole.log(prod_signs([-1, -2, -3, -4, 5])); // 51\nconsole.log(prod_signs([]));\
    \ // None\nconsole.log(prod_signs([0, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0]));\
    \ // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4,\
    \ -5, 0, 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0,\
    \ 0, 0, 0, 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, 0, 0, 0, 0,\
    \ 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp180xsz27.ts(31,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp180xsz27.ts(31,9): error TS1005: '','' expected.

    '
  timestamp: 1659979922
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    } else\
    \ if (arr[i] > 0) {\n      sum += arr[i];\n    } else {\n      sum += Math.abs(arr[i]);\n\
    \      prod *= -1;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5])); // -120\nconsole.log(prod_signs([1, 2, 3, 4, 5])); // 120\n\
    console.log(prod_signs([-1, 2, -3, 4, -5])); // 120\nconsole.log(prod_signs([-1,\
    \ -2, 3, 4, -5])); // -120\nconsole.log(prod_signs([1, 2, 3, 4, 0])); // 0\nconsole.log(prod_signs([]));\
    \ // None\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpy6jww347.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpy6jww347.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpy6jww347.js' ]\n\
    }\n"
  stdout: '-15

    15

    -15

    -15

    10

    undefined

    '
  timestamp: 1659979923
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmphqnupx4q.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmphqnupx4q.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmphqnupx4q.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979901
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\n\
    console.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5, -6]));\nconsole.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp72pdyvaw.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp72pdyvaw.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp72pdyvaw.js' ]\n\
    }\n"
  stdout: '-21

    21

    0

    undefined

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2fc26d81.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx4nj1af8.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, 4, 5]));\n\
    console.log(prod_signs([-1, -2, -3, 0, 5]));\nconsole.log(prod_signs([]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm5m2umut.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd9xs_zof.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 0]));\nconsole.log(prod_signs([1, 2, 3, 0, 5]));\nconsole.log(prod_signs([1,\
    \ 2, 0, 4, 5]));\nconsole.log(prod_signs([1, 0, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpwpg4ag7r.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpwpg4ag7r.js:40:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpwpg4ag7r.js' ]\n\
    }\n"
  stdout: '-15

    15

    15

    -15

    15

    -15

    15

    0

    0

    0

    0

    0

    undefined

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum +=\
    \ arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += arr[i]\
    \ * -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\
    \nconsole.log(prod_signs([1, 2, 3, -4, -5, 6])); // -21\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, 6, 0])); // 0\nconsole.log(prod_signs([])); // undefined\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, -6])); // 21\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6,\
    \ 0])); // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, 0, 0])); // 0\n\
    console.log(prod_signs([1, 2, 3, -4, -5, 6, 0, 0])); // 0\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5, -6, 0, 0, 0])); // 0\nconsole.log(prod_signs([1, 2, 3, -4, -5,\
    \ 6, 0, 0, 0])); // 0\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, 0, 0, 0, 0]));\
    \ // 0\nconsole.log(prod_signs([-1, -2, -3, -4, -5, -6, 0, 0, 0, 0])); // 0\n\
    console.log(prod_signs([-1, -2, -3, -4\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9rn9z0s7.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9rn9z0s7.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, 3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([1, 2, 3, 4, 5]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpenzqihsp.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979923
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpguo695sb.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpguo695sb.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpguo695sb.js' ]\n\
    }\n"
  stdout: '-15

    15

    -15

    0

    undefined

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5aeltqsc.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979900
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod\
    \ *= 1;\n    } else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\n\
    console.log(prod_signs([1, 2, 3, -1, -2, -3]));\nconsole.log(prod_signs([1, 2,\
    \ 3, -1, -2, -3, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp52sn4tfx.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp52sn4tfx.js:29:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp52sn4tfx.js' ]\n\
    }\n"
  stdout: '-12

    -0

    undefined

    '
  timestamp: 1659979923
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp9z2v8bno.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp9z2v8bno.js:32:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp9z2v8bno.js' ]\n\
    }\n"
  stdout: '15

    -15

    15

    0

    0

    undefined

    '
  timestamp: 1659979923
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    let\
    \ sum = 0;\n    let prod = 1;\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconsole.log(prod_signs([-1, 2, 3, -4]));\nconsole.log(prod_signs([-1, 2, 3,\
    \ -4, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpr1uqsxtf.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpr1uqsxtf.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpr1uqsxtf.js' ]\n\
    }\n"
  stdout: '10

    0

    undefined

    '
  timestamp: 1659979923
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmphqnupx4q.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmphqnupx4q.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmphqnupx4q.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979901
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, -5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, 5]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6_uiha7f.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, 2, -3,\
    \ 4, 0]));\nconsole.log(prod_signs([-1, 2, -3, 4, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkllrax4l.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0f9mx4i.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, -2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, 4, 5]));\nconsole.log(prod_signs([-1, -2, -3, -4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv8vqv944.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979923
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-2, -3, 4, -5]));\nconsole.log(prod_signs([-2,\
    \ -3, 4, -5, 0]));\nconsole.log(prod_signs([]));\nconsole.log(prod_signs([0, 0,\
    \ 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2,\
    \ -3, 4, -5, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0,\
    \ 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0]));\n\
    console.log(prod_signs([-2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2,\
    \ -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4,\
    \ -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-2, -3, 4, -5,\
    \ 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg7cb0u6t.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1659979923
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, 6, -7, 8, 9]));\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9, 0]));\nconsole.log(prod_signs([]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp2dlsoipk.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp2dlsoipk.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp2dlsoipk.js' ]\n\
    }\n"
  stdout: '-45

    -0

    undefined

    '
  timestamp: 1659979924
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (!arr.length)\
    \ return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    }\
    \ else if (arr[i] < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    }\
    \ else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, -4, -5, 0]));\nconsole.log(prod_signs([]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp4l3km2_w.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp4l3km2_w.js:29:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp4l3km2_w.js' ]\n\
    }\n"
  stdout: '15

    0

    undefined

    '
  timestamp: 1659979924
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -1, -1, -1, -1]));\nconsole.log(prod_signs([-1, -1, -1, -1, 1]));\nconsole.log(prod_signs([-1,\
    \ -1, -1, 0, -1]));\nconsole.log(prod_signs([-1, -1, -1, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -1, -1, 0, 1]));\nconsole.log(prod_signs([-1, -1, 0, -1, -1]));\nconsole.log(prod_signs([-1,\
    \ -1, 0, -1, 0]));\nconsole.log(prod_signs([-1, -1, 0, -1, 1]));\nconsole.log(prod_signs([-1,\
    \ -1, 0, 0, -1]));\nconsole.log(prod_signs([-1, -1, 0, 0, 0]));\nconsole.log(prod_signs([-1,\
    \ -1, 0, 0, 1]));\nconsole.log(prod_signs([-1, -1, 0, 1, -1]));\nconsole.log(prod_signs([-1,\
    \ -1, 0, 1, 0]));\nconsole.log(prod_signs([-1, -1, 0, 1, 1]));\nconsole.log(prod_signs([-1,\
    \ -1, 1, -1, -1]));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq4e9moh2.ts(40,9): error TS1003: Identifier expected.

    '
  timestamp: 1659979923
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       prod *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0)\
    \ {\n            prod *= -1;\n            sum += arr[i];\n        } else {\n \
    \           prod *= 0;\n            sum += 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpxv3i1ugl.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpxv3i1ugl.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpxv3i1ugl.js' ]\n\
    }\n"
  stdout: '15

    15

    0

    undefined

    '
  timestamp: 1659979925
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4])); // -4\n\
    console.log(prod_signs([-1, -2, -3, -4])); // 4\nconsole.log(prod_signs([0, 0,\
    \ 0, 0])); // 0\nconsole.log(prod_signs([])); // undefined\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqzdp2b5t.ts(12,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979925
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, -4, -5, -6]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0, 0]));\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5, -6]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6]));\nconsole.log(prod_signs([-1,\
    \ 2, -3, 4, -5, 6]));\nconsole.log(prod_signs([1, -2, 3, -4, 5, -6]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, 5, -6, 7, 8, 9, 10]));\nconsole.log(prod_signs([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10]));\nconsole.log(prod_signs([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(prod_signs([1,\
    \ -2, 3, -4, 5, -6, 7, -8, 9, -10]));\nconsole.log(prod_signs([1, -2, 3, -4, 5,\
    \ -6, 7, -8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(prod_signs([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxbapquql.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1659979925
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ !== 0) {\n            sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n\
    \        }\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1, -2,\
    \ -3, -4, -5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3cjczm8b.ts(15,26): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979925
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, -2, 3, -4, 5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([0, 0, 0, 0, 0]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp52pytfxx.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979925
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    console.log(prod_signs([-1, 2, -3, 4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps2jypbts.ts(22,1): error TS1005: '','' expected.

    ../../../../../tmp/tmps2jypbts.ts(22,9): error TS1005: '','' expected.

    '
  timestamp: 1659979925
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbggm6vev.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([-1, 2, -3, 4, -5]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0f9mx4i.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979905
- exit_code: 2
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum +=\
    \ Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return sum\
    \ * prod;\n}\n\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([0, 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9eu3nuvj.ts(14,22): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconsole.log(prod_signs([-1,\
    \ -2, -3, -4, -5]));\nconsole.log(prod_signs([1, 2, 3, 4, 5]));\nconsole.log(prod_signs([0,\
    \ 0, 0, 0, 0]));\nconsole.log(prod_signs([]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp5a8blf40.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp5a8blf40.js:30:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp5a8blf40.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979925
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\nfunction prod_signs(arr: number[]): number | undefined {\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n \
    \   let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconsole.log(prod_signs([-1, -2, -3, -4, -5]));\nconsole.log(prod_signs([1,\
    \ 2, 3, 4, 5]));\nconsole.log(prod_signs([1, 2, 3, 4, 0]));\nconsole.log(prod_signs([]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp5owuopr5.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp5owuopr5.js:31:14)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp5owuopr5.js' ]\n\
    }\n"
  stdout: '-15

    15

    0

    undefined

    '
  timestamp: 1659979925
