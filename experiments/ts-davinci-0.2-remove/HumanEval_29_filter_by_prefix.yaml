name: HumanEval_29_filter_by_prefix
language: ts
prompt: "//Filter an input list of strings only for ones that start with a given prefix.\n\
  function filter_by_prefix(strings: string[], prefix: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
  test();"
completions: ["    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function(string)\
    \ {\n        return string.startsWith(prefix);\n    });\n}\n", "    let result:\
    \ string[] = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(s) {\n        return s.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "    return strings.filter(function(s) {\n        return\
    \ s.indexOf(prefix) === 0;\n    });\n}\n", "    let filtered: string[] = [];\n\
    \    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(str) {\n        return str.startsWith(prefix);\n   \
    \ });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", " \
    \   return strings.filter(function(str) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(s) {\n        return s.indexOf(prefix) === 0;\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(string) {\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(s: string) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(s: string) {\n        return\
    \ s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(str) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(s) {\n        return s.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "    return strings.filter(function(str) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s: string)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s) {\n\
    \        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(function(str) {\n\
    \        return str.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(str) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(s) {\n        return s.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.indexOf(prefix) === 0;\n    });\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(s: string): boolean {\n  \
    \      return s.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(function(str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function(s:\
    \ string) {\n        return s.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s) {\n\
    \        return s.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s: string)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(str) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(s) {\n        return s.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(string) {\n        return string.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    let filtered: string[] = [];\n    for (let i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "    return strings.filter(s =>\
    \ s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    return strings.filter(function(str) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    var filtered = [];\n    for (var i = 0; i < strings.length; i++) {\n\
    \        if (strings[i].indexOf(prefix) == 0) {\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "    return strings.filter(s =>\
    \ s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function(str) {\n        return str.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "    return strings.filter(function(str) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function(str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(function(s) {\n\
    \        return s.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(string) {\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
