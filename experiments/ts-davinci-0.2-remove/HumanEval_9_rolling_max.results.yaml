language: ts
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [max_so_far];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] >= max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp96fuzotj.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp96fuzotj.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_list =\
    \ [max_so_far];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max_so_far) {\n            max_so_far = numbers[i];\n        }\n        max_list.push(max_so_far);\n\
    \    }\n    return max_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpjjges5yz.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjjges5yz.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = -Infinity;\n    let result = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max: number\
    \ = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptyofk71v.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmptyofk71v.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        let current = numbers[i];\n\
    \        if (current > max_so_far) {\n            max_so_far = current;\n    \
    \    }\n        result.push(max_so_far);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp7kzvh5lc.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7kzvh5lc.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    let result = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpdjp8oovh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdjp8oovh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpdjp8oovh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdjp8oovh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    let result = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max_so_far: number\
    \ = numbers[0];\n    result.push(max_so_far);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push(max_so_far);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpb5se7o93.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb5se7o93.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let result = [max];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2s1yht2m.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2s1yht2m.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    return numbers.map(n\
    \ => {\n        if (n > max_so_far) {\n            max_so_far = n;\n        }\n\
    \        return max_so_far;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    return numbers.map(n\
    \ => {\n        max_so_far = Math.max(max_so_far, n);\n        return max_so_far;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    let result = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let result = [];\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n        result.push(max);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptnjux7gh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmptnjux7gh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] >= max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = -Infinity;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_list =\
    \ [max_so_far];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max_so_far) {\n            max_so_far = numbers[i];\n        }\n        max_list.push(max_so_far);\n\
    \    }\n    return max_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpjjges5yz.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjjges5yz.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let result = [max];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2s1yht2m.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2s1yht2m.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let result = [max];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2s1yht2m.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2s1yht2m.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = -Infinity;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = -Infinity;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max_so_far: number\
    \ = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max_so_far) {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    return numbers.map(n\
    \ => {\n        if (n > max_so_far) {\n            max_so_far = n;\n        }\n\
    \        return max_so_far;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [max_so_far];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp5gsdx81i.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5gsdx81i.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let result = [];\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n        result.push(max);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = 0;\n    let result = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number = numbers[0];\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptnjux7gh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmptnjux7gh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptnjux7gh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmptnjux7gh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    return numbers.map(function\
    \ (number) {\n        if (number > max_so_far) {\n            max_so_far = number;\n\
    \        }\n        return max_so_far;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max_so_far: number\
    \ = -Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n        max_so_far\
    \ = Math.max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        let current = numbers[i];\n\
    \        if (current > max_so_far) {\n            max_so_far = current;\n    \
    \    }\n        result.push(max_so_far);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp7kzvh5lc.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7kzvh5lc.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let result = [max];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2s1yht2m.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2s1yht2m.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = -Infinity;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpdjp8oovh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdjp8oovh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        let current = numbers[i];\n\
    \        if (current > max_so_far) {\n            max_so_far = current;\n    \
    \    }\n        result.push(max_so_far);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp7kzvh5lc.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7kzvh5lc.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let maxes = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        maxes.push(max_so_far);\n\
    \    }\n    return maxes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpdn9rkqzc.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdn9rkqzc.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptnjux7gh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmptnjux7gh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    return numbers.map(n\
    \ => {\n        max_so_far = Math.max(max_so_far, n);\n        return max_so_far;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    return numbers.map(n\
    \ => {\n        if (n > max_so_far) {\n            max_so_far = n;\n        }\n\
    \        return max_so_far;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number = numbers[0];\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number = numbers[0];\n    let result: number[]\
    \ = [max];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp87zs0ppv.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmp87zs0ppv.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   max = Math.max(max, numbers[i]);\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpbj3qqezm.js:16:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbj3qqezm.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = -Infinity;\n    let result = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ -Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number[] = [];\n    let current_max: number\
    \ = numbers[0];\n    max.push(current_max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i];\n\
    \        }\n        max.push(current_max);\n    }\n    return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpsge5oufg.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsge5oufg.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpksibys0b.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpksibys0b.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptnjux7gh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmptnjux7gh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let result = [max];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2s1yht2m.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2s1yht2m.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   if (numbers[i] > max) {\n            max = numbers[i];\n        }\n      \
    \  result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpdjp8oovh.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdjp8oovh.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let max_so_far_index\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number = numbers[0];\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzlglics1.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzlglics1.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ -Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_so_far = numbers[0];\n    let result = [max_so_far];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max_so_far = Math.max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8itfcer3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8itfcer3.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659980021
