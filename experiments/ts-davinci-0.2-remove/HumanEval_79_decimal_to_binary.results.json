{
  "language": "ts",
  "name": "HumanEval_79_decimal_to_binary",
  "results": [
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2ewnmm1m.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp2ewnmm1m.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333617
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  let remainder = 0;\n  let quotient = decimal;\n  while (quotient > 0) {\n    remainder = quotient % 2;\n    quotient = Math.floor(quotient / 2);\n    binary = remainder + binary;\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnrk_ekmx.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmpnrk_ekmx.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1)); // db1db\nconsole.log(decimal_to_binary(2)); // db10db\nconsole.log(decimal_to_binary(3)); // db11db\nconsole.log(decimal_to_binary(4)); // db100db\nconsole.log(decimal_to_binary(5)); // db101db\nconsole.log(decimal_to_binary(6)); // db110db\nconsole.log(decimal_to_binary(7)); // db111db\nconsole.log(decimal_to_binary(8)); // db1000db\nconsole.log(decimal_to_binary(9)); // db1001db\nconsole.log(decimal_to_binary(10)); // db1010db\nconsole.log(decimal_to_binary(11)); // db1011db\nconsole.log(decimal_to_binary(12)); // db1100db\nconsole.log(decimal_to_binary(13)); // db1101db\nconsole.log(decimal_to_binary(14)); // db1110db\nconsole.log(decimal_to_binary(15)); // db1111db\nconsole.log(decimal_to_binary(16)); // db10000db\nconsole.log(decimal_to_binary(17)); // db10001db\nconsole.log(decimal_to_binary(18)); // db10010db\nconsole.log(decimal_to_binary(19)); // db10011db\nconsole.log(decimal_to_binary(20)); // db10100db\nconsole.log(decimal_to_binary(21)); // db10101db\nconsole.log(decimal_to_binary(22)); // db10110db\nconsole.log(decimal_to_binary(23)); // db10111db\nconsole.log(decimal_to_binary(24)); // db11000db\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn48v3tzo.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333617
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7xolx4m1.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp7xolx4m1.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  let binary_string: string = \"\";\n  let remainder: number = 0;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    binary = remainder.toString() + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  binary_string = \"db\" + binary + \"db\";\n  return binary_string;\n}\n\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(45));\nconsole.log(decimal_to_binary(50));\nconsole.log(decimal_to_binary(55));\nconsole.log(decimal_to_binary(60));\nconsole.log(decimal_to_binary(65));\nconsole.log(decimal_to_binary(70));\nconsole.log(decimal_to_binary(75));\nconsole.log(decimal_to_binary(80));\nconsole.log(decimal_to_binary(85));\nconsole.log(decimal_to_binary(90));\nconsole.log(decimal_to_binary(95));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(105));\nconsole.log(decimal_to_binary(110));\nconsole.log(decimal_to_binary(115));\nconsole.log(decimal_to_binary(120));\nconsole.log(decimal_to_binary(125));\nconsole.log(decimal_to_binary(130));\nconsole.log(decimal_to_binary(135));\nconsole.log(decimal_to_binary(140));\nconsole.log(decimal_to_binary(145));\nconsole.log(dec\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpboept35_.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmpboept35_.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa8n0jwn4.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplfy74wx8.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmplfy74wx8.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyopz0a9u.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpyopz0a9u.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxsna56kr.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpr99g70t8.js:23:12)\n    at Object.<anonymous> (/tmp/tmpr99g70t8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\ndb10011100010000db\ndb11000011010100000db\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result: string = \"\";\n  while (decimal > 0) {\n    result = (decimal % 2) + result;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + result + \"db\";\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpugw719gn.js:50:12)\n    at Object.<anonymous> (/tmp/tmpugw719gn.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\ndb1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let result: string = \"\";\n    let binary: string = \"\";\n    let remainder: number = 0;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        result += remainder;\n    }\n    for (let i = result.length - 1; i >= 0; i--) {\n        binary += result[i];\n    }\n    return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwootefv9.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfjwjg5xf.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpfjwjg5xf.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let result: string = '';\n    let remainder: number = 0;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        result = remainder + result;\n    }\n    return 'db' + result + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc8ctjomg.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpc8ctjomg.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  let binaryArr = [];\n  let temp = decimal;\n  while (temp > 0) {\n    binaryArr.push(temp % 2);\n    temp = Math.floor(temp / 2);\n  }\n  binaryArr.reverse();\n  binaryArr.forEach(element => {\n    binary += element;\n  });\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpbxgcoa9i.js:25:12)\n    at Object.<anonymous> (/tmp/tmpbxgcoa9i.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp1vlho4ww.js:50:12)\n    at Object.<anonymous> (/tmp/tmp1vlho4ww.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpluwki_9x.js:19:12)\n    at Object.<anonymous> (/tmp/tmpluwki_9x.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(500));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1010db\ndb1100100db\ndb111110100db\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return \"db\" + decimal.toString(2) + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let binary_array: string[] = [];\n    let binary_string: string = '';\n    let binary_string_array: string[] = [];\n    let binary_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string: string = '';\n    let binary_string_array_reversed_string_with_db: string = '';\n    let binary_string_array_reversed_string_with_db_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string: string = '';\n    let binary_string_array_reversed_string_with_db_array_reversed_string_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string_array_reversed_string: string = '';\n    let binary_string_array_reversed_string_with_db_array_reversed_string_array_reversed_string_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string_array_reversed_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string_array_reversed_string_array_reversed_string: string = '';\n    let binary_string_array_reversed_string_with_db_array_reversed_string_array_reversed_string_array_reversed_string_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string_array_reversed_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplrb_h813.ts(38,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp71vj9pfs.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return decimal.toString(2);\n}\n\nconsole.log(decimal_to_binary(1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp0897nu_e.js:14:12)\n    at Object.<anonymous> (/tmp/tmp0897nu_e.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "1\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxsna56kr.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let binary_string = '';\n    let remainder = 0;\n    let quotient = 0;\n    let binary_array = [];\n    let binary_array_reverse = [];\n    let binary_string_reverse = '';\n    let binary_string_final = '';\n    let binary_string_final_reverse = '';\n    let binary_string_final_reverse_final = '';\n    let binary_string_final_reverse_final_final = '';\n    let binary_string_final_reverse_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final_final_final_final_final_final_final_final = '';\n    let binary_string_final_reverse_final_final_final_final_final_final_final_final_final_final_final_final_final\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2ia_u3n9.ts(44,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  let remainder: number;\n  let quotient: number = decimal;\n  while (quotient > 0) {\n    remainder = quotient % 2;\n    quotient = Math.floor(quotient / 2);\n    binary = remainder + binary;\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp50i4e4lt.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp2vaa1fhx.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2vaa1fhx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let binary_string: string = '';\n    let binary_array: string[] = [];\n    let binary_array_length: number = 0;\n    let binary_array_length_difference: number = 0;\n    let binary_string_length: number = 0;\n    let binary_string_length_difference: number = 0;\n    let binary_string_length_difference_2: number = 0;\n    let binary_string_length_difference_3: number = 0;\n    let binary_string_length_difference_4: number = 0;\n    let binary_string_length_difference_5: number = 0;\n    let binary_string_length_difference_6: number = 0;\n    let binary_string_length_difference_7: number = 0;\n    let binary_string_length_difference_8: number = 0;\n    let binary_string_length_difference_9: number = 0;\n    let binary_string_length_difference_10: number = 0;\n    let binary_string_length_difference_11: number = 0;\n    let binary_string_length_difference_12: number = 0;\n    let binary_string_length_difference_13: number = 0;\n    let binary_string_length_difference_14: number = 0;\n    let binary_string_length_difference_15: number = 0;\n    let binary_string_length_difference_16: number = 0;\n    let binary_string_length_difference_17: number = 0;\n    let binary_string_length_difference_18: number = 0;\n    let binary_string_length_difference_19: number = 0;\n    let binary_string_length_difference_20: number = 0;\n    let binary_string_length_difference_21: number = 0;\n    let binary_string_length_difference_22: number = 0;\n    let binary_string_length_difference_23: number = 0;\n    let binary_string_length_difference_24: number = 0;\n    let binary_string_length_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp74a_1n0h.ts(51,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return `db${decimal.toString(2)}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(45));\nconsole.log(decimal_to_binary(50));\nconsole.log(decimal_to_binary(55));\nconsole.log(decimal_to_binary(60));\nconsole.log(decimal_to_binary(65));\nconsole.log(decimal_to_binary(70));\nconsole.log(decimal_to_binary(75));\nconsole.log(decimal_to_binary(80));\nconsole.log(decimal_to_binary(85));\nconsole.log(decimal_to_binary(90));\nconsole.log(decimal_to_binary(95));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(105));\nconsole.log(decimal_to_binary(110));\nconsole.log(decimal_to_binary(115));\nconsole.log(decimal_to_binary(120));\nconsole.log(decimal_to_binary(125));\nconsole.log(decimal_to_binary(130));\nconsole.log(decimal_to_binary(135));\nconsole.log(decimal_to_binary(140));\nconsole.log(decimal_to_binary(145));\nconsole.log(decimal_to_binary(150));\nconsole.log(decimal_to_binary(155));\nconsole.log(decimal_to_binary(160));\nconsole.log(decimal_to_binary(165));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpf9msheg5.js:50:12)\n    at Object.<anonymous> (/tmp/tmpf9msheg5.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1111db\ndb10100db\ndb11001db\ndb11110db\ndb100011db\ndb101000db\ndb101101db\ndb110010db\ndb110111db\ndb111100db\ndb1000001db\ndb1000110db\ndb1001011db\ndb1010000db\ndb1010101db\ndb1011010db\ndb1011111db\ndb1100100db\ndb1101001db\ndb1101110db\ndb1110011db\ndb1111000db\ndb1111101db\ndb10000010db\ndb10000111db\ndb10001100db\ndb10010001db\ndb10010110db\ndb10011011db\ndb10100000db\ndb10100101db\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let binary_string: string = '';\n    let db: string = 'db';\n    let binary_array: string[] = [];\n    let binary_array_reverse: string[] = [];\n    let binary_array_reverse_string: string = '';\n    let binary_array_reverse_string_db: string = '';\n    let binary_array_reverse_string_db_final: string = '';\n    let binary_array_reverse_string_db_final_db: string = '';\n    let binary_array_reverse_string_db_final_db_final: string = '';\n    let binary_array_reverse_string_db_final_db_final_db: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_db: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db_final: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db_final_db: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db_final_db_final: string = '';\n    let binary_array_reverse_string_db_final_db_final_db_final_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3au09aen.ts(41,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let result: string = \"\";\n    let binary: string = \"\";\n    let binaryArray: string[] = [];\n    let binaryString: string = \"\";\n    let binaryStringArray: string[] = [];\n    let binaryStringArrayLength: number = 0;\n    let binaryStringArrayLengthDifference: number = 0;\n    let binaryStringArrayLengthDifferenceString: string = \"\";\n    let binaryStringArrayLengthDifferenceStringArray: string[] = [];\n    let binaryStringArrayLengthDifferenceStringArrayLength: number = 0;\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifference: number = 0;\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceString: string = \"\";\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArray: string[] = [];\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLength: number = 0;\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifference: number = 0;\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceString: string = \"\";\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArray: string[] = [];\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLength: number = 0;\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifference: number = 0;\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceString: string = \"\";\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArray: string[] = [];\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLength: number = 0;\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifference: number = 0;\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceStringArrayLengthDifferenceString: string = \"\";\n    let binaryStringArrayLengthDifferenceStringArrayLengthDifference\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0wrsxyqo.ts(45,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return `db${decimal.toString(2)}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpjo27206q.js:50:12)\n    at Object.<anonymous> (/tmp/tmpjo27206q.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = '';\n  let remainder: number;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = remainder + binary;\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpzhektmjr.js:21:12)\n    at Object.<anonymous> (/tmp/tmpzhektmjr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(45));\nconsole.log(decimal_to_binary(50));\nconsole.log(decimal_to_binary(55));\nconsole.log(decimal_to_binary(60));\nconsole.log(decimal_to_binary(65));\nconsole.log(decimal_to_binary(70));\nconsole.log(decimal_to_binary(75));\nconsole.log(decimal_to_binary(80));\nconsole.log(decimal_to_binary(85));\nconsole.log(decimal_to_binary(90));\nconsole.log(decimal_to_binary(95));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(105));\nconsole.log(decimal_to_binary(110));\nconsole.log(decimal_to_binary(115));\nconsole.log(decimal_to_binary(120));\nconsole.log(decimal_to_binary(125));\nconsole.log(decimal_to_binary(130));\nconsole.log(decimal_to_binary(135));\nconsole.log(decimal_to_binary(140));\nconsole.log(decimal_to_binary(145));\nconsole.log(decimal_to_binary(150));\nconsole.log(decimal_to_binary(155));\nconsole.log(decimal_to_binary(160));\nconsole.log(decimal_to_binary(165));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp1o8y5wmi.js:50:12)\n    at Object.<anonymous> (/tmp/tmp1o8y5wmi.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1111db\ndb10100db\ndb11001db\ndb11110db\ndb100011db\ndb101000db\ndb101101db\ndb110010db\ndb110111db\ndb111100db\ndb1000001db\ndb1000110db\ndb1001011db\ndb1010000db\ndb1010101db\ndb1011010db\ndb1011111db\ndb1100100db\ndb1101001db\ndb1101110db\ndb1110011db\ndb1111000db\ndb1111101db\ndb10000010db\ndb10000111db\ndb10001100db\ndb10010001db\ndb10010110db\ndb10011011db\ndb10100000db\ndb10100101db\n",
      "timestamp": 1660333622
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp8dn18ufq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8dn18ufq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3ywo8ayj.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp3ywo8ayj.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let result: string = '';\n    let binary: string = '';\n    let remainder: number = 0;\n    let quotient: number = decimal;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        binary = remainder + binary;\n    }\n    result = 'db' + binary + 'db';\n    return result;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpc00ydo4n.js:50:12)\n    at Object.<anonymous> (/tmp/tmpc00ydo4n.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\ndb10011100010000db\ndb11000011010100000db\ndb11110100001001000000db\ndb100110001001011010000000db\ndb101111101011110000100000000db\ndb111011100110101100101000000000db\ndb1001010100000010111110010000000000db\ndb1011101001000011101101110100000000000db\ndb1110100011010100101001010001000000000000db\ndb10010001100001001110011100101010000000000000db\ndb10110101111001100010000011110100100000000000000db\ndb11100011010111111010100100110001101000000000000000db\ndb100011100001101111001001101111110000010000000000000000db\ndb101100011010001010111100001011101100010100000000000000000db\ndb110111100000101101101011001110100111011001000000000000000000db\ndb1000101011000111001000110000010010001001111010000000000000000000db\ndb1010110101111000111010111100010110101100011000100000000000000000000db\ndb1101100011010111001001101011011100010111011110101000000000000000000000db\ndb10000111100001100111100000110010011011101010110010010000000000000000000000db\ndb1010100101101000000101100011111100001010010101111011000000000",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(36));\nconsole.log(decimal_to_binary(37));\nconsole.log(decimal_to_binary(38));\nconsole.log(decimal_to_binary(39));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(41));\nconsole.log(decimal_to_binary(42));\nconsole.log(decimal_to_binary(43));\nconsole.log(decimal_to_binary(44));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp53x5vv74.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp53x5vv74.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpl1v77bbk.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl1v77bbk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return decimal.toString(2);\n}\n\nconsole.log(decimal_to_binary(1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp0897nu_e.js:14:12)\n    at Object.<anonymous> (/tmp/tmp0897nu_e.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "1\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let remainder = 0;\n    let quotient = decimal;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(dec\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyxbxztaf.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpyxbxztaf.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwmy0h2dx.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpwmy0h2dx.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let remainder: number;\n    let quotient: number = decimal;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpppp_0nke.js:49:12)\n    at Object.<anonymous> (/tmp/tmpppp_0nke.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\ndb10011100010000db\ndb11000011010100000db\ndb11110100001001000000db\ndb100110001001011010000000db\ndb101111101011110000100000000db\ndb111011100110101100101000000000db\ndb1001010100000010111110010000000000db\ndb1011101001000011101101110100000000000db\ndb1110100011010100101001010001000000000000db\ndb10010001100001001110011100101010000000000000db\ndb10110101111001100010000011110100100000000000000db\ndb11100011010111111010100100110001101000000000000000db\ndb100011100001101111001001101111110000010000000000000000db\ndb101100011010001010111100001011101100010100000000000000000db\ndb110111100000101101101011001110100111011001000000000000000000db\ndb1000101011000111001000110000010010001001111010000000000000000000db\ndb1010110101111000111010111100010110101100011000100000000000000000000db\ndb1101100011010111001001101011011100010111011110101000000000000000000000db\ndb10000111100001100111100000110010011011101010110010010000000000000000000000db\ndb1010100101101000000101100011111100001010010101111011000000000",
      "timestamp": 1660333622
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    let quotient: number = decimal;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp19qc_577.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpjo27206q.js:50:12)\n    at Object.<anonymous> (/tmp/tmpjo27206q.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2ny44cl6.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp2ny44cl6.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = \"\";\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkrjvd4k5.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  let remainder: number;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    binary = remainder + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6q8m83me.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp6q8m83me.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    return 'db' + decimal.toString(2) + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv__x32ur.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  let binaryString = \"\";\n  while (decimal > 0) {\n    binary = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binaryString = binary + binaryString;\n  }\n  return \"db\" + binaryString + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbzc8vl18.ts(49,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp8dn18ufq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8dn18ufq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  let remainder: number;\n  let quotient: number = decimal;\n  while (quotient > 0) {\n    remainder = quotient % 2;\n    quotient = Math.floor(quotient / 2);\n    binary = remainder + binary;\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpv30j_k78.js:49:12)\n    at Object.<anonymous> (/tmp/tmpv30j_k78.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\ndb10011100010000db\ndb11000011010100000db\ndb11110100001001000000db\ndb100110001001011010000000db\ndb101111101011110000100000000db\ndb111011100110101100101000000000db\ndb1001010100000010111110010000000000db\ndb1011101001000011101101110100000000000db\ndb1110100011010100101001010001000000000000db\ndb10010001100001001110011100101010000000000000db\ndb10110101111001100010000011110100100000000000000db\ndb11100011010111111010100100110001101000000000000000db\ndb100011100001101111001001101111110000010000000000000000db\ndb101100011010001010111100001011101100010100000000000000000db\ndb110111100000101101101011001110100111011001000000000000000000db\ndb1000101011000111001000110000010010001001111010000000000000000000db\ndb1010110101111000111010111100010110101100011000100000000000000000000db\ndb1101100011010111001001101011011100010111011110101000000000000000000000db\ndb10000111100001100111100000110010011011101010110010010000000000000000000000db\ndb1010100101101000000101100011111100001010010101111011000000000",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result: string = \"\";\n  let binary: string = \"\";\n  let remainder: number = 0;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    binary = remainder + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  result = \"db\" + binary + \"db\";\n  return result;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmps0kav2k_.js:53:12)\n    at Object.<anonymous> (/tmp/tmps0kav2k_.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpxp6kk2e9.js:50:12)\n    at Object.<anonymous> (/tmp/tmpxp6kk2e9.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3ywo8ayj.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp3ywo8ayj.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return `db${decimal.toString(2)}db`;\n}\n\nconsole.log(decimal_to_binary(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1010db\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxsna56kr.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result: string = \"\";\n  while (decimal > 0) {\n    result = (decimal % 2) + result;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + result + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk03ltbf1.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpk03ltbf1.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1010db\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return 'db' + decimal.toString(2) + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1010db\ndb101db\ndb0db\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  let remainder: number;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    binary = remainder + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwebvd8d_.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0)); // 'db0db'\nconsole.log(decimal_to_binary(1)); // 'db1db'\nconsole.log(decimal_to_binary(2)); // 'db10db'\nconsole.log(decimal_to_binary(3)); // 'db11db'\nconsole.log(decimal_to_binary(4)); // 'db100db'\nconsole.log(decimal_to_binary(5)); // 'db101db'\nconsole.log(decimal_to_binary(6)); // 'db110db'\nconsole.log(decimal_to_binary(7)); // 'db111db'\nconsole.log(decimal_to_binary(8)); // 'db1000db'\nconsole.log(decimal_to_binary(9)); // 'db1001db'\nconsole.log(decimal_to_binary(10)); // 'db1010db'\nconsole.log(decimal_to_binary(11)); // 'db1011db'\nconsole.log(decimal_to_binary(12)); // 'db1100db'\nconsole.log(decimal_to_binary(13)); // 'db1101db'\nconsole.log(decimal_to_binary(14)); // 'db1110db'\nconsole.log(decimal_to_binary(15)); // 'db1111db'\nconsole.log(decimal_to_binary(16)); // 'db10000db'\nconsole.log(decimal_to_binary(17)); // 'db10001db'\nconsole.log(decimal_to_binary(18)); // 'db10010db'\nconsole.log(decimal_to_binary(19)); // 'db10011db'\nconsole.log(decimal_to_binary(20)); // 'db10100db'\nconsole.log(decimal_to_binary(21)); // 'db10101db'\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp1eub78j4.js:41:12)\n    at Object.<anonymous> (/tmp/tmp1eub78j4.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\ndb1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7xg13k8n.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp7xg13k8n.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpwoo30uax.js:19:12)\n    at Object.<anonymous> (/tmp/tmpwoo30uax.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplfy74wx8.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmplfy74wx8.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpjo27206q.js:50:12)\n    at Object.<anonymous> (/tmp/tmpjo27206q.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3ywo8ayj.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp3ywo8ayj.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    let quotient: number = decimal;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu4btl288.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpm7yohln_.js:50:12)\n    at Object.<anonymous> (/tmp/tmpm7yohln_.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\ndb1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2uk941f7.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp2uk941f7.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let binary_array: string[] = [];\n    let binary_string: string = '';\n    let binary_string_array: string[] = [];\n    let binary_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string: string = '';\n    let binary_string_array_reversed_string_with_db: string = '';\n    let binary_string_array_reversed_string_with_db_and_zeros: string = '';\n    let binary_string_array_reversed_string_with_db_and_zeros_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_and_zeros_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_with_db_and_zeros_array_reversed_string: string = '';\n    let binary_string_array_reversed_string_with_db_and_zeros_array_reversed_string_with_db: string = '';\n    let binary_string_array_reversed_string_with_db_and_zeros_array_reversed_string_with_db_and_zeros: string = '';\n    let binary_string_array_reversed_string_with_db_and_zeros_array_reversed_string_with_db_and_zeros_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_and_zeros_array_reversed_string_with_db_and_zeros_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_with_db_and_zeros_array_reversed_string_with_db_and_zeros_array_reversed_string: string = '';\n    let binary_string_array_reversed_string_with_db_and_zeros_array_reversed_string_with_db_and_zeros_array_revers\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4oes7i0k.ts(37,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(36));\nconsole.log(decimal_to_binary(37));\nconsole.log(decimal_to_binary(38));\nconsole.log(decimal_to_binary(39));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpljjcb9jp.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpljjcb9jp.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp8dn18ufq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8dn18ufq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000000));\nconsole.log(decimal_to_binary(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zvqtbft.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let result: string = \"\";\n    let binary: string = \"\";\n    let remainder: number = 0;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        result += remainder;\n    }\n    for (let i = result.length - 1; i >= 0; i--) {\n        binary += result[i];\n    }\n    return \"db\" + binary + \"db\";\n}\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpd2ofqmw0.js:30:12)\n    at Object.<anonymous> (/tmp/tmpd2ofqmw0.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb10100db\ndb1100100db\ndb1111101000db\ndb1db\ndbdb\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(30));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1010db\ndb10100db\ndb11110db\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp2vaa1fhx.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2vaa1fhx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplfy74wx8.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmplfy74wx8.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = \"\";\n    let binary_array: string[] = [];\n    let binary_string: string = \"\";\n    let binary_string_array: string[] = [];\n    let binary_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string: string = \"\";\n    let binary_string_array_reversed_string_array: string[] = [];\n    let binary_string_array_reversed_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_array_reversed_string: string = \"\";\n    let binary_string_array_reversed_string_array_reversed_string_array: string[] = [];\n    let binary_string_array_reversed_string_array_reversed_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_array_reversed_string_array_reversed_string: string = \"\";\n    let binary_string_array_reversed_string_array_reversed_string_array_reversed_string_array: string[] = [];\n    let binary_string_array_reversed_string_array_reversed_string_array_reversed_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_array_reversed_string_array_reversed_string_array_reversed_string: string = \"\";\n    let binary_string_array_reversed_string_array_reversed_string_array_reversed_string_array_reversed_string_array: string[] = [];\n    let binary_string_array_reversed_string_array_reversed_string_array_reversed_string_array_reversed_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_array_reversed_string_array_reversed_string_array_reversed_string_array_reversed_string:\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3voj1ny9.ts(26,9): error TS1005: ',' expected.\n../../../../tmp/tmp3voj1ny9.ts(38,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkdafb8mp.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpkdafb8mp.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = '';\n  let remainder: number;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = remainder + binary;\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdlg4gu1s.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmparvw8p5h.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmparvw8p5h.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let binary_string = '';\n    let remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        binary = remainder + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    binary_string = 'db' + binary + 'db';\n    return binary_string;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc38g4ghz.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpc38g4ghz.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpjo27206q.js:50:12)\n    at Object.<anonymous> (/tmp/tmpjo27206q.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphpn9mlc0.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp8dn18ufq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8dn18ufq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let binary_string: string = '';\n    let remainder: number = 0;\n    let quotient: number = 0;\n    let counter: number = 0;\n    let binary_array: string[] = [];\n    let binary_array_reverse: string[] = [];\n    let binary_array_reverse_string: string = '';\n    let binary_array_reverse_string_final: string = '';\n    let binary_array_reverse_string_final_final: string = '';\n    let binary_array_reverse_string_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final_final_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final_final_final_final_final_final_final_final: string = '';\n    let binary_array_reverse_string_final_final_final_final_final_final_final_final_final_final_final_final_final_final: string = '';\n    let binary_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3dxmxdvc.ts(43,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result = \"\";\n  while (decimal > 0) {\n    result = (decimal % 2) + result;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + result + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa9rqz860.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5byz4gnr.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqjale4s3.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpqjale4s3.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpblps5aid.js:21:12)\n    at Object.<anonymous> (/tmp/tmpblps5aid.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp71vj9pfs.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqjale4s3.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpqjale4s3.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(45));\nconsole.log(decimal_to_binary(96));\nconsole.log(decimal_to_binary(500));\nconsole.log(decimal_to_binary(1023));\nconsole.log(decimal_to_binary(1024));\nconsole.log(decimal_to_binary(2048));\nconsole.log(decimal_to_binary(4096));\nconsole.log(decimal_to_binary(8192));\nconsole.log(decimal_to_binary(16384));\nconsole.log(decimal_to_binary(32768));\nconsole.log(decimal_to_binary(65536));\nconsole.log(decimal_to_binary(4294967295));\nconsole.log(decimal_to_binary(18446744073709551615));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpuq5ad41b.js:36:12)\n    at Object.<anonymous> (/tmp/tmpuq5ad41b.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db101db\ndb1010db\ndb1111db\ndb10000db\ndb11001db\ndb101101db\ndb1100000db\ndb111110100db\ndb1111111111db\ndb10000000000db\ndb100000000000db\ndb1000000000000db\ndb10000000000000db\ndb100000000000000db\ndb1000000000000000db\ndb10000000000000000db\ndb11111111111111111111111111111111db\ndb10000000000000000000000000000000000000000000000000000000000000000db\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqjale4s3.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpqjale4s3.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    return 'db' + decimal.toString(2) + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = \"\";\n    let binary_string: string = \"\";\n    let binary_array: string[] = [];\n    binary = decimal.toString(2);\n    binary_array = binary.split(\"\");\n    for (let i: number = 0; i < binary_array.length; i++) {\n        binary_string += binary_array[i];\n    }\n    return \"db\" + binary_string + \"db\";\n}\n\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(45));\nconsole.log(decimal_to_binary(50));\nconsole.log(decimal_to_binary(55));\nconsole.log(decimal_to_binary(60));\nconsole.log(decimal_to_binary(65));\nconsole.log(decimal_to_binary(70));\nconsole.log(decimal_to_binary(75));\nconsole.log(decimal_to_binary(80));\nconsole.log(decimal_to_binary(85));\nconsole.log(decimal_to_binary(90));\nconsole.log(decimal_to_binary(95));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(105));\nconsole.log(decimal_to_binary(110));\nconsole.log(decimal_to_binary(115));\nconsole.log(decimal_to_binary(120));\nconsole.log(decimal_to_binary(125));\nconsole.log(decimal_to_binary(130));\nconsole.log(decimal_to_binary(135));\nconsole.log(decimal_to_binary(140\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmrmagsjk.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpmrmagsjk.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmparvw8p5h.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmparvw8p5h.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  let binary_array = [];\n  let binary_string = '';\n  let binary_string_array = [];\n  let binary_string_array_reversed = [];\n  let binary_string_array_reversed_string = '';\n  let binary_string_array_reversed_string_with_db = '';\n  let binary_string_array_reversed_string_with_db_and_spaces = '';\n  let binary_string_array_reversed_string_with_db_and_spaces_array = [];\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed = [];\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed_string = '';\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed_string_with_db = '';\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed_string_with_db_and_spaces = '';\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed_string_with_db_and_spaces_array = [];\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed_string_with_db_and_spaces_array_reversed = [];\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed_string_with_db_and_spaces_array_reversed_string = '';\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed_string_with_db_and_spaces_array_reversed_string_with_db = '';\n  let binary_string_array_reversed_string_with_db_and_spaces_array_reversed\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu9jdnocu.ts(38,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return \"db\" + decimal.toString(2) + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphpn9mlc0.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplfy74wx8.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmplfy74wx8.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let result: string = '';\n    let binary: string = '';\n    let remainder: number = 0;\n    let quotient: number = decimal;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        result += remainder;\n    }\n    for (let i: number = result.length - 1; i >= 0; i--) {\n        binary += result[i];\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(255));\nconsole.log(decimal_to_binary(512));\nconsole.log(decimal_to_binary(1024));\nconsole.log(decimal_to_binary(2048));\nconsole.log(decimal_to_binary(4096));\nconsole.log(decimal_to_binary(8192));\nconsole.log(decimal_to_binary(16384));\nconsole.log(decimal_to_binary(32768));\nconsole.log(decimal_to_binary(65536));\nconsole.log(decimal_to_binary(131072));\nconsole.log(decimal_to_binary(262144));\nconsole.log(decimal_to_binary(524288));\nconsole.log(decimal_to_binary(1048576));\nconsole.log(decimal_to_binary(2097152));\nconsole.log(decimal_to_binary(4194304));\nconsole.log(decimal_to_binary(8388608));\nconsole.log(decimal_to_binary(16777216));\nconsole.log(decimal_to_binary(33554432));\nconsole.log(decimal_to_binary(67108864));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyvyghoxb.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphpn9mlc0.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3ywo8ayj.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp3ywo8ayj.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  let remainder = 0;\n  let quotient = decimal;\n  while (quotient > 0) {\n    remainder = quotient % 2;\n    quotient = Math.floor(quotient / 2);\n    binary = remainder + binary;\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(dec\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1hu4k3qr.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp1hu4k3qr.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqxt2zw8p.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpl1v77bbk.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl1v77bbk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return 'db' + decimal.toString(2) + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result: string = \"\";\n  let binary: string = \"\";\n  let remainder: number = 0;\n  let quotient: number = decimal;\n  while (quotient > 0) {\n    remainder = quotient % 2;\n    quotient = Math.floor(quotient / 2);\n    result += remainder;\n  }\n  for (let i = result.length - 1; i >= 0; i--) {\n    binary += result[i];\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptnjq5q1l.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  let remainder: number;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = remainder + binary;\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp9bc_3nw8.js:48:12)\n    at Object.<anonymous> (/tmp/tmp9bc_3nw8.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\ndb10011100010000db\ndb11000011010100000db\ndb11110100001001000000db\ndb100110001001011010000000db\ndb101111101011110000100000000db\ndb111011100110101100101000000000db\ndb1001010100000010111110010000000000db\ndb1011101001000011101101110100000000000db\ndb1110100011010100101001010001000000000000db\ndb10010001100001001110011100101010000000000000db\ndb10110101111001100010000011110100100000000000000db\ndb11100011010111111010100100110001101000000000000000db\ndb100011100001101111001001101111110000010000000000000000db\ndb101100011010001010111100001011101100010100000000000000000db\ndb110111100000101101101011001110100111011001000000000000000000db\ndb1000101011000111001000110000010010001001111010000000000000000000db\ndb1010110101111000111010111100010110101100011000100000000000000000000db\ndb1101100011010111001001101011011100010111011110101000000000000000000000db\ndb10000111100001100111100000110010011011101010110010010000000000000000000000db\ndb1010100101101000000101100011111100001010010101111011000000000",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return 'db' + decimal.toString(2) + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1010db\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprlxxzew6.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmprlxxzew6.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return 'db' + decimal.toString(2) + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpl1v77bbk.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl1v77bbk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxvsg0qvc.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpxvsg0qvc.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(101));\nconsole.log(decimal_to_binary(999));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(1001));\nconsole.log(decimal_to_binary(1002));\nconsole.log(decimal_to_binary(1003));\nconsole.log(decimal_to_binary(1004));\nconsole.log(decimal_to_binary(1005));\nconsole.log(decimal_to_binary(1006));\nconsole.log(decimal_to_binary(1007));\nconsole.log(decimal_to_binary(1008));\nconsole.log(decimal_to_binary(1009));\nconsole.log(decimal_to_binary(1010));\nconsole.log(decimal_to_binary(1011));\nconsole.log(decimal_to_binary(1012));\nconsole.log(decimal_to_binary(1013));\nconsole.log(decimal_to_binary(1014));\nconsole.log(decimal_to_binary(1015));\nconsole.log(decimal_to_binary(1016));\nconsole.log(decimal_to_binary(1017));\nconsole.log(decimal_to_binary(1018));\nconsole.log(decimal_to_binary(1019));\nconsole.log(decimal_to_binary(1020));\nconsole.log(decimal_to_binary(1021));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp95s5ib5d.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp95s5ib5d.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbjis_evo.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2uk941f7.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp2uk941f7.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphpn9mlc0.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  let remainder: number;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    binary = remainder + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(36));\nconsole.log(decimal_to_binary(37));\nconsole.log(decimal_to_binary(38));\nconsole.log(decimal_to_binary(39));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(41));\nconsole.log(decimal_to_binary(42));\nconsole.log(decimal_to_binary(43));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuyhvma50.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2uk941f7.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp2uk941f7.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let temp = decimal;\n    while (temp > 0) {\n        binary = (temp % 2) + binary;\n        temp = Math.floor(temp / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdnt_ldbx.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpdnt_ldbx.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    return decimal.toString(2);\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(45));\nconsole.log(decimal_to_binary(50));\nconsole.log(decimal_to_binary(55));\nconsole.log(decimal_to_binary(60));\nconsole.log(decimal_to_binary(65));\nconsole.log(decimal_to_binary(70));\nconsole.log(decimal_to_binary(75));\nconsole.log(decimal_to_binary(80));\nconsole.log(decimal_to_binary(85));\nconsole.log(decimal_to_binary(90));\nconsole.log(decimal_to_binary(95));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(105));\nconsole.log(decimal_to_binary(110));\nconsole.log(decimal_to_binary(115));\nconsole.log(decimal_to_binary(120));\nconsole.log(decimal_to_binary(125));\nconsole.log(decimal_to_binary(130));\nconsole.log(decimal_to_binary(135));\nconsole.log(decimal_to_binary(140));\nconsole.log(decimal_to_binary(145));\nconsole.log(decimal_to_binary(150));\nconsole.log(decimal_to_binary(155));\nconsole.log(decimal_to_binary(160));\nconsole.log(decimal_to_binary(165));\nconsole.log(decimal_to_binary(170));\nconsole.log(decimal_to_binary(175));\nconsole.log(decimal_to_binary(180));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0m7pkn0m.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp0m7pkn0m.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result: string = \"\";\n  let binary: string = \"\";\n  while (decimal > 0) {\n    result += decimal % 2;\n    decimal = Math.floor(decimal / 2);\n  }\n  for (let i = result.length - 1; i >= 0; i--) {\n    binary += result[i];\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmphg0mh9uo.js:23:12)\n    at Object.<anonymous> (/tmp/tmphg0mh9uo.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return 'db' + decimal.toString(2) + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6kd23e_r.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp6kd23e_r.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(101));\nconsole.log(decimal_to_binary(255));\nconsole.log(decimal_to_binary(500));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(1234567890));\nconsole.log(decimal_to_binary(12345678901234567890));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1010db\ndb101db\ndb0db\ndb1100100db\ndb1100101db\ndb11111111db\ndb111110100db\ndb1111101000db\ndb1001001100101100000001011010010db\ndb1010101101010100101010011000110011101011000111110000100000000000db\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkdafb8mp.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpkdafb8mp.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpmaegeohe.js:50:12)\n    at Object.<anonymous> (/tmp/tmpmaegeohe.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\ndb1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result = '';\n  while (decimal > 0) {\n    result = (decimal % 2) + result;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + result + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph79fvawi.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmph79fvawi.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(1000000000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpvoai1om8.js:23:12)\n    at Object.<anonymous> (/tmp/tmpvoai1om8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\ndb11110100001001000000db\ndb111011100110101100101000000000db\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp8dn18ufq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8dn18ufq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp2vaa1fhx.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2vaa1fhx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(36));\nconsole.log(decimal_to_binary(37));\nconsole.log(decimal_to_binary(38));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbrejcxe5.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpbrejcxe5.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    return 'db' + decimal.toString(2) + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2ny44cl6.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp2ny44cl6.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  return 'db' + decimal.toString(2) + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjfnzcfd3.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpjfnzcfd3.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqjale4s3.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpqjale4s3.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(36));\nconsole.log(decimal_to_binary(37));\nconsole.log(decimal_to_binary(38));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa4ziv_m6.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpa4ziv_m6.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp8dn18ufq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8dn18ufq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = decimal % 2 + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10)); // db1010db\nconsole.log(decimal_to_binary(1)); // db1db\nconsole.log(decimal_to_binary(2)); // db10db\nconsole.log(decimal_to_binary(3)); // db11db\nconsole.log(decimal_to_binary(4)); // db100db\nconsole.log(decimal_to_binary(5)); // db101db\nconsole.log(decimal_to_binary(6)); // db110db\nconsole.log(decimal_to_binary(7)); // db111db\nconsole.log(decimal_to_binary(8)); // db1000db\nconsole.log(decimal_to_binary(9)); // db1001db\nconsole.log(decimal_to_binary(10)); // db1010db\nconsole.log(decimal_to_binary(11)); // db1011db\nconsole.log(decimal_to_binary(12)); // db1100db\nconsole.log(decimal_to_binary(13)); // db1101db\nconsole.log(decimal_to_binary(14)); // db1110db\nconsole.log(decimal_to_binary(15)); // db1111db\nconsole.log(decimal_to_binary(16)); // db10000db\nconsole.log(decimal_to_binary(17)); // db10001db\nconsole.log(decimal_to_binary(18)); // db10010db\nconsole.log(decimal_to_binary(19)); // db10011db\nconsole.log(decimal_to_binary(20)); // db10100db\nconsole.log(decimal_to_binary(21)); // db10101db\nconsole.log(decimal_to_binary(22)); // db10110db\nconsole.log(decimal_to_binary(23)); // db10111db\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp62hvwofx.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp62hvwofx.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result = '';\n  while (decimal > 0) {\n    result = (decimal % 2) + result;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + result + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphyeo9c8z.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjfnzcfd3.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpjfnzcfd3.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result = '';\n  while (decimal > 0) {\n    result = (decimal % 2) + result;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + result + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\nconsole.log(decimal_to_binary\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph79fvawi.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmph79fvawi.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(50));\nconsole.log(decimal_to_binary(60));\nconsole.log(decimal_to_binary(70));\nconsole.log(decimal_to_binary(80));\nconsole.log(decimal_to_binary(90));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(110));\nconsole.log(decimal_to_binary(120));\nconsole.log(decimal_to_binary(130));\nconsole.log(decimal_to_binary(140));\nconsole.log(decimal_to_binary(150));\nconsole.log(decimal_to_binary(160));\nconsole.log(decimal_to_binary(170));\nconsole.log(decimal_to_binary(180));\nconsole.log(decimal_to_binary(190));\nconsole.log(decimal_to_binary(200));\nconsole.log(decimal_to_binary(210));\nconsole.log(decimal_to_binary(220));\nconsole.log(decimal_to_binary(230));\nconsole.log(decimal_to_binary(240));\nconsole.log(decimal_to_binary(250));\nconsole.log(decimal_to_binary(260));\nconsole.log(decimal_to_binary(270));\nconsole.log(decimal_to_binary(280));\nconsole.log(decimal_to_binary(290));\nconsole.log(decimal_to_binary(300));\nconsole.log(decimal_to_binary(310));\nconsole.log(decimal_to_binary(320));\nconsole.log(decimal_to_binary(330));\nconsole.log(decimal_to_binary(340));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpagsv9xeu.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpagsv9xeu.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxsna56kr.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    let quotient: number = decimal;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu7a3v6rj.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp2vaa1fhx.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2vaa1fhx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result = \"\";\n  while (decimal > 0) {\n    result = (decimal % 2) + result;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + result + \"db\";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpl1q79wyf.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl1q79wyf.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333633
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    return 'db' + decimal.toString(2) + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\ndb100001db\ndb100010db\ndb100011db\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp6wy228n1.js:48:12)\n    at Object.<anonymous> (/tmp/tmp6wy228n1.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\ndb10011100010000db\ndb11000011010100000db\ndb11110100001001000000db\ndb100110001001011010000000db\ndb101111101011110000100000000db\ndb111011100110101100101000000000db\ndb1001010100000010111110010000000000db\ndb1011101001000011101101110100000000000db\ndb1110100011010100101001010001000000000000db\ndb10010001100001001110011100101010000000000000db\ndb10110101111001100010000011110100100000000000000db\ndb11100011010111111010100100110001101000000000000000db\ndb100011100001101111001001101111110000010000000000000000db\ndb101100011010001010111100001011101100010100000000000000000db\ndb110111100000101101101011001110100111011001000000000000000000db\ndb1000101011000111001000110000010010001001111010000000000000000000db\ndb1010110101111000111010111100010110101100011000100000000000000000000db\ndb1101100011010111001001101011011100010111011110101000000000000000000000db\ndb10000111100001100111100000110010011011101010110010010000000000000000000000db\ndb1010100101101000000101100011111100001010010101111011000000000",
      "timestamp": 1660333633
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjv3jgurm.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpjv3jgurm.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333632
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal >= 1) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp7fzk6qun.js:51:12)\n    at Object.<anonymous> (/tmp/tmp7fzk6qun.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpl1v77bbk.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl1v77bbk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwiefxmp_.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpwiefxmp_.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmparvw8p5h.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmparvw8p5h.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpt2emfwo8.js:24:12)\n    at Object.<anonymous> (/tmp/tmpt2emfwo8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb101db\ndbdb\ndb1100100db\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  let binary_string = '';\n  while (decimal > 0) {\n    binary = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary_string = binary.toString() + binary_string;\n  }\n  return `db${binary_string}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5xedcr8q.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp5xedcr8q.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = \"\";\n    let binary_array: string[] = [];\n    let binary_string: string = \"\";\n    let binary_string_array: string[] = [];\n    let binary_string_array_reversed: string[] = [];\n    let binary_string_array_reversed_string: string = \"\";\n    let binary_string_array_reversed_string_with_db: string = \"\";\n    let binary_string_array_reversed_string_with_db_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string: string = \"\";\n    let binary_string_array_reversed_string_with_db_array_reversed_string_with_db: string = \"\";\n    let binary_string_array_reversed_string_with_db_array_reversed_string_with_db_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string_with_db_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string_with_db_array_reversed_string: string = \"\";\n    let binary_string_array_reversed_string_with_db_array_reversed_string_with_db_array_reversed_string_with_db: string = \"\";\n    let binary_string_array_reversed_string_with_db_array_reversed_string_with_db_array_reversed_string_with_db_array: string[] = [];\n    let binary_string_array_reversed_string_with_db_array_reversed_string_with_db_array_reversed_string_with_db_array_reversed: string[] = [];\n    let binary_string_array_reversed_string_with_db_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpediwe0z7.ts(38,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result: string = \"\";\n  let binary: string = \"\";\n  let remainder: number = 0;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    binary = remainder + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  result = \"db\" + binary + \"db\";\n  return result;\n}\n\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(200));\nconsole.log(decimal_to_binary(300));\nconsole.log(decimal_to_binary(400));\nconsole.log(decimal_to_binary(500));\nconsole.log(decimal_to_binary(600));\nconsole.log(decimal_to_binary(700));\nconsole.log(decimal_to_binary(800));\nconsole.log(decimal_to_binary(900));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(1100));\nconsole.log(decimal_to_binary(1200));\nconsole.log(decimal_to_binary(1300));\nconsole.log(decimal_to_binary(1400));\nconsole.log(decimal_to_binary(1500));\nconsole.log(decimal_to_binary(1600));\nconsole.log(decimal_to_binary(1700));\nconsole.log(decimal_to_binary(1800));\nconsole.log(decimal_to_binary(1900));\nconsole.log(decimal_to_binary(2000));\nconsole.log(decimal_to_binary(2100));\nconsole.log(decimal_to_binary(2200));\nconsole.log(decimal_to_binary(2300));\nconsole.log(decimal_to_binary(2400));\nconsole.log(decimal_to_binary(2500));\nconsole.log(decimal_to_binary(2600));\nconsole.log(decimal_to_binary(2700));\nconsole.log(decimal_to_binary(2800));\nconsole.log(decimal_to_binary(2900));\nconsole.log(dec\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc46rsv79.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmpc46rsv79.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    return decimal.toString(2);\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpurr9lqmh.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpurr9lqmh.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(255));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(9999));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg1dkrz9u.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpg1dkrz9u.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpmaegeohe.js:50:12)\n    at Object.<anonymous> (/tmp/tmpmaegeohe.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\ndb1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp71vj9pfs.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpbvlzbb8s.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbvlzbb8s.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1100100db\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp2vaa1fhx.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2vaa1fhx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2ny44cl6.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp2ny44cl6.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(45));\nconsole.log(decimal_to_binary(50));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpm7t1p5v6.js:28:12)\n    at Object.<anonymous> (/tmp/tmpm7t1p5v6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db101db\ndb1010db\ndb1111db\ndb10100db\ndb11001db\ndb11110db\ndb100011db\ndb101000db\ndb101101db\ndb110010db\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq1pftc9b.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpq1pftc9b.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp8dn18ufq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8dn18ufq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplfy74wx8.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmplfy74wx8.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    let quotient: number = decimal;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu4btl288.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333625
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzy3czf1.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let quotient = decimal;\n    while (quotient > 0) {\n        binary = quotient % 2 + binary;\n        quotient = Math.floor(quotient / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpnr5jiq5z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnr5jiq5z.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpyjy8b0d5.js:20:12)\n    at Object.<anonymous> (/tmp/tmpyjy8b0d5.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  let remainder: number;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    binary = remainder + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6q8m83me.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp6q8m83me.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let result: string = '';\n  let binary: string = '';\n  let remainder: number = 0;\n  let quotient: number = 0;\n  let i: number = 0;\n  let j: number = 0;\n  let temp: string = '';\n  let temp2: string = '';\n  let temp3: string = '';\n  let temp4: string = '';\n  let temp5: string = '';\n  let temp6: string = '';\n  let temp7: string = '';\n  let temp8: string = '';\n  let temp9: string = '';\n  let temp10: string = '';\n  let temp11: string = '';\n  let temp12: string = '';\n  let temp13: string = '';\n  let temp14: string = '';\n  let temp15: string = '';\n  let temp16: string = '';\n  let temp17: string = '';\n  let temp18: string = '';\n  let temp19: string = '';\n  let temp20: string = '';\n  let temp21: string = '';\n  let temp22: string = '';\n  let temp23: string = '';\n  let temp24: string = '';\n  let temp25: string = '';\n  let temp26: string = '';\n  let temp27: string = '';\n  let temp28: string = '';\n  let temp29: string = '';\n  let temp30: string = '';\n  let temp31: string = '';\n  let temp32: string = '';\n  let temp33: string = '';\n  let temp34: string = '';\n  let temp35: string = '';\n  let temp36: string = '';\n  let temp37: string = '';\n  let temp38: string = '';\n  let temp39: string = '';\n  let temp40: string = '';\n  let temp41: string = '';\n  let temp42: string = '';\n  let temp43: string = '';\n  let temp44: string = '';\n  let temp45: string = '';\n  let temp46: string =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6aij4jt0.ts(60,9): error TS1005: ',' expected.\n../../../../tmp/tmp6aij4jt0.ts(72,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary: string = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp1vlho4ww.js:50:12)\n    at Object.<anonymous> (/tmp/tmp1vlho4ww.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1db\ndb10db\ndb11db\ndb100db\ndb101db\ndb110db\ndb111db\ndb1000db\ndb1001db\ndb1010db\ndb1011db\ndb1100db\ndb1101db\ndb1110db\ndb1111db\ndb10000db\ndb10001db\ndb10010db\ndb10011db\ndb10100db\ndb10101db\ndb10110db\ndb10111db\ndb11000db\ndb11001db\ndb11010db\ndb11011db\ndb11100db\ndb11101db\ndb11110db\ndb11111db\ndb100000db\n",
      "timestamp": 1660333618
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(36));\nconsole.log(decimal_to_binary(37));\nconsole.log(decimal_to_binary(38));\nconsole.log(decimal_to_binary(39));\nconsole.log(decimal_to_binary(40));\nconsole.log(decimal_to_binary(41));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph782ofap.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmparvw8p5h.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmparvw8p5h.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(33));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqjale4s3.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpqjale4s3.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmp2vaa1fhx.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2vaa1fhx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "dbdb\n",
      "timestamp": 1660333621
    },
    {
      "exit_code": 0,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  const binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(1000000000));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "db1010db\ndb1100100db\ndb1111101000db\ndb11110100001001000000db\ndb111011100110101100101000000000db\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n    let binary: string = '';\n    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(100));\nconsole.log(decimal_to_binary(1000));\nconsole.log(decimal_to_binary(10000));\nconsole.log(decimal_to_binary(100000));\nconsole.log(decimal_to_binary(1000000));\nconsole.log(decimal_to_binary(10000000));\nconsole.log(decimal_to_binary(100000000));\nconsole.log(decimal_to_binary(1000000000));\nconsole.log(decimal_to_binary(10000000000));\nconsole.log(decimal_to_binary(100000000000));\nconsole.log(decimal_to_binary(1000000000000));\nconsole.log(decimal_to_binary(10000000000000));\nconsole.log(decimal_to_binary(100000000000000));\nconsole.log(decimal_to_binary(1000000000000000));\nconsole.log(decimal_to_binary(10000000000000000));\nconsole.log(decimal_to_binary(100000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000));\nconsole.log(decimal_to_binary(10000000000000000000000000));\nconsole.log(decimal_to_binary(100000000000000000000000000));\nconsole.log(decimal_to_binary(1000000000000000000000000000));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dbdb'\n\nshould loosely deep-equal\n\n'db0db'\n    at test (/tmp/tmpjenyqrnu.js:49:12)\n    at Object.<anonymous> (/tmp/tmpjenyqrnu.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dbdb',\n  expected: 'db0db',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "db1010db\ndb10100db\ndb1100100db\ndb1111101000db\ndb10011100010000db\ndb11000011010100000db\ndb11110100001001000000db\ndb100110001001011010000000db\ndb101111101011110000100000000db\ndb111011100110101100101000000000db\ndb1001010100000010111110010000000000db\ndb1011101001000011101101110100000000000db\ndb1110100011010100101001010001000000000000db\ndb10010001100001001110011100101010000000000000db\ndb10110101111001100010000011110100100000000000000db\ndb11100011010111111010100100110001101000000000000000db\ndb100011100001101111001001101111110000010000000000000000db\ndb101100011010001010111100001011101100010100000000000000000db\ndb110111100000101101101011001110100111011001000000000000000000db\ndb1000101011000111001000110000010010001001111010000000000000000000db\ndb1010110101111000111010111100010110101100011000100000000000000000000db\ndb1101100011010111001001101011011100010111011110101000000000000000000000db\ndb10000111100001100111100000110010011011101010110010010000000000000000000000db\ndb101010010110100000010110001111110000101001010111101",
      "timestamp": 1660333635
    },
    {
      "exit_code": 2,
      "program": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\nfunction decimal_to_binary(decimal: number): string {\n  let binary = '';\n  while (decimal > 0) {\n    binary = decimal % 2 + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(2));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(5));\nconsole.log(decimal_to_binary(6));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(8));\nconsole.log(decimal_to_binary(9));\nconsole.log(decimal_to_binary(10));\nconsole.log(decimal_to_binary(11));\nconsole.log(decimal_to_binary(12));\nconsole.log(decimal_to_binary(13));\nconsole.log(decimal_to_binary(14));\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(16));\nconsole.log(decimal_to_binary(17));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(19));\nconsole.log(decimal_to_binary(20));\nconsole.log(decimal_to_binary(21));\nconsole.log(decimal_to_binary(22));\nconsole.log(decimal_to_binary(23));\nconsole.log(decimal_to_binary(24));\nconsole.log(decimal_to_binary(25));\nconsole.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(28));\nconsole.log(decimal_to_binary(29));\nconsole.log(decimal_to_binary(30));\nconsole.log(decimal_to_binary(31));\nconsole.log(decimal_to_binary(32));\nconsole.log(dec\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxfd_s2l4.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpxfd_s2l4.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333635
    }
  ]
}