name: HumanEval_127_intersection
language: ts
prompt: "//You are given two intervals,\n// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\nfunction intersection(interval1: [number, number], interval2: [number,\
  \ number]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2],\
  \ [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3,\
  \ -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\"\
  );\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1,\
  \ 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n\
  \  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"
completions: ["    let start = Math.max(interval1[0], interval2[0]);\n    let end\
    \ = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    let len = end - start + 1;\n    if (len === 1) {\n     \
    \   return \"NO\";\n    }\n    for (let i = 2; i < len; i++) {\n        if (len\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 11])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    const start = Math.max(interval1[0], interval2[0]);\n \
    \   const end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    const length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [3,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    return start <= end &&\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\n", "    let start: number =\
    \ Math.max(interval1[0], interval2[0]);\n    let end: number = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length: number = end - start + 1;\n    if (length === 1) {\n        return \"\
    NO\";\n    }\n    for (let i: number = 2; i < length; i++) {\n        if (length\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [5, 8]));\nconsole.log(intersection([1,\
    \ 3], [5, 9]));\nconsole.log(intersection([1, 3], [5, 10]));\nconsole.log(intersection([1,\
    \ 3], [5, 11]));\nconsole.log(intersection([1, 3], [5, 12]));\nconsole.log(intersection([1,\
    \ 3], [5, 13]));\nconsole.log(intersection([1, 3], [5, 14]));\nconsole.log(intersection([1,\
    \ 3], [5, 15]));\nconsole.log(intersection([1, 3], [5, 16]));\nconsole.log(intersection([1,\
    \ 3], [5, 17]));\nconsole.log(intersection([1, 3], [5, 18]));\nconsole.log(intersection([1,\
    \ 3], [5, 19]));\nconsole.log(intersection([1, 3], [5, 20]));\nconsole.log(intersection([1,\
    \ 3], [5, 21]));\nconsole.log(intersection([1, 3], [5, 22]));\nconsole.log(intersection([1,\
    \ 3], [5, 23])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    const start\
    \ = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) return \"NO\";\n    const length = end\
    \ - start + 1;\n    if (length < 2) return \"NO\";\n    if (length === 2) return\
    \ \"YES\";\n    for (let i = 2; i < length; i++) {\n        if (length % i ===\
    \ 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 4])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [3, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [4, 5])); // \"NO\"\nconsole.log(intersection([1, 3], [5, 6])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [6, 7])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [7, 8])); // \"NO\"\nconsole.log(intersection([1, 3], [8, 9])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [9, 10])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [10, 11])); // \"NO\"\nconsole.log(intersection([1, 3], [11, 12])); // \"\
    NO\"\nconsole.log(intersection([1, 3], [12, 13])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [13, 14])); // \"NO\"\nconsole.log(intersection([1, 3], [14, 15])); // \"\
    NO\"\nconsole.log(intersection([1, 3], [15, 16])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [16, 17])); // \"NO\"\nconsole.log(intersection([1, 3], [17, 18])); // \"\
    NO\"\nconsole.log(intersection([1", "    let start: number = Math.max(interval1[0],\
    \ interval2[0]);\n    let end: number = Math.min(interval1[1], interval2[1]);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    let length: number\
    \ = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n \
    \   for (let i: number = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 2]));\nconsole.log(intersection([1,\
    \ 3], [0, 3]));\nconsole.log(intersection([1, 3], [0, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 5]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 4]));\nconsole.log(intersection([1, 3], [1, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [2, 5]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 6]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21])", "    let start:\
    \ number = Math.max(interval1[0], interval2[0]);\n    let end: number = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length: number = end - start + 1;\n    if (length === 1) {\n        return \"\
    NO\";\n    }\n    for (let i: number = 2; i < length; i++) {\n        if (length\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 5], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 6]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 16])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    if (length === 2) {\n        return\
    \ \"YES\";\n    }\n    for (let i = 2; i < length; i++) {\n        if (length\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20])", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1,\
    \ end2);\n    if (start > end) {\n        return \"NO\";\n    }\n    let length\
    \ = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n\
    \    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start:\
    \ number = Math.max(interval1[0], interval2[0]);\n    let end: number = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length: number = end - start + 1;\n    if (length <= 1) {\n        return \"\
    NO\";\n    }\n    for (let i: number = 2; i < length; i++) {\n        if (length\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [4, 7]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 6]));\nconsole.log(intersection([1, 3], [3, 7]));\nconsole.log(intersection([1,\
    \ 3], [3, 8]));\nconsole.log(intersection([1, 3], [4, 8]));\nconsole.log(intersection([1,\
    \ 3], [5, 8]));\nconsole.log(intersection([1, 3], [6, 8]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [7, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 11]));\nconsole.log(intersection([1, 3], [11, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 15]));\nconsole.log(intersection([1, 3], [15, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 19]));\nconsole.log(intersection([1, 3], [19, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 23]));\nconsole.log(intersection([1, 3], [23, 25]));\nconsole.log(intersection([1,\
    \ 3], [25, 27]));\nconsole.log(intersection([1, 3], [27, 29]));\nconsole.log(intersection([1,\
    \ 3], [29, 31]));\nconsole.log(intersection([1, 3], [31, 33]));\nconsole.log(intersection([1,\
    \ 3], [33, 35])", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n\
    \  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1,\
    \ end2);\n  const length = end - start + 1;\n  return isPrime(length) ? \"YES\"\
    \ : \"NO\";\n}\n", "    let start = Math.max(interval1[0], interval2[0]);\n  \
    \  let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n \
    \       return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1, 3], [2,\
    \ 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    if (length < 0) {\n        return \"NO\";\n    }\n    if (length === 1) {\n\
    \        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n     \
    \   if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 1]));\n", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if (length < 0) {\n     \
    \   return \"NO\";\n    }\n    if (length === 0) {\n        return \"YES\";\n\
    \    }\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\n", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1, 3], [3,\
    \ 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 2])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length <\
    \ 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\nconsole.log(intersection([1,\
    \ 3], [22, 23]));\nconsole.log(intersection([1, 3], [23, 24])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 5], [2,\
    \ 4]));\nconsole.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) return \"NO\";\n    let length = end -\
    \ start + 1;\n    if (length < 2) return \"NO\";\n    for (let i = 2; i < length;\
    \ i++) {\n        if (length % i === 0) return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 9]));\nconsole.log(intersection([1, 3], [9, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 13]));\nconsole.log(intersection([1, 3], [13, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 17]));\nconsole.log(intersection([1, 3], [17, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 21]));\nconsole.log(intersection([1, 3], [21, 23]));\nconsole.log(intersection([1,\
    \ 3], [23, 25]));\nconsole.log(intersection([1, 3], [25, 27]));\nconsole.log(intersection([1,\
    \ 3], [27, 29]));\nconsole.log(intersection([1, 3], [29, 31]));\nconsole.log(intersection([1,\
    \ 3], [31, 33]));\nconsole.log(intersection([1, 3], [33, 35]));\nconsole.log(intersection([1,\
    \ 3], [35, 37])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [2, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [0, 0]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 2]));\nconsole.log(intersection([1,\
    \ 3], [0, 3]));\nconsole.log(intersection([1, 3], [0, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 5]));\nconsole.log(intersection([1, 3], [0, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [1, 4]));\nconsole.log(intersection([1,\
    \ 3], [1, 5])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 13])", "  let start =\
    \ Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\
    \  let length = end - start;\n  if (length < 0) {\n    return \"NO\";\n  }\n \
    \ return isPrime(length) ? \"YES\" : \"NO\";\n}\n", "  const start = Math.max(interval1[0],\
    \ interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const\
    \ length = end - start;\n  if (length <= 0) {\n    return \"NO\";\n  }\n  if (length\
    \ === 1) {\n    return \"YES\";\n  }\n  if (length === 2) {\n    return \"NO\"\
    ;\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n  \
    \    return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\n", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [13, 13]));\nconsole.log(intersection([1,\
    \ 3], [14, 14]));\nconsole.log(intersection([1, 3], [15, 15]));\nconsole.log(intersection([1,\
    \ 3], [16, 16]));\nconsole.log(intersection([1, 3], [17, 17])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    if (length === 2) {\n        return \"YES\";\n    }\n    for (let\
    \ i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) return \"NO\";\n    let len = end - start\
    \ + 1;\n    if (len === 1) return \"NO\";\n    for (let i = 2; i < len; i++) {\n\
    \        if (len % i === 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [1,\
    \ 3]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 9]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 11]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 13]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 15]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 17]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 19]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 21]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 23]));\nconsole.log(intersection([1,\
    \ 3], [22, 23])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let len = end - start + 1;\n    if (len < 2)\
    \ {\n        return \"NO\";\n    }\n    for (let i = 2; i < len; i++) {\n    \
    \    if (len % i === 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [3, 6]));\nconsole.log(intersection([1,\
    \ 3], [3, 7]));\nconsole.log(intersection([1, 3], [3, 8]));\nconsole.log(intersection([1,\
    \ 3], [3, 9]));\nconsole.log(intersection([1, 3], [3, 10]));\nconsole.log(intersection([1,\
    \ 3], [3, 11]));\nconsole.log(intersection([1, 3], [3, 12]));\nconsole.log(intersection([1,\
    \ 3], [3, 13]));\nconsole.log(intersection([1, 3], [3, 14]));\nconsole.log(intersection([1,\
    \ 3], [3, 15]));\nconsole.log(intersection([1, 3], [3, 16]));\nconsole.log(intersection([1,\
    \ 3], [3, 17]));\nconsole.log(intersection([1, 3], [3, 18]));\nconsole.log(intersection([1,\
    \ 3], [3, 19]));\nconsole.log(intersection([1, 3], [3, 20])", "    let start =\
    \ Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [2,\
    \ 5]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [6, 8]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [7, 9]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [8, 10]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [9, 11]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [10, 12]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [11, 13]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [12, 14]));\nconsole.log(intersection([1, 3], [13, 14])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length <= 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 0]));\nconsole.log(intersection([1, 3], [0, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [0, 5]));\nconsole.log(intersection([1,\
    \ 3], [1, 5]));\nconsole.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [8, 8])", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    if (start > end) {\n    \
    \    return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\nconsole.log(intersection([1, 3], [2, 4])); //\
    \ \"NO\"\nconsole.log(intersection([1, 3], [3, 4])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [1, 4])); // \"YES\"\nconsole.log(intersection([1, 3], [2, 3])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [1, 2])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [3, 5])); // \"NO\"\nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [0, 0])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [4, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [0, 5])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [0, 1])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [3, 3])); // \"NO\"\nconsole.log(intersection([1, 3], [2, 2])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [1, 1])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [0, 2])); // \"YES\"\nconsole.log(intersection([1, 3], [2, 4])); // \"NO\"\
    \nconsole.log(intersection([", "    const start = Math.max(interval1[0], interval2[0]);\n\
    \    const end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    const length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 6]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 7]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let len = end - start + 1;\n    if (len ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i <= Math.sqrt(len);\
    \ i++) {\n        if (len % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [3,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3],", "    let start = Math.max(interval1[0], interval2[0]);\n    let end =\
    \ Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    let length = end - start + 1;\n    if (length < 2) {\n \
    \       return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n      \
    \  if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n   \
    \ return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if (length < 0) {\n     \
    \   return \"NO\";\n    }\n    if (length === 0) {\n        return \"YES\";\n\
    \    }\n    if (length === 1) {\n        return \"NO\";\n    }\n    if (length\
    \ === 2) {\n        return \"YES\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1, 3], [3,\
    \ 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [13, 13]));\nconsole.log(intersection([1,\
    \ 3], [14, 14]));\nconsole.log(intersection([1, 3], [15, 15]));\nconsole.log(intersection([1,\
    \ 3], [16, 16]));\n", "    let [start, end] = [Math.max(interval1[0], interval2[0]),\
    \ Math.min(interval1[1], interval2[1])];\n    if (start > end) return \"NO\";\n\
    \    let length = end - start + 1;\n    if (length < 2) return \"NO\";\n    if\
    \ (length === 2) return \"YES\";\n    for (let i = 2; i < length; i++) {\n   \
    \     if (length % i === 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23]));\nconsole.log",
  "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const\
    \ start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  if\
    \ (start > end) {\n    return \"NO\";\n  }\n  const length = end - start + 1;\n\
    \  if (length === 1) {\n    return \"NO\";\n  }\n  for (let i = 2; i < length;\
    \ i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21])", "    const start = Math.max(interval1[0], interval2[0]);\n \
    \   const end = Math.min(interval1[1], interval2[1]);\n    const length = end\
    \ - start;\n    if (length < 0) {\n        return \"NO\";\n    }\n    if (length\
    \ === 0) {\n        return \"YES\";\n    }\n    if (length === 1) {\n        return\
    \ \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n        if (length %\
    \ i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\n", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ <= 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    let len = end - start;\n\
    \    if (len < 0) return \"NO\";\n    if (len === 0) return \"YES\";\n    if (len\
    \ === 1) return \"NO\";\n    if (len === 2) return \"YES\";\n    if (len % 2 ===\
    \ 0) return \"NO\";\n    for (let i = 3; i <= Math.sqrt(len); i += 2) {\n    \
    \    if (len % i === 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1,", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let\
    \ len = end - start;\n    if (len < 0) return \"NO\";\n    if (len === 1) return\
    \ \"YES\";\n    for (let i = 2; i < len; i++) {\n        if (len % i === 0) return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\n", "    const\
    \ [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n    const\
    \ intersectionStart = Math.max(start1, start2);\n    const intersectionEnd = Math.min(end1,\
    \ end2);\n    if (intersectionStart > intersectionEnd) {\n        return \"NO\"\
    ;\n    }\n    const intersectionLength = intersectionEnd - intersectionStart +\
    \ 1;\n    if (intersectionLength === 1) {\n        return \"NO\";\n    }\n   \
    \ for (let i = 2; i < intersectionLength; i++) {\n        if (intersectionLength\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [2, 2])); // \"NO\"\nconsole.log(intersection([1, 3], [2, 3])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [3, 3])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [3, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [4, 4])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [5, 5])); // \"NO\"\nconsole.log(intersection([1, 3], [5, 6])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [6, 6])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [6, 7])); // \"NO\"\nconsole.log(intersection([1, 3], [7, 7])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [7, 8])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [8, 8])); // \"NO\"\nconsole.log(intersection([1, 3], [8, 9])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [9, 9", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 13]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 15]));\nconsole.log(intersection([1, 3], [16, 16]));\nconsole.log(intersection([1,\
    \ 3], [17, 17]));\nconsole.log(intersection([1, 3], [18, 18]));\nconsole.log(intersection([1,\
    \ 3], [19, 19])", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1,\
    \ end2);\n    if (start > end) {\n        return \"NO\";\n    }\n    let length\
    \ = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n \
    \   for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 13])", "  let start =\
    \ Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n\
    \  if (start > end) {\n    return \"NO\";\n  }\n  let length = end - start + 1;\n\
    \  if (length === 1) {\n    return \"NO\";\n  }\n  for (let i = 2; i < length;\
    \ i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [3, 4])); // \"YES\"\nconsole.log(intersection([1, 3], [1, 3])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [1, 2])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [2, 3])); // \"YES\"\nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [3, 5])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [2, 5])); // \"YES\"\nconsole.log(intersection([1, 3], [0, 5])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [0, 2])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [0, 1])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 5])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [5, 5])); // \"NO\"\nconsole.log(intersection([1, 3], [5, 6])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [6, 6])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [6, 7])); // \"NO\"\nconsole.", "    let [start1, end1] = interval1;\n \
    \   let [start2, end2] = interval2;\n    let start = Math.max(start1, start2);\n\
    \    let end = Math.min(end1, end2);\n    if (start > end) {\n        return \"\
    NO\";\n    }\n    let length = end - start + 1;\n    if (length < 2) {\n     \
    \   return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n        if\
    \ (length % i === 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [0, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 0]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    const [start1,\
    \ end1] = interval1;\n    const [start2, end2] = interval2;\n    const start =\
    \ Math.max(start1, start2);\n    const end = Math.min(end1, end2);\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    const length = end - start + 1;\n\
    \    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i\
    \ < length; i++) {\n        if (length % i === 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3],\
    \ [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 2], [2, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17])", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2\
    \ || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1,\
    \ start2);\n  const end = Math.min(end1, end2);\n  const length = end - start\
    \ + 1;\n  const isPrime = (num: number) => {\n    for (let i = 2; i < num; i++)\
    \ {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return\
    \ num > 1;\n  };\n  return isPrime(length) ? \"YES\" : \"NO\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 5]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 6]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 6]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [6, 8]));\nconsole.log(intersection([1,\
    \ 3], [7, 9]));\nconsole.log(intersection([1, 3], [8, 10]));\nconsole.log(intersection([1,\
    \ 3], [", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let start = Math.max(start1, start2);\n    let end = Math.min(end1, end2);\n\
    \    if (start >= end) {\n        return \"NO\";\n    }\n    let length = end\
    \ - start;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let\
    \ i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 13]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 15]));\nconsole.log(intersection([1, 3], [16, 16]));\nconsole.log(intersection([1,\
    \ 3], [17, 17]));\nconsole.log(intersection([1, 3], [18, 18]));\n", "    let start:\
    \ number = Math.max(interval1[0], interval2[0]);\n    let end: number = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length: number = end - start + 1;\n    if (length === 1) {\n        return \"\
    NO\";\n    }\n    for (let i: number = 2; i < length; i++) {\n        if (length\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    if (length\
    \ === 2) {\n        return \"YES\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) return \"NO\";\n    let length = end -\
    \ start + 1;\n    if (length === 1) return \"NO\";\n    for (let i = 2; i < length;\
    \ i++) {\n        if (length % i === 0) return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let len = end - start + 1;\n    if (len ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < len; i++) {\n \
    \       if (len % i === 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10])", "    let start =\
    \ Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    if (length === 2) {\n        return \"YES\";\n    }\n    for (let\
    \ i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 13]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 15]));\nconsole.log(intersection([1, 3], [16, 16]));\nconsole.log(intersection([1,\
    \ 3], [17, 17]));\nconsole.log(intersection([1, 3], [18, 18])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    if (length === 2) {\n        return \"YES\";\n    }\n    for (let\
    \ i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 5], [2,\
    \ 4]));\nconsole.log(intersection([1, 5], [6, 8]));\nconsole.log(intersection([1,\
    \ 5], [5, 8]));\nconsole.log(intersection([1, 5], [6, 9]));\nconsole.log(intersection([1,\
    \ 5], [5, 9]));\nconsole.log(intersection([1, 5], [6, 10]));\nconsole.log(intersection([1,\
    \ 5], [5, 10]));\nconsole.log(intersection([1, 5], [6, 11]));\nconsole.log(intersection([1,\
    \ 5], [5, 11]));\nconsole.log(intersection([1, 5], [6, 12]));\nconsole.log(intersection([1,\
    \ 5], [5, 12]));\nconsole.log(intersection([1, 5], [6, 13]));\nconsole.log(intersection([1,\
    \ 5], [5, 13]));\nconsole.log(intersection([1, 5], [6, 14]));\nconsole.log(intersection([1,\
    \ 5], [5, 14]));\nconsole.log(intersection([1, 5], [6, 15]));\nconsole.log(intersection([1,\
    \ 5], [5, 15]));\nconsole.log(intersection([1, 5], [6, 16]));\nconsole.log(intersection([1,\
    \ 5], [5, 16]));\nconsole.log(intersection([1, 5], [6, 17])", "    let start =\
    \ Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [2,\
    \ 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [5, 8]));\nconsole.log(intersection([1, 3], [5, 9]));\nconsole.log(intersection([1,\
    \ 3], [5, 10]));\nconsole.log(intersection([1, 3], [5, 11]));\nconsole.log(intersection([1,\
    \ 3], [5, 12]));\nconsole.log(intersection([1, 3], [5, 13]));\nconsole.log(intersection([1,\
    \ 3], [5, 14]));\nconsole.log(intersection([1, 3], [5, 15]));\nconsole.log(intersection([1,\
    \ 3], [5, 16]));\nconsole.log(intersection([1, 3], [5, 17]));\nconsole.log(intersection([1,\
    \ 3], [5, 18]));\nconsole.log(intersection([1, 3], [5, 19]));\nconsole.log(intersection([1,\
    \ 3], [5, 20]));\nconsole.log(intersection([1, 3], [5, 21]));\nconsole.log(intersection([1,\
    \ 3], [5, 22]));\nconsole.log(intersection([1, 3], [5, 23]));\nconsole.log(intersection([1,\
    \ 3], [5, 24]));\nconsole.log(intersection([1, 3], [5, 25])", "    let start =\
    \ Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if (length < 0) {\n     \
    \   return \"NO\";\n    }\n    if (length === 0) {\n        return \"YES\";\n\
    \    }\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\n", "    const\
    \ start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    const\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 13]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 15])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [13, 13]));\nconsole.log(intersection([1,\
    \ 3], [14, 14]));\nconsole.log(intersection([1, 3], [15, 15]));\nconsole.log(intersection([1,\
    \ 3], [16, 16]));\nconsole.log(intersection([1, 3], [17, 17]));\nconsole.log(intersection([1,\
    \ 3], [18, 18])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\n", "  \
    \  let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    if (start > end) {\n    \
    \    return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    if (start > end) return \"\
    NO\";\n    if (start === end) return isPrime(start) ? \"YES\" : \"NO\";\n    let\
    \ length = end - start + 1;\n    return isPrime(length) ? \"YES\" : \"NO\";\n\
    }\n", "    const start = Math.max(interval1[0], interval2[0]);\n    const end\
    \ = Math.min(interval1[1], interval2[1]);\n    const length = end - start;\n \
    \   if (length < 0) {\n        return \"NO\";\n    }\n    if (length === 0) {\n\
    \        return \"YES\";\n    }\n    if (length === 1) {\n        return \"NO\"\
    ;\n    }\n    if (length === 2) {\n        return \"YES\";\n    }\n    for (let\
    \ i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\n", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20])", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1,\
    \ end2);\n  if (start > end) {\n    return \"NO\";\n  }\n  const length = end\
    \ - start + 1;\n  if (length === 1) {\n    return \"NO\";\n  }\n  for (let i =\
    \ 2; i < length; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n \
    \   }\n  }\n  return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  const start = Math.max(start1,\
    \ start2);\n  const end = Math.min(end1, end2);\n  if (start >= end) {\n    return\
    \ \"NO\";\n  }\n  const length = end - start;\n  if (length === 1) {\n    return\
    \ \"NO\";\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 4])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [2, 3])); // \"NO\"\nconsole.log(intersection([1, 3], [1, 3])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [1, 2])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [2, 2])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 3])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [4, 4])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [1, 4])); // \"YES\"\nconsole.log(intersection([1, 3], [2, 5])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [0, 2])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [0, 4])); // \"YES\"\nconsole.log(intersection([1, 3], [0, 5])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [0, 6])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [0, 7])); // \"YES\"\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [0, 0]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [0, 2]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [0, 5]));\nconsole.log(intersection([1,\
    \ 3], [0, 6]));\nconsole.log(intersection([1, 3], [0, 7]));\nconsole.log(intersection([1,\
    \ 3], [0, 8]));\nconsole.log(intersection([1, 3], [0, 9]));\nconsole.log(intersection([1,\
    \ 3], [0, 10])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [4, 7]));\nconsole.log(intersection([1, 3], [4, 8]));\nconsole.log(intersection([1,\
    \ 3], [4, 9]));\nconsole.log(intersection([1, 3], [4, 10]));\nconsole.log(intersection([1,\
    \ 3], [4, 11]));\nconsole.log(intersection([1, 3], [4, 12]));\nconsole.log(intersection([1,\
    \ 3], [4, 13]));\nconsole.log(intersection([1, 3], [4, 14]));\nconsole.log(intersection([1,\
    \ 3], [4, 15]));\nconsole.log(intersection([1, 3], [4, 16]));\nconsole.log(intersection([1,\
    \ 3], [4, 17]));\nconsole.log(intersection([1, 3], [4, 18]));\nconsole.log(intersection([1,\
    \ 3], [4, 19]));\nconsole.log(intersection([1, 3], [4, 20]));\nconsole.log(intersection([1,\
    \ 3], [4, 21]));\nconsole.log(intersection([1, 3], [4, 22]));\nconsole.log(intersection([1,\
    \ 3], [4, 23])", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let intersectionStart = Math.max(start1, start2);\n    let\
    \ intersectionEnd = Math.min(end1, end2);\n    if (intersectionStart > intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    let intersectionLength = intersectionEnd\
    \ - intersectionStart + 1;\n    if (isPrime(intersectionLength)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) return \"NO\";\n    let length = end - start + 1;\n    let isPrime\
    \ = true;\n    for (let i = 2; i < length; i++) {\n        if (length % i ===\
    \ 0) {\n            isPrime = false;\n            break;\n        }\n    }\n \
    \   return isPrime ? \"YES\" : \"NO\";\n}\n\nconsole.log(intersection([1, 3],\
    \ [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    if (length === 2) {\n        return\
    \ \"YES\";\n    }\n    for (let i = 2; i < length; i++) {\n        if (length\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n\
    \  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1,\
    \ end2);\n  const length = end - start + 1;\n  if (length === 1) {\n    return\
    \ \"NO\";\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ <= 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [0, 0]));\nconsole.log(intersection([1, 3], [0, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 4]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 6])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    if (length < 0) {\n        return \"NO\";\n    }\n    if (length === 0) {\n\
    \        return \"YES\";\n    }\n    if (length === 1) {\n        return \"NO\"\
    ;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 2], [2,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 2], [3, 4]));\nconsole.log(intersection([1, 2], [2, 2]));\nconsole.log(intersection([1,\
    \ 2], [2, 3]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 4], [2, 3]));\nconsole.log(intersection([1,\
    \ 4], [2, 4]));\nconsole.log(intersection([1, 4], [3, 4]));\nconsole.log(intersection([1,\
    \ 4], [3, 5]));\nconsole.log(intersection([1, 4], [4, 5]));\nconsole.log(intersection([1,\
    \ 4], [5, 5]));\nconsole.log(intersection([1, 5], [2, 3]));\nconsole.log(intersection([1,\
    \ 5], [2, 4]));\n", "    let start = Math.max(interval1[0], interval2[0]);\n \
    \   let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [5,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 0]));\nconsole.log(intersection([1, 3], [-1, 0]));\nconsole.log(intersection([1,\
    \ 3], [-1, -1]));\nconsole.log(intersection([1, 3], [-1, -2]));\nconsole.log(intersection([1,\
    \ 3], [-2, -2]));\nconsole.log(intersection([1, 3], [-2, -1]));\nconsole.log(intersection([1,\
    \ 3], [-2, 0]));\nconsole.log(intersection([1, 3], [-2, 1]));\nconsole.log(intersection([1,\
    \ 3], [-", "    let start = Math.max(interval1[0], interval2[0]);\n    let end\
    \ = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    let length = end - start + 1;\n    if (length === 1) {\n\
    \        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n     \
    \   if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 13])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 6]));\nconsole.log(intersection([1,\
    \ 3], [3, 6]));\nconsole.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [1, 4]));\nconsole.log(intersection([1, 3], [0, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 3]));\nconsole.log(intersection([1, 3], [0, 2]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 0]));\nconsole.log(intersection([1,\
    \ 3], [-1, 0]));\nconsole.log(intersection([1, 3], [-1, -1", "    let start =\
    \ Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19])", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    if (start > end) return \"\
    NO\";\n    let length = end - start + 1;\n    if (length === 1) return \"NO\"\
    ;\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2,\
    \ 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\nconsole.log(intersection([1,\
    \ 3], [22, 23])", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n\
    \  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1,\
    \ end2);\n  const length = end - start + 1;\n  if (length === 1) {\n    return\
    \ \"NO\";\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [6, 8]));\nconsole.log(intersection([1, 3], [7, 9]));\nconsole.log(intersection([1,\
    \ 3], [8, 10]));\nconsole.log(intersection([1, 3], [9, 11]));\nconsole.log(intersection([1,\
    \ 3], [10, 12]));\nconsole.log(intersection([1, 3], [11, 13]));\nconsole.log(intersection([1,\
    \ 3], [12, 14]));\nconsole.log(intersection([1, 3], [13, 15]));\nconsole.log(intersection([1,\
    \ 3], [14, 16]));\nconsole.log(intersection([1, 3], [15, 17]));\nconsole.log(intersection([1,\
    \ 3], [16, 18]));\nconsole.log(intersection([1, 3], [17, 19]));\nconsole.log(intersection([1,\
    \ 3], [18, 20])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18])", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1,\
    \ end2);\n    if (start >= end) {\n        return \"NO\";\n    }\n    let length\
    \ = end - start;\n    if (length < 2) {\n        return \"YES\";\n    }\n    if\
    \ (length % 2 === 0) {\n        return \"NO\";\n    }\n    for (let i = 3; i <=\
    \ Math.sqrt(length); i += 2) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,",
  "    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [2,\
    \ 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    const [start1,\
    \ end1] = interval1;\n    const [start2, end2] = interval2;\n    if (start1 >\
    \ end2 || start2 > end1) {\n        return \"NO\";\n    }\n    const start = Math.max(start1,\
    \ start2);\n    const end = Math.min(end1, end2);\n    const length = end - start\
    \ + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 13]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 15]));\nconsole.log(intersection([1, 3], [16, 16]));\nconsole.log(intersection([1,\
    \ 3], [17, 17]));\nconsole.log(intersection([1, 3], [18, 18]));\nconsole.log(intersection([1,\
    \ 3], [19, 19]));\nconsole.log(intersection([1", "    const start = Math.max(interval1[0],\
    \ interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    const length = end - start\
    \ + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 0]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6])", "    let start: number = Math.max(interval1[0], interval2[0]);\n\
    \    let end: number = Math.min(interval1[1], interval2[1]);\n    if (start >\
    \ end) {\n        return \"NO\";\n    }\n    let length: number = end - start\
    \ + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i:\
    \ number = 2; i < length; i++) {\n        if (length % i === 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1",
  "    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if (length < 0) {\n     \
    \   return \"NO\";\n    }\n    if (length === 0) {\n        return \"YES\";\n\
    \    }\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\n", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [3, 6]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [11, 12])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if (length < 0) {\n     \
    \   return \"NO\";\n    }\n    if (length === 0) {\n        return \"YES\";\n\
    \    }\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [13, 13]));\nconsole.log(intersection([1,\
    \ 3], [14, 14]));\nconsole.log(intersection([1, 3], [15, 15]));\nconsole.log(intersection([1,\
    \ 3], [16, 16]));\nconsole.log(intersection([1, 3], [17, 17]));\n", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [11, 12])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) return \"NO\";\n    let length = end -\
    \ start + 1;\n    if (length < 2) return \"NO\";\n    if (length === 2) return\
    \ \"YES\";\n    for (let i = 2; i < length; i++) {\n        if (length % i ===\
    \ 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 13]));\nconsole.log(", "    const [start1, end1] = interval1;\n   \
    \ const [start2, end2] = interval2;\n    const start = Math.max(start1, start2);\n\
    \    const end = Math.min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    const length = end - start + 1;\n    if (length === 1) {\n\
    \        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n     \
    \   if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4])); // \"NO\"\n\
    console.log(intersection([1, 3], [3, 4])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [1, 3])); // \"YES\"\nconsole.log(intersection([1, 3], [1, 2])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [2, 3])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [3, 3])); // \"NO\"\nconsole.log(intersection([1, 3], [4, 4])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [5, 6])); // \"NO\"\nconsole.log(intersection([1, 3], [6, 7])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [7, 8])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [8, 9])); // \"NO\"\nconsole.log(intersection([1, 3], [9, 10])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [10, 11])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [11, 12])); // \"NO\"\nconsole.log(intersection([1, 3], [12, 13])); // \"\
    NO\"\nconsole.log(intersection", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    let length = end - start + 1;\n    if (length < 2) return \"NO\"\
    ;\n    if (length === 2) return \"YES\";\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) return \"NO\";\n    }\n    return \"YES\";\n\
    }\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ start = Math.max(start1, start2);\n    let end = Math.min(end1, end2);\n   \
    \ if (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 2]));\nconsole.log(intersection([1,\
    \ 3], [0, 3]));\nconsole.log(intersection([1, 3], [0, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 5]));\nconsole.log(intersection([1, 3], [0, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6])", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 0]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [1, 4]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length <\
    \ 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [3, 6]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11])", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  const start = Math.max(start1,\
    \ start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n\
    \  if (length <= 0) {\n    return \"NO\";\n  }\n  if (length === 1) {\n    return\
    \ \"NO\";\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 4])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [3, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [2, 5])); // \"NO\"\nconsole.log(intersection([1, 3], [2, 6])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [4, 6])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [4, 7])); // \"NO\"\nconsole.log(intersection([1, 3], [5, 7])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [5, 8])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [6, 8])); // \"NO\"\nconsole.log(intersection([1, 3], [6, 9])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [7, 9])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [7, 10])); // \"NO\"\nconsole.log(intersection([1, 3], [8, 10])); // \"\
    NO\"\nconsole.log(intersection([1, 3], [8, 11])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [9, 11])); // \"NO\"\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    if (length\
    \ === 2) {\n        return \"YES\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1, 3], [5,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if (length < 0) {\n     \
    \   return \"NO\";\n    }\n    if (length === 0) {\n        return \"YES\";\n\
    \    }\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\n", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    if (start > end) {\n    \
    \    return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start >= end) {\n        return \"NO\";\n    }\n   \
    \ let length = end - start;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 2]));\n", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    if (start > end) {\n    \
    \    return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [2, 2])", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i === 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n}\n", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  let start = Math.max(start1, start2);\n  let end = Math.min(end1,\
    \ end2);\n  if (start > end) {\n    return \"NO\";\n  }\n  return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n}\n", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let\
    \ length = end - start;\n    if (length < 0) {\n        return \"NO\";\n    }\n\
    \    if (length === 1) {\n        return \"NO\";\n    }\n    if (length === 2)\
    \ {\n        return \"YES\";\n    }\n    if (length % 2 === 0) {\n        return\
    \ \"NO\";\n    }\n    for (let i = 3; i < length; i += 2) {\n        if (length\
    \ % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [7, 9]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 9]));\nconsole.log(intersection([1, 3], [9, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 13]));\nconsole.log(intersection([1, 3], [13, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 17]));\nconsole.log(intersection([1, 3], [17, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 21]));\nconsole.log(intersection([1, 3], [21, 23]));\nconsole.log(intersection([1,\
    \ 3], [23, 25]));\nconsole.log(intersection([1, 3], [25,", "    const start =\
    \ Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    const\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ len = end - start + 1;\n    if (len === 1) {\n        return \"NO\";\n    }\n\
    \    if (len === 2) {\n        return \"YES\";\n    }\n    for (let i = 2; i <\
    \ len; i++) {\n        if (len % i === 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2,\
    \ 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 13]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 15]));\nconsole.log(intersection([1, 3], [16, 16]));\nconsole.log(intersection([1,\
    \ 3], [17, 17]));\nconsole.log(intersection([1, 3], [18, 18]));\nconsole.log(intersection([1,\
    \ 3], [19, 19]));\nconsole.log(intersection([1, 3], [20, 20]));\nconsole.log(intersection([1,\
    \ 3], [21, 21])", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n\
    \  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1,\
    \ end2);\n  const length = end - start + 1;\n  if (length === 1) {\n    return\
    \ \"NO\";\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 4])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [1, 3])); // \"YES\"\nconsole.log(intersection([1, 3], [2, 2])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [1, 1])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [2, 3])); // \"YES\"\nconsole.log(intersection([1, 3], [3, 3])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [1, 2])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 5])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [0, 2])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [0, 1])); // \"NO\"\nconsole.log(intersection([1, 3], [0, 0])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [0, 4])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [0, 5])); // \"NO", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1, 3], [5,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12])", "    const start = Math.max(interval1[0], interval2[0]);\n \
    \   const end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    const length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\nconsole.log(intersection([1,\
    \ 3], [22, 23])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    let length = end - start + 1;\n    if (length < 2) return \"NO\"\
    ;\n    if (length === 2) return \"YES\";\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) return \"NO\";\n    }\n    return \"YES\";\n\
    }\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(",
  "    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    if (length < 0) {\n        return \"NO\";\n    }\n    if (length === 1) {\n\
    \        return \"YES\";\n    }\n    if (length === 2) {\n        return \"NO\"\
    ;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\n", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    return isPrime(end - start + 1) ? \"YES\"\
    \ : \"NO\";\n}\n", "    let start = Math.max(interval1[0], interval2[0]);\n  \
    \  let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n \
    \       return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\nconsole.log(intersection([1,\
    \ 3], [22, 23])", "    const start = Math.max(interval1[0], interval2[0]);\n \
    \   const end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    const length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1, 3], [2,\
    \ 2]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19])", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1,\
    \ end2);\n    if (start > end) {\n        return \"NO\";\n    }\n    let length\
    \ = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n\
    \    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if (length < 0) {\n     \
    \   return \"NO\";\n    }\n    if (length === 0) {\n        return \"YES\";\n\
    \    }\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\n", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    const start\
    \ = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    const\
    \ length = end - start + 1;\n    if (length <= 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 7]));\nconsole.log(intersection([1, 3], [7, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 11]));\nconsole.log(intersection([1, 3], [11, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 15]));\nconsole.log(intersection([1, 3], [15, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 19]));\nconsole.log(intersection([1, 3], [19, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 23]));\nconsole.log(intersection([1, 3], [23, 25]));\nconsole.log(intersection([1,\
    \ 3], [25, 27]));\nconsole.log(intersection([1, 3], [27, 29]));\nconsole.log(intersection([1,\
    \ 3], [29, 31]));\nconsole.log(intersection([1, 3], [31, 33]));\nconsole.log(intersection([1,\
    \ 3], [33, 35]));\nconsole.log(intersection([1, 3], [35, 37])", "    const start\
    \ = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    const\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [3,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 13])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ len = end - start + 1;\n    if (len < 2) {\n        return \"NO\";\n    }\n\
    \    for (let i = 2; i < len; i++) {\n        if (len % i === 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 13])", "    const [start1, end1] = interval1;\n    const [start2, end2]\
    \ = interval2;\n    const start = Math.max(start1, start2);\n    const end = Math.min(end1,\
    \ end2);\n    const length = end - start;\n    if (length < 1) {\n        return\
    \ \"NO\";\n    }\n    if (length === 1) {\n        return \"YES\";\n    }\n  \
    \  if (length === 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i <\
    \ length; i++) {\n        if (length % i === 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3],\
    \ [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\n", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i <= Math.sqrt(length);\
    \ i++) {\n        if (length % i === 0) {\n            return \"NO\";\n      \
    \  }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1, 3], [3,\
    \ 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3],", "    let start = Math.max(interval1[0], interval2[0]);\n    let end =\
    \ Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    let length = end - start + 1;\n    if (length < 2) {\n \
    \       return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n      \
    \  if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n   \
    \ return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [13, 13]));\nconsole.log(intersection([1,\
    \ 3], [14, 14]));\nconsole.log(intersection([1, 3], [15, 15]));\nconsole.log(intersection([1,\
    \ 3], [16, 16]));\nconsole.log(intersection([1, 3], [17, 17]));\nconsole.log(intersection([1,\
    \ 3], [18, 18]));\nconsole.log(intersection([1, 3], [19, 19])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 2], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21])", "    const [start1, end1] = interval1;\n    const [start2, end2]\
    \ = interval2;\n    const start = Math.max(start1, start2);\n    const end = Math.min(end1,\
    \ end2);\n    if (start > end) {\n        return \"NO\";\n    }\n    const length\
    \ = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n\
    \    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [12, 13])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [2,\
    \ 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start\
    \ = interval1[0] > interval2[0] ? interval1[0] : interval2[0];\n    let end =\
    \ interval1[1] < interval2[1] ? interval1[1] : interval2[1];\n    if (start >\
    \ end) return \"NO\";\n    let length = end - start + 1;\n    if (length === 1)\
    \ return \"NO\";\n    if (length === 2) return \"YES\";\n    for (let i = 2; i\
    \ < length; i++) {\n        if (length % i === 0) return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 4]));\nconsole.log(intersection([1, 3], [0, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [0, 5]));\nconsole.log(intersection([1,\
    \ 3], [0, 6]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [2, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 0]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 4]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) return \"NO\";\n    let length = end -\
    \ start + 1;\n    if (length < 2) return \"NO\";\n    if (length === 2) return\
    \ \"YES\";\n    for (let i = 2; i < length; i++) {\n        if (length % i ===\
    \ 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23]));\nconsole.log(intersection([1,\
    \ 3], [23, 24]));\nconsole.log(", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    let length = end - start + 1;\n    if (length < 2) return \"NO\"\
    ;\n    if (length === 2) return \"YES\";\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) return \"NO\";\n    }\n    return \"YES\";\n\
    }\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 5]));\nconsole.log(intersection([1, 3], [2, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 6]));\nconsole.log(intersection([1, 3], [0, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [0, 5]));\nconsole.log(intersection([1,\
    \ 3], [0, 6]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(", " \
    \   let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 12])", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n\
    \  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1,\
    \ end2);\n  const length = end - start + 1;\n  if (length === 1) {\n    return\
    \ \"NO\";\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 4])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [2, 2])); // \"NO\"\nconsole.log(intersection([1, 3], [1, 1])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [1, 2])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [2, 3])); // \"YES\"\nconsole.log(intersection([1, 3], [3, 3])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [3, 4])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [4, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [5, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [5, 6])); // \"NO\"\nconsole.log(intersection([1, 3], [6, 6])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [6, 7])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [7, 7])); // \"NO", "    let start = Math.max(interval1[0], interval2[0]);\n\
    \    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n\
    \        return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1, 3], [3,\
    \ 5]));\nconsole.log(intersection([1, 3], [1, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 5]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [1, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) return \"\
    NO\";\n    let length = end - start + 1;\n    if (length < 2) return \"NO\";\n\
    \    for (let i = 2; i < length; i++) {\n        if (length % i === 0) return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2,\
    \ 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\nconsole.log(intersection([1,\
    \ 3], [22, 23]));\nconsole.log(intersection([1, 3], [23, 24])", "    let start:\
    \ number = Math.max(interval1[0], interval2[0]);\n    let end: number = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length: number = end - start + 1;\n    for (let i: number = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    if (length\
    \ === 2) {\n        return \"YES\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10])", "    let start =\
    \ Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [5, 7]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 0]));\nconsole.log(intersection([1, 3], [0, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 4]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4])", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length\
    \ === 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++)\
    \ {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\n\
    console.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 13])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let length = end - start + 1;\n    let isPrime\
    \ = true;\n    for (let i = 2; i < length; i++) {\n        if (length % i ===\
    \ 0) {\n            isPrime = false;\n            break;\n        }\n    }\n \
    \   return isPrime ? \"YES\" : \"NO\";\n}\n\nconsole.log(intersection([1, 3],\
    \ [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\nconsole.log(intersection([1,\
    \ 3], [22,", "    let start = Math.max(interval1[0], interval2[0]);\n    let end\
    \ = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    let length = end - start + 1;\n    if (length === 1) {\n\
    \        return \"NO\";\n    }\n    if (length === 2) {\n        return \"YES\"\
    ;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11])", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1,\
    \ end2);\n    if (start > end) {\n        return \"NO\";\n    }\n    let length\
    \ = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n    }\n \
    \   for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22])", "    let start:\
    \ number = Math.max(interval1[0], interval2[0]);\n    let end: number = Math.min(interval1[1],\
    \ interval2[1]);\n    let length: number = end - start;\n    if (length < 0) {\n\
    \        return \"NO\";\n    }\n    if (length === 0) {\n        return \"YES\"\
    ;\n    }\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let\
    \ i: number = 2; i < length; i++) {\n        if (length % i === 0) {\n       \
    \     return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 16]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 18]));\nconsole.log(intersection([1,\
    \ 3], [19, 20])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    let len = end - start + 1;\n    if (len ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < len; i++) {\n \
    \       if (len % i === 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22]));\nconsole.log(intersection([1, 3], [22, 23])", "  let [start1,\
    \ end1] = interval1;\n  let [start2, end2] = interval2;\n  let start = Math.max(start1,\
    \ start2);\n  let end = Math.min(end1, end2);\n  if (start > end) return \"NO\"\
    ;\n  let length = end - start + 1;\n  return isPrime(length) ? \"YES\" : \"NO\"\
    ;\n}\n", "    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n\
    \    let start = Math.max(start1, start2);\n    let end = Math.min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    let length = end -\
    \ start + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for\
    \ (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [0, 1]));\nconsole.log(intersection([1, 3], [0, 2]));\nconsole.log(intersection([1,\
    \ 3], [0, 3]));\nconsole.log(intersection([1, 3], [0, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 5]));\nconsole.log(intersection([1, 3], [0, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6])", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    let length = end - start\
    \ + 1;\n    if (length === 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let result: string = \"NO\";\n    let start: number = Math.max(interval1[0],\
    \ interval2[0]);\n    let end: number = Math.min(interval1[1], interval2[1]);\n\
    \    if (start < end) {\n        result = isPrime(end - start) ? \"YES\" : \"\
    NO\";\n    }\n    return result;\n}\n", "    let start = Math.max(interval1[0],\
    \ interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if\
    \ (start > end) return \"NO\";\n    let length = end - start + 1;\n    if (length\
    \ < 2) return \"NO\";\n    if (length == 2) return \"YES\";\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i == 0) return \"NO\";\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 11]));\nconsole.log(",
  "    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) return \"NO\";\n    let len = end - start\
    \ + 1;\n    if (len < 2) return \"NO\";\n    for (let i = 2; i < len; i++) {\n\
    \        if (len % i === 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [1, 3]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [0, 0]));\nconsole.log(intersection([1, 3], [0, 1]));\nconsole.log(intersection([1,\
    \ 3], [0, 2]));\nconsole.log(intersection([1, 3], [0, 3]));\nconsole.log(intersection([1,\
    \ 3], [0, 4]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [1, 2]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 4]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 4])", "    let start = Math.max(interval1[0], interval2[0]);\n    let\
    \ end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n      \
    \  return \"NO\";\n    }\n    let length = end - start + 1;\n    if (length ===\
    \ 1) {\n        return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n\
    \        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [4, 4]));\nconsole.log(intersection([1,\
    \ 3], [5, 5]));\nconsole.log(intersection([1, 3], [6, 6]));\nconsole.log(intersection([1,\
    \ 3], [7, 7]));\nconsole.log(intersection([1, 3], [8, 8]));\nconsole.log(intersection([1,\
    \ 3], [9, 9]));\nconsole.log(intersection([1, 3], [10, 10]));\nconsole.log(intersection([1,\
    \ 3], [11, 11]));\nconsole.log(intersection([1, 3], [12, 12]));\nconsole.log(intersection([1,\
    \ 3], [13, 13]));\nconsole.log(intersection([1, 3], [14, 14]));\nconsole.log(intersection([1,\
    \ 3], [15, 15]));\nconsole.log(intersection([1, 3], [16, 16]));\nconsole.log(intersection([1,\
    \ 3], [17, 17]));\nconsole.log(intersection([1, 3], [18, 18])", "    const start\
    \ = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    const\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [3, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 5]));\nconsole.log(intersection([1, 3], [5, 6]));\nconsole.log(intersection([1,\
    \ 3], [6, 7]));\nconsole.log(intersection([1, 3], [7, 8]));\nconsole.log(intersection([1,\
    \ 3], [8, 9]));\nconsole.log(intersection([1, 3], [9, 10]));\nconsole.log(intersection([1,\
    \ 3], [10, 11]));\nconsole.log(intersection([1, 3], [11, 12]));\nconsole.log(intersection([1,\
    \ 3], [12, 13]));\nconsole.log(intersection([1, 3], [13, 14]));\nconsole.log(intersection([1,\
    \ 3], [14, 15]));\nconsole.log(intersection([1, 3], [15, 16]));\nconsole.log(intersection([1,\
    \ 3], [16, 17]));\nconsole.log(intersection([1, 3], [17, 18]));\nconsole.log(intersection([1,\
    \ 3], [18, 19]));\nconsole.log(intersection([1, 3], [19, 20]));\nconsole.log(intersection([1,\
    \ 3], [20, 21]));\nconsole.log(intersection([1, 3], [21, 22]));\nconsole.log(intersection([1,\
    \ 3], [22, 23])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    let length = end - start + 1;\n    if (length === 1) return \"\
    NO\";\n    if (length === 2) return \"YES\";\n    for (let i = 2; i < length;\
    \ i++) {\n        if (length % i === 0) return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [4, 6]));\nconsole.log(intersection([1, 3], [1, 3]));\nconsole.log(intersection([1,\
    \ 3], [2, 2]));\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [2, 5]));\nconsole.log(intersection([1, 3], [2, 6]));\nconsole.log(intersection([1,\
    \ 3], [2, 7]));\nconsole.log(intersection([1, 3], [2, 8]));\nconsole.log(intersection([1,\
    \ 3], [2, 9]));\nconsole.log(intersection([1, 3], [2, 10]));\nconsole.log(intersection([1,\
    \ 3], [2, 11]));\nconsole.log(intersection([1, 3], [2, 12]));\nconsole.log(intersection([1,\
    \ 3], [2, 13]));\nconsole.log(intersection([1, 3], [2, 14]));\nconsole.log(intersection([1,\
    \ 3], [2, 15]));\nconsole.log(intersection([1, 3], [2, 16]));\nconsole.log(intersection([1,\
    \ 3], [2, 17]));\nconsole.log(intersection([1, 3], [2, 18]));\nconsole.log(intersection([1,\
    \ 3], [2, 19]));\nconsole.log(intersection([1, 3], [2, 20]));\nconsole.log(",
  "    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length === 1) {\n        return \"NO\";\n\
    \    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    console.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1, 3], [4,\
    \ 5]));\nconsole.log(intersection([1, 3], [3, 5]));\nconsole.log(intersection([1,\
    \ 3], [1, 5]));\nconsole.log(intersection([1, 3], [2, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [1, 1]));\nconsole.log(intersection([1,\
    \ 3], [3, 3]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [1, 2]));\nconsole.log(intersection([1,\
    \ 3], [2, 3]));\nconsole.log(intersection([1, 3], [3, 3]));\nconsole.log(intersection([1,\
    \ 3], [1, 1]));\nconsole.log(intersection([1, 3], [1, 2])", "    const [start1,\
    \ end1] = interval1;\n    const [start2, end2] = interval2;\n    if (start1 >\
    \ end2 || start2 > end1) {\n        return \"NO\";\n    }\n    const start = Math.max(start1,\
    \ start2);\n    const end = Math.min(end1, end2);\n    const length = end - start\
    \ + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    for (let i\
    \ = 2; i < length; i++) {\n        if (length % i === 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4])); // \"NO\"\nconsole.log(intersection([1, 3], [3, 4])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [4, 5])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [3, 3])); // \"NO\"\nconsole.log(intersection([1, 3], [2, 2])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [1, 2])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [1, 1])); // \"NO\"\nconsole.log(intersection([1, 3], [2, 3])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [3, 3])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [1, 3])); // \"YES\"\nconsole.log(intersection([1, 3], [0, 0])); // \"NO\"\
    \nconsole.log(intersection([1, 3], [0, 1])); // \"YES\"\nconsole.log(intersection([1,\
    \ 3], [0, 2])); // \"YES\"\nconsole.log(intersection([1, 3], [0, 3])); // \"YES\"\
    \nconsole.log(intersection([1, 3], [0, 4])); // \"NO\"\nconsole.log(intersection([1,\
    \ 3], [4, 4])); // \"NO", "    const [start1, end1] = interval1;\n    const [start2,\
    \ end2] = interval2;\n    const intersectionStart = Math.max(start1, start2);\n\
    \    const intersectionEnd = Math.min(end1, end2);\n    if (intersectionStart\
    \ > intersectionEnd) {\n        return \"NO\";\n    }\n    const intersectionLength\
    \ = intersectionEnd - intersectionStart + 1;\n    if (isPrime(intersectionLength))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let start\
    \ = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1],\
    \ interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let\
    \ length = end - start + 1;\n    if (length < 2) {\n        return \"NO\";\n \
    \   }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nconsole.log(intersection([1,\
    \ 3], [2, 4]));\nconsole.log(intersection([1, 3], [2, 3]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], [21, 22])", "    let start = Math.max(interval1[0], interval2[0]);\n   \
    \ let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n  \
    \      return \"NO\";\n    }\n    if (isPrime(end - start + 1)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let start = Math.max(start1, start2);\n\
    \    let end = Math.min(end1, end2);\n    if (start > end) return \"NO\";\n  \
    \  if (start == end) return \"YES\";\n    let length = end - start;\n    if (length\
    \ == 1) return \"NO\";\n    if (length == 2) return \"YES\";\n    for (let i =\
    \ 2; i < length; i++) {\n        if (length % i == 0) return \"NO\";\n    }\n\
    \    return \"YES\";\n}\n\nconsole.log(intersection([1, 3], [2, 4]));\nconsole.log(intersection([1,\
    \ 3], [3, 4]));\nconsole.log(intersection([1, 3], [4, 5]));\nconsole.log(intersection([1,\
    \ 3], [5, 6]));\nconsole.log(intersection([1, 3], [6, 7]));\nconsole.log(intersection([1,\
    \ 3], [7, 8]));\nconsole.log(intersection([1, 3], [8, 9]));\nconsole.log(intersection([1,\
    \ 3], [9, 10]));\nconsole.log(intersection([1, 3], [10, 11]));\nconsole.log(intersection([1,\
    \ 3], [11, 12]));\nconsole.log(intersection([1, 3], [12, 13]));\nconsole.log(intersection([1,\
    \ 3], [13, 14]));\nconsole.log(intersection([1, 3], [14, 15]));\nconsole.log(intersection([1,\
    \ 3], [15, 16]));\nconsole.log(intersection([1, 3], [16, 17]));\nconsole.log(intersection([1,\
    \ 3], [17, 18]));\nconsole.log(intersection([1, 3], [18, 19]));\nconsole.log(intersection([1,\
    \ 3], [19, 20]));\nconsole.log(intersection([1, 3], [20, 21]));\nconsole.log(intersection([1,\
    \ 3], ["]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
